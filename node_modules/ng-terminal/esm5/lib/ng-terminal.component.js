/**
 * @fileoverview added by tsickle
 * Generated from: lib/ng-terminal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import { Terminal } from 'xterm';
import { FitAddon } from 'xterm-addon-fit';
import { Subject, combineLatest } from 'rxjs';
var NgTerminalComponent = /** @class */ (function () {
    function NgTerminalComponent() {
        this.keyInputSubject = new Subject();
        this.keyEventSubject = new Subject();
        this.termSnippetSubject = new Subject();
        this.afterViewInitSubject = new Subject();
        this.h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
        this.displayOption = {};
        this.terminalStyle = {};
        this.keyInputEmitter = new EventEmitter();
        this.keyEventEmitter = new EventEmitter();
        this.termSnippetSubscription = combineLatest(this.termSnippetSubject, this.afterViewInitSubject).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 1), snippet = _b[0];
            snippet();
        }));
    }
    Object.defineProperty(NgTerminalComponent.prototype, "_dataSource", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dataSource;
        },
        set: /**
         * @param {?} ds
         * @return {?}
         */
        function (ds) {
            var _this = this;
            if (this.dataSourceSubscription != null) {
                this.dataSourceSubscription.unsubscribe();
            }
            this.dataSource = ds;
            this.dataSourceSubscription = this.dataSource.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.write(data);
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgTerminalComponent.prototype, "_displayOption", {
        set: /**
         * @param {?} opt
         * @return {?}
         */
        function (opt) {
            this.setDisplayOption(opt);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgTerminalComponent.prototype, "_style", {
        set: /**
         * @param {?} opt
         * @return {?}
         */
        function (opt) {
            this.setStyle(opt);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    NgTerminalComponent.prototype.observableSetup = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.term.onData((/**
         * @param {?} input
         * @return {?}
         */
        function (input) {
            _this.keyInputSubject.next(input);
        }));
        this.term.onKey((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.keyEventSubject.next(e);
        }));
        this.keyInputSubjectSubscription = this.keyInputSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.keyInputEmitter.emit(data);
        }));
        this.keyEventSubjectSubscription = this.keyEventSubject.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.keyEventEmitter.emit(e);
        }));
        this.afterViewInitSubject.next();
    };
    /**
     * set block or inline-block to #terminal for fitting client or outer element
     */
    /**
     * set block or inline-block to #terminal for fitting client or outer element
     * @private
     * @param {?} isBlock
     * @return {?}
     */
    NgTerminalComponent.prototype.setTerminalBlock = /**
     * set block or inline-block to #terminal for fitting client or outer element
     * @private
     * @param {?} isBlock
     * @return {?}
     */
    function (isBlock) {
        if (isBlock)
            this.terminalStyle['display'] = 'block';
        else
            this.terminalStyle['display'] = 'inline-block';
    };
    /**
     * set dimensions
     */
    /**
     * set dimensions
     * @private
     * @param {?} left
     * @param {?} top
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    NgTerminalComponent.prototype.setTerminalDimensions = /**
     * set dimensions
     * @private
     * @param {?} left
     * @param {?} top
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (left, top, width, height) {
        this.terminalStyle['left'] = left ? left + "px" : undefined;
        this.terminalStyle['top'] = top ? top + "px" : undefined;
        this.terminalStyle['width'] = width ? width + "px" : undefined;
        this.terminalStyle['height'] = height ? height + "px" : undefined;
    };
    /**
     * remove dimensions
     */
    /**
     * remove dimensions
     * @private
     * @return {?}
     */
    NgTerminalComponent.prototype.removeTerminalDimensions = /**
     * remove dimensions
     * @private
     * @return {?}
     */
    function () {
        this.terminalStyle['left'] = undefined;
        this.terminalStyle['top'] = undefined;
        this.terminalStyle['width'] = undefined;
        this.terminalStyle['height'] = undefined;
    };
    /**
     * @param {?} styleObject
     * @return {?}
     */
    NgTerminalComponent.prototype.setStyle = /**
     * @param {?} styleObject
     * @return {?}
     */
    function (styleObject) {
        Object.assign(this.terminalStyle, styleObject);
    };
    /**
     * @return {?}
     */
    NgTerminalComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * When a dimension of div changes, fit a terminal in div.
     */
    /**
     * When a dimension of div changes, fit a terminal in div.
     * @return {?}
     */
    NgTerminalComponent.prototype.ngAfterViewChecked = /**
     * When a dimension of div changes, fit a terminal in div.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dims = this.fitAddon.proposeDimensions();
        if (dims === undefined || isNaN(dims.rows) || dims.rows == Infinity || isNaN(dims.cols) || dims.cols == Infinity) {
            this.term.resize(10, 10);
        }
        else if (!this.displayOption.fixedGrid) {
            this.fitAddon.fit();
        }
        else {
            this.term.resize(this.displayOption.fixedGrid.cols, this.displayOption.fixedGrid.rows);
            /** @type {?} */
            var xtermScreen = this.term.element.getElementsByClassName('xterm-screen')[0];
            /** @type {?} */
            var scrollArea = this.term.element.getElementsByClassName('xterm-scroll-area')[0];
            /** @type {?} */
            var terminal = this.term.element;
            /** @type {?} */
            var contentWidth = xtermScreen.clientWidth;
            /** @type {?} */
            var scrollWidth = terminal.clientWidth - scrollArea.clientWidth;
            this.setTerminalDimensions(undefined, undefined, contentWidth + scrollWidth, undefined);
        }
    };
    /**
     * It creates new terminal in #terminal.
     */
    /**
     * It creates new terminal in #terminal.
     * @return {?}
     */
    NgTerminalComponent.prototype.ngAfterViewInit = /**
     * It creates new terminal in #terminal.
     * @return {?}
     */
    function () {
        this.fitAddon = new FitAddon();
        this.term = new Terminal();
        this.term.open(this.terminalDiv.nativeElement);
        this.term.loadAddon(this.fitAddon);
        this.observableSetup();
    };
    /**
     * clean all resources
     */
    /**
     * clean all resources
     * @return {?}
     */
    NgTerminalComponent.prototype.ngOnDestroy = /**
     * clean all resources
     * @return {?}
     */
    function () {
        if (this.keyInputSubjectSubscription)
            this.keyInputSubjectSubscription.unsubscribe();
        if (this.dataSourceSubscription)
            this.dataSourceSubscription.unsubscribe();
        if (this.keyEventSubjectSubscription)
            this.keyEventSubjectSubscription.unsubscribe();
        if (this.termSnippetSubscription)
            this.termSnippetSubscription.unsubscribe();
        if (this.term)
            this.term.dispose();
    };
    /**
     * @param {?} chars
     * @return {?}
     */
    NgTerminalComponent.prototype.write = /**
     * @param {?} chars
     * @return {?}
     */
    function (chars) {
        this.term.write(chars);
    };
    /**
     * @param {?} opt
     * @return {?}
     */
    NgTerminalComponent.prototype.setDisplayOption = /**
     * @param {?} opt
     * @return {?}
     */
    function (opt) {
        if (opt) {
            if (opt.fixedGrid != null) {
                console.debug("resizable will be ignored.");
                this.setTerminalBlock(false);
                this.removeTerminalDimensions();
            }
            else {
                this.setTerminalBlock(true);
            }
            this.displayOption = opt;
        }
        else
            console.warn("A falsy option is not allowed");
    };
    Object.defineProperty(NgTerminalComponent.prototype, "keyInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this.keyInputSubject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgTerminalComponent.prototype, "keyEventInput", {
        get: /**
         * @return {?}
         */
        function () {
            return this.keyEventSubject;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgTerminalComponent.prototype, "underlying", {
        get: /**
         * @return {?}
         */
        function () {
            return this.term;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgTerminalComponent.prototype, "isDraggableOnEdgeActivated", {
        get: /**
         * @return {?}
         */
        function () {
            return this.displayOption.activateDraggableOnEdge != undefined && this.displayOption.fixedGrid == undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * After user coordinate dimensions of terminal, it's called.
     * @param left
     * @param top
     * @param width
     * @param height
     */
    /**
     * After user coordinate dimensions of terminal, it's called.
     * @param {?} left
     * @param {?} top
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    NgTerminalComponent.prototype.onResizeEnd = /**
     * After user coordinate dimensions of terminal, it's called.
     * @param {?} left
     * @param {?} top
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (left, top, width, height) {
        this.setTerminalDimensions(left, top, width, height);
    };
    /**
     * Before onResizeEnd is called, it valiates dimensions to change.
     * @param re dimension to be submitted from resizable stuff
     */
    /**
     * Before onResizeEnd is called, it valiates dimensions to change.
     * @return {?}
     */
    NgTerminalComponent.prototype.validatorFactory = /**
     * Before onResizeEnd is called, it valiates dimensions to change.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var comp = this;
        return (/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            /** @type {?} */
            var displayOption = comp.displayOption;
            if (displayOption.activateDraggableOnEdge) {
                /** @type {?} */
                var left = re.rectangle.left;
                /** @type {?} */
                var top_1 = re.rectangle.top;
                /** @type {?} */
                var width = re.rectangle.width;
                /** @type {?} */
                var height = re.rectangle.height;
                if ((width < displayOption.activateDraggableOnEdge.minWidth) || (height < displayOption.activateDraggableOnEdge.minHeight)) {
                    return false;
                }
                else
                    return true;
            }
        });
    };
    NgTerminalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng-terminal',
                    template: "<global-style></global-style>\n\n<div #terminal class=\"terminal-outer\" mwlResizable [ngStyle]=\"terminalStyle\" [validateResize]=\"validatorFactory()\" [enableGhostResize]=\"true\" [resizeEdges]=\"isDraggableOnEdgeActivated ? {bottom: true, right: true} : {bottom: false, right: false}\"\n(resizeEnd)=\"onResizeEnd($event.rectangle.left, $event.rectangle.top, $event.rectangle.width, $event.rectangle.height)\">\n</div>",
                    styles: [".terminal-outer{box-sizing:border-box;height:100%}"]
                }] }
    ];
    /** @nocollapse */
    NgTerminalComponent.ctorParameters = function () { return []; };
    NgTerminalComponent.propDecorators = {
        _dataSource: [{ type: Input, args: ['dataSource',] }],
        _displayOption: [{ type: Input, args: ['displayOption',] }],
        _style: [{ type: Input, args: ['style',] }],
        keyInputEmitter: [{ type: Output, args: ['keyInput',] }],
        keyEventEmitter: [{ type: Output, args: ['keyEvent',] }],
        terminalDiv: [{ type: ViewChild, args: ['terminal', { static: true },] }]
    };
    return NgTerminalComponent;
}());
export { NgTerminalComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.term;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.fitAddon;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyInputSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyEventSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.termSnippetSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.afterViewInitSubject;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyInputSubjectSubscription;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.keyEventSubjectSubscription;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.termSnippetSubscription;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.h;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.displayOption;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.dataSource;
    /**
     * @type {?}
     * @private
     */
    NgTerminalComponent.prototype.dataSourceSubscription;
    /** @type {?} */
    NgTerminalComponent.prototype.terminalStyle;
    /** @type {?} */
    NgTerminalComponent.prototype.keyInputEmitter;
    /** @type {?} */
    NgTerminalComponent.prototype.keyEventEmitter;
    /** @type {?} */
    NgTerminalComponent.prototype.terminalDiv;
}
//# sourceMappingURL=data:application/json;base64,