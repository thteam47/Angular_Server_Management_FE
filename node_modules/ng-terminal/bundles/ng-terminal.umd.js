(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('xterm'), require('xterm-addon-fit'), require('rxjs'), require('angular-resizable-element'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-terminal', ['exports', '@angular/core', 'xterm', 'xterm-addon-fit', 'rxjs', 'angular-resizable-element', '@angular/common'], factory) :
    (global = global || self, factory(global['ng-terminal'] = {}, global.ng.core, global.xterm, global.xtermAddonFit, global.rxjs, global.angularResizableElement, global.ng.common));
}(this, (function (exports, core, xterm, xtermAddonFit, rxjs, angularResizableElement, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __createBinding(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }

    function __exportStar(m, exports) {
        for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ng-terminal.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgTerminalService = /** @class */ (function () {
        function NgTerminalService() {
        }
        NgTerminalService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NgTerminalService.ctorParameters = function () { return []; };
        /** @nocollapse */ NgTerminalService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function NgTerminalService_Factory() { return new NgTerminalService(); }, token: NgTerminalService, providedIn: "root" });
        return NgTerminalService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ng-terminal.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgTerminalComponent = /** @class */ (function () {
        function NgTerminalComponent() {
            this.keyInputSubject = new rxjs.Subject();
            this.keyEventSubject = new rxjs.Subject();
            this.termSnippetSubject = new rxjs.Subject();
            this.afterViewInitSubject = new rxjs.Subject();
            this.h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
            this.displayOption = {};
            this.terminalStyle = {};
            this.keyInputEmitter = new core.EventEmitter();
            this.keyEventEmitter = new core.EventEmitter();
            this.termSnippetSubscription = rxjs.combineLatest(this.termSnippetSubject, this.afterViewInitSubject).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), snippet = _b[0];
                snippet();
            }));
        }
        Object.defineProperty(NgTerminalComponent.prototype, "_dataSource", {
            get: /**
             * @return {?}
             */
            function () {
                return this.dataSource;
            },
            set: /**
             * @param {?} ds
             * @return {?}
             */
            function (ds) {
                var _this = this;
                if (this.dataSourceSubscription != null) {
                    this.dataSourceSubscription.unsubscribe();
                }
                this.dataSource = ds;
                this.dataSourceSubscription = this.dataSource.subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this.write(data);
                }));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgTerminalComponent.prototype, "_displayOption", {
            set: /**
             * @param {?} opt
             * @return {?}
             */
            function (opt) {
                this.setDisplayOption(opt);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgTerminalComponent.prototype, "_style", {
            set: /**
             * @param {?} opt
             * @return {?}
             */
            function (opt) {
                this.setStyle(opt);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @return {?}
         */
        NgTerminalComponent.prototype.observableSetup = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            this.term.onData((/**
             * @param {?} input
             * @return {?}
             */
            function (input) {
                _this.keyInputSubject.next(input);
            }));
            this.term.onKey((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.keyEventSubject.next(e);
            }));
            this.keyInputSubjectSubscription = this.keyInputSubject.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.keyInputEmitter.emit(data);
            }));
            this.keyEventSubjectSubscription = this.keyEventSubject.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.keyEventEmitter.emit(e);
            }));
            this.afterViewInitSubject.next();
        };
        /**
         * set block or inline-block to #terminal for fitting client or outer element
         */
        /**
         * set block or inline-block to #terminal for fitting client or outer element
         * @private
         * @param {?} isBlock
         * @return {?}
         */
        NgTerminalComponent.prototype.setTerminalBlock = /**
         * set block or inline-block to #terminal for fitting client or outer element
         * @private
         * @param {?} isBlock
         * @return {?}
         */
        function (isBlock) {
            if (isBlock)
                this.terminalStyle['display'] = 'block';
            else
                this.terminalStyle['display'] = 'inline-block';
        };
        /**
         * set dimensions
         */
        /**
         * set dimensions
         * @private
         * @param {?} left
         * @param {?} top
         * @param {?} width
         * @param {?} height
         * @return {?}
         */
        NgTerminalComponent.prototype.setTerminalDimensions = /**
         * set dimensions
         * @private
         * @param {?} left
         * @param {?} top
         * @param {?} width
         * @param {?} height
         * @return {?}
         */
        function (left, top, width, height) {
            this.terminalStyle['left'] = left ? left + "px" : undefined;
            this.terminalStyle['top'] = top ? top + "px" : undefined;
            this.terminalStyle['width'] = width ? width + "px" : undefined;
            this.terminalStyle['height'] = height ? height + "px" : undefined;
        };
        /**
         * remove dimensions
         */
        /**
         * remove dimensions
         * @private
         * @return {?}
         */
        NgTerminalComponent.prototype.removeTerminalDimensions = /**
         * remove dimensions
         * @private
         * @return {?}
         */
        function () {
            this.terminalStyle['left'] = undefined;
            this.terminalStyle['top'] = undefined;
            this.terminalStyle['width'] = undefined;
            this.terminalStyle['height'] = undefined;
        };
        /**
         * @param {?} styleObject
         * @return {?}
         */
        NgTerminalComponent.prototype.setStyle = /**
         * @param {?} styleObject
         * @return {?}
         */
        function (styleObject) {
            Object.assign(this.terminalStyle, styleObject);
        };
        /**
         * @return {?}
         */
        NgTerminalComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        /**
         * When a dimension of div changes, fit a terminal in div.
         */
        /**
         * When a dimension of div changes, fit a terminal in div.
         * @return {?}
         */
        NgTerminalComponent.prototype.ngAfterViewChecked = /**
         * When a dimension of div changes, fit a terminal in div.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var dims = this.fitAddon.proposeDimensions();
            if (dims === undefined || isNaN(dims.rows) || dims.rows == Infinity || isNaN(dims.cols) || dims.cols == Infinity) {
                this.term.resize(10, 10);
            }
            else if (!this.displayOption.fixedGrid) {
                this.fitAddon.fit();
            }
            else {
                this.term.resize(this.displayOption.fixedGrid.cols, this.displayOption.fixedGrid.rows);
                /** @type {?} */
                var xtermScreen = this.term.element.getElementsByClassName('xterm-screen')[0];
                /** @type {?} */
                var scrollArea = this.term.element.getElementsByClassName('xterm-scroll-area')[0];
                /** @type {?} */
                var terminal = this.term.element;
                /** @type {?} */
                var contentWidth = xtermScreen.clientWidth;
                /** @type {?} */
                var scrollWidth = terminal.clientWidth - scrollArea.clientWidth;
                this.setTerminalDimensions(undefined, undefined, contentWidth + scrollWidth, undefined);
            }
        };
        /**
         * It creates new terminal in #terminal.
         */
        /**
         * It creates new terminal in #terminal.
         * @return {?}
         */
        NgTerminalComponent.prototype.ngAfterViewInit = /**
         * It creates new terminal in #terminal.
         * @return {?}
         */
        function () {
            this.fitAddon = new xtermAddonFit.FitAddon();
            this.term = new xterm.Terminal();
            this.term.open(this.terminalDiv.nativeElement);
            this.term.loadAddon(this.fitAddon);
            this.observableSetup();
        };
        /**
         * clean all resources
         */
        /**
         * clean all resources
         * @return {?}
         */
        NgTerminalComponent.prototype.ngOnDestroy = /**
         * clean all resources
         * @return {?}
         */
        function () {
            if (this.keyInputSubjectSubscription)
                this.keyInputSubjectSubscription.unsubscribe();
            if (this.dataSourceSubscription)
                this.dataSourceSubscription.unsubscribe();
            if (this.keyEventSubjectSubscription)
                this.keyEventSubjectSubscription.unsubscribe();
            if (this.termSnippetSubscription)
                this.termSnippetSubscription.unsubscribe();
            if (this.term)
                this.term.dispose();
        };
        /**
         * @param {?} chars
         * @return {?}
         */
        NgTerminalComponent.prototype.write = /**
         * @param {?} chars
         * @return {?}
         */
        function (chars) {
            this.term.write(chars);
        };
        /**
         * @param {?} opt
         * @return {?}
         */
        NgTerminalComponent.prototype.setDisplayOption = /**
         * @param {?} opt
         * @return {?}
         */
        function (opt) {
            if (opt) {
                if (opt.fixedGrid != null) {
                    console.debug("resizable will be ignored.");
                    this.setTerminalBlock(false);
                    this.removeTerminalDimensions();
                }
                else {
                    this.setTerminalBlock(true);
                }
                this.displayOption = opt;
            }
            else
                console.warn("A falsy option is not allowed");
        };
        Object.defineProperty(NgTerminalComponent.prototype, "keyInput", {
            get: /**
             * @return {?}
             */
            function () {
                return this.keyInputSubject;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgTerminalComponent.prototype, "keyEventInput", {
            get: /**
             * @return {?}
             */
            function () {
                return this.keyEventSubject;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgTerminalComponent.prototype, "underlying", {
            get: /**
             * @return {?}
             */
            function () {
                return this.term;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgTerminalComponent.prototype, "isDraggableOnEdgeActivated", {
            get: /**
             * @return {?}
             */
            function () {
                return this.displayOption.activateDraggableOnEdge != undefined && this.displayOption.fixedGrid == undefined;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * After user coordinate dimensions of terminal, it's called.
         * @param left
         * @param top
         * @param width
         * @param height
         */
        /**
         * After user coordinate dimensions of terminal, it's called.
         * @param {?} left
         * @param {?} top
         * @param {?} width
         * @param {?} height
         * @return {?}
         */
        NgTerminalComponent.prototype.onResizeEnd = /**
         * After user coordinate dimensions of terminal, it's called.
         * @param {?} left
         * @param {?} top
         * @param {?} width
         * @param {?} height
         * @return {?}
         */
        function (left, top, width, height) {
            this.setTerminalDimensions(left, top, width, height);
        };
        /**
         * Before onResizeEnd is called, it valiates dimensions to change.
         * @param re dimension to be submitted from resizable stuff
         */
        /**
         * Before onResizeEnd is called, it valiates dimensions to change.
         * @return {?}
         */
        NgTerminalComponent.prototype.validatorFactory = /**
         * Before onResizeEnd is called, it valiates dimensions to change.
         * @return {?}
         */
        function () {
            /** @type {?} */
            var comp = this;
            return (/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                /** @type {?} */
                var displayOption = comp.displayOption;
                if (displayOption.activateDraggableOnEdge) {
                    /** @type {?} */
                    var left = re.rectangle.left;
                    /** @type {?} */
                    var top_1 = re.rectangle.top;
                    /** @type {?} */
                    var width = re.rectangle.width;
                    /** @type {?} */
                    var height = re.rectangle.height;
                    if ((width < displayOption.activateDraggableOnEdge.minWidth) || (height < displayOption.activateDraggableOnEdge.minHeight)) {
                        return false;
                    }
                    else
                        return true;
                }
            });
        };
        NgTerminalComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-terminal',
                        template: "<global-style></global-style>\n\n<div #terminal class=\"terminal-outer\" mwlResizable [ngStyle]=\"terminalStyle\" [validateResize]=\"validatorFactory()\" [enableGhostResize]=\"true\" [resizeEdges]=\"isDraggableOnEdgeActivated ? {bottom: true, right: true} : {bottom: false, right: false}\"\n(resizeEnd)=\"onResizeEnd($event.rectangle.left, $event.rectangle.top, $event.rectangle.width, $event.rectangle.height)\">\n</div>",
                        styles: [".terminal-outer{box-sizing:border-box;height:100%}"]
                    }] }
        ];
        /** @nocollapse */
        NgTerminalComponent.ctorParameters = function () { return []; };
        NgTerminalComponent.propDecorators = {
            _dataSource: [{ type: core.Input, args: ['dataSource',] }],
            _displayOption: [{ type: core.Input, args: ['displayOption',] }],
            _style: [{ type: core.Input, args: ['style',] }],
            keyInputEmitter: [{ type: core.Output, args: ['keyInput',] }],
            keyEventEmitter: [{ type: core.Output, args: ['keyEvent',] }],
            terminalDiv: [{ type: core.ViewChild, args: ['terminal', { static: true },] }]
        };
        return NgTerminalComponent;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.term;
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.fitAddon;
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.keyInputSubject;
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.keyEventSubject;
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.termSnippetSubject;
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.afterViewInitSubject;
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.keyInputSubjectSubscription;
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.keyEventSubjectSubscription;
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.termSnippetSubscription;
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.h;
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.displayOption;
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.dataSource;
        /**
         * @type {?}
         * @private
         */
        NgTerminalComponent.prototype.dataSourceSubscription;
        /** @type {?} */
        NgTerminalComponent.prototype.terminalStyle;
        /** @type {?} */
        NgTerminalComponent.prototype.keyInputEmitter;
        /** @type {?} */
        NgTerminalComponent.prototype.keyEventEmitter;
        /** @type {?} */
        NgTerminalComponent.prototype.terminalDiv;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/global-style/global-style.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GlobalStyleComponent = /** @class */ (function () {
        function GlobalStyleComponent() {
        }
        /**
         * @return {?}
         */
        GlobalStyleComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        GlobalStyleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'global-style',
                        template: "",
                        //global styles
                        encapsulation: core.ViewEncapsulation.None,
                        styles: [".xterm{position:relative;-moz-user-select:none;user-select:none;-ms-user-select:none;-webkit-user-select:none;cursor:text}.xterm.focus,.xterm:focus{outline:0}.xterm .xterm-helpers{position:absolute;top:0;z-index:5}.xterm .xterm-helper-textarea{padding:0;border:0;margin:0;position:absolute;opacity:0;left:-9999em;top:0;width:0;height:0;z-index:-5;white-space:nowrap;overflow:hidden;resize:none}.xterm .composition-view{background:#000;color:#fff;display:none;position:absolute;white-space:nowrap;z-index:1}.xterm .composition-view.active{display:block}.xterm .xterm-viewport{background-color:#000;overflow-y:scroll;cursor:default;position:absolute;right:0;left:0;top:0;bottom:0}.xterm .xterm-screen{position:relative}.xterm .xterm-screen canvas{position:absolute;left:0;top:0}.xterm .xterm-scroll-area{visibility:hidden}.xterm-char-measure-element{display:inline-block;visibility:hidden;position:absolute;top:0;left:-9999em;line-height:normal}.xterm.enable-mouse-events{cursor:default}.xterm.xterm-cursor-pointer{cursor:pointer}.xterm.column-select.focus{cursor:crosshair}.xterm .xterm-accessibility,.xterm .xterm-message{position:absolute;left:0;top:0;bottom:0;right:0;z-index:10;color:transparent}.xterm .live-region{position:absolute;left:-9999px;width:1px;height:1px;overflow:hidden}.xterm-dim{opacity:.5}.xterm-underline{text-decoration:underline}.xterm-strikethrough{text-decoration:line-through}"]
                    }] }
        ];
        /** @nocollapse */
        GlobalStyleComponent.ctorParameters = function () { return []; };
        return GlobalStyleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ng-terminal.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgTerminalModule = /** @class */ (function () {
        function NgTerminalModule() {
        }
        NgTerminalModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgTerminalComponent, GlobalStyleComponent],
                        imports: [
                            angularResizableElement.ResizableModule, common.CommonModule
                        ],
                        exports: [NgTerminalComponent]
                    },] }
        ];
        return NgTerminalModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/functions-using-csi.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *
     * It is a CSI sequences generator
     * https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Functions-using-CSI-_-ordered-by-the-final-character_s_
     * @type {?}
     */
    var CSI = '\x9b';
    var FunctionsUsingCSI = /** @class */ (function () {
        function FunctionsUsingCSI() {
        }
        /**
         *  CSI Ps @  Insert Ps (Blank) Character(s) (default = 1) (ICH).
         *
         * */
        /**
         *  CSI Ps \@  Insert Ps (Blank) Character(s) (default = 1) (ICH).
         *
         *
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.insertBlank = /**
         *  CSI Ps \@  Insert Ps (Blank) Character(s) (default = 1) (ICH).
         *
         *
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "@";
        };
        /**
         *  CSI Ps SP @ */
        /**
         *  CSI Ps A  Cursor Up Ps Times (default = 1) (CUU).
         * \x9b3A*/
        /**
             *  CSI Ps SP @ */
        /**
         *  CSI Ps A  Cursor Up Ps Times (default = 1) (CUU).
         * \x9b3A
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.cursorUp = /**
             *  CSI Ps SP @ */
        /**
         *  CSI Ps A  Cursor Up Ps Times (default = 1) (CUU).
         * \x9b3A
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "A";
        };
        /**
         *  CSI Ps SP A */
        /**
         *  CSI Ps B  Cursor Down Ps Times (default = 1) (CUD).
         * \x9b3B */
        /**
             *  CSI Ps SP A */
        /**
         *  CSI Ps B  Cursor Down Ps Times (default = 1) (CUD).
         * \x9b3B
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.cursorDown = /**
             *  CSI Ps SP A */
        /**
         *  CSI Ps B  Cursor Down Ps Times (default = 1) (CUD).
         * \x9b3B
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "B";
        };
        /**
         *  CSI Ps C  Cursor Forward Ps Times (default = 1) (CUF).
         * \x9b3C */
        /**
         *  CSI Ps C  Cursor Forward Ps Times (default = 1) (CUF).
         * \x9b3C
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.cursorForward = /**
         *  CSI Ps C  Cursor Forward Ps Times (default = 1) (CUF).
         * \x9b3C
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "C";
        };
        /**
         *  CSI Ps D  Cursor Backward Ps Times (default = 1) (CUB).
         * \x9b3D */
        /**
         *  CSI Ps D  Cursor Backward Ps Times (default = 1) (CUB).
         * \x9b3D
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.cursorBackward = /**
         *  CSI Ps D  Cursor Backward Ps Times (default = 1) (CUB).
         * \x9b3D
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "D";
        };
        /**
         *  CSI Ps E  Cursor Next Line Ps Times (default = 1) (CNL).
         * \x9b3E
         * */
        /**
         *  CSI Ps E  Cursor Next Line Ps Times (default = 1) (CNL).
         * \x9b3E
         *
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.cursorNextLine = /**
         *  CSI Ps E  Cursor Next Line Ps Times (default = 1) (CNL).
         * \x9b3E
         *
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "E";
        };
        /**
         *  CSI Ps F  Cursor Preceding Line Ps Times (default = 1) (CPL).
         * \x9b3F
         *  */
        /**
         *  CSI Ps F  Cursor Preceding Line Ps Times (default = 1) (CPL).
         * \x9b3F
         *
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.cursorPrecedingLine = /**
         *  CSI Ps F  Cursor Preceding Line Ps Times (default = 1) (CPL).
         * \x9b3F
         *
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "F";
        };
        /**
         *  CSI Ps G  Cursor Character Absolute  [column] (default = [row,1]) (CHA).
         *  \x9b9G
         *  */
        /**
         *  CSI Ps G  Cursor Character Absolute  [column] (default = [row,1]) (CHA).
         *  \x9b9G
         *
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.cursorColumn = /**
         *  CSI Ps G  Cursor Character Absolute  [column] (default = [row,1]) (CHA).
         *  \x9b9G
         *
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "G";
        };
        /**
         *  CSI Ps ; Ps H  Cursor Position [row;column] (default = [1,1]) (CUP).
         * \x9b2;2H
         * */
        /**
         *  CSI Ps ; Ps H  Cursor Position [row;column] (default = [1,1]) (CUP).
         * \x9b2;2H
         *
         * @param {?} row
         * @param {?} col
         * @return {?}
         */
        FunctionsUsingCSI.cursorPosition = /**
         *  CSI Ps ; Ps H  Cursor Position [row;column] (default = [1,1]) (CUP).
         * \x9b2;2H
         *
         * @param {?} row
         * @param {?} col
         * @return {?}
         */
        function (row, col) {
            return "" + CSI + row + ";" + col + "H";
        };
        /**
         *  CSI Ps I  Cursor Forward Tabulation Ps tab stops (default = 1) (CHT). */
        /**
         *  CSI Ps J  Erase in Display (ED), VT100.
         *      Ps = 0  -> Erase Below (default).
         *      Ps = 1  -> Erase Above.
         *      Ps = 2  -> Erase All.
         *      Ps = 3  -> Erase Saved Lines (xterm).
         * \x9b2J
         *  */
        /**
             *  CSI Ps I  Cursor Forward Tabulation Ps tab stops (default = 1) (CHT). */
        /**
         *  CSI Ps J  Erase in Display (ED), VT100.
         *      Ps = 0  -> Erase Below (default).
         *      Ps = 1  -> Erase Above.
         *      Ps = 2  -> Erase All.
         *      Ps = 3  -> Erase Saved Lines (xterm).
         * \x9b2J
         *
         * @param {?} category
         * @return {?}
         */
        FunctionsUsingCSI.eraseInDisplay = /**
             *  CSI Ps I  Cursor Forward Tabulation Ps tab stops (default = 1) (CHT). */
        /**
         *  CSI Ps J  Erase in Display (ED), VT100.
         *      Ps = 0  -> Erase Below (default).
         *      Ps = 1  -> Erase Above.
         *      Ps = 2  -> Erase All.
         *      Ps = 3  -> Erase Saved Lines (xterm).
         * \x9b2J
         *
         * @param {?} category
         * @return {?}
         */
        function (category) {
            return "" + CSI + category + "J";
        };
        /**
         *  CSI ? Ps J
         *  Erase in Display (DECSED), VT220.
         *    Ps = 0  -> Selective Erase Below (default).
         *    Ps = 1  -> Selective Erase Above.
         *    Ps = 2  -> Selective Erase All.
         *    Ps = 3  -> Selective Erase Saved Lines (xterm).
         * \x9b?2J
         * */
        /**
         *  CSI ? Ps J
         *  Erase in Display (DECSED), VT220.
         *    Ps = 0  -> Selective Erase Below (default).
         *    Ps = 1  -> Selective Erase Above.
         *    Ps = 2  -> Selective Erase All.
         *    Ps = 3  -> Selective Erase Saved Lines (xterm).
         * \x9b?2J
         *
         * @param {?} category
         * @return {?}
         */
        FunctionsUsingCSI.eraseSelectiveThingsInDisplay = /**
         *  CSI ? Ps J
         *  Erase in Display (DECSED), VT220.
         *    Ps = 0  -> Selective Erase Below (default).
         *    Ps = 1  -> Selective Erase Above.
         *    Ps = 2  -> Selective Erase All.
         *    Ps = 3  -> Selective Erase Saved Lines (xterm).
         * \x9b?2J
         *
         * @param {?} category
         * @return {?}
         */
        function (category) {
            return CSI + "?" + category + "J";
        };
        /**
         *  CSI Ps K
         *   Erase in Line (EL), VT100.
         *     Ps = 0  -> Erase to Right (default).
         *     Ps = 1  -> Erase to Left.
         *     Ps = 2  -> Erase All.
         * \x9b?1K
         * */
        /**
         *  CSI Ps K
         *   Erase in Line (EL), VT100.
         *     Ps = 0  -> Erase to Right (default).
         *     Ps = 1  -> Erase to Left.
         *     Ps = 2  -> Erase All.
         * \x9b?1K
         *
         * @param {?} category
         * @return {?}
         */
        FunctionsUsingCSI.eraseInLine = /**
         *  CSI Ps K
         *   Erase in Line (EL), VT100.
         *     Ps = 0  -> Erase to Right (default).
         *     Ps = 1  -> Erase to Left.
         *     Ps = 2  -> Erase All.
         * \x9b?1K
         *
         * @param {?} category
         * @return {?}
         */
        function (category) {
            return "" + CSI + category + "K";
        };
        /**
         *  CSI ? Ps K
         *    Erase in Line (DECSEL), VT220.
         *      Ps = 0  -> Selective Erase to Right (default).
         *      Ps = 1  -> Selective Erase to Left.
         *      Ps = 2  -> Selective Erase All.
         * \x9b?1K
         * */
        /**
         *  CSI ? Ps K
         *    Erase in Line (DECSEL), VT220.
         *      Ps = 0  -> Selective Erase to Right (default).
         *      Ps = 1  -> Selective Erase to Left.
         *      Ps = 2  -> Selective Erase All.
         * \x9b?1K
         *
         * @param {?} category
         * @return {?}
         */
        FunctionsUsingCSI.eraseSelectiveThingsInLine = /**
         *  CSI ? Ps K
         *    Erase in Line (DECSEL), VT220.
         *      Ps = 0  -> Selective Erase to Right (default).
         *      Ps = 1  -> Selective Erase to Left.
         *      Ps = 2  -> Selective Erase All.
         * \x9b?1K
         *
         * @param {?} category
         * @return {?}
         */
        function (category) {
            return CSI + "?" + category + "K";
        };
        /**
         *  CSI Ps L  Insert Ps Line(s) (default = 1) (IL).
         * \x9b2L
         *  */
        /**
         *  CSI Ps L  Insert Ps Line(s) (default = 1) (IL).
         * \x9b2L
         *
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.insertLines = /**
         *  CSI Ps L  Insert Ps Line(s) (default = 1) (IL).
         * \x9b2L
         *
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "L";
        };
        /**
         *  CSI Ps M  Delete Ps Line(s) (default = 1) (DL).
         * \x9b2M
         *  */
        /**
         *  CSI Ps M  Delete Ps Line(s) (default = 1) (DL).
         * \x9b2M
         *
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.deleteLines = /**
         *  CSI Ps M  Delete Ps Line(s) (default = 1) (DL).
         * \x9b2M
         *
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "M";
        };
        /**
         *  CSI Ps P  Delete Ps Character(s) (default = 1) (DCH).
         * \x9b2P
         *  */
        /**
         *  CSI Ps P  Delete Ps Character(s) (default = 1) (DCH).
         * \x9b2P
         *
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.deleteCharacter = /**
         *  CSI Ps P  Delete Ps Character(s) (default = 1) (DCH).
         * \x9b2P
         *
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "P";
        };
        /**
         *  CSI Ps S  Scroll up Ps lines (default = 1) (SU), VT420, ECMA-48.
         * \x9b2S
         *  */
        /**
         *  CSI Ps S  Scroll up Ps lines (default = 1) (SU), VT420, ECMA-48.
         * \x9b2S
         *
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.scrollUpLines = /**
         *  CSI Ps S  Scroll up Ps lines (default = 1) (SU), VT420, ECMA-48.
         * \x9b2S
         *
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "S";
        };
        /**
         *  CSI ? Pi ; Pa ; Pv S */
        /**
         *  CSI Ps T  Scroll down Ps lines (default = 1) (SD), VT420.
         * \x9b2T
         * */
        /**
             *  CSI ? Pi ; Pa ; Pv S */
        /**
         *  CSI Ps T  Scroll down Ps lines (default = 1) (SD), VT420.
         * \x9b2T
         *
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.scrollDownLines = /**
             *  CSI ? Pi ; Pa ; Pv S */
        /**
         *  CSI Ps T  Scroll down Ps lines (default = 1) (SD), VT420.
         * \x9b2T
         *
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "T";
        };
        /**
         *  CSI Ps ; Ps ; Ps ; Ps ; Ps T */
        /**
         *  CSI > Ps ; Ps T */
        /**
         *  CSI Ps X  Erase Ps Character(s) (default = 1) (ECH).
         * \x9b2X
         *  */
        /**
             *  CSI Ps ; Ps ; Ps ; Ps ; Ps T */
        /**
             *  CSI > Ps ; Ps T */
        /**
         *  CSI Ps X  Erase Ps Character(s) (default = 1) (ECH).
         * \x9b2X
         *
         * @param {?} count
         * @return {?}
         */
        FunctionsUsingCSI.eraseCharacters = /**
             *  CSI Ps ; Ps ; Ps ; Ps ; Ps T */
        /**
             *  CSI > Ps ; Ps T */
        /**
         *  CSI Ps X  Erase Ps Character(s) (default = 1) (ECH).
         * \x9b2X
         *
         * @param {?} count
         * @return {?}
         */
        function (count) {
            return "" + CSI + count + "X";
        };
        return FunctionsUsingCSI;
    }());
    /** @enum {number} */
    var KindOfEraseInDisplay = {
        Below: 0, Above: 1, All: 2, SavedLines: 3,
    };
    KindOfEraseInDisplay[KindOfEraseInDisplay.Below] = 'Below';
    KindOfEraseInDisplay[KindOfEraseInDisplay.Above] = 'Above';
    KindOfEraseInDisplay[KindOfEraseInDisplay.All] = 'All';
    KindOfEraseInDisplay[KindOfEraseInDisplay.SavedLines] = 'SavedLines';
    /** @enum {number} */
    var KindOfEraseInLine = {
        Right: 0, Left: 1, All: 2,
    };
    KindOfEraseInLine[KindOfEraseInLine.Right] = 'Right';
    KindOfEraseInLine[KindOfEraseInLine.Left] = 'Left';
    KindOfEraseInLine[KindOfEraseInLine.All] = 'All';

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ng-terminal.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function NgTerminal() { }
    if (false) {
        /**
         * getter only provided
         * A observable to emit printable characters when a user typed on the div for the xterm
         * @deprecated since version 2.1.0
         * @type {?}
         */
        NgTerminal.prototype.keyInput;
        /**
         * getter only provided
         * A observable to emit keys and keyboard event when a user typed on the div for the xterm
         * @type {?}
         */
        NgTerminal.prototype.keyEventInput;
        /**
         * getter only provided
         * return the core object of the terminal where you can control everything directly
         * @type {?}
         */
        NgTerminal.prototype.underlying;
        /**
         * write print charactors or control sequences to the xterm directly
         * @param {?} chars charactors to write
         * @return {?}
         */
        NgTerminal.prototype.write = function (chars) { };
        /**
         * change row, col, draggable
         * @param {?} opt
         * @return {?}
         */
        NgTerminal.prototype.setDisplayOption = function (opt) { };
        /**
         * @param {?} styleObject
         * @return {?}
         */
        NgTerminal.prototype.setStyle = function (styleObject) { };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/display-option.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * options for dimensions of terminal.
     * fixedGrid has high priority than activateDraggableOnEdge's
     * @record
     */
    function DisplayOption() { }
    if (false) {
        /** @type {?|undefined} */
        DisplayOption.prototype.fixedGrid;
        /** @type {?|undefined} */
        DisplayOption.prototype.activateDraggableOnEdge;
    }

    exports.FunctionsUsingCSI = FunctionsUsingCSI;
    exports.KindOfEraseInDisplay = KindOfEraseInDisplay;
    exports.KindOfEraseInLine = KindOfEraseInLine;
    exports.NgTerminalComponent = NgTerminalComponent;
    exports.NgTerminalModule = NgTerminalModule;
    exports.NgTerminalService = NgTerminalService;
    exports.ɵa = GlobalStyleComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-terminal.umd.js.map
