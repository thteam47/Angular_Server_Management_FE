(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-otp-input', ['exports', '@angular/core', '@angular/forms', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["ng-otp-input"] = {}, global.ng.core, global.ng.forms, global.ng.common));
})(this, (function (exports, i0, i3, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var KeyboardUtil = /** @class */ (function () {
        function KeyboardUtil() {
        }
        KeyboardUtil.ifBackspaceOrDelete = function (event) {
            return this.ifKey(event, 'Backspace;Delete;Del');
        };
        KeyboardUtil.ifRightArrow = function (event) {
            return this.ifKey(event, 'ArrowRight;Right');
        };
        KeyboardUtil.ifLeftArrow = function (event) {
            return this.ifKey(event, 'ArrowLeft;Left');
        };
        KeyboardUtil.ifSpacebar = function (event) {
            return this.ifKey(event, 'Spacebar; '); //don't remove the space after ; as this will check for space key
        };
        KeyboardUtil.ifKey = function (event, keys) {
            var keysToCheck = keys.split(';');
            return keysToCheck.some(function (k) { return k === event.key; });
        };
        return KeyboardUtil;
    }());

    var KeysPipe = /** @class */ (function () {
        function KeysPipe() {
        }
        KeysPipe.prototype.transform = function (value) {
            return Object.keys(value);
        };
        return KeysPipe;
    }());
    /** @nocollapse */ KeysPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeysPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    /** @nocollapse */ KeysPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeysPipe, name: "keys" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeysPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'keys'
                    }]
            }] });

    var NgOtpInputComponent = /** @class */ (function () {
        function NgOtpInputComponent(keysPipe) {
            this.keysPipe = keysPipe;
            this.config = { length: 4 };
            // tslint:disable-next-line: no-output-on-prefix
            this.onInputChange = new i0.EventEmitter();
            this.inputControls = new Array(this.config.length);
            this.componentKey = Math.random()
                .toString(36)
                .substring(2) + new Date().getTime().toString(36);
        }
        Object.defineProperty(NgOtpInputComponent.prototype, "inputType", {
            get: function () {
                var _a, _b;
                return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.isPasswordInput)
                    ? 'password'
                    : ((_b = this.config) === null || _b === void 0 ? void 0 : _b.allowNumbersOnly)
                        ? 'tel'
                        : 'text';
            },
            enumerable: false,
            configurable: true
        });
        NgOtpInputComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.otpForm = new i3.FormGroup({});
            for (var index = 0; index < this.config.length; index++) {
                this.otpForm.addControl(this.getControlName(index), new i3.FormControl());
            }
            this.otpForm.valueChanges.subscribe(function (v) {
                _this.keysPipe.transform(_this.otpForm.controls).forEach(function (k) {
                    var val = _this.otpForm.controls[k].value;
                    if (val && val.length > 1) {
                        if (val.length >= _this.config.length) {
                            _this.setValue(val);
                        }
                        else {
                            _this.rebuildValue();
                        }
                    }
                });
            });
        };
        NgOtpInputComponent.prototype.ngAfterViewInit = function () {
            if (!this.config.disableAutoFocus) {
                var containerItem = document.getElementById("c_" + this.componentKey);
                if (containerItem) {
                    var ele = containerItem.getElementsByClassName('otp-input')[0];
                    if (ele && ele.focus) {
                        ele.focus();
                    }
                }
            }
        };
        NgOtpInputComponent.prototype.getControlName = function (idx) {
            return "ctrl_" + idx;
        };
        NgOtpInputComponent.prototype.onKeyDown = function ($event, inputIdx) {
            if (KeyboardUtil.ifSpacebar($event)) {
                $event.preventDefault();
                return false;
            }
        };
        NgOtpInputComponent.prototype.onInput = function ($event) {
            var newVal = this.currentVal ? "" + this.currentVal + $event.target.value : $event.target.value;
            if (this.config.allowNumbersOnly && !this.validateNumber(newVal)) {
                $event.target.value = '';
                $event.stopPropagation();
                $event.preventDefault();
                return;
            }
        };
        NgOtpInputComponent.prototype.onKeyUp = function ($event, inputIdx) {
            var nextInputId = this.appendKey("otp_" + (inputIdx + 1));
            var prevInputId = this.appendKey("otp_" + (inputIdx - 1));
            if (KeyboardUtil.ifRightArrow($event)) {
                $event.preventDefault();
                this.setSelected(nextInputId);
                return;
            }
            if (KeyboardUtil.ifLeftArrow($event)) {
                $event.preventDefault();
                this.setSelected(prevInputId);
                return;
            }
            if (KeyboardUtil.ifBackspaceOrDelete($event) && !$event.target.value) {
                this.setSelected(prevInputId);
                this.rebuildValue();
                return;
            }
            if (!$event.target.value) {
                return;
            }
            if (this.ifValidKeyCode($event)) {
                this.setSelected(nextInputId);
            }
            this.rebuildValue();
        };
        NgOtpInputComponent.prototype.validateNumber = function (val) {
            return val && /^\d*\.?\d*$/.test(val);
        };
        NgOtpInputComponent.prototype.appendKey = function (id) {
            return id + "_" + this.componentKey;
        };
        NgOtpInputComponent.prototype.setSelected = function (eleId) {
            this.focusTo(eleId);
            var ele = document.getElementById(eleId);
            if (ele && ele.setSelectionRange) {
                setTimeout(function () {
                    ele.setSelectionRange(0, 1);
                }, 0);
            }
        };
        NgOtpInputComponent.prototype.ifValidKeyCode = function (event) {
            var inp = event.key;
            var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
            return (isMobile ||
                /[a-zA-Z0-9-_]/.test(inp) ||
                (this.config.allowKeyCodes &&
                    this.config.allowKeyCodes.includes(event.keyCode)));
        };
        NgOtpInputComponent.prototype.focusTo = function (eleId) {
            var ele = document.getElementById(eleId);
            if (ele) {
                ele.focus();
            }
        };
        // method to set component value
        NgOtpInputComponent.prototype.setValue = function (value) {
            var _this = this;
            if (this.config.allowNumbersOnly && isNaN(value)) {
                return;
            }
            this.otpForm.reset();
            if (!value) {
                this.rebuildValue();
                return;
            }
            value = value.toString().replace(/\s/g, ''); // remove whitespace
            Array.from(value).forEach(function (c, idx) {
                if (_this.otpForm.get(_this.getControlName(idx))) {
                    _this.otpForm.get(_this.getControlName(idx)).setValue(c);
                }
            });
            if (!this.config.disableAutoFocus) {
                var containerItem = document.getElementById("c_" + this.componentKey);
                var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);
                var ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];
                if (ele && ele.focus) {
                    ele.focus();
                }
            }
            this.rebuildValue();
        };
        NgOtpInputComponent.prototype.rebuildValue = function () {
            var _this = this;
            var _a;
            var val = '';
            this.keysPipe.transform(this.otpForm.controls).forEach(function (k) {
                if (_this.otpForm.controls[k].value) {
                    var ctrlVal = _this.otpForm.controls[k].value;
                    var isLengthExceed = ctrlVal.length > 1;
                    var isCaseTransformEnabled = !_this.config.allowNumbersOnly && _this.config.letterCase && (_this.config.letterCase.toLocaleLowerCase() == 'upper' || _this.config.letterCase.toLocaleLowerCase() == 'lower');
                    ctrlVal = ctrlVal[0];
                    var transformedVal = isCaseTransformEnabled ? _this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;
                    if (isCaseTransformEnabled && transformedVal == ctrlVal) {
                        isCaseTransformEnabled = false;
                    }
                    else {
                        ctrlVal = transformedVal;
                    }
                    val += ctrlVal;
                    if (isLengthExceed || isCaseTransformEnabled) {
                        _this.otpForm.controls[k].setValue(ctrlVal);
                    }
                }
            });
            if ((_a = this.formCtrl) === null || _a === void 0 ? void 0 : _a.setValue) {
                this.formCtrl.setValue(val);
            }
            this.onInputChange.emit(val);
            this.currentVal = val;
        };
        NgOtpInputComponent.prototype.handlePaste = function (e) {
            // Get pasted data via clipboard API
            var clipboardData = e.clipboardData || window['clipboardData'];
            if (clipboardData) {
                var pastedData = clipboardData.getData('Text');
            }
            // Stop data actually being pasted into div
            e.stopPropagation();
            e.preventDefault();
            if (!pastedData || (this.config.allowNumbersOnly && !this.validateNumber(pastedData))) {
                return;
            }
            this.setValue(pastedData);
        };
        return NgOtpInputComponent;
    }());
    /** @nocollapse */ NgOtpInputComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgOtpInputComponent, deps: [{ token: KeysPipe }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ NgOtpInputComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NgOtpInputComponent, selector: "ng-otp-input", inputs: { config: "config", formCtrl: "formCtrl" }, outputs: { onInputChange: "onInputChange" }, ngImport: i0__namespace, template: "<div class=\"ng-otp-input-wrapper wrapper {{config.containerClass}}\" id=\"c_{{componentKey}}\" *ngIf=\"otpForm?.controls\"\r\n  [ngStyle]=\"config.containerStyles\">\r\n  <input (paste)=\"handlePaste($event)\" [pattern]=\"config.allowNumbersOnly ? '\\\\d*' : ''\" [type]=\"inputType\"  [placeholder]=\"config?.placeholder || ''\"\r\n    [ngStyle]=\"config.inputStyles\" \r\n    class=\"otp-input {{config.inputClass}}\" autocomplete=\"one-time-code\" *ngFor=\"let item of otpForm?.controls | keys;let i=index\"\r\n    [formControl]=\"otpForm.controls[item]\" #inp id=\"otp_{{i}}_{{componentKey}}\" \r\n    (keyup)=\"onKeyUp($event,i)\" (input)=\"onInput($event)\" (keydown)=\"onKeyDown($event,i)\" >\r\n</div>", styles: [".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\n"], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3__namespace.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i3__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "keys": KeysPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgOtpInputComponent, decorators: [{
                type: i0.Component,
                args: [{
                        // tslint:disable-next-line: component-selector
                        selector: 'ng-otp-input',
                        templateUrl: './ng-otp-input.component.html',
                        styleUrls: ['./ng-otp-input.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: KeysPipe }]; }, propDecorators: { config: [{
                    type: i0.Input
                }], onInputChange: [{
                    type: i0.Output
                }], formCtrl: [{
                    type: i0.Input
                }] } });

    var NgOtpInputModule = /** @class */ (function () {
        function NgOtpInputModule() {
        }
        return NgOtpInputModule;
    }());
    /** @nocollapse */ NgOtpInputModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgOtpInputModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ NgOtpInputModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgOtpInputModule, declarations: [NgOtpInputComponent, KeysPipe], imports: [i2.CommonModule,
            i3.FormsModule,
            i3.ReactiveFormsModule], exports: [NgOtpInputComponent] });
    /** @nocollapse */ NgOtpInputModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgOtpInputModule, providers: [KeysPipe], imports: [[
                i2.CommonModule,
                i3.FormsModule,
                i3.ReactiveFormsModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgOtpInputModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i2.CommonModule,
                            i3.FormsModule,
                            i3.ReactiveFormsModule
                        ],
                        declarations: [NgOtpInputComponent, KeysPipe],
                        exports: [NgOtpInputComponent],
                        providers: [KeysPipe]
                    }]
            }] });

    var Config = /** @class */ (function () {
        function Config() {
        }
        return Config;
    }());

    /*
     * Public API Surface of ng-otp-input
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgOtpInputComponent = NgOtpInputComponent;
    exports.NgOtpInputConfig = Config;
    exports.NgOtpInputModule = NgOtpInputModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-otp-input.umd.js.map
