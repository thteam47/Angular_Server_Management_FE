{"ast":null,"code":"import { Ajax, Animation, Base, Browser, ChildProperty, Collection, Complex, Component, Event, EventHandler, Internationalization, KeyboardEvents, L10n, NotifyPropertyChanges, Property, SanitizeHtmlHelper, addClass, append, attributes, classList, closest, compile, createElement, detach, extend, formatUnit, getInstance, getNumericObject, getUniqueID, getValue, isBlazor, isNullOrUndefined, merge, onIntlChange, remove, removeClass, resetBlazorTemplate, rippleEffect, select, selectAll, setStyleAttribute, setValue, updateBlazorTemplate } from '@syncfusion/ej2-base';\nimport { Popup, Tooltip, createSpinner, getZindexPartial, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';\nimport { Deferred, SplitButton, getModel } from '@syncfusion/ej2-splitbuttons';\n/* eslint-disable valid-jsdoc, jsdoc/require-jsdoc, jsdoc/require-returns, jsdoc/require-param */\n\nconst CLASSNAMES = {\n  RTL: 'e-rtl',\n  DISABLE: 'e-disabled',\n  INPUT: 'e-input',\n  TEXTAREA: 'e-multi-line-input',\n  INPUTGROUP: 'e-input-group',\n  FLOATINPUT: 'e-float-input',\n  FLOATLINE: 'e-float-line',\n  FLOATTEXT: 'e-float-text',\n  CLEARICON: 'e-clear-icon',\n  CLEARICONHIDE: 'e-clear-icon-hide',\n  LABELTOP: 'e-label-top',\n  LABELBOTTOM: 'e-label-bottom',\n  NOFLOATLABEL: 'e-no-float-label',\n  INPUTCUSTOMTAG: 'e-input-custom-tag',\n  FLOATCUSTOMTAG: 'e-float-custom-tag'\n};\n/**\n * Base for Input creation through util methods.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\n\nvar Input;\n\n(function (Input) {\n  let floatType;\n  let isBindClearAction = true;\n  /**\n   * Create a wrapper to input element with multiple span elements and set the basic properties to input based components.\n   * ```\n   * E.g : Input.createInput({ element: element, floatLabelType : \"Auto\", properties: { placeholder: 'Search' } });\n   * ```\n   *\n   */\n\n  function createInput(args, internalCreateElement) {\n    const makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    let inputObject = {\n      container: null,\n      buttons: [],\n      clearButton: null\n    };\n    floatType = args.floatLabelType;\n    isBindClearAction = args.bindClearAction;\n\n    if (isNullOrUndefined(args.floatLabelType) || args.floatLabelType === 'Never') {\n      inputObject.container = createInputContainer(args, CLASSNAMES.INPUTGROUP, CLASSNAMES.INPUTCUSTOMTAG, 'span', makeElement);\n      args.element.parentNode.insertBefore(inputObject.container, args.element);\n      addClass([args.element], CLASSNAMES.INPUT);\n      inputObject.container.appendChild(args.element);\n    } else {\n      createFloatingInput(args, inputObject, makeElement);\n    }\n\n    bindInitialEvent(args);\n\n    if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.showClearButton) && args.properties.showClearButton && args.element.tagName !== 'TEXTAREA') {\n      setClearButton(args.properties.showClearButton, args.element, inputObject, true, makeElement);\n      inputObject.clearButton.setAttribute('role', 'button');\n\n      if (inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n        addClass([inputObject.container], CLASSNAMES.INPUTGROUP);\n      }\n    }\n\n    if (!isNullOrUndefined(args.buttons) && args.element.tagName !== 'TEXTAREA') {\n      for (let i = 0; i < args.buttons.length; i++) {\n        inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));\n      }\n    }\n\n    if (!isNullOrUndefined(args.element) && args.element.tagName === 'TEXTAREA') {\n      addClass([inputObject.container], CLASSNAMES.TEXTAREA);\n    }\n\n    validateInputType(inputObject.container, args.element);\n    inputObject = setPropertyValue(args, inputObject); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    return inputObject;\n  }\n\n  Input.createInput = createInput;\n\n  function bindInitialEvent(args) {\n    checkInputValue(args.floatLabelType, args.element);\n    args.element.addEventListener('focus', function () {\n      const parent = getParentNode(this);\n\n      if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) {\n        parent.classList.add('e-input-focus');\n      }\n    });\n    args.element.addEventListener('blur', function () {\n      const parent = getParentNode(this);\n\n      if (parent.classList.contains('e-input-group') || parent.classList.contains('e-outline') || parent.classList.contains('e-filled')) {\n        parent.classList.remove('e-input-focus');\n      }\n    });\n    args.element.addEventListener('input', () => {\n      checkInputValue(floatType, args.element);\n    });\n  }\n\n  Input.bindInitialEvent = bindInitialEvent;\n\n  function checkInputValue(floatLabelType, inputElement) {\n    const inputValue = inputElement.value;\n\n    if (inputValue !== '' && !isNullOrUndefined(inputValue) && inputElement.parentElement) {\n      inputElement.parentElement.classList.add('e-valid-input');\n    } else if (floatLabelType !== 'Always' && inputElement.parentElement) {\n      inputElement.parentElement.classList.remove('e-valid-input');\n    }\n  }\n\n  function _focusFn() {\n    const label = getParentNode(this).getElementsByClassName('e-float-text')[0];\n\n    if (!isNullOrUndefined(label)) {\n      addClass([label], CLASSNAMES.LABELTOP);\n\n      if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n        removeClass([label], CLASSNAMES.LABELBOTTOM);\n      }\n    }\n  }\n\n  function _blurFn() {\n    const parent = getParentNode(this);\n\n    if (parent.getElementsByTagName('textarea')[0] ? parent.getElementsByTagName('textarea')[0].value === '' : parent.getElementsByTagName('input')[0].value === '') {\n      const label = parent.getElementsByClassName('e-float-text')[0];\n\n      if (!isNullOrUndefined(label)) {\n        if (label.classList.contains(CLASSNAMES.LABELTOP)) {\n          removeClass([label], CLASSNAMES.LABELTOP);\n        }\n\n        addClass([label], CLASSNAMES.LABELBOTTOM);\n      }\n    }\n  }\n\n  function wireFloatingEvents(element) {\n    element.addEventListener('focus', _focusFn);\n    element.addEventListener('blur', _blurFn);\n  }\n\n  Input.wireFloatingEvents = wireFloatingEvents;\n\n  function unwireFloatingEvents(element) {\n    element.removeEventListener('focus', _focusFn);\n    element.removeEventListener('blur', _blurFn);\n  }\n\n  function createFloatingInput(args, inputObject, internalCreateElement) {\n    const makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n\n    if (args.floatLabelType === 'Auto') {\n      wireFloatingEvents(args.element);\n    }\n\n    if (isNullOrUndefined(inputObject.container)) {\n      inputObject.container = createInputContainer(args, CLASSNAMES.FLOATINPUT, CLASSNAMES.FLOATCUSTOMTAG, 'div', makeElement);\n\n      if (args.element.parentNode) {\n        args.element.parentNode.insertBefore(inputObject.container, args.element);\n      }\n    } else {\n      if (!isNullOrUndefined(args.customTag)) {\n        inputObject.container.classList.add(CLASSNAMES.FLOATCUSTOMTAG);\n      }\n\n      inputObject.container.classList.add(CLASSNAMES.FLOATINPUT);\n    }\n\n    const floatLinelement = makeElement('span', {\n      className: CLASSNAMES.FLOATLINE\n    });\n    const floatLabelElement = makeElement('label', {\n      className: CLASSNAMES.FLOATTEXT\n    });\n\n    if (!isNullOrUndefined(args.element.id) && args.element.id !== '') {\n      floatLabelElement.id = 'label_' + args.element.id.replace(/ /g, '_');\n      attributes(args.element, {\n        'aria-labelledby': floatLabelElement.id\n      });\n    }\n\n    if (!isNullOrUndefined(args.element.placeholder) && args.element.placeholder !== '') {\n      floatLabelElement.innerText = encodePlaceHolder(args.element.placeholder);\n      args.element.removeAttribute('placeholder');\n    }\n\n    if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.placeholder) && args.properties.placeholder !== '') {\n      floatLabelElement.innerText = encodePlaceHolder(args.properties.placeholder);\n    }\n\n    if (!floatLabelElement.innerText) {\n      inputObject.container.classList.add(CLASSNAMES.NOFLOATLABEL);\n    }\n\n    if (inputObject.container.classList.contains('e-float-icon-left')) {\n      const inputWrap = inputObject.container.querySelector('.e-input-in-wrap');\n      inputWrap.appendChild(args.element);\n      inputWrap.appendChild(floatLinelement);\n      inputWrap.appendChild(floatLabelElement);\n    } else {\n      inputObject.container.appendChild(args.element);\n      inputObject.container.appendChild(floatLinelement);\n      inputObject.container.appendChild(floatLabelElement);\n    }\n\n    updateLabelState(args.element.value, floatLabelElement);\n\n    if (args.floatLabelType === 'Always') {\n      if (floatLabelElement.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n        removeClass([floatLabelElement], CLASSNAMES.LABELBOTTOM);\n      }\n\n      addClass([floatLabelElement], CLASSNAMES.LABELTOP);\n    }\n\n    if (args.floatLabelType === 'Auto') {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      args.element.addEventListener('input', event => {\n        updateLabelState(args.element.value, floatLabelElement);\n      }); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n      args.element.addEventListener('blur', event => {\n        updateLabelState(args.element.value, floatLabelElement);\n      });\n    }\n\n    if (!isNullOrUndefined(args.element.getAttribute('id'))) {\n      floatLabelElement.setAttribute('for', args.element.getAttribute('id'));\n    }\n  }\n\n  function checkFloatLabelType(type, container) {\n    if (type === 'Always' && container.classList.contains('e-outline')) {\n      container.classList.add('e-valid-input');\n    }\n  }\n\n  function setPropertyValue(args, inputObject) {\n    if (!isNullOrUndefined(args.properties)) {\n      for (const prop of Object.keys(args.properties)) {\n        switch (prop) {\n          case 'cssClass':\n            setCssClass(args.properties.cssClass, [inputObject.container]);\n            checkFloatLabelType(args.floatLabelType, inputObject.container);\n            break;\n\n          case 'enabled':\n            setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);\n            break;\n\n          case 'enableRtl':\n            setEnableRtl(args.properties.enableRtl, [inputObject.container]);\n            break;\n\n          case 'placeholder':\n            setPlaceholder(args.properties.placeholder, args.element);\n            break;\n\n          case 'readonly':\n            setReadonly(args.properties.readonly, args.element);\n            break;\n        }\n      }\n    }\n\n    return inputObject;\n  }\n\n  function updateIconState(value, button) {\n    if (value) {\n      removeClass([button], CLASSNAMES.CLEARICONHIDE);\n    } else {\n      addClass([button], CLASSNAMES.CLEARICONHIDE);\n    }\n  }\n\n  function updateLabelState(value, label) {\n    if (value) {\n      addClass([label], CLASSNAMES.LABELTOP);\n\n      if (label.classList.contains(CLASSNAMES.LABELBOTTOM)) {\n        removeClass([label], CLASSNAMES.LABELBOTTOM);\n      }\n    } else {\n      if (label.classList.contains(CLASSNAMES.LABELTOP)) {\n        removeClass([label], CLASSNAMES.LABELTOP);\n      }\n\n      addClass([label], CLASSNAMES.LABELBOTTOM);\n    }\n  }\n\n  function getParentNode(element) {\n    let parentNode = isNullOrUndefined(element.parentNode) ? element : element.parentNode;\n\n    if (parentNode && parentNode.classList.contains('e-input-in-wrap')) {\n      parentNode = parentNode.parentNode;\n    }\n\n    return parentNode;\n  }\n  /**\n   * To create clear button.\n   */\n\n\n  function createClearButton(element, inputObject, initial, internalCreateElement) {\n    const makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    const button = makeElement('span', {\n      className: CLASSNAMES.CLEARICON\n    });\n    const container = inputObject.container;\n\n    if (!isNullOrUndefined(initial)) {\n      container.appendChild(button);\n    } else {\n      const baseElement = inputObject.container.classList.contains(CLASSNAMES.FLOATINPUT) ? inputObject.container.querySelector('.' + CLASSNAMES.FLOATTEXT) : element;\n      baseElement.insertAdjacentElement('afterend', button);\n    }\n\n    if (!isNullOrUndefined(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n      addClass([container], CLASSNAMES.INPUTGROUP);\n    }\n\n    addClass([button], CLASSNAMES.CLEARICONHIDE);\n    wireClearBtnEvents(element, button, container);\n    button.setAttribute('aria-label', 'close');\n    return button;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  function wireClearBtnEvents(element, button, container) {\n    if (isBindClearAction == undefined || isBindClearAction) {\n      button.addEventListener('click', event => {\n        if (!(element.classList.contains(CLASSNAMES.DISABLE) || element.readOnly)) {\n          event.preventDefault();\n\n          if (element !== document.activeElement) {\n            element.focus();\n          }\n\n          element.value = '';\n          addClass([button], CLASSNAMES.CLEARICONHIDE);\n        }\n      });\n    } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    element.addEventListener('input', event => {\n      updateIconState(element.value, button);\n    }); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    element.addEventListener('focus', event => {\n      updateIconState(element.value, button);\n    }); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n    element.addEventListener('blur', event => {\n      setTimeout(() => {\n        addClass([button], CLASSNAMES.CLEARICONHIDE);\n      }, 200);\n    });\n  }\n\n  Input.wireClearBtnEvents = wireClearBtnEvents;\n\n  function validateLabel(element, floatLabelType) {\n    const parent = getParentNode(element);\n\n    if (parent.classList.contains(CLASSNAMES.FLOATINPUT) && floatLabelType === 'Auto') {\n      const label = getParentNode(element).getElementsByClassName('e-float-text')[0];\n      updateLabelState(element.value, label);\n    }\n  }\n  /**\n   * To create input box contianer.\n   */\n\n\n  function createInputContainer(args, className, tagClass, tag, internalCreateElement) {\n    const makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    let container;\n\n    if (!isNullOrUndefined(args.customTag)) {\n      container = makeElement(args.customTag, {\n        className: className\n      });\n      container.classList.add(tagClass);\n    } else {\n      container = makeElement(tag, {\n        className: className\n      });\n    }\n\n    container.classList.add('e-control-wrapper');\n    return container;\n  }\n\n  function encodePlaceHolder(placeholder) {\n    let result = '';\n\n    if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n      const spanEle = document.createElement('span');\n      spanEle.innerHTML = '<input  placeholder=\"' + placeholder + '\"/>';\n      const hiddenInput = spanEle.children[0];\n      result = hiddenInput.placeholder;\n    }\n\n    return result;\n  }\n  /**\n   * Sets the value to the input element.\n   * ```\n   * E.g : Input.setValue('content', element, \"Auto\", true );\n   * ```\n   *\n   * @param {string} value - Specify the value of the input element.\n   * @param {HTMLInputElement | HTMLTextAreaElement} element - The element on which the specified value is updated.\n   * @param {string} floatLabelType - Specify the float label type of the input element.\n   * @param {boolean} clearButton - Boolean value to specify whether the clear icon is enabled / disabled on the input.\n   */\n\n\n  function setValue$$1(value, element, floatLabelType, clearButton) {\n    element.value = value;\n\n    if (!isNullOrUndefined(floatLabelType) && floatLabelType === 'Auto') {\n      validateLabel(element, floatLabelType);\n    }\n\n    if (!isNullOrUndefined(clearButton) && clearButton) {\n      const parentElement = getParentNode(element);\n\n      if (!isNullOrUndefined(parentElement)) {\n        const button = parentElement.getElementsByClassName(CLASSNAMES.CLEARICON)[0];\n\n        if (!isNullOrUndefined(button)) {\n          if (element.value && parentElement.classList.contains('e-input-focus')) {\n            removeClass([button], CLASSNAMES.CLEARICONHIDE);\n          } else {\n            addClass([button], CLASSNAMES.CLEARICONHIDE);\n          }\n        }\n      }\n    }\n\n    checkInputValue(floatLabelType, element);\n  }\n\n  Input.setValue = setValue$$1;\n  /**\n   * Sets the single or multiple cssClass to wrapper of input element.\n   * ```\n   * E.g : Input.setCssClass('e-custom-class', [element]);\n   * ```\n   *\n   * @param {string} cssClass - Css class names which are needed to add.\n   * @param {Element[] | NodeList} elements - The elements which are needed to add / remove classes.\n   * @param {string} oldClass\n   * - Css class names which are needed to remove. If old classes are need to remove, can give this optional parameter.\n   */\n\n  function setCssClass(cssClass, elements, oldClass) {\n    if (!isNullOrUndefined(oldClass) && oldClass !== '') {\n      removeClass(elements, oldClass.split(' '));\n    }\n\n    if (!isNullOrUndefined(cssClass) && cssClass !== '') {\n      addClass(elements, cssClass.split(' '));\n    }\n  }\n\n  Input.setCssClass = setCssClass;\n  /**\n   * Set the width to the wrapper of input element.\n   * ```\n   * E.g : Input.setWidth('200px', container);\n   * ```\n   *\n   * @param {number | string} width - Width value which is need to add.\n   * @param {HTMLElement} container - The element on which the width is need to add.\n   */\n\n  function setWidth(width, container) {\n    if (typeof width === 'number') {\n      container.style.width = formatUnit(width);\n    } else if (typeof width === 'string') {\n      container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);\n    }\n  }\n\n  Input.setWidth = setWidth;\n  /**\n   * Set the placeholder attribute to the input element.\n   * ```\n   * E.g : Input.setPlaceholder('Search here', element);\n   * ```\n   *\n   * @param {string} placeholder - Placeholder value which is need to add.\n   * @param {HTMLInputElement | HTMLTextAreaElement} element - The element on which the placeholder is need to add.\n   */\n\n  function setPlaceholder(placeholder, element) {\n    placeholder = encodePlaceHolder(placeholder);\n    const parentElement = getParentNode(element);\n\n    if (parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n      if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n        parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = placeholder;\n        parentElement.classList.remove(CLASSNAMES.NOFLOATLABEL);\n        element.removeAttribute('placeholder');\n      } else {\n        parentElement.classList.add(CLASSNAMES.NOFLOATLABEL);\n        parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';\n      }\n    } else {\n      if (!isNullOrUndefined(placeholder) && placeholder !== '') {\n        attributes(element, {\n          'placeholder': placeholder,\n          'aria-placeholder': placeholder\n        });\n      } else {\n        element.removeAttribute('placeholder');\n        element.removeAttribute('aria-placeholder');\n      }\n    }\n  }\n\n  Input.setPlaceholder = setPlaceholder;\n  /**\n   * Set the read only attribute to the input element\n   * ```\n   * E.g : Input.setReadonly(true, element);\n   * ```\n   *\n   * @param {boolean} isReadonly\n   * - Boolean value to specify whether to set read only. Setting \"True\" value enables read only.\n   * @param {HTMLInputElement | HTMLTextAreaElement} element\n   * - The element which is need to enable read only.\n   */\n\n  function setReadonly(isReadonly, element, floatLabelType) {\n    if (isReadonly) {\n      attributes(element, {\n        readonly: ''\n      });\n    } else {\n      element.removeAttribute('readonly');\n    }\n\n    if (!isNullOrUndefined(floatLabelType)) {\n      validateLabel(element, floatLabelType);\n    }\n  }\n\n  Input.setReadonly = setReadonly;\n  /**\n   * Displays the element direction from right to left when its enabled.\n   * ```\n   * E.g : Input.setEnableRtl(true, [inputObj.container]);\n   * ```\n   *\n   * @param {boolean} isRtl\n   * - Boolean value to specify whether to set RTL. Setting \"True\" value enables the RTL mode.\n   * @param {Element[] | NodeList} elements\n   * - The elements that are needed to enable/disable RTL.\n   */\n\n  function setEnableRtl(isRtl, elements) {\n    if (isRtl) {\n      addClass(elements, CLASSNAMES.RTL);\n    } else {\n      removeClass(elements, CLASSNAMES.RTL);\n    }\n  }\n\n  Input.setEnableRtl = setEnableRtl;\n  /**\n   * Enables or disables the given input element.\n   * ```\n   * E.g : Input.setEnabled(false, element);\n   * ```\n   *\n   * @param {boolean} isEnable\n   * - Boolean value to specify whether to enable or disable.\n   * @param {HTMLInputElement | HTMLTextAreaElement} element\n   * - Element to be enabled or disabled.\n   */\n\n  function setEnabled(isEnable, element, floatLabelType, inputContainer) {\n    const disabledAttrs = {\n      'disabled': 'disabled',\n      'aria-disabled': 'true'\n    };\n    const considerWrapper = isNullOrUndefined(inputContainer) ? false : true;\n\n    if (isEnable) {\n      element.classList.remove(CLASSNAMES.DISABLE);\n      removeAttributes(disabledAttrs, element);\n\n      if (considerWrapper) {\n        removeClass([inputContainer], CLASSNAMES.DISABLE);\n      }\n    } else {\n      element.classList.add(CLASSNAMES.DISABLE);\n      addAttributes(disabledAttrs, element);\n\n      if (considerWrapper) {\n        addClass([inputContainer], CLASSNAMES.DISABLE);\n      }\n    }\n\n    if (!isNullOrUndefined(floatLabelType)) {\n      validateLabel(element, floatLabelType);\n    }\n  }\n\n  Input.setEnabled = setEnabled;\n\n  function setClearButton(isClear, element, inputObject, initial, internalCreateElement) {\n    const makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n\n    if (isClear) {\n      inputObject.clearButton = createClearButton(element, inputObject, initial, makeElement);\n    } else {\n      remove(inputObject.clearButton);\n      inputObject.clearButton = null;\n    }\n  }\n\n  Input.setClearButton = setClearButton;\n  /**\n   * Removing the multiple attributes from the given element such as \"disabled\",\"id\" , etc.\n   * ```\n   * E.g : Input.removeAttributes({ 'disabled': 'disabled', 'aria-disabled': 'true' }, element);\n   * ```\n   *\n   * @param {string} attrs\n   * - Array of attributes which are need to removed from the element.\n   * @param {HTMLInputElement | HTMLElement} element\n   * - Element on which the attributes are needed to be removed.\n   */\n\n  function removeAttributes(attrs, element) {\n    for (const key of Object.keys(attrs)) {\n      const parentElement = getParentNode(element);\n\n      if (key === 'disabled') {\n        element.classList.remove(CLASSNAMES.DISABLE);\n      }\n\n      if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {\n        parentElement.classList.remove(CLASSNAMES.DISABLE);\n      }\n\n      if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n        parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = '';\n      } else {\n        element.removeAttribute(key);\n      }\n    }\n  }\n\n  Input.removeAttributes = removeAttributes;\n  /**\n   * Adding the multiple attributes to the given element such as \"disabled\",\"id\" , etc.\n   * ```\n   * E.g : Input.addAttributes({ 'id': 'inputpopup' }, element);\n   * ```\n   *\n   * @param {string} attrs\n   * - Array of attributes which is added to element.\n   * @param {HTMLInputElement | HTMLElement} element\n   * - Element on which the attributes are needed to be added.\n   */\n\n  function addAttributes(attrs, element) {\n    for (const key of Object.keys(attrs)) {\n      const parentElement = getParentNode(element);\n\n      if (key === 'disabled') {\n        element.classList.add(CLASSNAMES.DISABLE);\n      }\n\n      if (key === 'disabled' && parentElement.classList.contains(CLASSNAMES.INPUTGROUP)) {\n        parentElement.classList.add(CLASSNAMES.DISABLE);\n      }\n\n      if (key === 'placeholder' && parentElement.classList.contains(CLASSNAMES.FLOATINPUT)) {\n        parentElement.getElementsByClassName(CLASSNAMES.FLOATTEXT)[0].textContent = attrs[key];\n      } else {\n        element.setAttribute(key, attrs[key]);\n      }\n    }\n  }\n\n  Input.addAttributes = addAttributes;\n\n  function removeFloating(input) {\n    const container = input.container;\n\n    if (!isNullOrUndefined(container) && container.classList.contains(CLASSNAMES.FLOATINPUT)) {\n      const inputEle = container.querySelector('textarea') ? container.querySelector('textarea') : container.querySelector('input');\n      const placeholder = container.querySelector('.' + CLASSNAMES.FLOATTEXT).textContent;\n      const clearButton = container.querySelector('.e-clear-icon') !== null;\n      detach(container.querySelector('.' + CLASSNAMES.FLOATLINE));\n      detach(container.querySelector('.' + CLASSNAMES.FLOATTEXT));\n      classList(container, [CLASSNAMES.INPUTGROUP], [CLASSNAMES.FLOATINPUT]);\n      unwireFloatingEvents(inputEle);\n      attributes(inputEle, {\n        'placeholder': placeholder\n      });\n      inputEle.classList.add(CLASSNAMES.INPUT);\n\n      if (!clearButton && inputEle.tagName === 'INPUT') {\n        inputEle.removeAttribute('required');\n      }\n    }\n  }\n\n  Input.removeFloating = removeFloating;\n\n  function addFloating(input, type, placeholder, internalCreateElement) {\n    const makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    const container = closest(input, '.' + CLASSNAMES.INPUTGROUP);\n    floatType = type;\n\n    if (type !== 'Never') {\n      let customTag = container.tagName;\n      customTag = customTag !== 'DIV' && customTag !== 'SPAN' ? customTag : null;\n      const args = {\n        element: input,\n        floatLabelType: type,\n        customTag: customTag,\n        properties: {\n          placeholder: placeholder\n        }\n      };\n      let iconEle = container.querySelector('.e-clear-icon');\n      const inputObj = {\n        container: container\n      };\n      input.classList.remove(CLASSNAMES.INPUT);\n      createFloatingInput(args, inputObj, makeElement);\n      const isPrependIcon = container.classList.contains('e-float-icon-left');\n\n      if (isNullOrUndefined(iconEle)) {\n        if (isPrependIcon) {\n          const inputWrap = container.querySelector('.e-input-in-wrap');\n          iconEle = inputWrap.querySelector('.e-input-group-icon');\n        } else {\n          iconEle = container.querySelector('.e-input-group-icon');\n        }\n      }\n\n      if (isNullOrUndefined(iconEle)) {\n        if (isPrependIcon) {\n          iconEle = container.querySelector('.e-input-group-icon');\n        }\n\n        if (isNullOrUndefined(iconEle)) {\n          container.classList.remove(CLASSNAMES.INPUTGROUP);\n        }\n      } else {\n        const floatLine = container.querySelector('.' + CLASSNAMES.FLOATLINE);\n        const floatText = container.querySelector('.' + CLASSNAMES.FLOATTEXT);\n        const wrapper = isPrependIcon ? container.querySelector('.e-input-in-wrap') : container;\n        wrapper.insertBefore(input, iconEle);\n        wrapper.insertBefore(floatLine, iconEle);\n        wrapper.insertBefore(floatText, iconEle);\n      }\n    }\n\n    checkFloatLabelType(type, input.parentElement);\n  }\n\n  Input.addFloating = addFloating;\n  /**\n   * Enable or Disable the ripple effect on the icons inside the Input. Ripple effect is only applicable for material theme.\n   * ```\n   * E.g : Input.setRipple(true, [inputObjects]);\n   * ```\n   *\n   * @param {boolean} isRipple\n   * - Boolean value to specify whether to enable the ripple effect.\n   * @param {InputObject[]} inputObj\n   * - Specify the collection of input objects.\n   */\n\n  function setRipple(isRipple, inputObj) {\n    for (let i = 0; i < inputObj.length; i++) {\n      _internalRipple(isRipple, inputObj[i].container);\n    }\n  }\n\n  Input.setRipple = setRipple;\n\n  function _internalRipple(isRipple, container, button) {\n    const argsButton = [];\n    argsButton.push(button);\n    const buttons = isNullOrUndefined(button) ? container.querySelectorAll('.e-input-group-icon') : argsButton;\n\n    if (isRipple && buttons.length > 0) {\n      for (let index = 0; index < buttons.length; index++) {\n        buttons[index].addEventListener('mousedown', _onMouseDownRipple, false);\n        buttons[index].addEventListener('mouseup', _onMouseUpRipple, false);\n      }\n    } else if (buttons.length > 0) {\n      for (let index = 0; index < buttons.length; index++) {\n        buttons[index].removeEventListener('mousedown', _onMouseDownRipple, this);\n        buttons[index].removeEventListener('mouseup', _onMouseUpRipple, this);\n      }\n    }\n  }\n\n  function _onMouseRipple(container, button) {\n    if (!container.classList.contains('e-disabled') && !container.querySelector('input').readOnly) {\n      button.classList.add('e-input-btn-ripple');\n    }\n  }\n\n  function _onMouseDownRipple() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const ele = this;\n    let parentEle = this.parentElement;\n\n    while (!parentEle.classList.contains('e-input-group')) {\n      parentEle = parentEle.parentElement;\n    }\n\n    _onMouseRipple(parentEle, ele);\n  }\n\n  function _onMouseUpRipple() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const ele = this;\n    setTimeout(() => {\n      ele.classList.remove('e-input-btn-ripple');\n    }, 500);\n  }\n\n  function createIconEle(iconClass, makeElement) {\n    const button = makeElement('span', {\n      className: iconClass\n    });\n    button.classList.add('e-input-group-icon');\n    return button;\n  }\n  /**\n   * Creates a new span element with the given icons added and append it in container element.\n   * ```\n   * E.g : Input.addIcon('append', 'e-icon-spin', inputObj.container, inputElement);\n   * ```\n   *\n   * @param {string} position - Specify the icon placement on the input.Possible values are append and prepend.\n   * @param {string | string[]} icons - Icon classes which are need to add to the span element which is going to created.\n   * Span element acts as icon or button element for input.\n   * @param {HTMLElement} container - The container on which created span element is going to append.\n   * @param {HTMLElement} input - The inputElement on which created span element is going to prepend.\n   */\n\n  /* eslint-disable @typescript-eslint/indent */\n\n\n  function addIcon(position, icons, container, input, internalCreate) {\n    /* eslint-enable @typescript-eslint/indent */\n    const result = typeof icons === 'string' ? icons.split(',') : icons;\n\n    if (position.toLowerCase() === 'append') {\n      for (const icon of result) {\n        appendSpan(icon, container, internalCreate);\n      }\n    } else {\n      for (const icon of result) {\n        prependSpan(icon, container, input, internalCreate);\n      }\n    }\n  }\n\n  Input.addIcon = addIcon;\n  /**\n   * Creates a new span element with the given icons added and prepend it in input element.\n   * ```\n   * E.g : Input.prependSpan('e-icon-spin', inputObj.container, inputElement);\n   * ```\n   *\n   * @param {string} iconClass - Icon classes which are need to add to the span element which is going to created.\n   * Span element acts as icon or button element for input.\n   * @param {HTMLElement} container - The container on which created span element is going to append.\n   * @param {HTMLElement} inputElement - The inputElement on which created span element is going to prepend.\n   */\n\n  /* eslint-disable @typescript-eslint/indent */\n\n  function prependSpan(iconClass, container, inputElement, internalCreateElement) {\n    /* eslint-enable @typescript-eslint/indent */\n    const makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    const button = createIconEle(iconClass, makeElement);\n    container.classList.add('e-float-icon-left');\n    let innerWrapper = container.querySelector('.e-input-in-wrap');\n\n    if (isNullOrUndefined(innerWrapper)) {\n      innerWrapper = makeElement('span', {\n        className: 'e-input-in-wrap'\n      });\n      inputElement.parentNode.insertBefore(innerWrapper, inputElement);\n      const result = container.querySelectorAll(inputElement.tagName + ' ~ *');\n      innerWrapper.appendChild(inputElement);\n\n      for (let i = 0; i < result.length; i++) {\n        innerWrapper.appendChild(result[i]);\n      }\n    }\n\n    innerWrapper.parentNode.insertBefore(button, innerWrapper);\n\n    if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {\n      container.classList.add(CLASSNAMES.INPUTGROUP);\n    }\n\n    _internalRipple(true, container, button);\n\n    return button;\n  }\n\n  Input.prependSpan = prependSpan;\n  /**\n   * Creates a new span element with the given icons added and append it in container element.\n   * ```\n   * E.g : Input.appendSpan('e-icon-spin', inputObj.container);\n   * ```\n   *\n   * @param {string} iconClass - Icon classes which are need to add to the span element which is going to created.\n   * Span element acts as icon or button element for input.\n   * @param {HTMLElement} container - The container on which created span element is going to append.\n   */\n\n  function appendSpan(iconClass, container, internalCreateElement) {\n    const makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;\n    const button = createIconEle(iconClass, makeElement);\n\n    if (!container.classList.contains(CLASSNAMES.INPUTGROUP)) {\n      container.classList.add(CLASSNAMES.INPUTGROUP);\n    }\n\n    const wrap = container.classList.contains('e-float-icon-left') ? container.querySelector('.e-input-in-wrap') : container;\n    wrap.appendChild(button);\n\n    _internalRipple(true, container, button);\n\n    return button;\n  }\n\n  Input.appendSpan = appendSpan;\n\n  function validateInputType(containerElement, input) {\n    if (input.type === 'hidden') {\n      containerElement.classList.add('e-hidden');\n    } else if (containerElement.classList.contains('e-hidden')) {\n      containerElement.classList.remove('e-hidden');\n    }\n  }\n\n  Input.validateInputType = validateInputType;\n})(Input || (Input = {}));\n/* eslint-enable valid-jsdoc, jsdoc/require-jsdoc, jsdoc/require-returns, jsdoc/require-param */\n\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst ROOT = 'e-control-wrapper e-numeric';\nconst SPINICON = 'e-input-group-icon';\nconst SPINUP = 'e-spin-up';\nconst SPINDOWN = 'e-spin-down';\nconst ERROR = 'e-error';\nconst INCREMENT = 'increment';\nconst DECREMENT = 'decrement';\nconst INTREGEXP = new RegExp('^(-)?(\\\\d*)$');\nconst DECIMALSEPARATOR = '.';\nconst COMPONENT = 'e-numerictextbox';\nconst CONTROL = 'e-control';\nconst NUMERIC_FOCUS = 'e-input-focus';\nconst HIDDENELEMENT = 'e-numeric-hidden';\nconst wrapperAttributes = ['title', 'style', 'class'];\n/**\n * Represents the NumericTextBox component that allows the user to enter only numeric values.\n * ```html\n * <input type='text' id=\"numeric\"/>\n * ```\n * ```typescript\n * <script>\n *   var numericObj = new NumericTextBox({ value: 10 });\n *   numericObj.appendTo(\"#numeric\");\n * </script>\n * ```\n */\n\nlet NumericTextBox = /*#__PURE__*/(() => {\n  let NumericTextBox = class NumericTextBox extends Component {\n    /**\n     *\n     * @param {NumericTextBoxModel} options - Specifies the NumericTextBox model.\n     * @param {string | HTMLInputElement} element - Specifies the element to render as component.\n     * @private\n     */\n    constructor(options, element) {\n      super(options, element);\n      this.isVue = false;\n      this.preventChange = false;\n      this.isAngular = false;\n      this.isDynamicChange = false;\n      this.numericOptions = options;\n    }\n\n    preRender() {\n      this.isPrevFocused = false;\n      this.decimalSeparator = '.'; // eslint-disable-next-line no-useless-escape\n\n      this.intRegExp = new RegExp('/^(-)?(\\d*)$/');\n      this.isCalled = false;\n      const ejInstance = getValue('ej2_instances', this.element);\n      this.cloneElement = this.element.cloneNode(true);\n      removeClass([this.cloneElement], [CONTROL, COMPONENT, 'e-lib']);\n      this.angularTagName = null;\n      this.formEle = closest(this.element, 'form');\n\n      if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {\n        this.angularTagName = this.element.tagName;\n        const input = this.createElement('input');\n        let index = 0;\n\n        for (index; index < this.element.attributes.length; index++) {\n          const attributeName = this.element.attributes[index].nodeName;\n\n          if (attributeName !== 'id') {\n            input.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);\n            input.innerHTML = this.element.innerHTML;\n          }\n        }\n\n        if (this.element.hasAttribute('name')) {\n          this.element.removeAttribute('name');\n        }\n\n        this.element.classList.remove('e-control', 'e-numerictextbox');\n        this.element.appendChild(input);\n        this.element = input;\n        setValue('ej2_instances', ejInstance, this.element);\n      }\n\n      if (!(isBlazor() && this.isServerRendered)) {\n        attributes(this.element, {\n          'role': 'spinbutton',\n          'tabindex': '0',\n          'autocomplete': 'off',\n          'aria-live': 'assertive'\n        });\n        const localeText = {\n          incrementTitle: 'Increment value',\n          decrementTitle: 'Decrement value',\n          placeholder: this.placeholder\n        };\n        this.l10n = new L10n('numerictextbox', localeText, this.locale);\n\n        if (this.l10n.getConstant('placeholder') !== '') {\n          this.setProperties({\n            placeholder: this.placeholder || this.l10n.getConstant('placeholder')\n          }, true);\n        }\n      }\n\n      this.isValidState = true;\n      this.inputStyle = null;\n      this.inputName = null;\n      this.cultureInfo = {};\n      this.initCultureInfo();\n      this.initCultureFunc();\n      this.prevValue = this.value;\n\n      if (!(isBlazor() && this.isServerRendered)) {\n        this.updateHTMLAttrToElement();\n        this.checkAttributes(false);\n\n        if (this.formEle) {\n          this.inputEleValue = this.value;\n        }\n      }\n\n      this.validateMinMax();\n      this.validateStep();\n\n      if (this.placeholder === null && !(isBlazor() && this.isServerRendered)) {\n        this.updatePlaceholder();\n      }\n    }\n    /**\n     * To Initialize the control rendering\n     *\n     * @returns {void}\n     * @private\n     */\n\n\n    render() {\n      if (this.element.tagName.toLowerCase() === 'input') {\n        if (!(isBlazor() && this.isServerRendered)) {\n          this.createWrapper();\n\n          if (this.showSpinButton) {\n            this.spinBtnCreation();\n          }\n\n          this.setElementWidth(this.width);\n\n          if (!this.container.classList.contains('e-input-group')) {\n            this.container.classList.add('e-input-group');\n          }\n\n          this.changeValue(this.value === null || isNaN(this.value) ? null : this.strictMode ? this.trimValue(this.value) : this.value);\n        } else {\n          this.container = this.element.parentElement;\n          this.inputWrapper = {\n            container: this.container\n          };\n          this.hiddenInput = this.container.querySelector('input[type=\"hidden\"]');\n\n          if (this.showClearButton) {\n            this.inputWrapper.clearButton = this.container.querySelector('.e-clear-icon');\n            Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);\n          }\n\n          if (this.showSpinButton) {\n            this.spinDown = this.container.querySelector('.' + SPINDOWN);\n            this.spinUp = this.container.querySelector('.' + SPINUP);\n            this.wireSpinBtnEvents();\n          }\n\n          Input.bindInitialEvent({\n            element: this.element,\n            buttons: null,\n            customTag: null,\n            floatLabelType: this.floatLabelType,\n            properties: this.properties\n          });\n        }\n\n        this.wireEvents();\n\n        if (!(isBlazor() && this.isServerRendered)) {\n          if (this.value !== null && !isNaN(this.value)) {\n            if (this.decimals) {\n              this.setProperties({\n                value: this.roundNumber(this.value, this.decimals)\n              }, true);\n            }\n          }\n\n          if (this.element.getAttribute('value') || this.value) {\n            this.element.setAttribute('value', this.element.value);\n            this.hiddenInput.setAttribute('value', this.hiddenInput.value);\n          }\n        }\n\n        this.elementPrevValue = this.element.value;\n\n        if (this.element.hasAttribute('data-val')) {\n          this.element.setAttribute('data-val', 'false');\n        }\n\n        this.renderComplete();\n      }\n    }\n\n    checkAttributes(isDynamic) {\n      const attributes$$1 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['value', 'min', 'max', 'step', 'disabled', 'readonly', 'style', 'name', 'placeholder'];\n\n      for (const prop of attributes$$1) {\n        if (!isNullOrUndefined(this.element.getAttribute(prop))) {\n          switch (prop) {\n            case 'disabled':\n              if (isNullOrUndefined(this.numericOptions) || this.numericOptions['enabled'] === undefined || isDynamic) {\n                const enabled = this.element.getAttribute(prop) === 'disabled' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? false : true;\n                this.setProperties({\n                  enabled: enabled\n                }, !isDynamic);\n              }\n\n              break;\n\n            case 'readonly':\n              if (isNullOrUndefined(this.numericOptions) || this.numericOptions['readonly'] === undefined || isDynamic) {\n                const readonly = this.element.getAttribute(prop) === 'readonly' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? true : false;\n                this.setProperties({\n                  readonly: readonly\n                }, !isDynamic);\n              }\n\n              break;\n\n            case 'placeholder':\n              if (isNullOrUndefined(this.numericOptions) || this.numericOptions['placeholder'] === undefined || isDynamic) {\n                this.setProperties({\n                  placeholder: this.element.placeholder\n                }, !isDynamic);\n              }\n\n              break;\n\n            case 'value':\n              if (isNullOrUndefined(this.numericOptions) || this.numericOptions['value'] === undefined || isDynamic) {\n                const setNumber = this.instance.getNumberParser({\n                  format: 'n'\n                })(this.element.getAttribute(prop));\n                this.setProperties(setValue(prop, setNumber, {}), !isDynamic);\n              }\n\n              break;\n\n            case 'min':\n              if (isNullOrUndefined(this.numericOptions) || this.numericOptions['min'] === undefined || isDynamic) {\n                const minValue = this.instance.getNumberParser({\n                  format: 'n'\n                })(this.element.getAttribute(prop));\n\n                if (minValue !== null && !isNaN(minValue)) {\n                  this.setProperties(setValue(prop, minValue, {}), !isDynamic);\n                }\n              }\n\n              break;\n\n            case 'max':\n              if (isNullOrUndefined(this.numericOptions) || this.numericOptions['max'] === undefined || isDynamic) {\n                const maxValue = this.instance.getNumberParser({\n                  format: 'n'\n                })(this.element.getAttribute(prop));\n\n                if (maxValue !== null && !isNaN(maxValue)) {\n                  this.setProperties(setValue(prop, maxValue, {}), !isDynamic);\n                }\n              }\n\n              break;\n\n            case 'step':\n              if (isNullOrUndefined(this.numericOptions) || this.numericOptions['step'] === undefined || isDynamic) {\n                const stepValue = this.instance.getNumberParser({\n                  format: 'n'\n                })(this.element.getAttribute(prop));\n\n                if (stepValue !== null && !isNaN(stepValue)) {\n                  this.setProperties(setValue(prop, stepValue, {}), !isDynamic);\n                }\n              }\n\n              break;\n\n            case 'style':\n              this.inputStyle = this.element.getAttribute(prop);\n              break;\n\n            case 'name':\n              this.inputName = this.element.getAttribute(prop);\n              break;\n\n            default:\n              {\n                const value = this.instance.getNumberParser({\n                  format: 'n'\n                })(this.element.getAttribute(prop));\n\n                if (value !== null && !isNaN(value) || prop === 'value') {\n                  this.setProperties(setValue(prop, value, {}), true);\n                }\n              }\n              break;\n          }\n        }\n      }\n    }\n\n    updatePlaceholder() {\n      this.setProperties({\n        placeholder: this.l10n.getConstant('placeholder')\n      }, true);\n    }\n\n    initCultureFunc() {\n      this.instance = new Internationalization(this.locale);\n    }\n\n    initCultureInfo() {\n      this.cultureInfo.format = this.format;\n\n      if (getValue('currency', this) !== null) {\n        setValue('currency', this.currency, this.cultureInfo);\n        this.setProperties({\n          currencyCode: this.currency\n        }, true);\n      }\n    }\n    /* Wrapper creation */\n\n\n    createWrapper() {\n      let updatedCssClassValue = this.cssClass;\n\n      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n        updatedCssClassValue = this.getNumericValidClassList(this.cssClass);\n      }\n\n      const inputObj = Input.createInput({\n        element: this.element,\n        floatLabelType: this.floatLabelType,\n        properties: {\n          readonly: this.readonly,\n          placeholder: this.placeholder,\n          cssClass: updatedCssClassValue,\n          enableRtl: this.enableRtl,\n          showClearButton: this.showClearButton,\n          enabled: this.enabled\n        }\n      }, this.createElement);\n      this.inputWrapper = inputObj;\n      this.container = inputObj.container;\n      this.container.setAttribute('class', ROOT + ' ' + this.container.getAttribute('class'));\n      this.updateHTMLAttrToWrapper();\n\n      if (this.readonly) {\n        attributes(this.element, {\n          'aria-readonly': 'true'\n        });\n      }\n\n      this.hiddenInput = this.createElement('input', {\n        attrs: {\n          type: 'text',\n          'validateHidden': 'true',\n          'class': HIDDENELEMENT\n        }\n      });\n      this.inputName = this.inputName !== null ? this.inputName : this.element.id;\n      this.element.removeAttribute('name');\n      attributes(this.hiddenInput, {\n        'name': this.inputName\n      });\n      this.container.insertBefore(this.hiddenInput, this.container.childNodes[1]);\n      this.updateDataAttribute(false);\n\n      if (this.inputStyle !== null) {\n        attributes(this.container, {\n          'style': this.inputStyle\n        });\n      }\n    }\n\n    updateDataAttribute(isDynamic) {\n      let attr = {};\n\n      if (!isDynamic) {\n        for (let a = 0; a < this.element.attributes.length; a++) {\n          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);\n        }\n      } else {\n        attr = this.htmlAttributes;\n      }\n\n      for (const key of Object.keys(attr)) {\n        if (key.indexOf('data') === 0) {\n          this.hiddenInput.setAttribute(key, attr[key]);\n        }\n      }\n    }\n\n    updateHTMLAttrToElement() {\n      if (!isNullOrUndefined(this.htmlAttributes)) {\n        for (const pro of Object.keys(this.htmlAttributes)) {\n          if (wrapperAttributes.indexOf(pro) < 0) {\n            this.element.setAttribute(pro, this.htmlAttributes[pro]);\n          }\n        }\n      }\n    }\n\n    updateCssClass(newClass, oldClass) {\n      Input.setCssClass(this.getNumericValidClassList(newClass), [this.container], this.getNumericValidClassList(oldClass));\n    }\n\n    getNumericValidClassList(numericClassName) {\n      let result = numericClassName;\n\n      if (!isNullOrUndefined(numericClassName) && numericClassName !== '') {\n        result = numericClassName.replace(/\\s+/g, ' ').trim();\n      }\n\n      return result;\n    }\n\n    updateHTMLAttrToWrapper() {\n      if (!isNullOrUndefined(this.htmlAttributes)) {\n        for (const pro of Object.keys(this.htmlAttributes)) {\n          if (wrapperAttributes.indexOf(pro) > -1) {\n            if (pro === 'class') {\n              const updatedClassValue = this.getNumericValidClassList(this.htmlAttributes[pro]);\n\n              if (updatedClassValue !== '') {\n                addClass([this.container], updatedClassValue.split(' '));\n              }\n            } else if (pro === 'style') {\n              let numericStyle = this.container.getAttribute(pro);\n              numericStyle = !isNullOrUndefined(numericStyle) ? numericStyle + this.htmlAttributes[pro] : this.htmlAttributes[pro];\n              this.container.setAttribute(pro, numericStyle);\n            } else {\n              this.container.setAttribute(pro, this.htmlAttributes[pro]);\n            }\n          }\n        }\n      }\n    }\n\n    setElementWidth(width) {\n      if (!isNullOrUndefined(width)) {\n        if (typeof width === 'number') {\n          this.container.style.width = formatUnit(width);\n        } else if (typeof width === 'string') {\n          this.container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);\n        }\n      }\n    }\n    /* Spinner creation */\n\n\n    spinBtnCreation() {\n      this.spinDown = Input.appendSpan(SPINICON + ' ' + SPINDOWN, this.container, this.createElement);\n      attributes(this.spinDown, {\n        'title': this.l10n.getConstant('decrementTitle'),\n        'aria-label': this.l10n.getConstant('decrementTitle')\n      });\n      this.spinUp = Input.appendSpan(SPINICON + ' ' + SPINUP, this.container, this.createElement);\n      attributes(this.spinUp, {\n        'title': this.l10n.getConstant('incrementTitle'),\n        'aria-label': this.l10n.getConstant('incrementTitle')\n      });\n      this.wireSpinBtnEvents();\n    }\n\n    validateMinMax() {\n      if (!(typeof this.min === 'number' && !isNaN(this.min))) {\n        this.setProperties({\n          min: -Number.MAX_VALUE\n        }, true);\n      }\n\n      if (!(typeof this.max === 'number' && !isNaN(this.max))) {\n        this.setProperties({\n          max: Number.MAX_VALUE\n        }, true);\n      }\n\n      if (this.decimals !== null) {\n        if (this.min !== -Number.MAX_VALUE) {\n          this.setProperties({\n            min: this.instance.getNumberParser({\n              format: 'n'\n            })(this.formattedValue(this.decimals, this.min))\n          }, true);\n        }\n\n        if (this.max !== Number.MAX_VALUE) {\n          this.setProperties({\n            max: this.instance.getNumberParser({\n              format: 'n'\n            })(this.formattedValue(this.decimals, this.max))\n          }, true);\n        }\n      }\n\n      this.setProperties({\n        min: this.min > this.max ? this.max : this.min\n      }, true);\n      attributes(this.element, {\n        'aria-valuemin': this.min.toString(),\n        'aria-valuemax': this.max.toString()\n      });\n    }\n\n    formattedValue(decimals, value) {\n      return this.instance.getNumberFormat({\n        maximumFractionDigits: decimals,\n        minimumFractionDigits: decimals,\n        useGrouping: false\n      })(value);\n    }\n\n    validateStep() {\n      if (this.decimals !== null) {\n        this.setProperties({\n          step: this.instance.getNumberParser({\n            format: 'n'\n          })(this.formattedValue(this.decimals, this.step))\n        }, true);\n      }\n    }\n\n    action(operation, event) {\n      this.isInteract = true;\n      const value = this.isFocused ? this.instance.getNumberParser({\n        format: 'n'\n      })(this.element.value) : this.value;\n      this.changeValue(this.performAction(value, this.step, operation));\n      this.raiseChangeEvent(event);\n    }\n\n    checkErrorClass() {\n      if (this.isValidState) {\n        removeClass([this.container], ERROR);\n      } else {\n        addClass([this.container], ERROR);\n      }\n\n      attributes(this.element, {\n        'aria-invalid': this.isValidState ? 'false' : 'true'\n      });\n    }\n\n    bindClearEvent() {\n      if (this.showClearButton) {\n        EventHandler.add(this.inputWrapper.clearButton, 'mousedown touchstart', this.resetHandler, this);\n      }\n    }\n\n    resetHandler(e) {\n      e.preventDefault();\n\n      if (!this.inputWrapper.clearButton.classList.contains('e-clear-icon-hide')) {\n        this.clear(e);\n      }\n\n      this.isInteract = true;\n      this.raiseChangeEvent(e);\n    } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    clear(event) {\n      this.setProperties({\n        value: null\n      }, true);\n      this.setElementValue('');\n      this.hiddenInput.value = '';\n      const formElement = closest(this.element, 'form');\n\n      if (formElement) {\n        const element = this.element.nextElementSibling;\n        const keyupEvent = document.createEvent('KeyboardEvent');\n        keyupEvent.initEvent('keyup', false, true);\n        element.dispatchEvent(keyupEvent);\n      }\n    }\n\n    resetFormHandler() {\n      if (this.element.tagName === 'EJS-NUMERICTEXTBOX') {\n        this.updateValue(null);\n      } else {\n        this.updateValue(this.inputEleValue);\n      }\n    }\n\n    setSpinButton() {\n      if (!isNullOrUndefined(this.spinDown)) {\n        attributes(this.spinDown, {\n          'title': this.l10n.getConstant('decrementTitle'),\n          'aria-label': this.l10n.getConstant('decrementTitle')\n        });\n      }\n\n      if (!isNullOrUndefined(this.spinUp)) {\n        attributes(this.spinUp, {\n          'title': this.l10n.getConstant('incrementTitle'),\n          'aria-label': this.l10n.getConstant('incrementTitle')\n        });\n      }\n    }\n\n    wireEvents() {\n      EventHandler.add(this.element, 'focus', this.focusHandler, this);\n      EventHandler.add(this.element, 'blur', this.focusOutHandler, this);\n      EventHandler.add(this.element, 'keydown', this.keyDownHandler, this);\n      EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n      EventHandler.add(this.element, 'input', this.inputHandler, this);\n      EventHandler.add(this.element, 'keypress', this.keyPressHandler, this);\n      EventHandler.add(this.element, 'change', this.changeHandler, this);\n      EventHandler.add(this.element, 'paste', this.pasteHandler, this);\n\n      if (this.enabled) {\n        this.bindClearEvent();\n\n        if (this.formEle) {\n          EventHandler.add(this.formEle, 'reset', this.resetFormHandler, this);\n        }\n      }\n    }\n\n    wireSpinBtnEvents() {\n      /* bind spin button events */\n      EventHandler.add(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner, this);\n      EventHandler.add(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner, this);\n      EventHandler.add(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner, this);\n      EventHandler.add(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner, this);\n      EventHandler.add(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);\n      EventHandler.add(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);\n    }\n\n    unwireEvents() {\n      EventHandler.remove(this.element, 'focus', this.focusHandler);\n      EventHandler.remove(this.element, 'blur', this.focusOutHandler);\n      EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n      EventHandler.remove(this.element, 'input', this.inputHandler);\n      EventHandler.remove(this.element, 'keydown', this.keyDownHandler);\n      EventHandler.remove(this.element, 'keypress', this.keyPressHandler);\n      EventHandler.remove(this.element, 'change', this.changeHandler);\n      EventHandler.remove(this.element, 'paste', this.pasteHandler);\n\n      if (this.formEle) {\n        EventHandler.remove(this.formEle, 'reset', this.resetFormHandler);\n      }\n    }\n\n    unwireSpinBtnEvents() {\n      /* unbind spin button events */\n      EventHandler.remove(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner);\n      EventHandler.remove(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner);\n      EventHandler.remove(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner);\n      EventHandler.remove(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner);\n      EventHandler.remove(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner);\n      EventHandler.remove(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner);\n    }\n\n    changeHandler(event) {\n      event.stopPropagation();\n\n      if (!this.element.value.length) {\n        this.setProperties({\n          value: null\n        }, true);\n      }\n\n      const parsedInput = this.instance.getNumberParser({\n        format: 'n'\n      })(this.element.value);\n      this.updateValue(parsedInput, event);\n    }\n\n    raiseChangeEvent(event) {\n      if (this.prevValue !== this.value) {\n        const eventArgs = {};\n        this.changeEventArgs = {\n          value: this.value,\n          previousValue: this.prevValue,\n          isInteracted: this.isInteract,\n          isInteraction: this.isInteract,\n          event: event\n        };\n\n        if (event) {\n          this.changeEventArgs.event = event;\n        }\n\n        if (this.changeEventArgs.event === undefined) {\n          this.changeEventArgs.isInteracted = false;\n          this.changeEventArgs.isInteraction = false;\n        }\n\n        merge(eventArgs, this.changeEventArgs);\n        this.prevValue = this.value;\n        this.isInteract = false;\n        this.elementPrevValue = this.element.value;\n        this.preventChange = false;\n        this.trigger('change', eventArgs);\n      }\n    }\n\n    pasteHandler() {\n      if (!this.enabled || this.readonly) {\n        return;\n      }\n\n      const beforeUpdate = this.element.value;\n      setTimeout(() => {\n        if (!this.numericRegex().test(this.element.value)) {\n          this.setElementValue(beforeUpdate);\n        }\n      });\n    }\n\n    preventHandler() {\n      const iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n      setTimeout(() => {\n        if (this.element.selectionStart > 0) {\n          const currentPos = this.element.selectionStart;\n          const prevPos = this.element.selectionStart - 1;\n          const start = 0;\n          const valArray = this.element.value.split('');\n          const numericObject = getNumericObject(this.locale);\n          const decimalSeparator = getValue('decimal', numericObject);\n          const ignoreKeyCode = decimalSeparator.charCodeAt(0);\n\n          if (this.element.value[prevPos] === ' ' && this.element.selectionStart > 0 && !iOS) {\n            if (isNullOrUndefined(this.prevVal)) {\n              this.element.value = this.element.value.trim();\n            } else if (prevPos !== 0) {\n              this.element.value = this.prevVal;\n            } else if (prevPos === 0) {\n              this.element.value = this.element.value.trim();\n            }\n\n            this.element.setSelectionRange(prevPos, prevPos);\n          } else if (isNaN(parseFloat(this.element.value[this.element.selectionStart - 1])) && this.element.value[this.element.selectionStart - 1].charCodeAt(0) !== 45) {\n            if (valArray.indexOf(this.element.value[this.element.selectionStart - 1]) !== valArray.lastIndexOf(this.element.value[this.element.selectionStart - 1]) && this.element.value[this.element.selectionStart - 1].charCodeAt(0) === ignoreKeyCode || this.element.value[this.element.selectionStart - 1].charCodeAt(0) !== ignoreKeyCode) {\n              this.element.value = this.element.value.substring(0, prevPos) + this.element.value.substring(currentPos, this.element.value.length);\n              this.element.setSelectionRange(prevPos, prevPos);\n\n              if (isNaN(parseFloat(this.element.value[this.element.selectionStart - 1])) && this.element.selectionStart > 0 && this.element.value.length) {\n                this.preventHandler();\n              }\n            }\n          } else if (isNaN(parseFloat(this.element.value[this.element.selectionStart - 2])) && this.element.selectionStart > 1 && this.element.value[this.element.selectionStart - 2].charCodeAt(0) !== 45) {\n            if (valArray.indexOf(this.element.value[this.element.selectionStart - 2]) !== valArray.lastIndexOf(this.element.value[this.element.selectionStart - 2]) && this.element.value[this.element.selectionStart - 2].charCodeAt(0) === ignoreKeyCode || this.element.value[this.element.selectionStart - 2].charCodeAt(0) !== ignoreKeyCode) {\n              this.element.setSelectionRange(prevPos, prevPos);\n              this.nextEle = this.element.value[this.element.selectionStart];\n              this.cursorPosChanged = true;\n              this.preventHandler();\n            }\n          }\n\n          if (this.cursorPosChanged === true && this.element.value[this.element.selectionStart] === this.nextEle && isNaN(parseFloat(this.element.value[this.element.selectionStart - 1]))) {\n            this.element.setSelectionRange(this.element.selectionStart + 1, this.element.selectionStart + 1);\n            this.cursorPosChanged = false;\n            this.nextEle = null;\n          }\n\n          if (this.element.value.trim() === '') {\n            this.element.setSelectionRange(start, start);\n          }\n\n          if (this.element.selectionStart > 0) {\n            if (this.element.value[this.element.selectionStart - 1].charCodeAt(0) === 45 && this.element.selectionStart > 1) {\n              if (isNullOrUndefined(this.prevVal)) {\n                // eslint-disable-next-line no-self-assign\n                this.element.value = this.element.value;\n              } else {\n                this.element.value = this.prevVal;\n              }\n\n              this.element.setSelectionRange(this.element.selectionStart, this.element.selectionStart);\n            }\n          }\n\n          this.prevVal = this.element.value;\n        }\n      });\n    }\n\n    keyUpHandler() {\n      if (!this.enabled || this.readonly) {\n        return;\n      }\n\n      const iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n\n      if (!iOS && Browser.isDevice) {\n        this.preventHandler();\n      }\n\n      let parseValue = this.instance.getNumberParser({\n        format: 'n'\n      })(this.element.value);\n      parseValue = parseValue === null || isNaN(parseValue) ? null : parseValue;\n      this.hiddenInput.value = parseValue || parseValue === 0 ? parseValue.toString() : null;\n      const formElement = closest(this.element, 'form');\n\n      if (formElement) {\n        const element = this.element.nextElementSibling;\n        const keyupEvent = document.createEvent('KeyboardEvent');\n        keyupEvent.initEvent('keyup', false, true);\n        element.dispatchEvent(keyupEvent);\n      }\n    }\n\n    inputHandler(event) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-this-alias\n      const numerictextboxObj = this;\n\n      if (!this.enabled || this.readonly) {\n        return;\n      }\n\n      const iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\n      const fireFox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n\n      if ((fireFox || iOS) && Browser.isDevice) {\n        this.preventHandler();\n      }\n      /* istanbul ignore next */\n\n\n      if (this.isAngular && this.element.value !== getValue('decimal', getNumericObject(this.locale)) && this.element.value !== getValue('minusSign', getNumericObject(this.locale))) {\n        let parsedValue = this.instance.getNumberParser({\n          format: 'n'\n        })(this.element.value);\n        parsedValue = isNaN(parsedValue) ? null : parsedValue;\n        numerictextboxObj.localChange({\n          value: parsedValue\n        });\n        this.preventChange = true;\n      }\n\n      if (this.isVue) {\n        const current = this.instance.getNumberParser({\n          format: 'n'\n        })(this.element.value);\n        const previous = this.instance.getNumberParser({\n          format: 'n'\n        })(this.elementPrevValue);\n        const eventArgs = {\n          event: event,\n          value: current === null || isNaN(current) ? null : current,\n          previousValue: previous === null || isNaN(previous) ? null : previous\n        };\n        this.preventChange = true;\n        this.elementPrevValue = this.element.value;\n        this.trigger('input', eventArgs);\n      }\n    }\n\n    keyDownHandler(event) {\n      if (!this.readonly) {\n        switch (event.keyCode) {\n          case 38:\n            event.preventDefault();\n            this.action(INCREMENT, event);\n            break;\n\n          case 40:\n            event.preventDefault();\n            this.action(DECREMENT, event);\n            break;\n\n          default:\n            break;\n        }\n      }\n    }\n\n    performAction(value, step, operation) {\n      if (value === null || isNaN(value)) {\n        value = 0;\n      }\n\n      let updatedValue = operation === INCREMENT ? value + step : value - step;\n      updatedValue = this.correctRounding(value, step, updatedValue);\n      return this.strictMode ? this.trimValue(updatedValue) : updatedValue;\n    }\n\n    correctRounding(value, step, result) {\n      const floatExp = new RegExp('[,.](.*)');\n      const floatValue = floatExp.test(value.toString());\n      const floatStep = floatExp.test(step.toString());\n\n      if (floatValue || floatStep) {\n        const valueCount = floatValue ? floatExp.exec(value.toString())[0].length : 0;\n        const stepCount = floatStep ? floatExp.exec(step.toString())[0].length : 0;\n        const max = Math.max(valueCount, stepCount);\n        return value = this.roundValue(result, max);\n      }\n\n      return result;\n    }\n\n    roundValue(result, precision) {\n      precision = precision || 0;\n      const divide = Math.pow(10, precision);\n      return result *= divide, result = Math.round(result) / divide;\n    }\n\n    updateValue(value, event) {\n      if (event) {\n        this.isInteract = true;\n      }\n\n      if (value !== null && !isNaN(value)) {\n        if (this.decimals) {\n          value = this.roundNumber(value, this.decimals);\n        }\n      }\n\n      this.changeValue(value === null || isNaN(value) ? null : this.strictMode ? this.trimValue(value) : value);\n      /* istanbul ignore next */\n\n      if (!this.isDynamicChange) {\n        this.raiseChangeEvent(event);\n      }\n    }\n\n    updateCurrency(prop, propVal) {\n      setValue(prop, propVal, this.cultureInfo);\n      this.updateValue(this.value);\n    }\n\n    changeValue(value) {\n      if (!(value || value === 0)) {\n        value = null;\n        this.setProperties({\n          value: value\n        }, true);\n      } else {\n        const numberOfDecimals = this.getNumberOfDecimals(value);\n        this.setProperties({\n          value: this.roundNumber(value, numberOfDecimals)\n        }, true);\n      }\n\n      this.modifyText();\n\n      if (!this.strictMode) {\n        this.validateState();\n      }\n    }\n\n    modifyText() {\n      if (this.value || this.value === 0) {\n        const value = this.formatNumber();\n        const elementValue = this.isFocused ? value : this.instance.getNumberFormat(this.cultureInfo)(this.value);\n        this.setElementValue(elementValue);\n        attributes(this.element, {\n          'aria-valuenow': value\n        });\n        this.hiddenInput.value = this.value.toString();\n\n        if (this.value !== null && this.serverDecimalSeparator) {\n          this.hiddenInput.value = this.hiddenInput.value.replace('.', this.serverDecimalSeparator);\n        }\n      } else {\n        this.setElementValue('');\n        this.element.removeAttribute('aria-valuenow');\n        this.hiddenInput.value = null;\n      }\n    }\n\n    setElementValue(val, element) {\n      Input.setValue(val, element ? element : this.element, this.floatLabelType, this.showClearButton);\n    }\n\n    validateState() {\n      this.isValidState = true;\n\n      if (this.value || this.value === 0) {\n        this.isValidState = !(this.value > this.max || this.value < this.min);\n      }\n\n      this.checkErrorClass();\n    }\n\n    getNumberOfDecimals(value) {\n      let numberOfDecimals; // eslint-disable-next-line no-useless-escape\n\n      const EXPREGEXP = new RegExp('[eE][\\-+]?([0-9]+)');\n      let valueString = value.toString();\n\n      if (EXPREGEXP.test(valueString)) {\n        const result = EXPREGEXP.exec(valueString);\n\n        if (!isNullOrUndefined(result)) {\n          valueString = value.toFixed(Math.min(parseInt(result[1], 10), 20));\n        }\n      }\n\n      const decimalPart = valueString.split('.')[1];\n      numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;\n\n      if (this.decimals !== null) {\n        numberOfDecimals = numberOfDecimals < this.decimals ? numberOfDecimals : this.decimals;\n      }\n\n      return numberOfDecimals;\n    }\n\n    formatNumber() {\n      const numberOfDecimals = this.getNumberOfDecimals(this.value);\n      return this.instance.getNumberFormat({\n        maximumFractionDigits: numberOfDecimals,\n        minimumFractionDigits: numberOfDecimals,\n        useGrouping: false\n      })(this.value);\n    }\n\n    trimValue(value) {\n      if (value > this.max) {\n        return this.max;\n      }\n\n      if (value < this.min) {\n        return this.min;\n      }\n\n      return value;\n    }\n\n    roundNumber(value, precision) {\n      let result = value;\n      const decimals = precision || 0;\n      const result1 = result.toString().split('e');\n      result = Math.round(Number(result1[0] + 'e' + (result1[1] ? Number(result1[1]) + decimals : decimals)));\n      const result2 = result.toString().split('e');\n      result = Number(result2[0] + 'e' + (result2[1] ? Number(result2[1]) - decimals : -decimals));\n      return Number(result.toFixed(decimals));\n    }\n\n    cancelEvent(event) {\n      event.preventDefault();\n      return false;\n    }\n\n    keyPressHandler(event) {\n      if (!this.enabled || this.readonly) {\n        return true;\n      }\n\n      if (!Browser.isDevice && Browser.info.version === '11.0' && event.keyCode === 13) {\n        const parsedInput = this.instance.getNumberParser({\n          format: 'n'\n        })(this.element.value);\n        this.updateValue(parsedInput, event);\n        return true;\n      }\n\n      if (event.which === 0 || event.metaKey || event.ctrlKey || event.keyCode === 8 || event.keyCode === 13) {\n        return true;\n      }\n\n      const currentChar = String.fromCharCode(event.which);\n      let text = this.element.value;\n      text = text.substring(0, this.element.selectionStart) + currentChar + text.substring(this.element.selectionEnd);\n\n      if (!this.numericRegex().test(text)) {\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n      } else {\n        return true;\n      }\n    }\n\n    numericRegex() {\n      const numericObject = getNumericObject(this.locale);\n      let decimalSeparator = getValue('decimal', numericObject);\n      let fractionRule = '*';\n\n      if (decimalSeparator === DECIMALSEPARATOR) {\n        decimalSeparator = '\\\\' + decimalSeparator;\n      }\n\n      if (this.decimals === 0 && this.validateDecimalOnType) {\n        return INTREGEXP;\n      }\n\n      if (this.decimals && this.validateDecimalOnType) {\n        fractionRule = '{0,' + this.decimals + '}';\n      }\n\n      return new RegExp('^(-)?(((\\\\d+(' + decimalSeparator + '\\\\d' + fractionRule + ')?)|(' + decimalSeparator + '\\\\d' + fractionRule + ')))?$');\n    }\n\n    mouseWheel(event) {\n      event.preventDefault();\n      let delta; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      const rawEvent = event;\n\n      if (rawEvent.wheelDelta) {\n        delta = rawEvent.wheelDelta / 120;\n      } else if (rawEvent.detail) {\n        delta = -rawEvent.detail / 3;\n      }\n\n      if (delta > 0) {\n        this.action(INCREMENT, event);\n      } else if (delta < 0) {\n        this.action(DECREMENT, event);\n      }\n\n      this.cancelEvent(event);\n    }\n\n    focusHandler(event) {\n      this.focusEventArgs = {\n        event: event,\n        value: this.value,\n        container: this.container\n      };\n      this.trigger('focus', this.focusEventArgs);\n\n      if (!this.enabled || this.readonly) {\n        return;\n      }\n\n      this.isFocused = true;\n      removeClass([this.container], ERROR);\n      this.prevValue = this.value;\n\n      if (this.value || this.value === 0) {\n        const formatValue = this.formatNumber();\n        this.setElementValue(formatValue);\n\n        if (!this.isPrevFocused) {\n          if (!Browser.isDevice && Browser.info.version === '11.0') {\n            this.element.setSelectionRange(0, formatValue.length);\n          } else {\n            const delay = Browser.isDevice && Browser.isIos ? 600 : 0;\n            setTimeout(() => {\n              this.element.setSelectionRange(0, formatValue.length);\n            }, delay);\n          }\n        }\n      }\n\n      if (!Browser.isDevice) {\n        EventHandler.add(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel, this);\n      }\n    }\n\n    focusOutHandler(event) {\n      this.blurEventArgs = {\n        event: event,\n        value: this.value,\n        container: this.container\n      };\n      this.trigger('blur', this.blurEventArgs);\n\n      if (!this.enabled || this.readonly) {\n        return;\n      }\n\n      if (this.isPrevFocused) {\n        event.preventDefault();\n\n        if (Browser.isDevice) {\n          const value = this.element.value;\n          this.element.focus();\n          this.isPrevFocused = false;\n          const ele = this.element;\n          setTimeout(() => {\n            this.setElementValue(value, ele);\n          }, 200);\n        }\n      } else {\n        this.isFocused = false;\n\n        if (!this.element.value.length) {\n          this.setProperties({\n            value: null\n          }, true);\n        }\n\n        const parsedInput = this.instance.getNumberParser({\n          format: 'n'\n        })(this.element.value);\n        this.updateValue(parsedInput);\n\n        if (!Browser.isDevice) {\n          EventHandler.remove(this.element, 'mousewheel DOMMouseScroll', this.mouseWheel);\n        }\n      }\n\n      const formElement = closest(this.element, 'form');\n\n      if (formElement) {\n        const element = this.element.nextElementSibling;\n        const focusEvent = document.createEvent('FocusEvent');\n        focusEvent.initEvent('focusout', false, true);\n        element.dispatchEvent(focusEvent);\n      }\n    }\n\n    mouseDownOnSpinner(event) {\n      if (this.isFocused) {\n        this.isPrevFocused = true;\n        event.preventDefault();\n      }\n\n      if (!this.getElementData(event)) {\n        return;\n      } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n      const result = this.getElementData(event);\n      const target = event.currentTarget;\n      const action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;\n      EventHandler.add(target, 'mouseleave', this.mouseUpClick, this);\n      this.timeOut = setInterval(() => {\n        this.isCalled = true;\n        this.action(action, event);\n      }, 150);\n      EventHandler.add(document, 'mouseup', this.mouseUpClick, this);\n    }\n\n    touchMoveOnSpinner(event) {\n      let target;\n\n      if (event.type === \"touchmove\") {\n        let touchEvent = event.touches;\n        target = touchEvent.length && document.elementFromPoint(touchEvent[0].pageX, touchEvent[0].pageY);\n      } else {\n        target = document.elementFromPoint(event.clientX, event.clientY);\n      }\n\n      if (!target.classList.contains(SPINICON)) {\n        clearInterval(this.timeOut);\n      }\n    }\n\n    mouseUpOnSpinner(event) {\n      if (this.isPrevFocused) {\n        this.element.focus();\n\n        if (!Browser.isDevice) {\n          this.isPrevFocused = false;\n        }\n      }\n\n      if (!Browser.isDevice) {\n        event.preventDefault();\n      }\n\n      if (!this.getElementData(event)) {\n        return;\n      }\n\n      const target = event.currentTarget;\n      const action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;\n      EventHandler.remove(target, 'mouseleave', this.mouseUpClick);\n\n      if (!this.isCalled) {\n        this.action(action, event);\n      }\n\n      this.isCalled = false;\n      EventHandler.remove(document, 'mouseup', this.mouseUpClick);\n      const formElement = closest(this.element, 'form');\n\n      if (formElement) {\n        const element = this.element.nextElementSibling;\n        const keyupEvent = document.createEvent('KeyboardEvent');\n        keyupEvent.initEvent('keyup', false, true);\n        element.dispatchEvent(keyupEvent);\n      }\n    }\n\n    getElementData(event) {\n      if (event.which && event.which === 3 || event.button && event.button === 2 || !this.enabled || this.readonly) {\n        return false;\n      }\n\n      clearInterval(this.timeOut);\n      return true;\n    }\n\n    floatLabelTypeUpdate() {\n      Input.removeFloating(this.inputWrapper);\n      const hiddenInput = this.hiddenInput;\n      this.hiddenInput.remove();\n      Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);\n      this.container.insertBefore(hiddenInput, this.container.childNodes[1]);\n    }\n\n    mouseUpClick(event) {\n      event.stopPropagation();\n      clearInterval(this.timeOut);\n      this.isCalled = false;\n      EventHandler.remove(this.spinUp, 'mouseleave', this.mouseUpClick);\n      EventHandler.remove(this.spinDown, 'mouseleave', this.mouseUpClick);\n    }\n    /**\n     * Increments the NumericTextBox value with the specified step value.\n     *\n     * @param {number} step - Specifies the value used to increment the NumericTextBox value.\n     * if its not given then numeric value will be incremented based on the step property value.\n     * @returns {void}\n     */\n\n\n    increment(step = this.step) {\n      this.isInteract = false;\n      this.changeValue(this.performAction(this.value, step, INCREMENT));\n      this.raiseChangeEvent();\n    }\n    /**\n     * Decrements the NumericTextBox value with specified step value.\n     *\n     * @param {number} step - Specifies the value used to decrement the NumericTextBox value.\n     * if its not given then numeric value will be decremented based on the step property value.\n     * @returns {void}\n     */\n\n\n    decrement(step = this.step) {\n      this.isInteract = false;\n      this.changeValue(this.performAction(this.value, step, DECREMENT));\n      this.raiseChangeEvent();\n    }\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers.\n     * Also it maintains the initial input element from the DOM.\n     *\n     * @method destroy\n     * @returns {void}\n     */\n\n\n    destroy() {\n      this.unwireEvents();\n\n      if (!(isBlazor() && this.isServerRendered)) {\n        detach(this.hiddenInput);\n\n        if (this.showSpinButton) {\n          this.unwireSpinBtnEvents();\n          detach(this.spinUp);\n          detach(this.spinDown);\n        }\n\n        const attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly', 'autocorrect', 'aria-disabled', 'aria-placeholder', 'autocapitalize', 'spellcheck', 'aria-autocomplete', 'tabindex', 'aria-valuemin', 'aria-valuemax', 'aria-live', 'aria-valuenow', 'aria-invalid'];\n\n        for (let i = 0; i < attrArray.length; i++) {\n          this.element.removeAttribute(attrArray[i]);\n        }\n\n        this.element.classList.remove('e-input');\n        this.container.insertAdjacentElement('afterend', this.element);\n        detach(this.container);\n        super.destroy();\n      }\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-returns */\n\n    /**\n     * Returns the value of NumericTextBox with the format applied to the NumericTextBox.\n     *\n     */\n\n\n    getText() {\n      return this.element.value;\n    }\n    /* eslint-enable valid-jsdoc, jsdoc/require-returns */\n\n    /**\n     * Sets the focus to widget for interaction.\n     *\n     * @returns {void}\n     */\n\n\n    focusIn() {\n      if (document.activeElement !== this.element && this.enabled) {\n        this.element.focus();\n        addClass([this.container], [NUMERIC_FOCUS]);\n      }\n    }\n    /**\n     * Remove the focus from widget, if the widget is in focus state.\n     *\n     * @returns {void}\n     */\n\n\n    focusOut() {\n      if (document.activeElement === this.element && this.enabled) {\n        this.element.blur();\n        removeClass([this.container], [NUMERIC_FOCUS]);\n      }\n    }\n    /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n\n    /**\n     * Gets the properties to be maintained in the persisted state.\n     *\n     * @returns {string}\n     */\n\n\n    getPersistData() {\n      const keyEntity = ['value'];\n      return this.addOnPersist(keyEntity);\n    }\n    /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n\n    /**\n     * Calls internally if any of the property value is changed.\n     *\n     * @param {NumericTextBoxModel} newProp - Returns the dynamic property value of the component.\n     * @param {NumericTextBoxModel} oldProp - Returns the previous property value of the component.\n     * @returns {void}\n     * @private\n     */\n\n\n    onPropertyChanged(newProp, oldProp) {\n      for (const prop of Object.keys(newProp)) {\n        switch (prop) {\n          case 'width':\n            this.setElementWidth(newProp.width);\n            break;\n\n          case 'cssClass':\n            this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n            break;\n\n          case 'enabled':\n            Input.setEnabled(newProp.enabled, this.element);\n            break;\n\n          case 'enableRtl':\n            Input.setEnableRtl(newProp.enableRtl, [this.container]);\n            break;\n\n          case 'readonly':\n            Input.setReadonly(newProp.readonly, this.element);\n\n            if (this.readonly) {\n              attributes(this.element, {\n                'aria-readonly': 'true'\n              });\n            } else {\n              this.element.removeAttribute('aria-readonly');\n            }\n\n            break;\n\n          case 'htmlAttributes':\n            this.updateHTMLAttrToElement();\n            this.updateHTMLAttrToWrapper();\n            this.updateDataAttribute(true);\n            this.checkAttributes(true);\n            Input.validateInputType(this.container, this.element);\n            break;\n\n          case 'placeholder':\n            Input.setPlaceholder(newProp.placeholder, this.element);\n            break;\n\n          case 'step':\n            this.step = newProp.step;\n            this.validateStep();\n            break;\n\n          case 'showSpinButton':\n            this.updateSpinButton(newProp);\n            break;\n\n          case 'showClearButton':\n            this.updateClearButton(newProp);\n            break;\n\n          case 'floatLabelType':\n            this.floatLabelType = newProp.floatLabelType;\n            this.floatLabelTypeUpdate();\n            break;\n\n          case 'value':\n            this.isDynamicChange = (this.isAngular || this.isVue) && this.preventChange;\n            this.updateValue(newProp.value);\n\n            if (this.isDynamicChange) {\n              this.preventChange = false;\n              this.isDynamicChange = false;\n            }\n\n            break;\n\n          case 'min':\n          case 'max':\n            setValue(prop, getValue(prop, newProp), this);\n            this.validateMinMax();\n            this.updateValue(this.value);\n            break;\n\n          case 'strictMode':\n            this.strictMode = newProp.strictMode;\n            this.updateValue(this.value);\n            this.validateState();\n            break;\n\n          case 'locale':\n            this.initCultureFunc();\n            this.l10n.setLocale(this.locale);\n            this.setSpinButton();\n            this.updatePlaceholder();\n            Input.setPlaceholder(this.placeholder, this.element);\n            this.updateValue(this.value);\n            break;\n\n          case 'currency':\n            {\n              const propVal = getValue(prop, newProp);\n              this.setProperties({\n                currencyCode: propVal\n              }, true);\n              this.updateCurrency(prop, propVal);\n            }\n            break;\n\n          case 'currencyCode':\n            {\n              const propValue = getValue(prop, newProp);\n              this.setProperties({\n                currency: propValue\n              }, true);\n              this.updateCurrency('currency', propValue);\n            }\n            break;\n\n          case 'format':\n            setValue(prop, getValue(prop, newProp), this);\n            this.initCultureInfo();\n            this.updateValue(this.value);\n            break;\n\n          case 'decimals':\n            this.decimals = newProp.decimals;\n            this.updateValue(this.value);\n        }\n      }\n    }\n\n    updateClearButton(newProp) {\n      if (isBlazor()) {\n        if (this.showClearButton) {\n          this.inputWrapper.clearButton = this.container.querySelector('.e-clear-icon');\n          Input.wireClearBtnEvents(this.element, this.inputWrapper.clearButton, this.inputWrapper.container);\n        }\n      } else {\n        Input.setClearButton(newProp.showClearButton, this.element, this.inputWrapper, undefined, this.createElement);\n        this.bindClearEvent();\n      }\n    }\n\n    updateSpinButton(newProp) {\n      if (isBlazor()) {\n        if (this.showSpinButton) {\n          this.spinDown = this.container.querySelector('.' + SPINDOWN);\n          this.spinUp = this.container.querySelector('.' + SPINUP);\n          this.wireSpinBtnEvents();\n        }\n      } else {\n        if (newProp.showSpinButton) {\n          this.spinBtnCreation();\n        } else {\n          detach(this.spinUp);\n          detach(this.spinDown);\n        }\n      }\n    }\n    /**\n     * Gets the component name\n     *\n     * @returns {string} Returns the component name.\n     * @private\n     */\n\n\n    getModuleName() {\n      return 'numerictextbox';\n    }\n\n  };\n\n  __decorate([Property('')], NumericTextBox.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(null)], NumericTextBox.prototype, \"value\", void 0);\n\n  __decorate([Property(-Number.MAX_VALUE)], NumericTextBox.prototype, \"min\", void 0);\n\n  __decorate([Property(Number.MAX_VALUE)], NumericTextBox.prototype, \"max\", void 0);\n\n  __decorate([Property(1)], NumericTextBox.prototype, \"step\", void 0);\n\n  __decorate([Property(null)], NumericTextBox.prototype, \"width\", void 0);\n\n  __decorate([Property(null)], NumericTextBox.prototype, \"placeholder\", void 0);\n\n  __decorate([Property({})], NumericTextBox.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property(true)], NumericTextBox.prototype, \"showSpinButton\", void 0);\n\n  __decorate([Property(false)], NumericTextBox.prototype, \"readonly\", void 0);\n\n  __decorate([Property(true)], NumericTextBox.prototype, \"enabled\", void 0);\n\n  __decorate([Property(false)], NumericTextBox.prototype, \"showClearButton\", void 0);\n\n  __decorate([Property(false)], NumericTextBox.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Property('n2')], NumericTextBox.prototype, \"format\", void 0);\n\n  __decorate([Property(null)], NumericTextBox.prototype, \"decimals\", void 0);\n\n  __decorate([Property(null)], NumericTextBox.prototype, \"currency\", void 0);\n\n  __decorate([Property(null)], NumericTextBox.prototype, \"currencyCode\", void 0);\n\n  __decorate([Property(true)], NumericTextBox.prototype, \"strictMode\", void 0);\n\n  __decorate([Property(false)], NumericTextBox.prototype, \"validateDecimalOnType\", void 0);\n\n  __decorate([Property('Never')], NumericTextBox.prototype, \"floatLabelType\", void 0);\n\n  __decorate([Event()], NumericTextBox.prototype, \"created\", void 0);\n\n  __decorate([Event()], NumericTextBox.prototype, \"destroyed\", void 0);\n\n  __decorate([Event()], NumericTextBox.prototype, \"change\", void 0);\n\n  __decorate([Event()], NumericTextBox.prototype, \"focus\", void 0);\n\n  __decorate([Event()], NumericTextBox.prototype, \"blur\", void 0);\n\n  NumericTextBox = __decorate([NotifyPropertyChanges], NumericTextBox);\n  /**\n   * NumericTextBox modules\n   */\n\n  /* eslint-disable valid-jsdoc, jsdoc/require-jsdoc, jsdoc/require-returns, jsdoc/require-param */\n\n  /**\n   * MaskedTextBox base module\n   */\n\n  return NumericTextBox;\n})();\nconst ERROR$1 = 'e-error';\nconst INPUTGROUP = 'e-input-group';\nconst FLOATINPUT = 'e-float-input';\nconst UTILMASK = 'e-utility-mask';\nconst TOPLABEL = 'e-label-top';\nconst BOTTOMLABEL = 'e-label-bottom';\n/**\n * @hidden\n * Built-in masking elements collection.\n */\n\nconst regularExpressions = {\n  '0': '[0-9]',\n  '9': '[0-9 ]',\n  '#': '[0-9 +-]',\n  'L': '[A-Za-z]',\n  '?': '[A-Za-z ]',\n  '&': '[^\\x7f ]+',\n  'C': '[^\\x7f]+',\n  'A': '[A-Za-z0-9]',\n  'a': '[A-Za-z0-9 ]'\n};\n/**\n * Generate required masking elements to the MaskedTextBox from user mask input.\n *\n * @hidden\n */\n\nfunction createMask() {\n  attributes(this.element, {\n    'role': 'textbox',\n    'autocomplete': 'off',\n    'autocorrect': 'off',\n    'autocapitalize': 'off',\n    'spellcheck': 'false',\n    'aria-live': 'assertive',\n    'aria-valuenow': ''\n  });\n\n  if (this.mask) {\n    const splitMask = this.mask.split(']');\n\n    for (let i = 0; i < splitMask.length; i++) {\n      if (splitMask[i][splitMask[i].length - 1] === '\\\\') {\n        splitMask[i] = splitMask[i] + ']';\n        const splitInnerMask = splitMask[i].split('[');\n\n        for (let j = 0; j < splitInnerMask.length; j++) {\n          if (splitInnerMask[j][splitInnerMask[j].length - 1] === '\\\\') {\n            splitInnerMask[j] = splitInnerMask[j] + '[';\n          }\n\n          pushIntoRegExpCollec.call(this, splitInnerMask[j]);\n        }\n      } else {\n        const splitInnerMask = splitMask[i].split('[');\n\n        if (splitInnerMask.length > 1) {\n          let chkSpace = false;\n\n          for (let j = 0; j < splitInnerMask.length; j++) {\n            if (splitInnerMask[j] === '\\\\') {\n              this.customRegExpCollec.push('[');\n              this.hiddenMask += splitInnerMask[j] + '[';\n            } else if (splitInnerMask[j] === '') {\n              chkSpace = true;\n            } else if (splitInnerMask[j] !== '' && chkSpace || j === splitInnerMask.length - 1) {\n              this.customRegExpCollec.push('[' + splitInnerMask[j] + ']');\n              this.hiddenMask += this.promptChar;\n              chkSpace = false;\n            } else {\n              pushIntoRegExpCollec.call(this, splitInnerMask[j]);\n            }\n          }\n        } else {\n          pushIntoRegExpCollec.call(this, splitInnerMask[0]);\n        }\n      }\n    }\n\n    this.escapeMaskValue = this.hiddenMask;\n    this.promptMask = this.hiddenMask.replace(/[09?LCAa#&]/g, this.promptChar);\n\n    if (!isNullOrUndefined(this.customCharacters)) {\n      for (let i = 0; i < this.promptMask.length; i++) {\n        if (!isNullOrUndefined(this.customCharacters[this.promptMask[i]])) {\n          this.promptMask = this.promptMask.replace(new RegExp(this.promptMask[i], 'g'), this.promptChar);\n        }\n      }\n    }\n\n    let escapeNumber = 0;\n\n    if (this.hiddenMask.match(new RegExp(/\\\\/))) {\n      for (let i = 0; i < this.hiddenMask.length; i++) {\n        let j = 0;\n\n        if (i >= 1) {\n          j = i;\n        }\n\n        escapeNumber = this.hiddenMask.length - this.promptMask.length;\n        j = j - escapeNumber;\n\n        if (i > 0 && this.hiddenMask[i - 1] !== '\\\\' && (this.hiddenMask[i] === '>' || this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|')) {\n          this.promptMask = this.promptMask.substring(0, j) + this.promptMask.substring(i + 1 - escapeNumber, this.promptMask.length);\n          this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue.substring(i + 1 - escapeNumber, this.escapeMaskValue.length);\n        }\n\n        if (this.hiddenMask[i] === '\\\\') {\n          this.promptMask = this.promptMask.substring(0, j) + this.hiddenMask[i + 1] + this.promptMask.substring(i + 2 - escapeNumber, this.promptMask.length);\n          this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue[i + 1] + this.escapeMaskValue.substring(i + 2 - escapeNumber, this.escapeMaskValue.length);\n        }\n      }\n    } else {\n      this.promptMask = this.promptMask.replace(/[>|<]/g, '');\n      this.escapeMaskValue = this.hiddenMask.replace(/[>|<]/g, '');\n    }\n\n    attributes(this.element, {\n      'aria-invalid': 'false'\n    });\n  }\n}\n/**\n * Apply mask ability with masking elements to the MaskedTextBox.\n *\n * @hidden\n */\n\n\nfunction applyMask() {\n  setElementValue.call(this, this.promptMask);\n  setMaskValue.call(this, this.value);\n}\n/**\n * To wire required events to the MaskedTextBox.\n *\n * @hidden\n */\n\n\nfunction wireEvents() {\n  EventHandler.add(this.element, 'keydown', maskInputKeyDownHandler, this);\n  EventHandler.add(this.element, 'keypress', maskInputKeyPressHandler, this);\n  EventHandler.add(this.element, 'keyup', maskInputKeyUpHandler, this);\n  EventHandler.add(this.element, 'input', maskInputHandler, this);\n  EventHandler.add(this.element, 'focus', maskInputFocusHandler, this);\n  EventHandler.add(this.element, 'blur', maskInputBlurHandler, this);\n  EventHandler.add(this.element, 'paste', maskInputPasteHandler, this);\n  EventHandler.add(this.element, 'cut', maskInputCutHandler, this);\n  EventHandler.add(this.element, 'drop', maskInputDropHandler, this);\n  EventHandler.add(this.element, 'mousedown', maskInputMouseDownHandler, this);\n  EventHandler.add(this.element, 'mouseup', maskInputMouseUpHandler, this);\n\n  if (this.enabled) {\n    bindClearEvent.call(this);\n\n    if (this.formElement) {\n      EventHandler.add(this.formElement, 'reset', resetFormHandler, this);\n    }\n  }\n}\n/**\n * To unwire events attached to the MaskedTextBox.\n *\n * @hidden\n */\n\n\nfunction unwireEvents() {\n  EventHandler.remove(this.element, 'keydown', maskInputKeyDownHandler);\n  EventHandler.remove(this.element, 'keypress', maskInputKeyPressHandler);\n  EventHandler.remove(this.element, 'keyup', maskInputKeyUpHandler);\n  EventHandler.remove(this.element, 'input', maskInputHandler);\n  EventHandler.remove(this.element, 'focus', maskInputFocusHandler);\n  EventHandler.remove(this.element, 'blur', maskInputBlurHandler);\n  EventHandler.remove(this.element, 'paste', maskInputPasteHandler);\n  EventHandler.remove(this.element, 'cut', maskInputCutHandler);\n  EventHandler.remove(this.element, 'mousedown', maskInputMouseDownHandler);\n  EventHandler.remove(this.element, 'mouseup', maskInputMouseUpHandler);\n\n  if (this.formElement) {\n    EventHandler.remove(this.formElement, 'reset', resetFormHandler);\n  }\n}\n/**\n * To bind required events to the MaskedTextBox clearButton.\n *\n * @hidden\n */\n\n\nfunction bindClearEvent() {\n  if (this.showClearButton) {\n    EventHandler.add(this.inputObj.clearButton, 'mousedown touchstart', resetHandler, this);\n  }\n}\n\nfunction resetHandler(e) {\n  e.preventDefault();\n\n  if (!this.inputObj.clearButton.classList.contains('e-clear-icon-hide')) {\n    clear.call(this, e);\n    this.value = '';\n  }\n}\n\nfunction clear(event) {\n  const value = this.element.value;\n  setElementValue.call(this, this.promptMask);\n  this.redoCollec.unshift({\n    value: this.promptMask,\n    startIndex: this.element.selectionStart,\n    endIndex: this.element.selectionEnd\n  });\n  triggerMaskChangeEvent.call(this, event, value);\n  this.element.setSelectionRange(0, 0);\n}\n\nfunction resetFormHandler() {\n  if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {\n    setElementValue.call(this, this.promptMask);\n  } else {\n    this.value = this.initInputValue;\n  }\n}\n/**\n * To get masked value from the MaskedTextBox.\n *\n * @hidden\n */\n\n\nfunction unstrippedValue(element) {\n  return element.value;\n}\n/**\n * To extract raw value from the MaskedTextBox.\n *\n * @hidden\n */\n\n\nfunction strippedValue(element, maskValues) {\n  let value = '';\n  let k = 0;\n  let checkMask = false;\n  const maskValue = !isNullOrUndefined(maskValues) ? maskValues : !isNullOrUndefined(element) && !isNullOrUndefined(this) ? element.value : maskValues;\n\n  if (maskValue !== this.promptMask) {\n    for (let i = 0; i < this.customRegExpCollec.length; i++) {\n      if (checkMask) {\n        checkMask = false;\n      }\n\n      if (this.customRegExpCollec[k] === '>' || this.customRegExpCollec[k] === '<' || this.customRegExpCollec[k] === '|' || this.customRegExpCollec[k] === '\\\\') {\n        --i;\n        checkMask = true;\n      }\n\n      if (!checkMask) {\n        if (maskValue[i] !== this.promptChar && !isNullOrUndefined(this.customRegExpCollec[k]) && (this._callPasteHandler || !isNullOrUndefined(this.regExpCollec[this.customRegExpCollec[k]]) || this.customRegExpCollec[k].length > 2 && this.customRegExpCollec[k][0] === '[' && this.customRegExpCollec[k][this.customRegExpCollec[k].length - 1] === ']' || !isNullOrUndefined(this.customCharacters) && !isNullOrUndefined(this.customCharacters[this.customRegExpCollec[k]])) && maskValue !== '') {\n          value += maskValue[i];\n        }\n      }\n\n      ++k;\n    }\n  }\n\n  if (this.mask === null || this.mask === '' && this.value !== undefined) {\n    value = maskValue;\n  }\n\n  return value;\n}\n\nfunction pushIntoRegExpCollec(value) {\n  for (let k = 0; k < value.length; k++) {\n    this.hiddenMask += value[k];\n\n    if (value[k] !== '\\\\') {\n      this.customRegExpCollec.push(value[k]);\n    }\n  }\n}\n\nfunction maskInputMouseDownHandler() {\n  this.isClicked = true;\n}\n\nfunction maskInputMouseUpHandler() {\n  this.isClicked = false;\n}\n\nfunction maskInputFocusHandler(event) {\n  const inputElement = this.element;\n  let startIndex = 0;\n  const modelValue = strippedValue.call(this, inputElement);\n  let toAllowForward = false;\n  let toAllowBackward = false;\n  let eventArgs = {\n    selectionStart: inputElement.selectionStart,\n    event: event,\n    value: this.value,\n    maskedValue: inputElement.value,\n    container: this.inputObj.container,\n    selectionEnd: inputElement.selectionEnd\n  };\n\n  if (!this.isClicked) {\n    triggerFocus.call(this, eventArgs, inputElement);\n  }\n\n  if (this.mask) {\n    if (!(!(modelValue === null || modelValue === '') || this.floatLabelType === 'Always' || this.placeholder === null || this.placeholder === '')) {\n      inputElement.value = this.promptMask;\n    }\n\n    setTimeout(() => {\n      if (inputElement.selectionStart === this.promptMask.length || inputElement.value[inputElement.selectionStart] === this.promptChar) {\n        toAllowForward = true;\n      } else {\n        for (let i = inputElement.selectionStart; i < this.promptMask.length; i++) {\n          if (inputElement.value[i] !== this.promptChar) {\n            if (inputElement.value[i] !== this.promptMask[i]) {\n              toAllowForward = false;\n              break;\n            }\n          } else {\n            toAllowForward = true;\n            break;\n          }\n        }\n      }\n    });\n    setTimeout(() => {\n      const backSelectionStart = inputElement.selectionStart - 1;\n\n      if (backSelectionStart === this.promptMask.length - 1 || inputElement.value[backSelectionStart] === this.promptChar) {\n        toAllowBackward = true;\n      } else {\n        for (let i = backSelectionStart; i >= 0; i--) {\n          if (inputElement.value[i] !== this.promptChar) {\n            if (inputElement.value[i] !== this.promptMask[i]) {\n              toAllowBackward = false;\n              break;\n            }\n          } else {\n            toAllowBackward = true;\n            break;\n          }\n        }\n      }\n    });\n\n    if (this.isClicked || this.floatLabelType !== 'Always' && (modelValue === null || modelValue === '') && this.placeholder !== null && this.placeholder !== '') {\n      for (startIndex = 0; startIndex < this.promptMask.length; startIndex++) {\n        if (inputElement.value[startIndex] === this.promptChar) {\n          setTimeout(() => {\n            if (toAllowForward || toAllowBackward) {\n              inputElement.selectionEnd = startIndex;\n              inputElement.selectionStart = startIndex;\n            }\n\n            eventArgs = {\n              selectionStart: inputElement.selectionStart,\n              event: event,\n              value: this.value,\n              maskedValue: inputElement.value,\n              container: this.inputObj.container,\n              selectionEnd: inputElement.selectionEnd\n            };\n            triggerFocus.call(this, eventArgs, inputElement);\n          });\n          break;\n        }\n      }\n\n      if (isNullOrUndefined(inputElement.value.match(this.promptChar))) {\n        eventArgs = {\n          selectionStart: inputElement.selectionStart,\n          event: event,\n          value: this.value,\n          maskedValue: inputElement.value,\n          container: this.inputObj.container,\n          selectionEnd: inputElement.selectionEnd\n        };\n        triggerFocus.call(this, eventArgs, inputElement);\n      }\n\n      this.isClicked = false;\n    }\n  }\n}\n\nfunction triggerFocus(eventArgs, inputElement) {\n  this.trigger('focus', eventArgs, eventArgs => {\n    inputElement.selectionStart = eventArgs.selectionStart;\n    inputElement.selectionEnd = eventArgs.selectionEnd;\n  });\n}\n\nfunction maskInputBlurHandler(event) {\n  this.blurEventArgs = {\n    event: event,\n    value: this.value,\n    maskedValue: this.element.value,\n    container: this.inputObj.container\n  };\n  this.trigger('blur', this.blurEventArgs);\n\n  if (this.mask) {\n    this.isFocus = false;\n\n    if (this.placeholder && this.element.value === this.promptMask && this.floatLabelType !== 'Always') {\n      setElementValue.call(this, '');\n      const labelElement = this.element.parentNode.querySelector('.e-float-text');\n\n      if (this.floatLabelType === 'Auto' && !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL)) {\n        removeClass([labelElement], TOPLABEL);\n      }\n    }\n  }\n}\n\nfunction maskInputPasteHandler(event) {\n  if (this.mask && !this.readonly) {\n    const sIndex = this.element.selectionStart;\n    const eIndex = this.element.selectionEnd;\n    const oldValue = this.element.value;\n    setElementValue.call(this, '');\n    this._callPasteHandler = true;\n    setTimeout(() => {\n      let value = this.element.value.replace(/ /g, '');\n\n      if (this.redoCollec.length > 0 && this.redoCollec[0].value === this.element.value) {\n        value = strippedValue.call(this, this.element);\n      }\n\n      setElementValue.call(this, oldValue);\n      this.element.selectionStart = sIndex;\n      this.element.selectionEnd = eIndex;\n      let i = 0;\n      this.maskKeyPress = true;\n\n      do {\n        validateValue.call(this, value[i], false, null);\n        ++i;\n      } while (i < value.length);\n\n      this.maskKeyPress = false;\n      this._callPasteHandler = false;\n\n      if (this.element.value === oldValue) {\n        let i = 0;\n        this.maskKeyPress = true;\n\n        do {\n          validateValue.call(this, value[i], false, null);\n          ++i;\n        } while (i < value.length);\n\n        this.maskKeyPress = false;\n      } else {\n        triggerMaskChangeEvent.call(this, event, oldValue);\n      }\n    }, 1);\n  }\n}\n\nfunction maskInputCutHandler(event) {\n  if (this.mask && !this.readonly) {\n    const preValue = this.element.value;\n    const sIndex = this.element.selectionStart;\n    const eIndex = this.element.selectionEnd;\n    this.undoCollec.push({\n      value: this.element.value,\n      startIndex: this.element.selectionStart,\n      endIndex: this.element.selectionEnd\n    });\n    const value = this.element.value.substring(0, sIndex) + this.promptMask.substring(sIndex, eIndex) + this.element.value.substring(eIndex);\n    setTimeout(() => {\n      setElementValue.call(this, value);\n      this.element.selectionStart = this.element.selectionEnd = sIndex;\n\n      if (this.element.value !== preValue) {\n        triggerMaskChangeEvent.call(this, event, null);\n      }\n    }, 0);\n  }\n}\n\nfunction maskInputDropHandler(event) {\n  event.preventDefault();\n}\n\nfunction maskInputHandler(event) {\n  if (Browser.isIE === true && this.element.value === '' && this.floatLabelType === 'Never') {\n    return;\n  }\n\n  const eventArgs = {\n    ctrlKey: false,\n    keyCode: 229\n  };\n  extend(event, eventArgs);\n\n  if (this.mask) {\n    if (this.element.value === '') {\n      this.redoCollec.unshift({\n        value: this.promptMask,\n        startIndex: this.element.selectionStart,\n        endIndex: this.element.selectionEnd\n      });\n    }\n\n    if (this.element.value.length === 1) {\n      this.element.value = this.element.value + this.promptMask;\n      this.element.setSelectionRange(1, 1);\n    }\n\n    if (!this._callPasteHandler) {\n      removeMaskInputValues.call(this, event);\n    }\n\n    if (this.element.value.length > this.promptMask.length) {\n      const startIndex = this.element.selectionStart;\n      const addedValues = this.element.value.length - this.promptMask.length;\n      const value = this.element.value.substring(startIndex - addedValues, startIndex);\n      this.maskKeyPress = false;\n      let i = 0;\n\n      do {\n        validateValue.call(this, value[i], event.ctrlKey, event);\n        ++i;\n      } while (i < value.length);\n\n      if (this.element.value !== this.preEleVal) {\n        triggerMaskChangeEvent.call(this, event, null);\n      }\n    }\n\n    const val = strippedValue.call(this, this.element);\n    this.prevValue = val;\n    this.value = val;\n\n    if (val === '') {\n      setElementValue.call(this, this.promptMask);\n      this.element.setSelectionRange(0, 0);\n    }\n  }\n}\n\nfunction maskInputKeyDownHandler(event) {\n  if (this.mask && !this.readonly) {\n    if (event.keyCode !== 229) {\n      if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {\n        event.preventDefault();\n      }\n\n      removeMaskInputValues.call(this, event);\n    }\n\n    const startValue = this.element.value;\n\n    if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {\n      let collec;\n\n      if (event.keyCode === 90 && this.undoCollec.length > 0 && startValue !== this.undoCollec[this.undoCollec.length - 1].value) {\n        collec = this.undoCollec[this.undoCollec.length - 1];\n        this.redoCollec.unshift({\n          value: this.element.value,\n          startIndex: this.element.selectionStart,\n          endIndex: this.element.selectionEnd\n        });\n        setElementValue.call(this, collec.value);\n        this.element.selectionStart = collec.startIndex;\n        this.element.selectionEnd = collec.endIndex;\n        this.undoCollec.splice(this.undoCollec.length - 1, 1);\n      } else if (event.keyCode === 89 && this.redoCollec.length > 0 && startValue !== this.redoCollec[0].value) {\n        collec = this.redoCollec[0];\n        this.undoCollec.push({\n          value: this.element.value,\n          startIndex: this.element.selectionStart,\n          endIndex: this.element.selectionEnd\n        });\n        setElementValue.call(this, collec.value);\n        this.element.selectionStart = collec.startIndex;\n        this.element.selectionEnd = collec.endIndex;\n        this.redoCollec.splice(0, 1);\n      }\n    }\n  }\n}\n\nfunction mobileRemoveFunction() {\n  let collec;\n  const sIndex = this.element.selectionStart;\n  const eIndex = this.element.selectionEnd;\n\n  if (this.redoCollec.length > 0) {\n    collec = this.redoCollec[0];\n    setElementValue.call(this, collec.value);\n\n    if (collec.startIndex - sIndex === 1) {\n      this.element.selectionStart = collec.startIndex;\n      this.element.selectionEnd = collec.endIndex;\n    } else {\n      this.element.selectionStart = sIndex + 1;\n      this.element.selectionEnd = eIndex + 1;\n    }\n  } else {\n    setElementValue.call(this, this.promptMask);\n    this.element.selectionStart = this.element.selectionEnd = sIndex;\n  }\n}\n\nfunction autoFillMaskInputValues(isRemove, oldEventVal, event) {\n  if (event.type === 'input') {\n    isRemove = false;\n    oldEventVal = this.element.value;\n    setElementValue.call(this, this.promptMask);\n    setMaskValue.call(this, oldEventVal);\n  }\n\n  return isRemove;\n}\n\nfunction removeMaskInputValues(event) {\n  let isRemove = false;\n  let oldEventVal;\n  let isDeleted = false;\n\n  if (this.element.value.length < this.promptMask.length) {\n    isRemove = true;\n    oldEventVal = this.element.value;\n    isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);\n    mobileRemoveFunction.call(this);\n  }\n\n  if (this.element.value.length >= this.promptMask.length && event.type === 'input') {\n    isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);\n  }\n\n  const initStartIndex = this.element.selectionStart;\n  const initEndIndex = this.element.selectionEnd;\n  let startIndex = this.element.selectionStart;\n  const endIndex = this.element.selectionEnd;\n  const maskValue = this.hiddenMask.replace(/[>|\\\\<]/g, '');\n  let curMask = maskValue[startIndex - 1];\n  const deleteEndIndex = this.element.selectionEnd;\n\n  if (isRemove || event.keyCode === 8 || event.keyCode === 46) {\n    this.undoCollec.push({\n      value: this.element.value,\n      startIndex: this.element.selectionStart,\n      endIndex: endIndex\n    });\n    let multipleDel = false;\n    const preValue = this.element.value;\n\n    if (startIndex > 0 || (event.keyCode === 8 || event.keyCode === 46) && startIndex < this.element.value.length && this.element.selectionEnd - startIndex !== this.element.value.length) {\n      let index = startIndex;\n\n      if (startIndex !== endIndex) {\n        startIndex = endIndex;\n\n        if (event.keyCode === 46) {\n          multipleDel = true;\n        }\n      } else if (event.keyCode === 46) {\n        ++index;\n      } else {\n        --index;\n      }\n\n      for (let k = startIndex; event.keyCode === 8 || isRemove || multipleDel ? k > index : k < index; event.keyCode === 8 || isRemove || multipleDel ? k-- : k++) {\n        for (let i = startIndex; event.keyCode === 8 || isRemove || multipleDel ? i > 0 : i < this.element.value.length; event.keyCode === 8 || isRemove || multipleDel ? i-- : i++) {\n          let sIndex;\n\n          if ((event.keyCode === 8 || multipleDel) && (initStartIndex !== initEndIndex && initStartIndex !== startIndex || initStartIndex === initEndIndex) || isRemove) {\n            curMask = maskValue[i - 1];\n            sIndex = startIndex - 1;\n          } else {\n            curMask = maskValue[i];\n            sIndex = startIndex;\n            ++startIndex;\n          }\n\n          let oldValue = this.element.value[sIndex];\n\n          if (isNullOrUndefined(this.regExpCollec[curMask]) && !isNullOrUndefined(this.customCharacters) && isNullOrUndefined(this.customCharacters[curMask]) && this.hiddenMask[sIndex] !== this.promptChar && this.customRegExpCollec[sIndex][0] !== '[' && this.customRegExpCollec[sIndex][this.customRegExpCollec[sIndex].length - 1] !== ']' || this.promptMask[sIndex] !== this.promptChar && isNullOrUndefined(this.customCharacters)) {\n            this.element.selectionStart = this.element.selectionEnd = sIndex;\n            event.preventDefault();\n\n            if (event.keyCode === 46 && !multipleDel) {\n              ++this.element.selectionStart;\n            }\n          } else {\n            const value = this.element.value;\n            const prompt = this.promptChar;\n            const elementValue = value.substring(0, sIndex) + prompt + value.substring(startIndex, value.length);\n            setElementValue.call(this, elementValue);\n            event.preventDefault();\n\n            if (event.keyCode === 46 && !multipleDel) {\n              sIndex++;\n            }\n\n            this.element.selectionStart = this.element.selectionEnd = sIndex;\n            isDeleted = true;\n          }\n\n          startIndex = this.element.selectionStart;\n\n          if (!isDeleted && event.keyCode === 8 || multipleDel || !isDeleted && !(event.keyCode === 46)) {\n            sIndex = startIndex - 1;\n          } else {\n            sIndex = startIndex;\n            isDeleted = false;\n          }\n\n          oldValue = this.element.value[sIndex];\n\n          if (initStartIndex !== initEndIndex && this.element.selectionStart === initStartIndex || this.promptMask[sIndex] === this.promptChar || oldValue !== this.promptMask[sIndex] && this.promptMask[sIndex] !== this.promptChar && !isNullOrUndefined(this.customCharacters)) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (event.keyCode === 46 && multipleDel && isDeleted) {\n      this.element.selectionStart = this.element.selectionEnd = deleteEndIndex;\n    }\n\n    if (this.element.selectionStart === 0 && this.element.selectionEnd === this.element.value.length) {\n      setElementValue.call(this, this.promptMask);\n      event.preventDefault();\n      this.element.selectionStart = this.element.selectionEnd = startIndex;\n    }\n\n    this.redoCollec.unshift({\n      value: this.element.value,\n      startIndex: this.element.selectionStart,\n      endIndex: this.element.selectionEnd\n    });\n\n    if (this.element.value !== preValue) {\n      triggerMaskChangeEvent.call(this, event, oldEventVal);\n    }\n  }\n}\n\nfunction maskInputKeyPressHandler(event) {\n  if (this.mask && !this.readonly) {\n    const oldValue = this.element.value;\n\n    if (!event.ctrlKey || event.ctrlKey && event.code !== 'KeyA' && event.code !== 'KeyY' && event.code !== 'KeyZ' && event.code !== 'KeyX' && event.code !== 'KeyC' && event.code !== 'KeyV') {\n      this.maskKeyPress = true;\n      let key = event.key;\n\n      if (key === 'Spacebar') {\n        key = String.fromCharCode(event.keyCode);\n      }\n\n      if (!key) {\n        this.isIosInvalid = true;\n        validateValue.call(this, String.fromCharCode(event.keyCode), event.ctrlKey, event);\n        event.preventDefault();\n        this.isIosInvalid = false;\n      } else if (key && key.length === 1) {\n        validateValue.call(this, key, event.ctrlKey, event);\n        event.preventDefault();\n      }\n\n      if (event.keyCode === 32 && key === ' ' && this.promptChar === ' ') {\n        this.element.selectionStart = this.element.selectionEnd = this.element.selectionStart - key.length;\n      }\n    }\n\n    if (this.element.value !== oldValue) {\n      triggerMaskChangeEvent.call(this, event, oldValue);\n    }\n  }\n} // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nfunction triggerMaskChangeEvent(event, oldValue) {\n  const prevOnChange = this.isProtectedOnChange;\n\n  if (!isNullOrUndefined(this.changeEventArgs) && !this.isInitial) {\n    const eventArgs = {};\n    this.changeEventArgs = {\n      value: this.element.value,\n      maskedValue: this.element.value,\n      isInteraction: false,\n      isInteracted: false\n    };\n\n    if (this.mask) {\n      this.changeEventArgs.value = strippedValue.call(this, this.element);\n    }\n\n    if (!isNullOrUndefined(event)) {\n      this.changeEventArgs.isInteracted = true;\n      this.changeEventArgs.isInteraction = true;\n      this.changeEventArgs.event = event;\n    }\n\n    this.isProtectedOnChange = true;\n    this.value = this.changeEventArgs.value;\n    this.isProtectedOnChange = prevOnChange;\n    merge(eventArgs, this.changeEventArgs);\n    /* istanbul ignore next */\n\n    if (this.isAngular && this.preventChange) {\n      this.preventChange = false;\n    } else {\n      this.trigger('change', eventArgs);\n    }\n  }\n\n  this.preEleVal = this.element.value;\n  this.prevValue = strippedValue.call(this, this.element);\n  attributes(this.element, {\n    'aria-valuenow': this.element.value\n  });\n}\n\nfunction maskInputKeyUpHandler(event) {\n  if (this.mask && !this.readonly) {\n    let collec;\n\n    if (!this.maskKeyPress && event.keyCode === 229) {\n      let oldEventVal;\n\n      if (this.element.value.length === 1) {\n        this.element.value = this.element.value + this.promptMask;\n        this.element.setSelectionRange(1, 1);\n      }\n\n      if (this.element.value.length > this.promptMask.length) {\n        const startIndex = this.element.selectionStart;\n        const addedValues = this.element.value.length - this.promptMask.length;\n        let val = this.element.value.substring(startIndex - addedValues, startIndex);\n\n        if (this.undoCollec.length > 0) {\n          collec = this.undoCollec[this.undoCollec.length - 1];\n          const startIndex = this.element.selectionStart;\n          oldEventVal = collec.value;\n          const oldVal = collec.value.substring(startIndex - addedValues, startIndex);\n          collec = this.redoCollec[0];\n          val = val.trim();\n          const isSpace = Browser.isAndroid && val === '';\n\n          if (!isSpace && oldVal !== val && collec.value.substring(startIndex - addedValues, startIndex) !== val) {\n            validateValue.call(this, val, event.ctrlKey, event);\n          } else if (isSpace) {\n            preventUnsupportedValues.call(this, event, startIndex - 1, this.element.selectionEnd - 1, val, event.ctrlKey, false);\n          }\n        } else {\n          oldEventVal = this.promptMask;\n          validateValue.call(this, val, event.ctrlKey, event);\n        }\n\n        this.maskKeyPress = false;\n        triggerMaskChangeEvent.call(this, event, oldEventVal);\n      }\n    } else {\n      removeMaskError.call(this);\n    }\n\n    const val = strippedValue.call(this, this.element);\n\n    if (!(this.element.selectionStart === 0 && this.promptMask === this.element.value && val === '') || val === '' && this.value !== val) {\n      this.prevValue = val;\n      this.value = val;\n    }\n  } else {\n    triggerMaskChangeEvent.call(this, event);\n  }\n\n  if (this.element.selectionStart === 0 && this.element.selectionEnd === 0) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const temp = this.element;\n    setTimeout(() => {\n      temp.setSelectionRange(0, 0);\n    }, 0);\n  }\n}\n\nfunction mobileSwipeCheck(key) {\n  if (key.length > 1 && this.promptMask.length + key.length < this.element.value.length) {\n    const elementValue = this.redoCollec[0].value.substring(0, this.redoCollec[0].startIndex) + key + this.redoCollec[0].value.substring(this.redoCollec[0].startIndex, this.redoCollec[0].value.length);\n    setElementValue.call(this, elementValue);\n    this.element.selectionStart = this.element.selectionEnd = this.redoCollec[0].startIndex + key.length;\n  }\n\n  this.element.selectionStart = this.element.selectionStart - key.length;\n  this.element.selectionEnd = this.element.selectionEnd - key.length;\n}\n\nfunction mobileValidation(key) {\n  if (!this.maskKeyPress) {\n    mobileSwipeCheck.call(this, key);\n  }\n}\n\nfunction validateValue(key, isCtrlKey, event) {\n  mobileValidation.call(this, key);\n\n  if (isNullOrUndefined(this) || isNullOrUndefined(key)) {\n    return;\n  }\n\n  let startIndex = this.element.selectionStart;\n  const initStartIndex = startIndex;\n  let curMask;\n  let allowText = false;\n  const value = this.element.value;\n  let eventOldVal;\n  let prevSupport = false;\n  let isEqualVal = false;\n\n  for (let k = 0; k < key.length; k++) {\n    const keyValue = key[k];\n    startIndex = this.element.selectionStart;\n\n    if (!this.maskKeyPress && initStartIndex === startIndex) {\n      startIndex = startIndex + k;\n    }\n\n    if (!this.maskKeyPress || startIndex < this.promptMask.length) {\n      for (let i = startIndex; i < this.promptMask.length; i++) {\n        const maskValue = this.escapeMaskValue;\n        curMask = maskValue[startIndex];\n\n        if (this.hiddenMask[startIndex] === '\\\\' && this.hiddenMask[startIndex + 1] === key) {\n          isEqualVal = true;\n        }\n\n        if (isNullOrUndefined(this.regExpCollec[curMask]) && (isNullOrUndefined(this.customCharacters) || !isNullOrUndefined(this.customCharacters) && isNullOrUndefined(this.customCharacters[curMask])) && this.hiddenMask[startIndex] !== this.promptChar && this.customRegExpCollec[startIndex][0] !== '[' && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] !== ']' || this.promptMask[startIndex] !== this.promptChar && isNullOrUndefined(this.customCharacters) || this.promptChar === curMask && this.escapeMaskValue === this.mask) {\n          this.element.selectionStart = this.element.selectionEnd = startIndex + 1;\n          startIndex = this.element.selectionStart;\n          curMask = this.hiddenMask[startIndex];\n        }\n      }\n\n      if (!isNullOrUndefined(this.customCharacters) && !isNullOrUndefined(this.customCharacters[curMask])) {\n        const customValStr = this.customCharacters[curMask];\n        const customValArr = customValStr.split(',');\n\n        for (let i = 0; i < customValArr.length; i++) {\n          if (keyValue.match(new RegExp('[' + customValArr[i] + ']'))) {\n            allowText = true;\n            break;\n          }\n        }\n      } else if (!isNullOrUndefined(this.regExpCollec[curMask]) && keyValue.match(new RegExp(this.regExpCollec[curMask])) && this.promptMask[startIndex] === this.promptChar) {\n        allowText = true;\n      } else if (this.promptMask[startIndex] === this.promptChar && this.customRegExpCollec[startIndex][0] === '[' && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] === ']' && keyValue.match(new RegExp(this.customRegExpCollec[startIndex]))) {\n        allowText = true;\n      }\n\n      if ((!this.maskKeyPress || startIndex < this.hiddenMask.length) && allowText) {\n        if (k === 0) {\n          if (this.maskKeyPress) {\n            this.undoCollec.push({\n              value: value,\n              startIndex: startIndex,\n              endIndex: startIndex\n            });\n          } else {\n            const sIndex = this.element.selectionStart;\n            const eIndex = this.element.selectionEnd;\n\n            if (this.redoCollec.length > 0) {\n              eventOldVal = this.redoCollec[0].value;\n              setElementValue.call(this, eventOldVal);\n              this.undoCollec.push(this.redoCollec[0]);\n            } else {\n              this.undoCollec.push({\n                value: this.promptMask,\n                startIndex: startIndex,\n                endIndex: startIndex\n              });\n              eventOldVal = this.promptMask;\n              setElementValue.call(this, eventOldVal);\n            }\n\n            this.element.selectionStart = sIndex;\n            this.element.selectionEnd = eIndex;\n          }\n        }\n\n        startIndex = this.element.selectionStart;\n        applySupportedValues.call(this, event, startIndex, keyValue, eventOldVal, isEqualVal);\n        prevSupport = true;\n\n        if (k === key.length - 1) {\n          this.redoCollec.unshift({\n            value: this.element.value,\n            startIndex: this.element.selectionStart,\n            endIndex: this.element.selectionEnd\n          });\n        }\n\n        allowText = false;\n      } else {\n        startIndex = this.element.selectionStart;\n        preventUnsupportedValues.call(this, event, startIndex, initStartIndex, key, isCtrlKey, prevSupport);\n      }\n\n      if (k === key.length - 1 && !allowText) {\n        if (!Browser.isAndroid || Browser.isAndroid && startIndex < this.promptMask.length) {\n          this.redoCollec.unshift({\n            value: this.element.value,\n            startIndex: this.element.selectionStart,\n            endIndex: this.element.selectionEnd\n          });\n        }\n      }\n    } else {\n      if (key.length === 1 && !isCtrlKey && !isNullOrUndefined(event)) {\n        addMaskErrorClass.call(this);\n      }\n    }\n  }\n}\n\nfunction applySupportedValues(event, startIndex, keyValue, eventOldVal, isEqualVal) {\n  if (this.hiddenMask.length > this.promptMask.length) {\n    keyValue = changeToLowerUpperCase.call(this, keyValue, this.element.value);\n  }\n\n  if (!isEqualVal) {\n    const value = this.element.value;\n    const elementValue = value.substring(0, startIndex) + keyValue + value.substring(startIndex + 1, value.length);\n    setElementValue.call(this, elementValue);\n    this.element.selectionStart = this.element.selectionEnd = startIndex + 1;\n  }\n}\n\nfunction preventUnsupportedValues(event, sIdx, idx, key, ctrl, chkSupport) {\n  if (!this.maskKeyPress) {\n    const value = this.element.value;\n\n    if (sIdx >= this.promptMask.length) {\n      setElementValue.call(this, value.substring(0, sIdx));\n    } else {\n      if (idx === sIdx) {\n        setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx + 1, value.length));\n      } else {\n        if (this.promptMask.length === this.element.value.length) {\n          setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx, value.length));\n        } else {\n          setElementValue.call(this, value.substring(0, idx) + value.substring(idx + 1, value.length));\n        }\n      }\n\n      this.element.selectionStart = this.element.selectionEnd = chkSupport || this.element.value[idx] !== this.promptChar ? sIdx : idx;\n    }\n\n    addMaskErrorClass.call(this);\n  }\n\n  if (key.length === 1 && !ctrl && !isNullOrUndefined(event)) {\n    addMaskErrorClass.call(this);\n  }\n}\n\nfunction addMaskErrorClass() {\n  const parentElement = this.element.parentNode;\n  let timer = 200;\n\n  if (parentElement.classList.contains(INPUTGROUP) || parentElement.classList.contains(FLOATINPUT)) {\n    addClass([parentElement], ERROR$1);\n  } else {\n    addClass([this.element], ERROR$1);\n  }\n\n  if (this.isIosInvalid === true) {\n    timer = 400;\n  }\n\n  attributes(this.element, {\n    'aria-invalid': 'true'\n  });\n  setTimeout(() => {\n    if (!this.maskKeyPress) {\n      removeMaskError.call(this);\n    }\n  }, timer);\n}\n\nfunction removeMaskError() {\n  const parentElement = this.element.parentNode;\n\n  if (!isNullOrUndefined(parentElement)) {\n    removeClass([parentElement], ERROR$1);\n  }\n\n  removeClass([this.element], ERROR$1);\n  attributes(this.element, {\n    'aria-invalid': 'false'\n  });\n}\n/**\n * Validates user input using masking elements '<' , '>' and '|'.\n *\n * @hidden\n */\n\n\nfunction changeToLowerUpperCase(key, value) {\n  let promptMask;\n  let i;\n  let curVal = value;\n  let caseCount = 0;\n\n  for (i = 0; i < this.hiddenMask.length; i++) {\n    if (this.hiddenMask[i] === '\\\\') {\n      promptMask = curVal.substring(0, i) + '\\\\' + curVal.substring(i, curVal.length);\n    }\n\n    if (this.hiddenMask[i] === '>' || this.hiddenMask[i] === '<' || this.hiddenMask[i] === '|') {\n      if (this.hiddenMask[i] !== curVal[i]) {\n        promptMask = curVal.substring(0, i) + this.hiddenMask[i] + curVal.substring(i, curVal.length);\n      }\n\n      ++caseCount;\n    }\n\n    if (promptMask) {\n      if (promptMask[i] === this.promptChar && i > this.element.selectionStart || this.element.value.indexOf(this.promptChar) < 0 && this.element.selectionStart + caseCount === i) {\n        caseCount = 0;\n        break;\n      }\n\n      curVal = promptMask;\n    }\n  }\n\n  while (i >= 0 && promptMask) {\n    if (i === 0 || promptMask[i - 1] !== '\\\\') {\n      if (promptMask[i] === '>') {\n        key = key.toUpperCase();\n        break;\n      } else if (promptMask[i] === '<') {\n        key = key.toLowerCase();\n        break;\n      } else if (promptMask[i] === '|') {\n        break;\n      }\n    }\n\n    --i;\n  }\n\n  return key;\n}\n/**\n * To set updated values in the MaskedTextBox.\n *\n * @hidden\n */\n\n\nfunction setMaskValue(val) {\n  if (this.mask && val !== undefined && (this.prevValue === undefined || this.prevValue !== val)) {\n    this.maskKeyPress = true;\n    setElementValue.call(this, this.promptMask);\n\n    if (val !== '' && !(val === null && this.floatLabelType === 'Never' && this.placeholder)) {\n      this.element.selectionStart = 0;\n      this.element.selectionEnd = 0;\n    }\n\n    if (val !== null) {\n      for (let i = 0; i < val.length; i++) {\n        validateValue.call(this, val[i], false, null);\n      }\n    }\n\n    const newVal = strippedValue.call(this, this.element);\n    this.prevValue = newVal;\n    this.value = newVal;\n    triggerMaskChangeEvent.call(this, null, null);\n    this.maskKeyPress = false;\n    const labelElement = this.element.parentNode.querySelector('.e-float-text');\n\n    if (this.element.value === this.promptMask && this.floatLabelType === 'Auto' && this.placeholder && !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL) && !this.isFocus) {\n      removeClass([labelElement], TOPLABEL);\n      addClass([labelElement], BOTTOMLABEL);\n      setElementValue.call(this, '');\n    }\n  }\n\n  if (this.mask === null || this.mask === '' && this.value !== undefined) {\n    setElementValue.call(this, this.value);\n  }\n}\n/**\n * To set updated values in the input element.\n *\n * @hidden\n */\n\n\nfunction setElementValue(val, element) {\n  if (!this.isFocus && this.floatLabelType === 'Auto' && this.placeholder && isNullOrUndefined(this.value)) {\n    val = '';\n  }\n\n  const value = strippedValue.call(this, element ? element : this.element, val);\n\n  if (value === null || value === '') {\n    Input.setValue(val, element ? element : this.element, this.floatLabelType, false);\n\n    if (this.showClearButton) {\n      this.inputObj.clearButton.classList.add('e-clear-icon-hide');\n    }\n  } else {\n    Input.setValue(val, element ? element : this.element, this.floatLabelType, this.showClearButton);\n  }\n}\n/**\n * Provide mask support to input textbox through utility method.\n *\n * @hidden\n */\n\n\nfunction maskInput(args) {\n  const inputEle = getMaskInput(args);\n  applyMask.call(inputEle);\n  const val = strippedValue.call(this, this.element);\n  this.prevValue = val;\n  this.value = val;\n\n  if (args.mask) {\n    unwireEvents.call(inputEle);\n    wireEvents.call(inputEle);\n  }\n}\n\nfunction getMaskInput(args) {\n  addClass([args.element], UTILMASK);\n  const inputEle = {\n    element: args.element,\n    mask: args.mask,\n    promptMask: '',\n    hiddenMask: '',\n    escapeMaskValue: '',\n    promptChar: args.promptChar ? args.promptChar.length > 1 ? args.promptChar = args.promptChar[0] : args.promptChar : '_',\n    value: args.value ? args.value : null,\n    regExpCollec: regularExpressions,\n    customRegExpCollec: [],\n    customCharacters: args.customCharacters,\n    undoCollec: [],\n    redoCollec: [],\n    maskKeyPress: false,\n    prevValue: ''\n  };\n  createMask.call(inputEle);\n  return inputEle;\n}\n/**\n * Gets raw value of the textbox which has been masked through utility method.\n *\n * @hidden\n */\n\n\nfunction getVal(args) {\n  return strippedValue.call(getUtilMaskEle(args), args.element);\n}\n/**\n * Gets masked value of the textbox which has been masked through utility method.\n *\n * @hidden\n */\n\n\nfunction getMaskedVal(args) {\n  return unstrippedValue.call(getUtilMaskEle(args), args.element);\n}\n\nfunction getUtilMaskEle(args) {\n  let inputEle;\n\n  if (!isNullOrUndefined(args) && args.element.classList.contains(UTILMASK)) {\n    inputEle = getMaskInput(args);\n  }\n\n  return inputEle;\n}\n/**\n * Arguments to perform undo and redo functionalities.\n *\n * @hidden\n */\n\n\nclass MaskUndo {}\n/* eslint-enable valid-jsdoc, jsdoc/require-jsdoc, jsdoc/require-returns, jsdoc/require-param */\n\n/**\n * MaskedTextbox base modules\n */\n\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst ROOT$1 = 'e-control-wrapper e-mask';\nconst INPUT = 'e-input';\nconst COMPONENT$1 = 'e-maskedtextbox';\nconst CONTROL$1 = 'e-control';\nconst MASKINPUT_FOCUS = 'e-input-focus';\nconst wrapperAttr = ['title', 'style', 'class'];\n/**\n * The MaskedTextBox allows the user to enter the valid input only based on the provided mask.\n * ```html\n * <input id=\"mask\" type=\"text\" />\n * ```\n * ```typescript\n * <script>\n * var maskObj = new MaskedTextBox({ mask: \"(999) 9999-999\" });\n * maskObj.appendTo('#mask');\n * </script>\n * ```\n */\n\nlet MaskedTextBox = class MaskedTextBox extends Component {\n  /**\n   *\n   * @param {MaskedTextBoxModel} options - Specifies the MaskedTextBox model.\n   * @param {string | HTMLElement | HTMLInputElement} element - Specifies the element to render as component.\n   * @private\n   */\n  constructor(options, element) {\n    super(options, element);\n    this.initInputValue = '';\n    this.isAngular = false;\n    this.preventChange = false;\n    this.isClicked = false;\n    this.maskOptions = options;\n  }\n  /**\n   * Gets the component name.\n   *\n   * @returns {string} Returns the component name.\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'maskedtextbox';\n  }\n  /**\n   * Initializes the event handler\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  preRender() {\n    this.promptMask = '';\n    this.hiddenMask = '';\n    this.escapeMaskValue = '';\n    this.regExpCollec = regularExpressions;\n    this.customRegExpCollec = [];\n    this.undoCollec = [];\n    this.redoCollec = [];\n    this.changeEventArgs = {};\n    this.focusEventArgs = {};\n    this.blurEventArgs = {};\n    this.maskKeyPress = false;\n    this.isFocus = false;\n    this.isInitial = false;\n    this.isIosInvalid = false;\n    const ejInstance = getValue('ej2_instances', this.element);\n    this.cloneElement = this.element.cloneNode(true);\n    removeClass([this.cloneElement], [CONTROL$1, COMPONENT$1, 'e-lib']);\n    this.angularTagName = null;\n    this.formElement = closest(this.element, 'form');\n\n    if (this.element.tagName === 'EJS-MASKEDTEXTBOX') {\n      this.angularTagName = this.element.tagName;\n      const input = this.createElement('input');\n\n      for (let i = 0; i < this.element.attributes.length; i++) {\n        input.setAttribute(this.element.attributes[i].nodeName, this.element.attributes[i].nodeValue);\n        input.innerHTML = this.element.innerHTML;\n      }\n\n      if (this.element.hasAttribute('id')) {\n        this.element.removeAttribute('id');\n      }\n\n      this.element.classList.remove('e-control', 'e-maskedtextbox');\n      this.element.classList.add('e-mask-container');\n      this.element.appendChild(input);\n      this.element = input;\n      setValue('ej2_instances', ejInstance, this.element);\n    }\n\n    this.updateHTMLAttrToElement();\n    this.checkHtmlAttributes(false);\n\n    if (this.formElement) {\n      this.initInputValue = this.value;\n    }\n  }\n  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Gets the properties to be maintained in the persisted state.\n   *\n   * @returns {string}\n   */\n\n\n  getPersistData() {\n    const keyEntity = ['value'];\n    return this.addOnPersist(keyEntity);\n  }\n  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Initializes the component rendering.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  render() {\n    if (this.element.tagName.toLowerCase() === 'input') {\n      const checkBlazor = isBlazor() && this.isServerRendered;\n\n      if (this.floatLabelType === 'Never') {\n        addClass([this.element], INPUT);\n      }\n\n      this.createWrapper();\n      this.updateHTMLAttrToWrapper();\n\n      if (this.element.name === '') {\n        this.element.setAttribute('name', this.element.id);\n      }\n\n      this.isInitial = true;\n\n      if (checkBlazor && Browser.isIE === true) {\n        setTimeout(() => {\n          this.resetMaskedTextBox();\n        });\n      } else {\n        this.resetMaskedTextBox();\n      }\n\n      this.isInitial = false;\n      this.setMaskPlaceholder(true, false);\n      this.setWidth(this.width);\n      this.preEleVal = this.element.value;\n\n      if (!Browser.isDevice && (Browser.info.version === '11.0' || Browser.info.name === 'edge')) {\n        this.element.blur();\n      }\n\n      if (Browser.isDevice && Browser.isIos) {\n        this.element.blur();\n      }\n\n      if (this.element.getAttribute('value') || this.value) {\n        this.element.setAttribute('value', this.element.value);\n      }\n\n      this.renderComplete();\n    }\n  }\n\n  updateHTMLAttrToElement() {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (const key of Object.keys(this.htmlAttributes)) {\n        if (wrapperAttr.indexOf(key) < 0) {\n          this.element.setAttribute(key, this.htmlAttributes[key]);\n        }\n      }\n    }\n  }\n\n  updateCssClass(newClass, oldClass) {\n    Input.setCssClass(this.getValidClassList(newClass), [this.inputObj.container], this.getValidClassList(oldClass));\n  }\n\n  getValidClassList(maskClassName) {\n    let result = maskClassName;\n\n    if (!isNullOrUndefined(maskClassName) && maskClassName !== '') {\n      result = maskClassName.replace(/\\s+/g, ' ').trim();\n    }\n\n    return result;\n  }\n\n  updateHTMLAttrToWrapper() {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (const key of Object.keys(this.htmlAttributes)) {\n        if (wrapperAttr.indexOf(key) > -1) {\n          if (key === 'class') {\n            const updatedClassValues = this.htmlAttributes[key].replace(/\\s+/g, ' ').trim();\n\n            if (updatedClassValues !== '') {\n              addClass([this.inputObj.container], updatedClassValues.split(' '));\n            }\n          } else if (key === 'style') {\n            let maskStyle = this.inputObj.container.getAttribute(key);\n            maskStyle = !isNullOrUndefined(maskStyle) ? maskStyle + this.htmlAttributes[key] : this.htmlAttributes[key];\n            this.inputObj.container.setAttribute(key, maskStyle);\n          } else {\n            this.inputObj.container.setAttribute(key, this.htmlAttributes[key]);\n          }\n        }\n      }\n    }\n  }\n\n  resetMaskedTextBox() {\n    this.promptMask = '';\n    this.hiddenMask = '';\n    this.escapeMaskValue = '';\n    this.customRegExpCollec = [];\n    this.undoCollec = [];\n    this.redoCollec = [];\n\n    if (this.promptChar.length > 1) {\n      this.promptChar = this.promptChar[0];\n    }\n\n    createMask.call(this);\n    applyMask.call(this);\n\n    if (this.mask === null || this.mask === '' && this.value !== undefined) {\n      setElementValue.call(this, this.value);\n    }\n\n    const val = strippedValue.call(this, this.element);\n    this.prevValue = val;\n    this.value = val;\n\n    if (!this.isInitial) {\n      unwireEvents.call(this);\n    }\n\n    wireEvents.call(this);\n  }\n\n  setMaskPlaceholder(setVal, dynamicPlaceholder) {\n    if (dynamicPlaceholder || this.placeholder) {\n      Input.setPlaceholder(this.placeholder, this.element);\n\n      if (this.element.value === this.promptMask && setVal && this.floatLabelType !== 'Always' || this.element.value === this.promptMask && this.floatLabelType === 'Never') {\n        setElementValue.call(this, '');\n      }\n    }\n  }\n\n  setWidth(width) {\n    if (!isNullOrUndefined(width)) {\n      if (typeof width === 'number') {\n        this.inputObj.container.style.width = formatUnit(width);\n        this.element.style.width = formatUnit(width);\n      } else if (typeof width === 'string') {\n        const elementWidth = width.match(/px|%|em/) ? width : formatUnit(width);\n        this.inputObj.container.style.width = elementWidth;\n        this.element.style.width = elementWidth;\n      }\n    }\n  }\n\n  checkHtmlAttributes(isDynamic) {\n    const attributes$$1 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['placeholder', 'disabled', 'value', 'readonly'];\n\n    for (const key of attributes$$1) {\n      if (!isNullOrUndefined(this.element.getAttribute(key))) {\n        switch (key) {\n          case 'placeholder':\n            if (isNullOrUndefined(this.maskOptions) || this.maskOptions['placeholder'] === undefined || isDynamic) {\n              this.setProperties({\n                placeholder: this.element.placeholder\n              }, !isDynamic);\n            }\n\n            break;\n\n          case 'disabled':\n            if (isNullOrUndefined(this.maskOptions) || this.maskOptions['enabled'] === undefined || isDynamic) {\n              const isEnabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? false : true;\n              this.setProperties({\n                enabled: isEnabled\n              }, !isDynamic);\n            }\n\n            break;\n\n          case 'value':\n            if (isNullOrUndefined(this.maskOptions) || this.maskOptions['value'] === undefined || isDynamic) {\n              this.setProperties({\n                value: this.element.value\n              }, !isDynamic);\n            }\n\n            break;\n\n          case 'readonly':\n            if (isNullOrUndefined(this.maskOptions) || this.maskOptions['readonly'] === undefined || isDynamic) {\n              const isReadonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? true : false;\n              this.setProperties({\n                readonly: isReadonly\n              }, !isDynamic);\n            }\n\n            break;\n        }\n      }\n    }\n  }\n\n  createWrapper() {\n    let updatedCssClassValues = this.cssClass;\n\n    if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n      updatedCssClassValues = this.getValidClassList(this.cssClass);\n    }\n\n    this.inputObj = Input.createInput({\n      element: this.element,\n      floatLabelType: this.floatLabelType,\n      properties: {\n        enableRtl: this.enableRtl,\n        cssClass: updatedCssClassValues,\n        enabled: this.enabled,\n        readonly: this.readonly,\n        placeholder: this.placeholder,\n        showClearButton: this.showClearButton\n      }\n    }, this.createElement);\n    this.inputObj.container.setAttribute('class', ROOT$1 + ' ' + this.inputObj.container.getAttribute('class'));\n  }\n  /**\n   * Calls internally if any of the property value is changed.\n   *\n   * @param {MaskedTextBoxModel} newProp - Returns the dynamic property value of the component.\n   * @param {MaskedTextBoxModel} oldProp - Returns the previous property value of the component.\n   * @returns {void}\n   * @hidden\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'value':\n          setMaskValue.call(this, this.value);\n\n          if (this.placeholder) {\n            this.setMaskPlaceholder(false, false);\n          }\n\n          break;\n\n        case 'placeholder':\n          this.setMaskPlaceholder(true, true);\n          break;\n\n        case 'width':\n          this.setWidth(newProp.width);\n          break;\n\n        case 'cssClass':\n          this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n          break;\n\n        case 'enabled':\n          Input.setEnabled(newProp.enabled, this.element, this.floatLabelType, this.inputObj.container);\n          break;\n\n        case 'readonly':\n          Input.setReadonly(newProp.readonly, this.element);\n          break;\n\n        case 'enableRtl':\n          Input.setEnableRtl(newProp.enableRtl, [this.inputObj.container]);\n          break;\n\n        case 'customCharacters':\n          this.customCharacters = newProp.customCharacters;\n          this.resetMaskedTextBox();\n          break;\n\n        case 'showClearButton':\n          Input.setClearButton(newProp.showClearButton, this.element, this.inputObj, undefined, this.createElement);\n          bindClearEvent.call(this);\n          break;\n\n        case 'floatLabelType':\n          this.floatLabelType = newProp.floatLabelType;\n          Input.removeFloating(this.inputObj);\n          Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);\n          break;\n\n        case 'htmlAttributes':\n          this.updateHTMLAttrToElement();\n          this.updateHTMLAttrToWrapper();\n          this.checkHtmlAttributes(true);\n          break;\n\n        case 'mask':\n          {\n            const strippedValue = this.value;\n            this.mask = newProp.mask;\n            this.updateValue(strippedValue);\n          }\n          break;\n\n        case 'promptChar':\n          {\n            if (newProp.promptChar.length > 1) {\n              newProp.promptChar = newProp.promptChar[0];\n            }\n\n            if (newProp.promptChar) {\n              this.promptChar = newProp.promptChar;\n            } else {\n              this.promptChar = '_';\n            }\n\n            let value = this.element.value.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);\n\n            if (this.promptMask === this.element.value) {\n              value = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);\n            }\n\n            this.promptMask = this.promptMask.replace(new RegExp('[' + oldProp.promptChar + ']', 'g'), this.promptChar);\n            this.undoCollec = this.redoCollec = [];\n            setElementValue.call(this, value);\n            break;\n          }\n      }\n    }\n\n    this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;\n  }\n\n  updateValue(strippedVal) {\n    this.resetMaskedTextBox();\n    setMaskValue.call(this, strippedVal);\n  }\n  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Gets the value of the MaskedTextBox with the masked format.\n   * By using `value` property, you can get the raw value of maskedtextbox without literals and prompt characters.\n   *\n   * @returns {string}\n   */\n\n\n  getMaskedValue() {\n    return unstrippedValue.call(this, this.element);\n  }\n  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Sets the focus to widget for interaction.\n   *\n   * @returns {void}\n   */\n\n\n  focusIn() {\n    if (document.activeElement !== this.element && this.enabled) {\n      this.element.focus();\n      addClass([this.inputObj.container], [MASKINPUT_FOCUS]);\n    }\n  }\n  /**\n   * Remove the focus from widget, if the widget is in focus state.\n   *\n   * @returns {void}\n   */\n\n\n  focusOut() {\n    if (document.activeElement === this.element && this.enabled) {\n      this.element.blur();\n      removeClass([this.inputObj.container], [MASKINPUT_FOCUS]);\n    }\n  }\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers.\n   * Also it maintains the initial input element from the DOM.\n   *\n   * @method destroy\n   * @returns {void}\n   */\n\n\n  destroy() {\n    unwireEvents.call(this);\n    const attrArray = ['aria-labelledby', 'role', 'autocomplete', 'aria-readonly', 'autocorrect', 'aria-disabled', 'aria-placeholder', 'autocapitalize', 'spellcheck', 'aria-autocomplete', 'aria-live', 'aria-valuenow', 'aria-invalid'];\n\n    for (let i = 0; i < attrArray.length; i++) {\n      this.element.removeAttribute(attrArray[i]);\n    }\n\n    this.element.classList.remove('e-input');\n    this.inputObj.container.insertAdjacentElement('afterend', this.element);\n    detach(this.inputObj.container);\n    super.destroy();\n  }\n\n};\n\n__decorate$1([Property(null)], MaskedTextBox.prototype, \"cssClass\", void 0);\n\n__decorate$1([Property(null)], MaskedTextBox.prototype, \"width\", void 0);\n\n__decorate$1([Property(null)], MaskedTextBox.prototype, \"placeholder\", void 0);\n\n__decorate$1([Property('Never')], MaskedTextBox.prototype, \"floatLabelType\", void 0);\n\n__decorate$1([Property({})], MaskedTextBox.prototype, \"htmlAttributes\", void 0);\n\n__decorate$1([Property(true)], MaskedTextBox.prototype, \"enabled\", void 0);\n\n__decorate$1([Property(false)], MaskedTextBox.prototype, \"readonly\", void 0);\n\n__decorate$1([Property(false)], MaskedTextBox.prototype, \"showClearButton\", void 0);\n\n__decorate$1([Property(false)], MaskedTextBox.prototype, \"enablePersistence\", void 0);\n\n__decorate$1([Property(null)], MaskedTextBox.prototype, \"mask\", void 0);\n\n__decorate$1([Property('_')], MaskedTextBox.prototype, \"promptChar\", void 0);\n\n__decorate$1([Property(null)], MaskedTextBox.prototype, \"value\", void 0);\n\n__decorate$1([Property(null)], MaskedTextBox.prototype, \"customCharacters\", void 0);\n\n__decorate$1([Event()], MaskedTextBox.prototype, \"created\", void 0);\n\n__decorate$1([Event()], MaskedTextBox.prototype, \"destroyed\", void 0);\n\n__decorate$1([Event()], MaskedTextBox.prototype, \"change\", void 0);\n\n__decorate$1([Event()], MaskedTextBox.prototype, \"focus\", void 0);\n\n__decorate$1([Event()], MaskedTextBox.prototype, \"blur\", void 0);\n\nMaskedTextBox = __decorate$1([NotifyPropertyChanges], MaskedTextBox);\n/**\n * MaskedTextbox modules\n */\n\n/**\n * MaskedTextbox modules\n */\n\n/**\n * Input box Component\n */\n\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Configures the ticks data of the Slider.\n */\n\n\nclass TicksData extends ChildProperty {}\n\n__decorate$2([Property('None')], TicksData.prototype, \"placement\", void 0);\n\n__decorate$2([Property(10)], TicksData.prototype, \"largeStep\", void 0);\n\n__decorate$2([Property(1)], TicksData.prototype, \"smallStep\", void 0);\n\n__decorate$2([Property(false)], TicksData.prototype, \"showSmallTicks\", void 0);\n\n__decorate$2([Property(null)], TicksData.prototype, \"format\", void 0);\n/**\n * It illustrates the color track data in slider.\n * {% codeBlock src='slider/colorrange/index.md' %}{% endcodeBlock %}\n */\n\n\nclass ColorRangeData extends ChildProperty {}\n\n__decorate$2([Property(null)], ColorRangeData.prototype, \"color\", void 0);\n\n__decorate$2([Property(null)], ColorRangeData.prototype, \"start\", void 0);\n\n__decorate$2([Property(null)], ColorRangeData.prototype, \"end\", void 0);\n/**\n * It illustrates the limit data in slider.\n * {% codeBlock src='slider/limits/index.md' %}{% endcodeBlock %}\n */\n\n\nclass LimitData extends ChildProperty {}\n\n__decorate$2([Property(false)], LimitData.prototype, \"enabled\", void 0);\n\n__decorate$2([Property(null)], LimitData.prototype, \"minStart\", void 0);\n\n__decorate$2([Property(null)], LimitData.prototype, \"minEnd\", void 0);\n\n__decorate$2([Property(null)], LimitData.prototype, \"maxStart\", void 0);\n\n__decorate$2([Property(null)], LimitData.prototype, \"maxEnd\", void 0);\n\n__decorate$2([Property(false)], LimitData.prototype, \"startHandleFixed\", void 0);\n\n__decorate$2([Property(false)], LimitData.prototype, \"endHandleFixed\", void 0);\n/**\n * It illustrates the tooltip data in slider.\n */\n\n\nclass TooltipData extends ChildProperty {}\n\n__decorate$2([Property('')], TooltipData.prototype, \"cssClass\", void 0);\n\n__decorate$2([Property('Before')], TooltipData.prototype, \"placement\", void 0);\n\n__decorate$2([Property('Focus')], TooltipData.prototype, \"showOn\", void 0);\n\n__decorate$2([Property(false)], TooltipData.prototype, \"isVisible\", void 0);\n\n__decorate$2([Property(null)], TooltipData.prototype, \"format\", void 0);\n\nconst bootstrapTooltipOffset = 6;\nconst bootstrap4TooltipOffset = 3;\nconst classNames = {\n  root: 'e-slider',\n  rtl: 'e-rtl',\n  sliderHiddenInput: 'e-slider-input',\n  controlWrapper: 'e-control-wrapper',\n  sliderHandle: 'e-handle',\n  rangeBar: 'e-range',\n  sliderButton: 'e-slider-button',\n  firstButton: 'e-first-button',\n  secondButton: 'e-second-button',\n  scale: 'e-scale',\n  tick: 'e-tick',\n  large: 'e-large',\n  tickValue: 'e-tick-value',\n  sliderTooltip: 'e-slider-tooltip',\n  sliderHover: 'e-slider-hover',\n  sliderFirstHandle: 'e-handle-first',\n  sliderSecondHandle: 'e-handle-second',\n  sliderDisabled: 'e-disabled',\n  sliderContainer: 'e-slider-container',\n  horizontalTooltipBefore: 'e-slider-horizontal-before',\n  horizontalTooltipAfter: 'e-slider-horizontal-after',\n  verticalTooltipBefore: 'e-slider-vertical-before',\n  verticalTooltipAfter: 'e-slider-vertical-after',\n  materialTooltip: 'e-material-tooltip',\n  materialTooltipOpen: 'e-material-tooltip-open',\n  materialTooltipActive: 'e-tooltip-active',\n  materialSlider: 'e-material-slider',\n  sliderTrack: 'e-slider-track',\n  sliderHorizantalColor: 'e-slider-horizantal-color',\n  sliderVerticalColor: 'e-slider-vertical-color',\n  sliderHandleFocused: 'e-handle-focused',\n  verticalSlider: 'e-vertical',\n  horizontalSlider: 'e-horizontal',\n  sliderHandleStart: 'e-handle-start',\n  sliderTooltipStart: 'e-material-tooltip-start',\n  sliderTabHandle: 'e-tab-handle',\n  sliderButtonIcon: 'e-button-icon',\n  sliderSmallSize: 'e-small-size',\n  sliderTickPosition: 'e-tick-pos',\n  sliderFirstTick: 'e-first-tick',\n  sliderLastTick: 'e-last-tick',\n  sliderButtonClass: 'e-slider-btn',\n  sliderTooltipWrapper: 'e-tooltip-wrap',\n  sliderTabTrack: 'e-tab-track',\n  sliderTabRange: 'e-tab-range',\n  sliderActiveHandle: 'e-handle-active',\n  sliderMaterialHandle: 'e-material-handle',\n  sliderMaterialRange: 'e-material-range',\n  sliderMaterialDefault: 'e-material-default',\n  materialTooltipShow: 'e-material-tooltip-show',\n  materialTooltipHide: 'e-material-tooltip-hide',\n  readonly: 'e-read-only',\n  limits: 'e-limits',\n  limitBarDefault: 'e-limit-bar',\n  limitBarFirst: 'e-limit-first',\n  limitBarSecond: 'e-limit-second',\n  dragHorizontal: 'e-drag-horizontal',\n  dragVertical: 'e-drag-vertical'\n};\n/**\n * The Slider component allows the user to select a value or range\n * of values in-between a min and max range, by dragging the handle over the slider bar.\n * ```html\n * <div id='slider'></div>\n * ```\n * ```typescript\n * <script>\n *   var sliderObj = new Slider({ value: 10 });\n *   sliderObj.appendTo('#slider');\n * </script>\n * ```\n */\n\nlet Slider = class Slider extends Component {\n  constructor(options, element) {\n    super(options, element);\n    this.horDir = 'left';\n    this.verDir = 'bottom';\n    this.transition = {\n      handle: 'left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), ' + 'top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)',\n      rangeBar: 'all .4s cubic-bezier(.25, .8, .25, 1)'\n    };\n    this.transitionOnMaterialTooltip = {\n      handle: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, top 1ms ease-out',\n      rangeBar: 'left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out'\n    };\n    this.scaleTransform = 'transform .4s cubic-bezier(.25, .8, .25, 1)';\n    this.customAriaText = null;\n    this.drag = true;\n    this.isDragComplete = false;\n    this.initialTooltip = true;\n  }\n\n  preRender() {\n    // eslint-disable-next-line\n    const localeText = {\n      incrementTitle: 'Increase',\n      decrementTitle: 'Decrease'\n    };\n    this.l10n = new L10n('slider', localeText, this.locale);\n    this.isElementFocused = false;\n    this.tickElementCollection = [];\n    this.tooltipFormatInfo = {};\n    this.ticksFormatInfo = {};\n    this.initCultureInfo();\n    this.initCultureFunc();\n    this.formChecker();\n  }\n\n  formChecker() {\n    const formElement = closest(this.element, 'form');\n\n    if (formElement) {\n      this.isForm = true; // this condition needs to be checked, if the slider is going to be refreshed by `refresh()`\n      // then we need to revert the slider `value` back to `formResetValue` to preserve the initial value\n\n      if (!isNullOrUndefined(this.formResetValue)) {\n        this.setProperties({\n          'value': this.formResetValue\n        }, true);\n      }\n\n      this.formResetValue = this.value;\n\n      if (this.type === 'Range' && (isNullOrUndefined(this.formResetValue) || typeof this.formResetValue !== 'object')) {\n        this.formResetValue = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];\n      } else if (isNullOrUndefined(this.formResetValue)) {\n        this.formResetValue = parseFloat(formatUnit(this.min));\n      }\n\n      this.formElement = formElement;\n    } else {\n      this.isForm = false;\n    }\n  }\n\n  initCultureFunc() {\n    this.internationalization = new Internationalization(this.locale);\n  }\n\n  initCultureInfo() {\n    this.tooltipFormatInfo.format = !isNullOrUndefined(this.tooltip.format) ? this.tooltip.format : null;\n    this.ticksFormatInfo.format = !isNullOrUndefined(this.ticks.format) ? this.ticks.format : null;\n  }\n\n  formatString(value, formatInfo) {\n    let formatValue = null;\n    let formatString = null;\n\n    if (value || value === 0) {\n      formatValue = this.formatNumber(value);\n      const numberOfDecimals = this.numberOfDecimals(value);\n      formatString = this.internationalization.getNumberFormat(formatInfo)(this.makeRoundNumber(value, numberOfDecimals));\n    }\n\n    return {\n      elementVal: formatValue,\n      formatString: formatString\n    };\n  }\n\n  formatNumber(value) {\n    const numberOfDecimals = this.numberOfDecimals(value);\n    return this.internationalization.getNumberFormat({\n      maximumFractionDigits: numberOfDecimals,\n      minimumFractionDigits: numberOfDecimals,\n      useGrouping: false\n    })(value);\n  }\n\n  numberOfDecimals(value) {\n    const decimalPart = value.toString().split('.')[1];\n    const numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;\n    return numberOfDecimals;\n  }\n\n  makeRoundNumber(value, precision) {\n    const decimals = precision || 0;\n    return Number(value.toFixed(decimals));\n  }\n\n  fractionalToInteger(value) {\n    value = this.numberOfDecimals(value) === 0 ? Number(value).toFixed(this.noOfDecimals) : value;\n    let tens = 1;\n\n    for (let i = 0; i < this.noOfDecimals; i++) {\n      tens *= 10;\n    }\n\n    value = Number((value * tens).toFixed(0));\n    return value;\n  }\n  /**\n   * To Initialize the control rendering\n   * @private\n   */\n\n\n  render() {\n    this.initialize();\n    this.initRender();\n    this.wireEvents();\n    this.setZindex();\n    this.renderComplete();\n  }\n\n  initialize() {\n    addClass([this.element], classNames.root);\n    this.setCSSClass();\n  }\n\n  setElementWidth(width) {\n    if (!isNullOrUndefined(width)) {\n      if (typeof width === 'number') {\n        this.sliderContainer.style.width = formatUnit(width);\n      } else if (typeof width === 'string') {\n        this.sliderContainer.style.width = width.match(/px|%|em/) ? width : formatUnit(width);\n      }\n    }\n  }\n\n  setCSSClass(oldCSSClass) {\n    if (oldCSSClass) {\n      removeClass([this.element], oldCSSClass.split(' '));\n    }\n\n    if (this.cssClass) {\n      addClass([this.element], this.cssClass.split(' '));\n    }\n  }\n\n  setEnabled() {\n    if (!this.enabled) {\n      addClass([this.sliderContainer], [classNames.sliderDisabled]);\n\n      if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {\n        this.tooltipElement.classList.add(classNames.sliderDisabled);\n      }\n\n      this.unwireEvents();\n    } else {\n      removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n\n      if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === 'Always') {\n        this.tooltipElement.classList.remove(classNames.sliderDisabled);\n      }\n\n      this.wireEvents();\n    }\n  }\n\n  getTheme(container) {\n    const theme = window.getComputedStyle(container, ':after').getPropertyValue('content');\n    return theme.replace(/['\"]+/g, '');\n  }\n  /**\n   * Initialize the rendering\n   * @private\n   */\n\n\n  initRender() {\n    this.sliderContainer = this.createElement('div', {\n      className: classNames.sliderContainer + ' ' + classNames.controlWrapper\n    });\n    this.element.parentNode.insertBefore(this.sliderContainer, this.element);\n    this.sliderContainer.appendChild(this.element);\n    this.sliderTrack = this.createElement('div', {\n      className: classNames.sliderTrack\n    });\n    this.element.appendChild(this.sliderTrack);\n    this.setElementWidth(this.width);\n    this.element.tabIndex = -1;\n    this.getThemeInitialization();\n    this.setHandler();\n    this.createRangeBar();\n\n    if (this.limits.enabled) {\n      this.createLimitBar();\n    }\n\n    this.setOrientClass();\n    this.hiddenInput = this.createElement('input', {\n      attrs: {\n        type: 'hidden',\n        value: isNullOrUndefined(this.value) ? this.min.toString() : this.value.toString(),\n        name: this.element.getAttribute('name') || this.element.getAttribute('id') || '_' + (Math.random() * 1000).toFixed(0) + 'slider',\n        class: classNames.sliderHiddenInput\n      }\n    });\n    this.hiddenInput.tabIndex = -1;\n    this.sliderContainer.appendChild(this.hiddenInput);\n\n    if (this.showButtons) {\n      this.setButtons();\n    }\n\n    this.setEnableRTL();\n\n    if (this.type === 'Range') {\n      this.rangeValueUpdate();\n    } else {\n      this.value = isNullOrUndefined(this.value) ? parseFloat(formatUnit(this.min.toString())) : this.value;\n    }\n\n    this.previousVal = this.type !== 'Range' ? this.checkHandleValue(parseFloat(formatUnit(this.value.toString()))) : [this.checkHandleValue(parseFloat(formatUnit(this.value[0].toString()))), this.checkHandleValue(parseFloat(formatUnit(this.value[1].toString())))];\n    this.previousChanged = this.previousVal;\n\n    if (!isNullOrUndefined(this.element.hasAttribute('name'))) {\n      this.element.removeAttribute('name');\n    }\n\n    this.setValue();\n\n    if (this.limits.enabled) {\n      this.setLimitBar();\n    }\n\n    if (this.ticks.placement !== 'None') {\n      this.renderScale();\n    }\n\n    if (this.tooltip.isVisible) {\n      this.renderTooltip();\n    }\n\n    if (!this.enabled) {\n      addClass([this.sliderContainer], [classNames.sliderDisabled]);\n    } else {\n      removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n    }\n\n    if (this.readonly) {\n      addClass([this.sliderContainer], [classNames.readonly]);\n    } else {\n      removeClass([this.sliderContainer], [classNames.readonly]);\n    }\n  }\n\n  getThemeInitialization() {\n    this.isMaterial = this.getTheme(this.sliderContainer) === 'material' || this.getTheme(this.sliderContainer) === 'material-dark';\n    this.isBootstrap = this.getTheme(this.sliderContainer) === 'bootstrap' || this.getTheme(this.sliderContainer) === 'bootstrap-dark';\n    this.isBootstrap4 = this.getTheme(this.sliderContainer) === 'bootstrap4';\n    this.isTailwind = this.getTheme(this.sliderContainer) === 'tailwind' || this.getTheme(this.sliderContainer) === 'tailwind-dark';\n    this.isMaterialTooltip = this.isMaterial && this.type !== 'Range' && this.tooltip.isVisible;\n  }\n\n  createRangeBar() {\n    if (this.type !== 'Default') {\n      this.rangeBar = this.createElement('div', {\n        attrs: {\n          class: classNames.rangeBar\n        }\n      });\n      this.element.appendChild(this.rangeBar);\n\n      if (this.drag && this.type === 'Range') {\n        if (this.orientation === 'Horizontal') {\n          this.rangeBar.classList.add(classNames.dragHorizontal);\n        } else {\n          this.rangeBar.classList.add(classNames.dragVertical);\n        }\n      }\n    }\n  }\n\n  createLimitBar() {\n    let firstElementClassName = this.type !== 'Range' ? classNames.limitBarDefault : classNames.limitBarFirst;\n    firstElementClassName += ' ' + classNames.limits;\n    this.limitBarFirst = this.createElement('div', {\n      attrs: {\n        class: firstElementClassName\n      }\n    });\n    this.element.appendChild(this.limitBarFirst);\n\n    if (this.type === 'Range') {\n      this.limitBarSecond = this.createElement('div', {\n        attrs: {\n          class: classNames.limitBarSecond + ' ' + classNames.limits\n        }\n      });\n      this.element.appendChild(this.limitBarSecond);\n    }\n  }\n\n  setOrientClass() {\n    if (this.orientation !== 'Vertical') {\n      this.sliderContainer.classList.remove(classNames.verticalSlider);\n      this.sliderContainer.classList.add(classNames.horizontalSlider);\n      this.firstHandle.setAttribute('aria-orientation', 'horizontal');\n\n      if (this.type === 'Range') {\n        this.secondHandle.setAttribute('aria-orientation', 'horizontal');\n      }\n    } else {\n      this.sliderContainer.classList.remove(classNames.horizontalSlider);\n      this.sliderContainer.classList.add(classNames.verticalSlider);\n      this.firstHandle.setAttribute('aria-orientation', 'vertical');\n\n      if (this.type === 'Range') {\n        this.secondHandle.setAttribute('aria-orientation', 'vertical');\n      }\n    }\n  }\n\n  setAriaAttributes(element) {\n    let min = this.min;\n    let max = this.max;\n\n    if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n      min = this.customValues[0];\n      max = this.customValues[this.customValues.length - 1];\n    }\n\n    if (this.type !== 'Range') {\n      attributes(element, {\n        'aria-valuemin': min.toString(),\n        'aria-valuemax': max.toString()\n      });\n    } else {\n      const range = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? [[min.toString(), this.customValues[this.value[1]].toString()], [this.customValues[this.value[0]].toString(), max.toString()]] : [[min.toString(), this.value[1].toString()], [this.value[0].toString(), max.toString()]];\n      range.forEach((range, index) => {\n        const element = index === 0 ? this.firstHandle : this.secondHandle;\n\n        if (element) {\n          attributes(element, {\n            'aria-valuemin': range[0],\n            'aria-valuemax': range[1]\n          });\n        }\n      });\n    }\n  }\n\n  createSecondHandle() {\n    this.secondHandle = this.createElement('div', {\n      attrs: {\n        class: classNames.sliderHandle,\n        'role': 'slider',\n        tabIndex: '0'\n      }\n    });\n    this.secondHandle.classList.add(classNames.sliderSecondHandle);\n    this.element.appendChild(this.secondHandle);\n  }\n\n  createFirstHandle() {\n    this.firstHandle = this.createElement('div', {\n      attrs: {\n        class: classNames.sliderHandle,\n        'role': 'slider',\n        tabIndex: '0'\n      }\n    });\n    this.firstHandle.classList.add(classNames.sliderFirstHandle);\n    this.element.appendChild(this.firstHandle);\n\n    if (this.isMaterialTooltip) {\n      this.materialHandle = this.createElement('div', {\n        attrs: {\n          class: classNames.sliderHandle + ' ' + classNames.sliderMaterialHandle\n        }\n      });\n      this.element.appendChild(this.materialHandle);\n    }\n  }\n\n  wireFirstHandleEvt(destroy) {\n    if (!destroy) {\n      EventHandler.add(this.firstHandle, 'mousedown touchstart', this.handleFocus, this);\n      EventHandler.add(this.firstHandle, 'transitionend', this.transitionEnd, this);\n      EventHandler.add(this.firstHandle, 'mouseenter touchenter', this.handleOver, this);\n      EventHandler.add(this.firstHandle, 'mouseleave touchend', this.handleLeave, this);\n    } else {\n      EventHandler.remove(this.firstHandle, 'mousedown touchstart', this.handleFocus);\n      EventHandler.remove(this.firstHandle, 'transitionend', this.transitionEnd);\n      EventHandler.remove(this.firstHandle, 'mouseenter touchenter', this.handleOver);\n      EventHandler.remove(this.firstHandle, 'mouseleave touchend', this.handleLeave);\n    }\n  }\n\n  wireSecondHandleEvt(destroy) {\n    if (!destroy) {\n      EventHandler.add(this.secondHandle, 'mousedown touchstart', this.handleFocus, this);\n      EventHandler.add(this.secondHandle, 'transitionend', this.transitionEnd, this);\n      EventHandler.add(this.secondHandle, 'mouseenter touchenter', this.handleOver, this);\n      EventHandler.add(this.secondHandle, 'mouseleave touchend', this.handleLeave, this);\n    } else {\n      EventHandler.remove(this.secondHandle, 'mousedown touchstart', this.handleFocus);\n      EventHandler.remove(this.secondHandle, 'transitionend', this.transitionEnd);\n      EventHandler.remove(this.secondHandle, 'mouseenter touchenter', this.handleOver);\n      EventHandler.remove(this.secondHandle, 'mouseleave touchend', this.handleLeave);\n    }\n  }\n\n  handleStart() {\n    if (this.type !== 'Range') {\n      this.firstHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);\n\n      if (this.isMaterialTooltip) {\n        this.materialHandle.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderHandleStart);\n\n        if (this.tooltipElement) {\n          this.tooltipElement.classList[this.handlePos1 === 0 ? 'add' : 'remove'](classNames.sliderTooltipStart);\n        }\n      }\n    }\n  }\n\n  transitionEnd(e) {\n    if (e.propertyName !== 'transform') {\n      this.handleStart();\n      this.getHandle().style.transition = 'none';\n\n      if (this.type !== 'Default') {\n        this.rangeBar.style.transition = 'none';\n      }\n\n      if (this.isMaterial && this.tooltip.isVisible && this.type === 'Default') {\n        this.tooltipElement.style.transition = this.transition.handle;\n      }\n\n      this.tooltipToggle(this.getHandle());\n      this.closeTooltip();\n    }\n  }\n\n  handleFocusOut() {\n    if (this.firstHandle.classList.contains(classNames.sliderHandleFocused)) {\n      this.firstHandle.classList.remove(classNames.sliderHandleFocused);\n    }\n\n    if (this.type === 'Range') {\n      if (this.secondHandle.classList.contains(classNames.sliderHandleFocused)) {\n        this.secondHandle.classList.remove(classNames.sliderHandleFocused);\n      }\n    }\n  }\n\n  handleFocus(e) {\n    this.focusSliderElement();\n    this.sliderBarClick(e);\n\n    if (e.currentTarget === this.firstHandle) {\n      this.firstHandle.classList.add(classNames.sliderHandleFocused);\n    } else {\n      this.secondHandle.classList.add(classNames.sliderHandleFocused);\n    }\n\n    EventHandler.add(document, 'mousemove touchmove', this.sliderBarMove, this);\n    EventHandler.add(document, 'mouseup touchend', this.sliderBarUp, this);\n  }\n\n  handleOver(e) {\n    if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover') {\n      this.tooltipToggle(e.currentTarget);\n    }\n\n    if (this.type === 'Default') {\n      this.tooltipToggle(this.getHandle());\n    }\n  }\n\n  handleLeave(e) {\n    if (this.tooltip.isVisible && this.tooltip.showOn === 'Hover' && !e.currentTarget.classList.contains(classNames.sliderHandleFocused) && !e.currentTarget.classList.contains(classNames.sliderTabHandle)) {\n      this.closeTooltip();\n    }\n  }\n\n  setHandler() {\n    if (this.min > this.max) {\n      this.min = this.max;\n    }\n\n    this.createFirstHandle();\n\n    if (this.type === 'Range') {\n      this.createSecondHandle();\n    }\n  }\n\n  setEnableRTL() {\n    this.enableRtl && this.orientation !== 'Vertical' ? addClass([this.sliderContainer], classNames.rtl) : removeClass([this.sliderContainer], classNames.rtl);\n    let preDir = this.orientation !== 'Vertical' ? this.horDir : this.verDir;\n\n    if (this.enableRtl) {\n      this.horDir = 'right';\n      this.verDir = 'bottom';\n    } else {\n      this.horDir = 'left';\n      this.verDir = 'bottom';\n    }\n\n    let currDir = this.orientation !== 'Vertical' ? this.horDir : this.verDir;\n\n    if (preDir !== currDir) {\n      if (this.orientation === 'Horizontal') {\n        setStyleAttribute(this.firstHandle, {\n          'right': '',\n          'left': 'auto'\n        });\n\n        if (this.type === 'Range') {\n          setStyleAttribute(this.secondHandle, {\n            'top': '',\n            'left': 'auto'\n          });\n        }\n      }\n    }\n\n    this.setBarColor();\n  }\n\n  tooltipValue() {\n    let text;\n    const args = {\n      value: this.value,\n      text: ''\n    };\n\n    if (this.initialTooltip) {\n      this.initialTooltip = false;\n      this.setTooltipContent();\n      args.text = text = this.tooltipObj.content;\n      this.trigger('tooltipChange', args, observedArgs => {\n        this.addTooltipClass(observedArgs.text);\n\n        if (text !== observedArgs.text) {\n          this.customAriaText = observedArgs.text;\n          this.tooltipObj.content = observedArgs.text;\n          this.setAriaAttrValue(this.firstHandle);\n\n          if (this.type === 'Range') {\n            this.setAriaAttrValue(this.secondHandle);\n          }\n        }\n      });\n\n      if (this.isMaterialTooltip) {\n        this.setPreviousVal('change', this.value);\n      }\n    }\n  }\n\n  setTooltipContent() {\n    let content;\n    content = this.formatContent(this.tooltipFormatInfo, false);\n    this.tooltipObj.content = content;\n  }\n\n  formatContent(formatInfo, ariaContent) {\n    let content = '';\n    let handle1 = this.handleVal1;\n    let handle2 = this.handleVal2;\n\n    if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n      handle1 = this.customValues[this.handleVal1];\n      handle2 = this.customValues[this.handleVal2];\n    }\n\n    if (!ariaContent) {\n      if (this.type === 'Range') {\n        if (this.enableRtl && this.orientation !== 'Vertical') {\n          content = !isNullOrUndefined(formatInfo.format) ? this.formatString(handle2, formatInfo).formatString + ' - ' + this.formatString(handle1, formatInfo).formatString : handle2.toString() + ' - ' + handle1.toString();\n        } else {\n          content = !isNullOrUndefined(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString + ' - ' + this.formatString(handle2, formatInfo).formatString : handle1.toString() + ' - ' + handle2.toString();\n        }\n      } else {\n        if (!isNullOrUndefined(handle1)) {\n          content = !isNullOrUndefined(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString : handle1.toString();\n        }\n      }\n\n      return content;\n    } else {\n      if (this.type === 'Range') {\n        if (this.enableRtl && this.orientation !== 'Vertical') {\n          content = !isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format) ? this.formatString(handle2, formatInfo).elementVal + ' - ' + this.formatString(handle1, formatInfo).elementVal : handle2.toString() + ' - ' + handle1.toString();\n        } else {\n          content = !isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal + ' - ' + this.formatString(handle2, formatInfo).elementVal : handle1.toString() + ' - ' + handle2.toString();\n        }\n      } else {\n        if (!isNullOrUndefined(handle1)) {\n          content = !isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal : handle1.toString();\n        }\n      }\n\n      return content;\n    }\n  }\n\n  addTooltipClass(content) {\n    if (this.isMaterialTooltip) {\n      let count = content.toString().length;\n\n      if (!this.tooltipElement) {\n        let cssClass = count > 4 ? classNames.sliderMaterialRange : classNames.sliderMaterialDefault;\n        this.tooltipObj.cssClass = classNames.sliderTooltip + ' ' + cssClass;\n      } else {\n        let cssClass = count > 4 ? {\n          oldCss: classNames.sliderMaterialDefault,\n          newCss: classNames.sliderMaterialRange\n        } : {\n          oldCss: classNames.sliderMaterialRange,\n          newCss: classNames.sliderMaterialDefault\n        };\n        this.tooltipElement.classList.remove(cssClass.oldCss);\n\n        if (!this.tooltipElement.classList.contains(cssClass.newCss)) {\n          this.tooltipElement.classList.add(cssClass.newCss);\n          this.tooltipElement.style.transform = count > 4 ? 'scale(1)' : this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n        }\n      }\n    }\n  }\n\n  tooltipPlacement() {\n    return this.orientation === 'Horizontal' ? this.tooltip.placement === 'Before' ? 'TopCenter' : 'BottomCenter' : this.tooltip.placement === 'Before' ? 'LeftCenter' : 'RightCenter';\n  }\n\n  tooltipBeforeOpen(args) {\n    this.tooltipElement = args.element;\n\n    if (this.tooltip.cssClass) {\n      addClass([this.tooltipElement], this.tooltip.cssClass.split(' ').filter(css => css));\n    }\n\n    args.target.removeAttribute('aria-describedby');\n\n    if (this.isMaterialTooltip) {\n      this.tooltipElement.firstElementChild.classList.add(classNames.materialTooltipHide);\n      this.handleStart();\n      this.setTooltipTransform();\n    }\n  }\n\n  tooltipCollision(position) {\n    if (this.isBootstrap || this.isBootstrap4 || this.isMaterial && !this.isMaterialTooltip) {\n      const tooltipOffsetValue = this.isBootstrap4 ? bootstrap4TooltipOffset : bootstrapTooltipOffset;\n\n      switch (position) {\n        case 'TopCenter':\n          this.tooltipObj.setProperties({\n            'offsetY': -tooltipOffsetValue\n          }, false);\n          break;\n\n        case 'BottomCenter':\n          this.tooltipObj.setProperties({\n            'offsetY': tooltipOffsetValue\n          }, false);\n          break;\n\n        case 'LeftCenter':\n          this.tooltipObj.setProperties({\n            'offsetX': -tooltipOffsetValue\n          }, false);\n          break;\n\n        case 'RightCenter':\n          this.tooltipObj.setProperties({\n            'offsetX': tooltipOffsetValue\n          }, false);\n          break;\n      }\n    }\n  }\n\n  materialTooltipEventCallBack(event) {\n    this.sliderBarClick(event);\n    EventHandler.add(document, 'mousemove touchmove', this.sliderBarMove, this);\n    EventHandler.add(document, 'mouseup touchend', this.sliderBarUp, this);\n  }\n\n  wireMaterialTooltipEvent(destroy) {\n    if (this.isMaterialTooltip) {\n      if (!destroy) {\n        EventHandler.add(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack, this);\n      } else {\n        EventHandler.remove(this.tooltipElement, 'mousedown touchstart', this.materialTooltipEventCallBack);\n      }\n    }\n  }\n\n  tooltipPositionCalculation(position) {\n    let cssClass;\n\n    switch (position) {\n      case 'TopCenter':\n        cssClass = classNames.horizontalTooltipBefore;\n        break;\n\n      case 'BottomCenter':\n        cssClass = classNames.horizontalTooltipAfter;\n        break;\n\n      case 'LeftCenter':\n        cssClass = classNames.verticalTooltipBefore;\n        break;\n\n      case 'RightCenter':\n        cssClass = classNames.verticalTooltipAfter;\n        break;\n    }\n\n    return cssClass;\n  }\n\n  getTooltipTransformProperties(className) {\n    let transformProperties;\n\n    if (this.tooltipElement) {\n      let position = this.orientation === 'Horizontal' ? this.tooltipElement.clientHeight + 14 - this.tooltipElement.clientHeight / 2 : this.tooltipElement.clientWidth + 14 - this.tooltipElement.clientWidth / 2;\n      transformProperties = this.orientation === 'Horizontal' ? className === classNames.horizontalTooltipBefore ? {\n        rotate: 'rotate(45deg)',\n        translate: `translateY(${position}px)`\n      } : {\n        rotate: 'rotate(225deg)',\n        translate: `translateY(${-position}px)`\n      } : className === classNames.verticalTooltipBefore ? {\n        rotate: 'rotate(-45deg)',\n        translate: `translateX(${position}px)`\n      } : {\n        rotate: 'rotate(-225deg)',\n        translate: `translateX(${-position}px)`\n      };\n    }\n\n    return transformProperties;\n  }\n\n  openMaterialTooltip() {\n    if (this.isMaterialTooltip) {\n      this.refreshTooltip(this.firstHandle);\n      let tooltipContentElement = this.tooltipElement.firstElementChild;\n      tooltipContentElement.classList.remove(classNames.materialTooltipHide);\n      tooltipContentElement.classList.add(classNames.materialTooltipShow);\n      this.firstHandle.style.cursor = 'default';\n      this.tooltipElement.style.transition = this.scaleTransform;\n      this.tooltipElement.classList.add(classNames.materialTooltipOpen);\n      this.materialHandle.style.transform = 'scale(0)';\n\n      if (tooltipContentElement.innerText.length > 4) {\n        this.tooltipElement.style.transform = 'scale(1)';\n      } else {\n        this.tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n      }\n\n      if (this.type === 'Default') {\n        setTimeout(() => {\n          this.tooltipElement.style.transition = this.transition.handle;\n        }, 2500);\n      } else {\n        setTimeout(() => {\n          this.tooltipElement.style.transition = 'none';\n        }, 2500);\n      }\n    }\n  }\n\n  closeMaterialTooltip() {\n    if (this.isMaterialTooltip) {\n      let tooltipContentElement = this.tooltipElement.firstElementChild;\n      this.tooltipElement.style.transition = this.scaleTransform;\n      tooltipContentElement.classList.remove(classNames.materialTooltipShow);\n      tooltipContentElement.classList.add(classNames.materialTooltipHide);\n      this.firstHandle.style.cursor = '-webkit-grab';\n      this.firstHandle.style.cursor = 'grab';\n\n      if (this.materialHandle) {\n        this.materialHandle.style.transform = 'scale(1)';\n      }\n\n      this.tooltipElement.classList.remove(classNames.materialTooltipOpen);\n      this.setTooltipTransform();\n      this.tooltipTarget = undefined;\n      setTimeout(() => {\n        this.tooltipElement.style.transition = 'none';\n      }, 2500);\n    }\n  }\n\n  checkTooltipPosition(args) {\n    let tooltipClass = this.tooltipPositionCalculation(args.collidedPosition);\n\n    if (this.tooltipCollidedPosition === undefined || this.tooltipCollidedPosition !== args.collidedPosition || !args.element.classList.contains(tooltipClass)) {\n      if (this.isMaterialTooltip) {\n        if (tooltipClass !== undefined) {\n          args.element.classList.remove(this.previousTooltipClass);\n          args.element.classList.add(tooltipClass);\n          this.previousTooltipClass = tooltipClass;\n        }\n\n        if (args.element.style.transform && args.element.classList.contains(classNames.materialTooltipOpen) && args.element.firstElementChild.innerText.length <= 4) {\n          args.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;\n        }\n      }\n\n      this.tooltipCollidedPosition = args.collidedPosition;\n    }\n\n    if (this.isMaterialTooltip && this.tooltipElement && this.tooltipElement.style.transform.indexOf('translate') !== -1) {\n      this.setTooltipTransform();\n    }\n  }\n\n  setTooltipTransform() {\n    let transformProperties = this.getTooltipTransformProperties(this.previousTooltipClass);\n\n    if (this.tooltipElement.firstElementChild.innerText.length > 4) {\n      this.tooltipElement.style.transform = `${transformProperties.translate} scale(0.01)`;\n    } else {\n      this.tooltipElement.style.transform = `${transformProperties.translate} ${transformProperties.rotate} scale(0.01)`;\n    }\n  }\n\n  renderTooltip() {\n    this.tooltipObj = new Tooltip({\n      showTipPointer: this.isBootstrap || this.isMaterial || this.isBootstrap4 || this.isTailwind,\n      cssClass: classNames.sliderTooltip,\n      height: this.isMaterial ? 30 : 'auto',\n      animation: {\n        open: {\n          effect: 'None'\n        },\n        close: {\n          effect: 'FadeOut',\n          duration: 500\n        }\n      },\n      opensOn: 'Custom',\n      beforeOpen: this.tooltipBeforeOpen.bind(this),\n      beforeCollision: this.checkTooltipPosition.bind(this),\n      beforeClose: this.tooltipBeforeClose.bind(this),\n      enableHtmlSanitizer: this.enableHtmlSanitizer\n    });\n    this.tooltipObj.appendTo(this.firstHandle);\n    this.initializeTooltipProps();\n  }\n\n  initializeTooltipProps() {\n    let tooltipShowOn = this.isMaterialTooltip ? 'Always' : this.tooltip.showOn === 'Auto' ? 'Hover' : this.tooltip.showOn;\n    this.setProperties({\n      tooltip: {\n        showOn: tooltipShowOn\n      }\n    }, true);\n    this.tooltipObj.position = this.tooltipPlacement();\n    this.tooltipCollision(this.tooltipObj.position);\n    [this.firstHandle, this.rangeBar, this.secondHandle].forEach(handle => {\n      if (!isNullOrUndefined(handle)) {\n        handle.style.transition = 'none';\n      }\n    });\n\n    if (this.isMaterialTooltip) {\n      this.sliderContainer.classList.add(classNames.materialSlider);\n      this.tooltipValue();\n      this.tooltipObj.animation.close.effect = 'None';\n      this.tooltipObj.open(this.firstHandle);\n    }\n  }\n\n  tooltipBeforeClose() {\n    this.tooltipElement = undefined;\n    this.tooltipCollidedPosition = undefined;\n  }\n\n  setButtons() {\n    this.firstBtn = this.createElement('div', {\n      className: classNames.sliderButton + ' ' + classNames.firstButton\n    });\n    this.firstBtn.appendChild(this.createElement('span', {\n      className: classNames.sliderButtonIcon\n    }));\n\n    if (this.isTailwind) {\n      this.firstBtn.querySelector('span').classList.add('e-icons');\n    }\n\n    this.firstBtn.tabIndex = -1;\n    this.secondBtn = this.createElement('div', {\n      className: classNames.sliderButton + ' ' + classNames.secondButton\n    });\n    this.secondBtn.appendChild(this.createElement('span', {\n      className: classNames.sliderButtonIcon\n    }));\n\n    if (this.isTailwind) {\n      this.secondBtn.querySelector('span').classList.add('e-icons');\n    }\n\n    this.secondBtn.tabIndex = -1;\n    this.sliderContainer.classList.add(classNames.sliderButtonClass);\n    this.sliderContainer.appendChild(this.firstBtn);\n    this.sliderContainer.appendChild(this.secondBtn);\n    this.sliderContainer.appendChild(this.element);\n    this.buttonTitle();\n  }\n\n  buttonTitle() {\n    let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n    this.l10n.setLocale(this.locale);\n    let decrementTitle = this.l10n.getConstant('decrementTitle');\n    let incrementTitle = this.l10n.getConstant('incrementTitle');\n    attributes(enabledRTL ? this.secondBtn : this.firstBtn, {\n      'aria-label': decrementTitle,\n      title: decrementTitle\n    });\n    attributes(enabledRTL ? this.firstBtn : this.secondBtn, {\n      'aria-label': incrementTitle,\n      title: incrementTitle\n    });\n  }\n\n  buttonFocusOut() {\n    if (this.isMaterial) {\n      this.getHandle().classList.remove('e-large-thumb-size');\n    }\n  }\n\n  repeatButton(args) {\n    let hVal = this.handleValueUpdate();\n    let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n    let value;\n\n    if (args.target.parentElement.classList.contains(classNames.firstButton) || args.target.classList.contains(classNames.firstButton)) {\n      enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), true) : value = this.add(hVal, parseFloat(this.step.toString()), false);\n    } else if (args.target.parentElement.classList.contains(classNames.secondButton) || args.target.classList.contains(classNames.secondButton)) {\n      enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), false) : value = this.add(hVal, parseFloat(this.step.toString()), true);\n    }\n\n    if (this.limits.enabled) {\n      value = this.getLimitCorrectedValues(value);\n    }\n\n    if (value >= this.min && value <= this.max) {\n      this.changeHandleValue(value);\n      this.tooltipToggle(this.getHandle());\n    }\n  }\n\n  repeatHandlerMouse(args) {\n    args.preventDefault();\n\n    if (args.type === 'mousedown' || args.type === 'touchstart') {\n      this.buttonClick(args);\n      this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, args);\n    }\n  }\n\n  materialChange() {\n    if (!this.getHandle().classList.contains('e-large-thumb-size')) {\n      this.getHandle().classList.add('e-large-thumb-size');\n    }\n  }\n\n  repeatHandlerUp(e) {\n    this.changeEvent('changed', e);\n    this.closeTooltip();\n    clearInterval(this.repeatInterval);\n    this.getHandle().focus();\n  }\n\n  customTickCounter(bigNum) {\n    let tickCount = 4;\n\n    if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n      if (bigNum > 4) {\n        tickCount = 3;\n      }\n\n      if (bigNum > 7) {\n        tickCount = 2;\n      }\n\n      if (bigNum > 14) {\n        tickCount = 1;\n      }\n\n      if (bigNum > 28) {\n        tickCount = 0;\n      }\n    }\n\n    return tickCount;\n  } // tslint:disable-next-line:max-func-body-length\n\n\n  renderScale() {\n    let orien = this.orientation === 'Vertical' ? 'v' : 'h';\n    this.noOfDecimals = this.numberOfDecimals(this.step);\n    this.ul = this.createElement('ul', {\n      className: classNames.scale + ' ' + 'e-' + orien + '-scale ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),\n      attrs: {\n        role: 'presentation',\n        tabIndex: '-1',\n        'aria-hidden': 'true'\n      }\n    });\n    this.ul.style.zIndex = '-1';\n\n    if (Browser.isAndroid && orien === 'h') {\n      this.ul.classList.add(classNames.sliderTickPosition);\n    }\n\n    let smallStep = this.ticks.smallStep;\n\n    if (!this.ticks.showSmallTicks) {\n      this.ticks.largeStep > 0 ? smallStep = this.ticks.largeStep : smallStep = parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));\n    } else if (smallStep <= 0) {\n      smallStep = parseFloat(formatUnit(this.step));\n    }\n\n    let min = this.fractionalToInteger(this.min);\n    let max = this.fractionalToInteger(this.max);\n    let steps = this.fractionalToInteger(smallStep);\n    let bigNum = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1;\n    let customStep = this.customTickCounter(bigNum);\n    let count = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? bigNum * customStep + bigNum : Math.abs((max - min) / steps);\n    this.element.appendChild(this.ul);\n    let li;\n    let start = parseFloat(this.min.toString());\n\n    if (orien === 'v') {\n      start = parseFloat(this.max.toString());\n    }\n\n    let left = 0;\n    let islargeTick;\n    let tickWidth = 100 / count;\n\n    if (tickWidth === Infinity) {\n      tickWidth = 5;\n    }\n\n    for (let i = 0, y = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? this.customValues.length - 1 : 0, k = 0; i <= count; i++) {\n      li = this.createElement('li', {\n        attrs: {\n          class: classNames.tick,\n          role: 'presentation',\n          tabIndex: '-1',\n          'aria-hidden': 'true'\n        }\n      });\n\n      if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n        islargeTick = i % (customStep + 1) === 0;\n\n        if (islargeTick) {\n          if (orien === 'h') {\n            start = this.customValues[k];\n            k++;\n          } else {\n            start = this.customValues[y];\n            y--;\n          }\n\n          li.setAttribute('title', start.toString());\n        }\n      } else {\n        li.setAttribute('title', start.toString());\n\n        if (this.numberOfDecimals(this.max) === 0 && this.numberOfDecimals(this.min) === 0 && this.numberOfDecimals(this.step) === 0) {\n          if (orien === 'h') {\n            islargeTick = (start - parseFloat(this.min.toString())) % this.ticks.largeStep === 0 ? true : false;\n          } else {\n            islargeTick = Math.abs(start - parseFloat(this.max.toString())) % this.ticks.largeStep === 0 ? true : false;\n          }\n        } else {\n          let largestep = this.fractionalToInteger(this.ticks.largeStep);\n          let startValue = this.fractionalToInteger(start);\n\n          if (orien === 'h') {\n            islargeTick = (startValue - min) % largestep === 0 ? true : false;\n          } else {\n            islargeTick = Math.abs(startValue - parseFloat(max.toString())) % largestep === 0 ? true : false;\n          }\n        }\n      }\n\n      if (islargeTick) {\n        li.classList.add(classNames.large);\n      }\n\n      orien === 'h' ? li.style.width = tickWidth + '%' : li.style.height = tickWidth + '%';\n      let repeat = islargeTick ? this.ticks.placement === 'Both' ? 2 : 1 : 0;\n\n      if (islargeTick) {\n        for (let j = 0; j < repeat; j++) {\n          this.createTick(li, start, tickWidth);\n        }\n      } else if (isNullOrUndefined(this.customValues)) {\n        this.formatTicksValue(li, start);\n      }\n\n      this.ul.appendChild(li);\n      this.tickElementCollection.push(li);\n      let decimalPoints;\n\n      if (isNullOrUndefined(this.customValues)) {\n        if (this.numberOfDecimals(smallStep) > this.numberOfDecimals(start)) {\n          decimalPoints = this.numberOfDecimals(smallStep);\n        } else {\n          decimalPoints = this.numberOfDecimals(start);\n        }\n\n        if (orien === 'h') {\n          start = this.makeRoundNumber(start + smallStep, decimalPoints);\n        } else {\n          start = this.makeRoundNumber(start - smallStep, decimalPoints);\n        }\n\n        left = this.makeRoundNumber(left + smallStep, decimalPoints);\n      }\n    }\n\n    this.ticksAlignment(orien, tickWidth);\n  }\n\n  ticksAlignment(orien, tickWidth, triggerEvent = true) {\n    this.firstChild = this.ul.firstElementChild;\n    this.lastChild = this.ul.lastElementChild;\n    this.firstChild.classList.add(classNames.sliderFirstTick);\n    this.lastChild.classList.add(classNames.sliderLastTick);\n    this.sliderContainer.classList.add(classNames.scale + '-' + this.ticks.placement.toLowerCase());\n\n    if (orien === 'h') {\n      this.firstChild.style.width = tickWidth / 2 + '%';\n      this.lastChild.style.width = tickWidth / 2 + '%';\n    } else {\n      this.firstChild.style.height = tickWidth / 2 + '%';\n      this.lastChild.style.height = tickWidth / 2 + '%';\n    }\n\n    let eventArgs = {\n      ticksWrapper: this.ul,\n      tickElements: this.tickElementCollection\n    };\n\n    if (triggerEvent) {\n      this.trigger('renderedTicks', eventArgs);\n    }\n\n    this.scaleAlignment();\n  }\n\n  createTick(li, start, tickWidth) {\n    let span = this.createElement('span', {\n      className: classNames.tickValue + ' ' + classNames.tick + '-' + this.ticks.placement.toLowerCase(),\n      attrs: {\n        role: 'presentation',\n        tabIndex: '-1',\n        'aria-hidden': 'true'\n      }\n    });\n    li.appendChild(span);\n\n    if (isNullOrUndefined(this.customValues)) {\n      this.formatTicksValue(li, start, span, tickWidth);\n    } else {\n      if (this.enableHtmlSanitizer) {\n        span.innerHTML = SanitizeHtmlHelper.sanitize(start.toString());\n      } else {\n        span.innerHTML = start.toString();\n      }\n    }\n  }\n\n  formatTicksValue(li, start, spanElement, tickWidth) {\n    const tickText = this.formatNumber(start);\n    const text = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ? this.formatString(start, this.ticksFormatInfo).formatString : tickText;\n    const eventArgs = {\n      value: start,\n      text: text,\n      tickElement: li\n    };\n    this.trigger('renderingTicks', eventArgs, observedArgs => {\n      li.setAttribute('title', observedArgs.text.toString());\n\n      if (spanElement) {\n        if (this.enableHtmlSanitizer) {\n          spanElement.innerHTML = SanitizeHtmlHelper.sanitize(observedArgs.text.toString());\n        } else {\n          spanElement.innerHTML = observedArgs.text.toString();\n        }\n      }\n    });\n  }\n\n  scaleAlignment() {\n    this.tickValuePosition();\n    let orien = this.orientation === 'Vertical' ? 'v' : 'h';\n\n    if (this.orientation === 'Vertical') {\n      this.element.getBoundingClientRect().width <= 15 ? this.sliderContainer.classList.add(classNames.sliderSmallSize) : this.sliderContainer.classList.remove(classNames.sliderSmallSize);\n    } else {\n      this.element.getBoundingClientRect().height <= 15 ? this.sliderContainer.classList.add(classNames.sliderSmallSize) : this.sliderContainer.classList.remove(classNames.sliderSmallSize);\n    }\n  }\n\n  tickValuePosition() {\n    this.firstChild = this.element.querySelector('ul').children[0];\n    let first = this.firstChild.getBoundingClientRect();\n    let firstChild;\n    let otherChild;\n    let smallStep = this.ticks.smallStep;\n    let count = Math.abs(parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / smallStep;\n\n    if (this.firstChild.children.length > 0) {\n      firstChild = this.firstChild.children[0].getBoundingClientRect();\n    }\n\n    let tickElements = [this.sliderContainer.querySelectorAll('.' + classNames.tick + '.' + classNames.large + ' .' + classNames.tickValue)];\n    let other;\n\n    if (this.ticks.placement === 'Both') {\n      other = [].slice.call(tickElements[0], 2);\n    } else {\n      other = [].slice.call(tickElements[0], 1);\n    }\n\n    let tickWidth = this.orientation === 'Vertical' ? first.height * 2 : first.width * 2;\n\n    for (let i = 0; i < this.firstChild.children.length; i++) {\n      if (this.orientation === 'Vertical') {\n        this.firstChild.children[i].style.top = -(firstChild.height / 2) + 'px';\n      } else {\n        if (!this.enableRtl) {\n          this.firstChild.children[i].style.left = -(firstChild.width / 2) + 'px';\n        } else {\n          this.firstChild.children[i].style.left = (tickWidth - this.firstChild.children[i].getBoundingClientRect().width) / 2 + 'px';\n        }\n      }\n    }\n\n    for (let i = 0; i < other.length; i++) {\n      otherChild = other[i].getBoundingClientRect();\n\n      if (this.orientation === 'Vertical') {\n        setStyleAttribute(other[i], {\n          top: (tickWidth - otherChild.height) / 2 + 'px'\n        });\n      } else {\n        setStyleAttribute(other[i], {\n          left: (tickWidth - otherChild.width) / 2 + 'px'\n        });\n      }\n    }\n\n    if (this.enableRtl && this.lastChild.children.length && count !== 0) {\n      this.lastChild.children[0].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';\n\n      if (this.ticks.placement === 'Both') {\n        this.lastChild.children[1].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + 'px';\n      }\n    }\n\n    if (count === 0) {\n      if (this.orientation === 'Horizontal') {\n        if (!this.enableRtl) {\n          this.firstChild.classList.remove(classNames.sliderLastTick);\n          this.firstChild.style.left = this.firstHandle.style.left;\n        } else {\n          this.firstChild.classList.remove(classNames.sliderLastTick);\n          this.firstChild.style.right = this.firstHandle.style.right;\n          this.firstChild.children[0].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + 'px';\n\n          if (this.ticks.placement === 'Both') {\n            this.firstChild.children[1].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + 'px';\n          }\n        }\n      }\n\n      if (this.orientation === 'Vertical') {\n        this.firstChild.classList.remove(classNames.sliderLastTick);\n      }\n    }\n  }\n\n  setAriaAttrValue(element) {\n    let ariaValueText;\n    const isTickFormatted = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ? true : false;\n    let text = !isTickFormatted ? this.formatContent(this.ticksFormatInfo, false) : this.formatContent(this.tooltipFormatInfo, false);\n    const valuenow = isTickFormatted ? this.formatContent(this.ticksFormatInfo, true) : this.formatContent(this.tooltipFormatInfo, true);\n    text = !this.customAriaText ? text : this.customAriaText;\n\n    if (text.split(' - ').length === 2) {\n      ariaValueText = text.split(' - ');\n    } else {\n      ariaValueText = [text, text];\n    }\n\n    this.setAriaAttributes(element);\n\n    if (this.type !== 'Range') {\n      attributes(element, {\n        'aria-valuenow': valuenow,\n        'aria-valuetext': text\n      });\n    } else {\n      // eslint-disable-next-line\n      !this.enableRtl ? element === this.firstHandle ? attributes(element, {\n        'aria-valuenow': valuenow.split(' - ')[0],\n        'aria-valuetext': ariaValueText[0]\n      }) : attributes(element, {\n        'aria-valuenow': valuenow.split(' - ')[1],\n        'aria-valuetext': ariaValueText[1]\n      }) : element === this.firstHandle ? attributes(element, {\n        'aria-valuenow': valuenow.split(' - ')[1],\n        'aria-valuetext': ariaValueText[1]\n      }) : attributes(element, {\n        'aria-valuenow': valuenow.split(' - ')[0],\n        'aria-valuetext': ariaValueText[0]\n      });\n    }\n  }\n\n  handleValueUpdate() {\n    let hVal;\n\n    if (this.type === 'Range') {\n      if (this.activeHandle === 1) {\n        hVal = this.handleVal1;\n      } else {\n        hVal = this.handleVal2;\n      }\n    } else {\n      hVal = this.handleVal1;\n    }\n\n    return hVal;\n  }\n\n  getLimitCorrectedValues(value) {\n    if (this.type === 'MinRange' || this.type === 'Default') {\n      value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];\n    } else {\n      if (this.activeHandle === 1) {\n        value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];\n      } else {\n        value = this.getLimitValueAndPosition(value, this.limits.maxStart, this.limits.maxEnd)[0];\n      }\n    }\n\n    return value;\n  }\n\n  focusSliderElement() {\n    if (!this.isElementFocused) {\n      this.element.focus();\n      this.isElementFocused = true;\n    }\n  }\n\n  buttonClick(args) {\n    this.focusSliderElement();\n    let value;\n    const enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n    const hVal = this.handleValueUpdate();\n\n    if (args.keyCode === 40 || args.keyCode === 37 || args.currentTarget.classList.contains(classNames.firstButton)) {\n      // eslint-disable-next-line\n      enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), true) : value = this.add(hVal, parseFloat(this.step.toString()), false);\n    } else if (args.keyCode === 38 || args.keyCode === 39 || args.currentTarget.classList.contains(classNames.secondButton)) {\n      // eslint-disable-next-line\n      enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), false) : value = this.add(hVal, parseFloat(this.step.toString()), true);\n    } else if (args.keyCode === 33 || args.currentTarget.classList.contains(classNames.firstButton)) {\n      // eslint-disable-next-line\n      enabledRTL ? value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false) : value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true);\n    } else if (args.keyCode === 34 || args.currentTarget.classList.contains(classNames.secondButton)) {\n      // eslint-disable-next-line\n      enabledRTL ? value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true) : value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false);\n    } else if (args.keyCode === 36) {\n      value = parseFloat(this.min.toString());\n    } else if (args.keyCode === 35) {\n      value = parseFloat(this.max.toString());\n    }\n\n    if (this.limits.enabled) {\n      value = this.getLimitCorrectedValues(value);\n    }\n\n    this.changeHandleValue(value);\n\n    if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n      this.materialChange();\n    }\n\n    this.tooltipToggle(this.getHandle());\n    this.getHandle().focus();\n\n    if (args.currentTarget.classList.contains(classNames.firstButton)) {\n      EventHandler.add(this.firstBtn, 'mouseup touchend', this.buttonUp, this);\n    }\n\n    if (args.currentTarget.classList.contains(classNames.secondButton)) {\n      EventHandler.add(this.secondBtn, 'mouseup touchend', this.buttonUp, this);\n    }\n  }\n\n  tooltipToggle(target) {\n    if (this.isMaterialTooltip) {\n      // eslint-disable-next-line\n      !this.tooltipElement.classList.contains(classNames.materialTooltipOpen) ? this.openMaterialTooltip() : this.refreshTooltip(this.firstHandle);\n    } else {\n      // eslint-disable-next-line\n      !this.tooltipElement ? this.openTooltip(target) : this.refreshTooltip(target);\n    }\n  }\n\n  buttonUp(args) {\n    if (args.currentTarget.classList.contains(classNames.firstButton)) {\n      EventHandler.remove(this.firstBtn, 'mouseup touchend', this.buttonUp);\n    }\n\n    if (args.currentTarget.classList.contains(classNames.secondButton)) {\n      EventHandler.remove(this.secondBtn, 'mouseup touchend', this.buttonUp);\n    }\n  }\n\n  setRangeBar() {\n    if (this.orientation === 'Horizontal') {\n      if (this.type === 'MinRange') {\n        // eslint-disable-next-line\n        this.enableRtl ? this.rangeBar.style.right = '0px' : this.rangeBar.style.left = '0px';\n        setStyleAttribute(this.rangeBar, {\n          'width': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px'\n        });\n      } else {\n        // eslint-disable-next-line\n        this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + 'px' : this.rangeBar.style.left = this.handlePos1 + 'px';\n        setStyleAttribute(this.rangeBar, {\n          'width': this.handlePos2 - this.handlePos1 + 'px'\n        });\n      }\n    } else {\n      if (this.type === 'MinRange') {\n        this.rangeBar.style.bottom = '0px';\n        setStyleAttribute(this.rangeBar, {\n          'height': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px'\n        });\n      } else {\n        this.rangeBar.style.bottom = this.handlePos1 + 'px';\n        setStyleAttribute(this.rangeBar, {\n          'height': this.handlePos2 - this.handlePos1 + 'px'\n        });\n      }\n    }\n  }\n\n  checkValidValueAndPos(value) {\n    value = this.checkHandleValue(value);\n    value = this.checkHandlePosition(value);\n    return value;\n  }\n\n  setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion) {\n    if (this.orientation === 'Horizontal') {\n      if (!this.enableRtl) {\n        this.limitBarFirst.style.left = fromMinPostion + 'px';\n        this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + 'px';\n      } else {\n        this.limitBarFirst.style.right = fromMinPostion + 'px';\n        this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + 'px';\n      }\n    } else {\n      this.limitBarFirst.style.bottom = fromMinPostion + 'px';\n      this.limitBarFirst.style.height = fromMaxpostion - fromMinPostion + 'px';\n    }\n\n    if (this.type === 'Range') {\n      if (this.orientation === 'Horizontal') {\n        if (!this.enableRtl) {\n          this.limitBarSecond.style.left = toMinPostion + 'px';\n          this.limitBarSecond.style.width = toMaxpostion - toMinPostion + 'px';\n        } else {\n          this.limitBarSecond.style.right = toMinPostion + 'px';\n          this.limitBarSecond.style.width = toMaxpostion - toMinPostion + 'px';\n        }\n      } else {\n        this.limitBarSecond.style.bottom = toMinPostion + 'px';\n        this.limitBarSecond.style.height = toMaxpostion - toMinPostion + 'px';\n      }\n    }\n  }\n\n  setLimitBar() {\n    if (this.type === 'Default' || this.type === 'MinRange') {\n      let fromPosition = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];\n      fromPosition = this.checkValidValueAndPos(fromPosition);\n      let toPosition = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];\n      toPosition = this.checkValidValueAndPos(toPosition);\n      this.setLimitBarPositions(fromPosition, toPosition);\n    } else if (this.type === 'Range') {\n      let fromMinPostion = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];\n      fromMinPostion = this.checkValidValueAndPos(fromMinPostion);\n      let fromMaxpostion = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];\n      fromMaxpostion = this.checkValidValueAndPos(fromMaxpostion);\n      let toMinPostion = this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, true)[0];\n      toMinPostion = this.checkValidValueAndPos(toMinPostion);\n      let toMaxpostion = this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, true)[0];\n      toMaxpostion = this.checkValidValueAndPos(toMaxpostion);\n      this.setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion);\n    }\n  }\n\n  getLimitValueAndPosition(currentValue, minValue, maxValue, limitBar) {\n    if (isNullOrUndefined(minValue)) {\n      minValue = this.min;\n\n      if (isNullOrUndefined(currentValue) && limitBar) {\n        currentValue = minValue;\n      }\n    }\n\n    if (isNullOrUndefined(maxValue)) {\n      maxValue = this.max;\n\n      if (isNullOrUndefined(currentValue) && limitBar) {\n        currentValue = maxValue;\n      }\n    }\n\n    if (currentValue < minValue) {\n      currentValue = minValue;\n    }\n\n    if (currentValue > maxValue) {\n      currentValue = maxValue;\n    }\n\n    return [currentValue, this.checkHandlePosition(currentValue)];\n  }\n\n  setValue() {\n    if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {\n      this.min = 0;\n      this.max = this.customValues.length - 1;\n      this.setBarColor();\n    }\n\n    this.setAriaAttributes(this.firstHandle);\n    this.handleVal1 = isNullOrUndefined(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) : this.checkHandleValue(parseFloat(this.value.toString()));\n    this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n    this.preHandlePos1 = this.handlePos1; // eslint-disable-next-line\n\n    isNullOrUndefined(this.activeHandle) ? this.type === 'Range' ? this.activeHandle = 2 : this.activeHandle = 1 : // eslint-disable-next-line no-self-assign\n    this.activeHandle = this.activeHandle;\n\n    if (this.type === 'Default' || this.type === 'MinRange') {\n      if (this.limits.enabled) {\n        const values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n        this.handleVal1 = values[0];\n        this.handlePos1 = values[1];\n        this.preHandlePos1 = this.handlePos1;\n      }\n\n      this.setHandlePosition(null);\n      this.handleStart();\n      this.value = this.handleVal1;\n      this.setAriaAttrValue(this.firstHandle);\n      this.changeEvent('changed', null);\n    } else {\n      this.validateRangeValue();\n    }\n\n    if (this.type !== 'Default') {\n      this.setRangeBar();\n    }\n\n    if (this.limits.enabled) {\n      this.setLimitBar();\n    }\n  }\n\n  rangeValueUpdate() {\n    if (this.value === null || typeof this.value !== 'object') {\n      this.value = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];\n    }\n  }\n\n  validateRangeValue() {\n    this.rangeValueUpdate();\n    this.setRangeValue();\n  }\n\n  modifyZindex() {\n    if (this.type === 'Range') {\n      if (this.activeHandle === 1) {\n        this.firstHandle.style.zIndex = this.zIndex + 4 + '';\n        this.secondHandle.style.zIndex = this.zIndex + 3 + '';\n      } else {\n        this.firstHandle.style.zIndex = this.zIndex + 3 + '';\n        this.secondHandle.style.zIndex = this.zIndex + 4 + '';\n      }\n    } else if (this.isMaterialTooltip && this.tooltipElement) {\n      this.tooltipElement.style.zIndex = getZindexPartial(this.element) + '';\n    }\n  }\n\n  setHandlePosition(event) {\n    let handle;\n    const pos = this.activeHandle === 1 ? this.handlePos1 : this.handlePos2;\n\n    if (this.isMaterialTooltip) {\n      handle = [this.firstHandle, this.materialHandle];\n    } else {\n      handle = [this.getHandle()];\n    }\n\n    this.handleStart();\n    handle.forEach(handle => {\n      if (this.orientation === 'Horizontal') {\n        // eslint-disable-next-line\n        this.enableRtl ? handle.style.right = `${pos}px` : handle.style.left = `${pos}px`;\n      } else {\n        handle.style.bottom = `${pos}px`;\n      }\n    });\n    this.changeEvent('change', event);\n  }\n\n  getHandle() {\n    return this.activeHandle === 1 ? this.firstHandle : this.secondHandle;\n  }\n\n  setRangeValue() {\n    this.updateRangeValue();\n    this.activeHandle = 1;\n    this.setHandlePosition(null);\n    this.activeHandle = 2;\n    this.setHandlePosition(null);\n    this.activeHandle = 1;\n  }\n\n  changeEvent(eventName, e) {\n    let previous = eventName === 'change' ? this.previousVal : this.previousChanged;\n\n    if (this.type !== 'Range') {\n      this.setProperties({\n        'value': this.handleVal1\n      }, true);\n\n      if (previous !== this.value && (!this.isMaterialTooltip || !this.initialTooltip)) {\n        this.trigger(eventName, this.changeEventArgs(eventName, e));\n        this.initialTooltip = true;\n        this.setPreviousVal(eventName, this.value);\n      }\n\n      this.setAriaAttrValue(this.firstHandle);\n    } else {\n      let value = this.value = [this.handleVal1, this.handleVal2];\n      this.setProperties({\n        'value': value\n      }, true);\n\n      if (previous.length === this.value.length && this.value[0] !== previous[0] || this.value[1] !== previous[1]) {\n        this.initialTooltip = false;\n        this.trigger(eventName, this.changeEventArgs(eventName, e));\n        this.initialTooltip = true;\n        this.setPreviousVal(eventName, this.value);\n      }\n\n      this.setAriaAttrValue(this.getHandle());\n    }\n\n    this.hiddenInput.value = this.value.toString();\n  }\n\n  changeEventArgs(eventName, e) {\n    let eventArgs;\n\n    if (this.tooltip.isVisible && this.tooltipObj && this.initialTooltip) {\n      this.tooltipValue();\n      eventArgs = {\n        value: this.value,\n        previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,\n        action: eventName,\n        text: this.tooltipObj.content,\n        isInteracted: isNullOrUndefined(e) ? false : true\n      };\n    } else {\n      eventArgs = {\n        value: this.value,\n        previousValue: eventName === 'change' ? this.previousVal : this.previousChanged,\n        action: eventName,\n        text: isNullOrUndefined(this.ticksFormatInfo.format) ? this.value.toString() : this.type !== 'Range' ? this.formatString(this.value, this.ticksFormatInfo).formatString : this.formatString(this.value[0], this.ticksFormatInfo).formatString + ' - ' + this.formatString(this.value[1], this.ticksFormatInfo).formatString,\n        isInteracted: isNullOrUndefined(e) ? false : true\n      };\n    }\n\n    return eventArgs;\n  }\n\n  setPreviousVal(eventName, value) {\n    if (eventName === 'change') {\n      this.previousVal = value;\n    } else {\n      this.previousChanged = value;\n    }\n  }\n\n  updateRangeValue() {\n    const values = this.value.toString().split(',').map(Number);\n\n    if (this.enableRtl && this.orientation !== 'Vertical' || this.rtl) {\n      this.value = [values[1], values[0]];\n    } else {\n      this.value = [values[0], values[1]];\n    }\n\n    if (this.enableRtl && this.orientation !== 'Vertical') {\n      this.handleVal1 = this.checkHandleValue(this.value[1]);\n      this.handleVal2 = this.checkHandleValue(this.value[0]);\n    } else {\n      this.handleVal1 = this.checkHandleValue(this.value[0]);\n      this.handleVal2 = this.checkHandleValue(this.value[1]);\n    }\n\n    this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n    this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n\n    if (this.handlePos1 > this.handlePos2) {\n      this.handlePos1 = this.handlePos2;\n      this.handleVal1 = this.handleVal2;\n    }\n\n    this.preHandlePos1 = this.handlePos1;\n    this.preHandlePos2 = this.handlePos2;\n\n    if (this.limits.enabled) {\n      this.activeHandle = 1;\n      let values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n      this.handleVal1 = values[0];\n      this.handlePos1 = values[1];\n      this.preHandlePos1 = this.handlePos1;\n      this.activeHandle = 2;\n      values = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);\n      this.handleVal2 = values[0];\n      this.handlePos2 = values[1];\n      this.preHandlePos2 = this.handlePos2;\n    }\n  }\n\n  checkHandlePosition(value) {\n    let pos;\n    value = 100 * (value - parseFloat(formatUnit(this.min))) / (parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min)));\n\n    if (this.orientation === 'Horizontal') {\n      pos = this.element.getBoundingClientRect().width * (value / 100);\n    } else {\n      pos = this.element.getBoundingClientRect().height * (value / 100);\n    }\n\n    if (parseFloat(formatUnit(this.max)) === parseFloat(formatUnit(this.min))) {\n      if (this.orientation === 'Horizontal') {\n        pos = this.element.getBoundingClientRect().width;\n      } else {\n        pos = this.element.getBoundingClientRect().height;\n      }\n    }\n\n    return pos;\n  }\n\n  checkHandleValue(value) {\n    if (this.min > this.max) {\n      this.min = this.max;\n    }\n\n    if (this.min === this.max) {\n      return parseFloat(formatUnit(this.max));\n    }\n\n    let handle = this.tempStartEnd();\n\n    if (value < handle.start) {\n      value = handle.start;\n    } else if (value > handle.end) {\n      value = handle.end;\n    }\n\n    return value;\n  }\n  /**\n   * It is used to reposition slider.\n   * @returns void\n   */\n\n\n  reposition() {\n    this.firstHandle.style.transition = 'none';\n\n    if (this.type !== 'Default') {\n      this.rangeBar.style.transition = 'none';\n    }\n\n    if (this.type === 'Range') {\n      this.secondHandle.style.transition = 'none';\n    }\n\n    this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n\n    if (this.handleVal2) {\n      this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n    }\n\n    if (this.orientation === 'Horizontal') {\n      // eslint-disable-next-line\n      this.enableRtl ? this.firstHandle.style.right = `${this.handlePos1}px` : this.firstHandle.style.left = `${this.handlePos1}px`;\n\n      if (this.isMaterialTooltip) {\n        // eslint-disable-next-line\n        this.enableRtl ? this.materialHandle.style.right = `${this.handlePos1}px` : this.materialHandle.style.left = `${this.handlePos1}px`;\n      }\n\n      if (this.type === 'MinRange') {\n        // eslint-disable-next-line\n        this.enableRtl ? this.rangeBar.style.right = '0px' : this.rangeBar.style.left = '0px';\n        setStyleAttribute(this.rangeBar, {\n          'width': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px'\n        });\n      } else if (this.type === 'Range') {\n        // eslint-disable-next-line\n        this.enableRtl ? this.secondHandle.style.right = `${this.handlePos2}px` : this.secondHandle.style.left = `${this.handlePos2}px`; // eslint-disable-next-line\n\n        this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + 'px' : this.rangeBar.style.left = this.handlePos1 + 'px';\n        setStyleAttribute(this.rangeBar, {\n          'width': this.handlePos2 - this.handlePos1 + 'px'\n        });\n      }\n    } else {\n      this.firstHandle.style.bottom = `${this.handlePos1}px`;\n\n      if (this.isMaterialTooltip) {\n        this.materialHandle.style.bottom = `${this.handlePos1}px`;\n      }\n\n      if (this.type === 'MinRange') {\n        this.rangeBar.style.bottom = '0px';\n        setStyleAttribute(this.rangeBar, {\n          'height': isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + 'px'\n        });\n      } else if (this.type === 'Range') {\n        this.secondHandle.style.bottom = `${this.handlePos2}px`;\n        this.rangeBar.style.bottom = this.handlePos1 + 'px';\n        setStyleAttribute(this.rangeBar, {\n          'height': this.handlePos2 - this.handlePos1 + 'px'\n        });\n      }\n    }\n\n    if (this.limits.enabled) {\n      this.setLimitBar();\n    }\n\n    if (this.ticks.placement !== 'None' && this.ul) {\n      this.removeElement(this.ul);\n      this.ul = undefined;\n      this.renderScale();\n    }\n\n    this.handleStart();\n\n    if (!this.tooltip.isVisible) {\n      setTimeout(() => {\n        this.firstHandle.style.transition = this.scaleTransform;\n\n        if (this.type === 'Range') {\n          this.secondHandle.style.transition = this.scaleTransform;\n        }\n      });\n    }\n\n    this.refreshTooltip(this.tooltipTarget);\n    this.setBarColor();\n  }\n\n  changeHandleValue(value) {\n    let position = null;\n\n    if (this.activeHandle === 1) {\n      if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n        this.handleVal1 = this.checkHandleValue(value);\n        this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n\n        if (this.type === 'Range' && this.handlePos1 > this.handlePos2) {\n          this.handlePos1 = this.handlePos2;\n          this.handleVal1 = this.handleVal2;\n        }\n\n        if (this.handlePos1 !== this.preHandlePos1) {\n          position = this.preHandlePos1 = this.handlePos1;\n        }\n      }\n\n      this.modifyZindex();\n    } else {\n      if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n        this.handleVal2 = this.checkHandleValue(value);\n        this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n\n        if (this.type === 'Range' && this.handlePos2 < this.handlePos1) {\n          this.handlePos2 = this.handlePos1;\n          this.handleVal2 = this.handleVal1;\n        }\n\n        if (this.handlePos2 !== this.preHandlePos2) {\n          position = this.preHandlePos2 = this.handlePos2;\n        }\n      }\n\n      this.modifyZindex();\n    }\n\n    if (position !== null) {\n      if (this.type !== 'Default') {\n        this.setRangeBar();\n      }\n\n      this.setHandlePosition(null);\n    }\n  } // eslint-disable-next-line\n\n\n  tempStartEnd() {\n    if (this.min > this.max) {\n      return {\n        start: this.max,\n        end: this.min\n      };\n    } else {\n      return {\n        start: this.min,\n        end: this.max\n      };\n    }\n  } // eslint-disable-next-line\n\n\n  xyToPosition(position) {\n    let pos;\n\n    if (this.min === this.max) {\n      return 100;\n    }\n\n    if (this.orientation === 'Horizontal') {\n      let left = position.x - this.element.getBoundingClientRect().left;\n      let num = this.element.offsetWidth / 100;\n      this.val = left / num;\n    } else {\n      let top = position.y - this.element.getBoundingClientRect().top;\n      let num = this.element.offsetHeight / 100;\n      this.val = 100 - top / num;\n    }\n\n    let val = this.stepValueCalculation(this.val);\n\n    if (val < 0) {\n      val = 0;\n    } else if (val > 100) {\n      val = 100;\n    }\n\n    if (this.enableRtl && this.orientation !== 'Vertical') {\n      val = 100 - val;\n    }\n\n    if (this.orientation === 'Horizontal') {\n      pos = this.element.getBoundingClientRect().width * (val / 100);\n    } else {\n      pos = this.element.getBoundingClientRect().height * (val / 100);\n    }\n\n    return pos;\n  }\n\n  stepValueCalculation(value) {\n    if (this.step === 0) {\n      this.step = 1;\n    }\n\n    let percentStep = parseFloat(formatUnit(this.step)) / ((parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / 100);\n    let remain = value % Math.abs(percentStep);\n\n    if (remain !== 0) {\n      if (percentStep / 2 > remain) {\n        value -= remain;\n      } else {\n        value += Math.abs(percentStep) - remain;\n      }\n    }\n\n    return value;\n  }\n\n  add(a, b, addition) {\n    let precision;\n    let x = Math.pow(10, precision || 3);\n    let val;\n\n    if (addition) {\n      val = (Math.round(a * x) + Math.round(b * x)) / x;\n    } else {\n      val = (Math.round(a * x) - Math.round(b * x)) / x;\n    }\n\n    return val;\n  }\n\n  positionToValue(pos) {\n    let val;\n    let diff = parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));\n\n    if (this.orientation === 'Horizontal') {\n      val = pos / this.element.getBoundingClientRect().width * diff;\n    } else {\n      val = pos / this.element.getBoundingClientRect().height * diff;\n    }\n\n    let total = this.add(val, parseFloat(this.min.toString()), true);\n    return total;\n  }\n\n  sliderBarClick(evt) {\n    evt.preventDefault(); // eslint-disable-next-line\n\n    let pos;\n\n    if (evt.type === 'mousedown' || evt.type === 'mouseup' || evt.type === 'click') {\n      pos = {\n        x: evt.clientX,\n        y: evt.clientY\n      };\n    } else if (evt.type === 'touchend' || evt.type === 'touchstart') {\n      pos = {\n        x: evt.changedTouches[0].clientX,\n        y: evt.changedTouches[0].clientY\n      };\n    }\n\n    let handlepos = this.xyToPosition(pos);\n    let handleVal = this.positionToValue(handlepos);\n\n    if (this.type === 'Range' && this.handlePos2 - handlepos < handlepos - this.handlePos1) {\n      this.activeHandle = 2;\n\n      if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n        if (this.limits.enabled) {\n          let value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);\n          handleVal = value[0];\n          handlepos = value[1];\n        }\n\n        this.secondHandle.classList.add(classNames.sliderActiveHandle);\n        this.handlePos2 = this.preHandlePos2 = handlepos;\n        this.handleVal2 = handleVal;\n      }\n\n      this.modifyZindex();\n      this.secondHandle.focus();\n    } else {\n      this.activeHandle = 1;\n\n      if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n        if (this.limits.enabled) {\n          let value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n          handleVal = value[0];\n          handlepos = value[1];\n        }\n\n        this.firstHandle.classList.add(classNames.sliderActiveHandle);\n        this.handlePos1 = this.preHandlePos1 = handlepos;\n        this.handleVal1 = handleVal;\n      }\n\n      this.modifyZindex();\n      this.firstHandle.focus();\n    }\n\n    if (this.isMaterialTooltip) {\n      this.tooltipElement.classList.add(classNames.materialTooltipActive);\n    }\n\n    let focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);\n\n    if (focusedElement && this.getHandle() !== focusedElement) {\n      focusedElement.classList.remove(classNames.sliderTabHandle);\n    }\n\n    let handle = this.activeHandle === 1 ? this.firstHandle : this.secondHandle;\n\n    if (evt.target === handle) {\n      if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n        this.materialChange();\n      }\n\n      this.sliderBarUp(evt);\n      this.tooltipToggle(this.getHandle());\n      return;\n    }\n\n    if (!this.checkRepeatedValue(handleVal)) {\n      return;\n    }\n\n    let transition = this.isMaterial && this.tooltip.isVisible ? this.transitionOnMaterialTooltip : this.transition;\n    this.getHandle().style.transition = transition.handle;\n\n    if (this.type !== 'Default') {\n      this.rangeBar.style.transition = transition.rangeBar;\n    }\n\n    this.setHandlePosition(evt);\n\n    if (this.isMaterialTooltip) {\n      this.initialTooltip = false;\n    }\n\n    this.changeEvent('changed', evt);\n\n    if (this.type !== 'Default') {\n      this.setRangeBar();\n    }\n  }\n\n  handleValueAdjust(handleValue, assignValue, handleNumber) {\n    if (handleNumber === 1) {\n      this.handleVal1 = assignValue;\n      this.handleVal2 = this.handleVal1 + this.minDiff;\n    } else if (handleNumber === 2) {\n      this.handleVal2 = assignValue;\n      this.handleVal1 = this.handleVal2 - this.minDiff;\n    }\n\n    this.handlePos1 = this.checkHandlePosition(this.handleVal1);\n    this.handlePos2 = this.checkHandlePosition(this.handleVal2);\n  }\n\n  dragRangeBarMove(event) {\n    if (event.type !== 'touchmove') {\n      event.preventDefault();\n    }\n\n    this.rangeBarDragged = true;\n    let pos;\n    this.rangeBar.style.transition = 'none';\n    this.firstHandle.style.transition = 'none';\n    this.secondHandle.style.transition = 'none';\n    let xPostion;\n    let yPostion;\n\n    if (event.type === 'mousemove') {\n      [xPostion, yPostion] = [event.clientX, event.clientY];\n    } else {\n      [xPostion, yPostion] = [event.changedTouches[0].clientX, event.changedTouches[0].clientY];\n    }\n\n    if (!(this.limits.enabled && this.limits.startHandleFixed) && !(this.limits.enabled && this.limits.endHandleFixed)) {\n      if (!this.enableRtl) {\n        pos = {\n          x: xPostion - this.firstPartRemain,\n          y: yPostion + this.secondPartRemain\n        };\n      } else {\n        pos = {\n          x: xPostion + this.secondPartRemain,\n          y: yPostion + this.secondPartRemain\n        };\n      }\n\n      this.handlePos1 = this.xyToPosition(pos);\n      this.handleVal1 = this.positionToValue(this.handlePos1);\n\n      if (!this.enableRtl) {\n        pos = {\n          x: xPostion + this.secondPartRemain,\n          y: yPostion - this.firstPartRemain\n        };\n      } else {\n        pos = {\n          x: xPostion - this.firstPartRemain,\n          y: yPostion - this.firstPartRemain\n        };\n      }\n\n      this.handlePos2 = this.xyToPosition(pos);\n      this.handleVal2 = this.positionToValue(this.handlePos2);\n\n      if (this.limits.enabled) {\n        let value = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);\n        this.handleVal1 = value[0];\n        this.handlePos1 = value[1];\n\n        if (this.handleVal1 === this.limits.minEnd) {\n          this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1);\n        }\n\n        if (this.handleVal1 === this.limits.minStart) {\n          this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1);\n        }\n\n        value = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);\n        this.handleVal2 = value[0];\n        this.handlePos2 = value[1];\n\n        if (this.handleVal2 === this.limits.maxStart) {\n          this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2);\n        }\n\n        if (this.handleVal2 === this.limits.maxEnd) {\n          this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);\n        }\n      }\n\n      if (this.handleVal2 === this.max) {\n        this.handleValueAdjust(this.handleVal2, this.max, 2);\n      }\n\n      if (this.handleVal1 === this.min) {\n        this.handleValueAdjust(this.handleVal1, this.min, 1);\n      }\n    }\n\n    this.activeHandle = 1;\n    this.setHandlePosition(event);\n    this.activeHandle = 2;\n    this.setHandlePosition(event);\n    this.tooltipToggle(this.rangeBar);\n    this.setRangeBar();\n  }\n\n  sliderBarUp(event) {\n    this.changeEvent('changed', event);\n    this.handleFocusOut();\n    this.firstHandle.classList.remove(classNames.sliderActiveHandle);\n\n    if (this.type === 'Range') {\n      this.initialTooltip = false;\n      this.secondHandle.classList.remove(classNames.sliderActiveHandle);\n    }\n\n    this.closeTooltip();\n\n    if (this.isMaterial) {\n      this.getHandle().classList.remove('e-large-thumb-size');\n\n      if (this.isMaterialTooltip) {\n        this.tooltipElement.classList.remove(classNames.materialTooltipActive);\n      }\n    }\n\n    EventHandler.remove(document, 'mousemove touchmove', this.sliderBarMove);\n    EventHandler.remove(document, 'mouseup touchend', this.sliderBarUp);\n  }\n\n  sliderBarMove(evt) {\n    if (evt.type !== 'touchmove') {\n      evt.preventDefault();\n    }\n\n    let pos;\n\n    if (evt.type === 'mousemove') {\n      pos = {\n        x: evt.clientX,\n        y: evt.clientY\n      };\n    } else {\n      pos = {\n        x: evt.changedTouches[0].clientX,\n        y: evt.changedTouches[0].clientY\n      };\n    }\n\n    let handlepos = this.xyToPosition(pos);\n    let handleVal = this.positionToValue(handlepos);\n    handlepos = Math.round(handlepos);\n\n    if (this.type !== 'Range' && this.activeHandle === 1) {\n      if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n        if (this.limits.enabled) {\n          let valueAndPostion = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n          handlepos = valueAndPostion[1];\n          handleVal = valueAndPostion[0];\n        }\n\n        this.handlePos1 = handlepos;\n        this.handleVal1 = handleVal;\n      }\n\n      this.firstHandle.classList.add(classNames.sliderActiveHandle);\n    }\n\n    if (this.type === 'Range') {\n      if (this.activeHandle === 1) {\n        this.firstHandle.classList.add(classNames.sliderActiveHandle);\n\n        if (!(this.limits.enabled && this.limits.startHandleFixed)) {\n          if (handlepos > this.handlePos2) {\n            handlepos = this.handlePos2;\n            handleVal = this.handleVal2;\n          }\n\n          if (handlepos !== this.preHandlePos1) {\n            if (this.limits.enabled) {\n              let value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);\n              handleVal = value[0];\n              handlepos = value[1];\n            }\n\n            this.handlePos1 = this.preHandlePos1 = handlepos;\n            this.handleVal1 = handleVal;\n            this.activeHandle = 1;\n          }\n        }\n      } else if (this.activeHandle === 2) {\n        this.secondHandle.classList.add(classNames.sliderActiveHandle);\n\n        if (!(this.limits.enabled && this.limits.endHandleFixed)) {\n          if (handlepos < this.handlePos1) {\n            handlepos = this.handlePos1;\n            handleVal = this.handleVal1;\n          }\n\n          if (handlepos !== this.preHandlePos2) {\n            if (this.limits.enabled) {\n              let value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);\n              handleVal = value[0];\n              handlepos = value[1];\n            }\n\n            this.handlePos2 = this.preHandlePos2 = handlepos;\n            this.handleVal2 = handleVal;\n            this.activeHandle = 2;\n          }\n        }\n      }\n    }\n\n    if (!this.checkRepeatedValue(handleVal)) {\n      return;\n    }\n\n    this.getHandle().style.transition = this.scaleTransform;\n\n    if (this.type !== 'Default') {\n      this.rangeBar.style.transition = 'none';\n    }\n\n    this.setHandlePosition(evt);\n\n    if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames.sliderTabHandle)) {\n      this.materialChange();\n    }\n\n    this.tooltipToggle(this.getHandle());\n\n    if (this.type !== 'Default') {\n      this.setRangeBar();\n    }\n  }\n\n  dragRangeBarUp(event) {\n    if (!this.rangeBarDragged) {\n      this.focusSliderElement();\n      this.sliderBarClick(event);\n    } else {\n      this.isDragComplete = true;\n    }\n\n    this.changeEvent('changed', event);\n    this.closeTooltip();\n    EventHandler.remove(document, 'mousemove touchmove', this.dragRangeBarMove);\n    EventHandler.remove(document, 'mouseup touchend', this.dragRangeBarUp);\n    this.rangeBarDragged = false;\n  }\n\n  checkRepeatedValue(currentValue) {\n    if (this.type === 'Range') {\n      let previousVal = this.enableRtl && this.orientation !== 'Vertical' ? this.activeHandle === 1 ? this.previousVal[1] : this.previousVal[0] : this.activeHandle === 1 ? this.previousVal[0] : this.previousVal[1];\n\n      if (currentValue === previousVal) {\n        return 0;\n      }\n    } else {\n      if (currentValue === this.previousVal) {\n        return 0;\n      }\n    }\n\n    return 1;\n  }\n\n  refreshTooltip(target) {\n    if (this.tooltip.isVisible && this.tooltipObj) {\n      this.tooltipValue();\n\n      if (target) {\n        this.tooltipObj.refresh(target);\n        this.tooltipTarget = target;\n      }\n    }\n  }\n\n  openTooltip(target) {\n    if (this.tooltip.isVisible && this.tooltipObj && !this.isMaterialTooltip) {\n      this.tooltipValue();\n      this.tooltipObj.open(target);\n      this.tooltipTarget = target;\n    }\n  }\n\n  closeTooltip() {\n    if (this.tooltip.isVisible && this.tooltipObj && this.tooltip.showOn !== 'Always' && !this.isMaterialTooltip) {\n      this.tooltipValue();\n      this.tooltipObj.close();\n      this.tooltipTarget = undefined;\n    }\n  }\n\n  keyDown(event) {\n    switch (event.keyCode) {\n      case 37:\n      case 38:\n      case 39:\n      case 40:\n      case 33:\n      case 34:\n      case 36:\n      case 35:\n        event.preventDefault();\n        this.buttonClick(event);\n        break;\n    }\n  }\n\n  wireButtonEvt(destroy) {\n    if (!destroy) {\n      EventHandler.add(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut, this);\n      EventHandler.add(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut, this);\n      EventHandler.add(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);\n      EventHandler.add(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);\n      EventHandler.add(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse, this);\n      EventHandler.add(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp, this);\n      EventHandler.add(this.firstBtn, 'focusout', this.sliderFocusOut, this);\n      EventHandler.add(this.secondBtn, 'focusout', this.sliderFocusOut, this);\n    } else {\n      EventHandler.remove(this.firstBtn, 'mouseleave touchleave', this.buttonFocusOut);\n      EventHandler.remove(this.secondBtn, 'mouseleave touchleave', this.buttonFocusOut);\n      EventHandler.remove(this.firstBtn, 'mousedown touchstart', this.repeatHandlerMouse);\n      EventHandler.remove(this.firstBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);\n      EventHandler.remove(this.secondBtn, 'mousedown touchstart', this.repeatHandlerMouse);\n      EventHandler.remove(this.secondBtn, 'mouseup mouseleave touchup touchend', this.repeatHandlerUp);\n      EventHandler.remove(this.firstBtn, 'focusout', this.sliderFocusOut);\n      EventHandler.remove(this.secondBtn, 'focusout', this.sliderFocusOut);\n    }\n  }\n\n  rangeBarMousedown(event) {\n    event.preventDefault();\n    this.focusSliderElement();\n\n    if (this.type === 'Range' && this.drag && event.target === this.rangeBar) {\n      let xPostion;\n      let yPostion;\n\n      if (event.type === 'mousedown') {\n        [xPostion, yPostion] = [event.clientX, event.clientY];\n      } else if (event.type === 'touchstart') {\n        [xPostion, yPostion] = [event.changedTouches[0].clientX, event.changedTouches[0].clientY];\n      }\n\n      if (this.orientation === 'Horizontal') {\n        this.firstPartRemain = xPostion - this.rangeBar.getBoundingClientRect().left;\n        this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - xPostion;\n      } else {\n        this.firstPartRemain = yPostion - this.rangeBar.getBoundingClientRect().top;\n        this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - yPostion;\n      }\n\n      this.minDiff = this.handleVal2 - this.handleVal1;\n      this.tooltipToggle(this.rangeBar);\n      let focusedElement = this.element.querySelector('.' + classNames.sliderTabHandle);\n\n      if (focusedElement) {\n        focusedElement.classList.remove(classNames.sliderTabHandle);\n      }\n\n      EventHandler.add(document, 'mousemove touchmove', this.dragRangeBarMove, this);\n      EventHandler.add(document, 'mouseup touchend', this.dragRangeBarUp, this);\n    }\n  }\n\n  elementClick(event) {\n    if (this.isDragComplete) {\n      this.isDragComplete = false;\n      return;\n    }\n\n    event.preventDefault();\n    this.focusSliderElement();\n    this.sliderBarClick(event);\n  }\n\n  wireEvents() {\n    this.onresize = this.reposition.bind(this);\n    window.addEventListener('resize', this.onresize);\n\n    if (this.enabled && !this.readonly) {\n      EventHandler.add(this.element, 'click', this.elementClick, this);\n\n      if (this.type === 'Range' && this.drag) {\n        EventHandler.add(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown, this);\n      }\n\n      EventHandler.add(this.sliderContainer, 'keydown', this.keyDown, this);\n      EventHandler.add(this.sliderContainer, 'keyup', this.keyUp, this);\n      EventHandler.add(this.element, 'focusout', this.sliderFocusOut, this);\n      EventHandler.add(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover, this);\n      this.wireFirstHandleEvt(false);\n\n      if (this.type === 'Range') {\n        this.wireSecondHandleEvt(false);\n      }\n\n      if (this.showButtons) {\n        this.wireButtonEvt(false);\n      }\n\n      this.wireMaterialTooltipEvent(false);\n\n      if (this.isForm) {\n        EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n      }\n    }\n  }\n\n  unwireEvents() {\n    EventHandler.remove(this.element, 'click', this.elementClick);\n\n    if (this.type === 'Range' && this.drag) {\n      EventHandler.remove(this.rangeBar, 'mousedown touchstart', this.rangeBarMousedown);\n    }\n\n    EventHandler.remove(this.sliderContainer, 'keydown', this.keyDown);\n    EventHandler.remove(this.sliderContainer, 'keyup', this.keyUp);\n    EventHandler.remove(this.element, 'focusout', this.sliderFocusOut);\n    EventHandler.remove(this.sliderContainer, 'mouseover mouseout touchstart touchend', this.hover);\n    this.wireFirstHandleEvt(true);\n\n    if (this.type === 'Range') {\n      this.wireSecondHandleEvt(true);\n    }\n\n    if (this.showButtons) {\n      this.wireButtonEvt(true);\n    }\n\n    this.wireMaterialTooltipEvent(true);\n    EventHandler.remove(this.element, 'reset', this.formResetHandler);\n  }\n\n  formResetHandler() {\n    this.setProperties({\n      'value': this.formResetValue\n    }, true);\n    this.setValue();\n  }\n\n  keyUp(event) {\n    if (event.keyCode === 9 && event.target.classList.contains(classNames.sliderHandle)) {\n      this.focusSliderElement();\n\n      if (!event.target.classList.contains(classNames.sliderTabHandle)) {\n        if (this.element.querySelector('.' + classNames.sliderTabHandle)) {\n          this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);\n        }\n\n        event.target.classList.add(classNames.sliderTabHandle);\n        let parentElement = event.target.parentElement;\n\n        if (parentElement === this.element) {\n          parentElement.querySelector('.' + classNames.sliderTrack).classList.add(classNames.sliderTabTrack);\n\n          if (this.type === 'Range' || this.type === 'MinRange') {\n            parentElement.querySelector('.' + classNames.rangeBar).classList.add(classNames.sliderTabRange);\n          }\n        }\n\n        if (this.type === 'Range') {\n          event.target.previousSibling.classList.contains(classNames.sliderHandle) ? this.activeHandle = 2 : this.activeHandle = 1;\n        }\n\n        this.getHandle().focus();\n        this.tooltipToggle(this.getHandle());\n      }\n    }\n\n    this.closeTooltip();\n    this.changeEvent('changed', event);\n  }\n\n  hover(event) {\n    if (!isNullOrUndefined(event)) {\n      if (event.type === 'mouseover' || event.type === 'touchmove' || event.type === 'mousemove' || event.type === 'pointermove' || event.type === 'touchstart') {\n        this.sliderContainer.classList.add(classNames.sliderHover);\n      } else {\n        this.sliderContainer.classList.remove(classNames.sliderHover);\n      }\n    }\n  }\n\n  sliderFocusOut(event) {\n    if (event.relatedTarget !== this.secondHandle && event.relatedTarget !== this.firstHandle && event.relatedTarget !== this.element && event.relatedTarget !== this.firstBtn && event.relatedTarget !== this.secondBtn) {\n      this.closeMaterialTooltip();\n      this.closeTooltip();\n\n      if (this.element.querySelector('.' + classNames.sliderTabHandle)) {\n        this.element.querySelector('.' + classNames.sliderTabHandle).classList.remove(classNames.sliderTabHandle);\n      }\n\n      if (this.element.querySelector('.' + classNames.sliderTabTrack)) {\n        this.element.querySelector('.' + classNames.sliderTabTrack).classList.remove(classNames.sliderTabTrack);\n\n        if ((this.type === 'Range' || this.type === 'MinRange') && this.element.querySelector('.' + classNames.sliderTabRange)) {\n          this.element.querySelector('.' + classNames.sliderTabRange).classList.remove(classNames.sliderTabRange);\n        }\n      }\n\n      this.hiddenInput.focus();\n      this.hiddenInput.blur();\n      this.isElementFocused = false;\n    }\n  }\n\n  removeElement(element) {\n    if (element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  changeSliderType(type, args) {\n    if (this.isMaterialTooltip && this.materialHandle) {\n      this.sliderContainer.classList.remove(classNames.materialSlider);\n      this.removeElement(this.materialHandle);\n      this.materialHandle = undefined;\n    }\n\n    this.removeElement(this.firstHandle);\n    this.firstHandle = undefined;\n\n    if (type !== 'Default') {\n      if (type === 'Range') {\n        this.removeElement(this.secondHandle);\n        this.secondHandle = undefined;\n      }\n\n      this.removeElement(this.rangeBar);\n      this.rangeBar = undefined;\n    }\n\n    if (this.tooltip.isVisible && !isNullOrUndefined(this.tooltipObj)) {\n      this.tooltipObj.destroy();\n      this.tooltipElement = undefined;\n      this.tooltipCollidedPosition = undefined;\n    }\n\n    if (this.limits.enabled) {\n      if (type === 'MinRange' || type === 'Default') {\n        if (!isNullOrUndefined(this.limitBarFirst)) {\n          this.removeElement(this.limitBarFirst);\n          this.limitBarFirst = undefined;\n        }\n      } else {\n        if (!isNullOrUndefined(this.limitBarSecond)) {\n          this.removeElement(this.limitBarSecond);\n          this.limitBarSecond = undefined;\n        }\n      }\n    }\n\n    this.activeHandle = 1;\n    this.getThemeInitialization();\n\n    if (this.type === 'Range') {\n      this.rangeValueUpdate();\n    }\n\n    this.createRangeBar();\n\n    if (this.limits.enabled) {\n      this.createLimitBar();\n    }\n\n    this.setHandler();\n    this.setOrientClass();\n    this.wireFirstHandleEvt(false);\n\n    if (this.type === 'Range') {\n      this.wireSecondHandleEvt(false);\n    }\n\n    this.setValue();\n\n    if (this.tooltip.isVisible) {\n      this.renderTooltip();\n      this.wireMaterialTooltipEvent(false);\n    }\n\n    this.setBarColor();\n\n    if (args !== 'tooltip') {\n      this.updateConfig();\n    }\n  }\n\n  changeRtl() {\n    if (!this.enableRtl && this.type === 'Range') {\n      this.value = [this.handleVal2, this.handleVal1];\n    }\n\n    this.updateConfig();\n\n    if (this.tooltip.isVisible) {\n      this.tooltipObj.refresh(this.firstHandle);\n    }\n\n    if (this.showButtons) {\n      let enabledRTL = this.enableRtl && this.orientation !== 'Vertical';\n      attributes(enabledRTL ? this.secondBtn : this.firstBtn, {\n        'aria-label': 'Decrease',\n        title: 'Decrease'\n      });\n      attributes(enabledRTL ? this.firstBtn : this.secondBtn, {\n        'aria-label': 'Increase',\n        title: 'Increase'\n      });\n    }\n  }\n\n  changeOrientation() {\n    this.changeSliderType(this.type, 'null');\n  }\n\n  updateConfig() {\n    this.setEnableRTL();\n    this.setValue();\n\n    if (this.tooltip.isVisible) {\n      this.refreshTooltip(this.tooltipTarget);\n    }\n\n    if (this.ticks.placement !== 'None') {\n      if (this.ul) {\n        this.removeElement(this.ul);\n        this.ul = undefined;\n        this.renderScale();\n      }\n    }\n\n    this.limitsPropertyChange();\n  }\n\n  limitsPropertyChange() {\n    if (this.limits.enabled) {\n      if (isNullOrUndefined(this.limitBarFirst) && this.type !== 'Range') {\n        this.createLimitBar();\n      }\n\n      if (isNullOrUndefined(this.limitBarFirst) && isNullOrUndefined(this.limitBarSecond) && this.type === 'Range') {\n        this.createLimitBar();\n      }\n\n      this.setLimitBar();\n      this.setValue();\n    } else {\n      if (!isNullOrUndefined(this.limitBarFirst)) {\n        detach(this.limitBarFirst);\n      }\n\n      if (!isNullOrUndefined(this.limitBarSecond)) {\n        detach(this.limitBarSecond);\n      }\n    }\n  }\n  /**\n   * Get the properties to be maintained in the persisted state.\n   * @private\n   */\n\n\n  getPersistData() {\n    let keyEntity = ['value'];\n    return this.addOnPersist(keyEntity);\n  }\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers.\n   * Also it removes the attributes and classes.\n   * @method destroy\n   * @return {void}\n   */\n\n\n  destroy() {\n    super.destroy();\n    this.unwireEvents();\n    window.removeEventListener('resize', this.onresize);\n    removeClass([this.sliderContainer], [classNames.sliderDisabled]);\n    this.firstHandle.removeAttribute('aria-orientation');\n\n    if (this.type === 'Range') {\n      this.secondHandle.removeAttribute('aria-orientation');\n    }\n\n    this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer);\n    detach(this.sliderContainer);\n\n    if (this.tooltip.isVisible) {\n      this.tooltipObj.destroy();\n    }\n\n    this.element.innerHTML = '';\n  }\n  /**\n   * Calls internally if any of the property value is changed.\n   * @private\n   */\n  // tslint:disable-next-line\n\n\n  onPropertyChanged(newProp, oldProp) {\n    for (let prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'cssClass':\n          this.setCSSClass(oldProp.cssClass);\n          break;\n\n        case 'value':\n          if (newProp && oldProp) {\n            let value = isNullOrUndefined(newProp.value) ? this.type === 'Range' ? [this.min, this.max] : this.min : newProp.value;\n            this.setProperties({\n              'value': value\n            }, true);\n\n            if (!isNullOrUndefined(oldProp.value) && oldProp.value.toString() !== value.toString()) {\n              this.setValue();\n              this.refreshTooltip(this.tooltipTarget);\n\n              if (this.type === 'Range') {\n                if (isNullOrUndefined(newProp.value) || oldProp.value[1] === value[1]) {\n                  this.activeHandle = 1;\n                } else {\n                  this.activeHandle = 2;\n                }\n              }\n            }\n          }\n\n          break;\n\n        case 'min':\n        case 'step':\n        case 'max':\n          this.setMinMaxValue();\n          break;\n\n        case 'tooltip':\n          if (!isNullOrUndefined(newProp.tooltip) && !isNullOrUndefined(oldProp.tooltip)) {\n            this.setTooltip(prop);\n          }\n\n          break;\n\n        case 'type':\n          if (!isNullOrUndefined(oldProp) && Object.keys(oldProp).length && !isNullOrUndefined(oldProp.type)) {\n            this.changeSliderType(oldProp.type, prop);\n            this.setZindex();\n          }\n\n          break;\n\n        case 'enableRtl':\n          if (oldProp.enableRtl !== newProp.enableRtl && this.orientation !== 'Vertical') {\n            this.rtl = oldProp.enableRtl;\n            this.changeRtl();\n          }\n\n          break;\n\n        case 'limits':\n          this.limitsPropertyChange();\n          break;\n\n        case 'orientation':\n          this.changeOrientation();\n          break;\n\n        case 'ticks':\n          if (!isNullOrUndefined(this.sliderContainer.querySelector('.' + classNames.scale))) {\n            detach(this.ul);\n            Array.prototype.forEach.call(this.sliderContainer.classList, className => {\n              if (className.match(/e-scale-/)) {\n                this.sliderContainer.classList.remove(className);\n              }\n            });\n          }\n\n          if (this.ticks.placement !== 'None') {\n            this.renderScale();\n            this.setZindex();\n          }\n\n          break;\n\n        case 'locale':\n          if (this.showButtons) {\n            this.buttonTitle();\n          }\n\n          break;\n\n        case 'showButtons':\n          if (newProp.showButtons) {\n            this.setButtons();\n            this.reposition();\n\n            if (this.enabled && !this.readonly) {\n              this.wireButtonEvt(false);\n            }\n          } else {\n            if (this.firstBtn && this.secondBtn) {\n              this.sliderContainer.removeChild(this.firstBtn);\n              this.sliderContainer.removeChild(this.secondBtn);\n              this.sliderContainer.classList.remove(classNames.sliderButtonClass);\n              this.firstBtn = undefined;\n              this.secondBtn = undefined;\n              this.reposition();\n            }\n          }\n\n          break;\n\n        case 'enabled':\n          this.setEnabled();\n          break;\n\n        case 'readonly':\n          this.setReadOnly();\n          break;\n\n        case 'customValues':\n          this.setValue();\n          this.reposition();\n          break;\n\n        case 'colorRange':\n          this.reposition();\n          break;\n\n        case 'width':\n          this.setElementWidth(newProp.width);\n          this.setMinMaxValue();\n\n          if (this.limits) {\n            this.limitsPropertyChange();\n          }\n\n          break;\n      }\n    }\n  }\n\n  setReadOnly() {\n    if (this.readonly) {\n      this.unwireEvents();\n      this.sliderContainer.classList.add(classNames.readonly);\n    } else {\n      this.wireEvents();\n      this.sliderContainer.classList.remove(classNames.readonly);\n    }\n  }\n\n  setMinMaxValue() {\n    this.setValue();\n    this.refreshTooltip(this.tooltipTarget);\n\n    if (!isNullOrUndefined(this.sliderContainer.querySelector('.' + classNames.scale))) {\n      if (this.ul) {\n        detach(this.ul);\n        Array.prototype.forEach.call(this.sliderContainer.classList, className => {\n          if (className.match(/e-scale-/)) {\n            this.sliderContainer.classList.remove(className);\n          }\n        });\n      }\n    }\n\n    if (this.ticks.placement !== 'None') {\n      this.renderScale();\n      this.setZindex();\n    }\n  }\n\n  setZindex() {\n    this.zIndex = 6;\n\n    if (!isNullOrUndefined(this.ticks) && this.ticks.placement !== 'None') {\n      this.ul.style.zIndex = this.zIndex + -7 + '';\n      this.element.style.zIndex = this.zIndex + 2 + '';\n    }\n\n    if (!this.isMaterial && !isNullOrUndefined(this.ticks) && this.ticks.placement === 'Both') {\n      this.element.style.zIndex = this.zIndex + 2 + '';\n    }\n\n    this.firstHandle.style.zIndex = this.zIndex + 3 + '';\n\n    if (this.type === 'Range') {\n      this.secondHandle.style.zIndex = this.zIndex + 4 + '';\n    }\n  }\n\n  setTooltip(args) {\n    this.changeSliderType(this.type, args);\n  }\n\n  setBarColor() {\n    let trackPosition;\n    let trackClassName;\n    let child = this.sliderTrack.lastElementChild;\n\n    while (child) {\n      this.sliderTrack.removeChild(child);\n      child = this.sliderTrack.lastElementChild;\n    }\n\n    for (let i = 0; i < this.colorRange.length; i++) {\n      if (!isNullOrUndefined(this.colorRange[i].start) && !isNullOrUndefined(this.colorRange[i].end)) {\n        if (this.colorRange[i].end > this.colorRange[i].start) {\n          if (this.colorRange[i].start < this.min) {\n            this.colorRange[i].start = this.min;\n          }\n\n          if (this.colorRange[i].end > this.max) {\n            this.colorRange[i].end = this.max;\n          }\n\n          const startingPosition = this.checkHandlePosition(this.colorRange[i].start);\n          const endPosition = this.checkHandlePosition(this.colorRange[i].end);\n          const trackContainer = this.createElement('div');\n          trackContainer.style.backgroundColor = this.colorRange[i].color;\n          trackContainer.style.border = '1px solid ' + this.colorRange[i].color;\n\n          if (this.orientation === 'Horizontal') {\n            trackClassName = classNames.sliderHorizantalColor;\n\n            if (this.enableRtl) {\n              if (isNullOrUndefined(this.customValues)) {\n                trackPosition = this.checkHandlePosition(this.max) - this.checkHandlePosition(this.colorRange[i].end);\n              } else {\n                trackPosition = this.checkHandlePosition(this.customValues.length - this.colorRange[i].end - 1);\n              }\n            } else {\n              trackPosition = this.checkHandlePosition(this.colorRange[i].start);\n            }\n\n            trackContainer.style.width = endPosition - startingPosition + 'px';\n            trackContainer.style.left = trackPosition + 'px';\n          } else {\n            trackClassName = classNames.sliderVerticalColor;\n            trackPosition = this.checkHandlePosition(this.colorRange[i].start);\n            trackContainer.style.height = endPosition - startingPosition + 'px';\n            trackContainer.style.bottom = trackPosition + 'px';\n          }\n\n          trackContainer.classList.add(trackClassName);\n          this.sliderTrack.appendChild(trackContainer);\n        }\n      }\n    }\n  }\n  /**\n   * Gets the component name\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'slider';\n  }\n\n};\n\n__decorate$2([Property(null)], Slider.prototype, \"value\", void 0);\n\n__decorate$2([Property(null)], Slider.prototype, \"customValues\", void 0);\n\n__decorate$2([Property(1)], Slider.prototype, \"step\", void 0);\n\n__decorate$2([Property(null)], Slider.prototype, \"width\", void 0);\n\n__decorate$2([Property(0)], Slider.prototype, \"min\", void 0);\n\n__decorate$2([Property(100)], Slider.prototype, \"max\", void 0);\n\n__decorate$2([Property(false)], Slider.prototype, \"readonly\", void 0);\n\n__decorate$2([Property('Default')], Slider.prototype, \"type\", void 0);\n\n__decorate$2([Collection([{}], ColorRangeData)], Slider.prototype, \"colorRange\", void 0);\n\n__decorate$2([Complex({}, TicksData)], Slider.prototype, \"ticks\", void 0);\n\n__decorate$2([Complex({}, LimitData)], Slider.prototype, \"limits\", void 0);\n\n__decorate$2([Property(true)], Slider.prototype, \"enabled\", void 0);\n\n__decorate$2([Complex({}, TooltipData)], Slider.prototype, \"tooltip\", void 0);\n\n__decorate$2([Property(false)], Slider.prototype, \"showButtons\", void 0);\n\n__decorate$2([Property(true)], Slider.prototype, \"enableAnimation\", void 0);\n\n__decorate$2([Property('Horizontal')], Slider.prototype, \"orientation\", void 0);\n\n__decorate$2([Property('')], Slider.prototype, \"cssClass\", void 0);\n\n__decorate$2([Property(false)], Slider.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$2([Event()], Slider.prototype, \"created\", void 0);\n\n__decorate$2([Event()], Slider.prototype, \"change\", void 0);\n\n__decorate$2([Event()], Slider.prototype, \"changed\", void 0);\n\n__decorate$2([Event()], Slider.prototype, \"renderingTicks\", void 0);\n\n__decorate$2([Event()], Slider.prototype, \"renderedTicks\", void 0);\n\n__decorate$2([Event()], Slider.prototype, \"tooltipChange\", void 0);\n\nSlider = __decorate$2([NotifyPropertyChanges], Slider);\n/**\n * Slider modules\n */\n\nvar __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar FormValidator_1;\n/**\n * global declarations\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nconst regex = {\n  /* eslint-disable no-useless-escape */\n  EMAIL: new RegExp('^[A-Za-z0-9._%+-]{1,}@[A-Za-z0-9._%+-]{1,}([.]{1}[a-zA-Z0-9]{2,}' + '|[.]{1}[a-zA-Z0-9]{2,4}[.]{1}[a-zA-Z0-9]{2,4})$'),\n  URL: /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/m,\n  DATE_ISO: new RegExp('^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$'),\n  DIGITS: new RegExp('^[0-9]*$'),\n  PHONE: new RegExp('^[+]?[0-9]{9,13}$'),\n  CREDITCARD: new RegExp('^\\\\d{13,16}$')\n  /* eslint-enable no-useless-escape */\n\n};\n/**\n * ErrorOption values\n *\n * @private\n */\n\nvar ErrorOption = /*#__PURE__*/(() => {\n  (function (ErrorOption) {\n    /**\n     * Defines the error message.\n     */\n    ErrorOption[ErrorOption[\"Message\"] = 0] = \"Message\";\n    /**\n     * Defines the error element type.\n     */\n\n    ErrorOption[ErrorOption[\"Label\"] = 1] = \"Label\";\n  })(ErrorOption || (ErrorOption = {}));\n\n  return ErrorOption;\n})();\n\n/**\n * FormValidator class enables you to validate the form fields based on your defined rules\n * ```html\n * <form id='formId'>\n *  <input type='text' name='Name' />\n *  <input type='text' name='Age' />\n * </form>\n * <script>\n *   let formObject = new FormValidator('#formId', {\n *      rules: { Name: { required: true }, Age: { range: [18, 30] } };\n *   });\n *   formObject.validate();\n * </script>\n * ```\n */\nlet FormValidator = FormValidator_1 = class FormValidator extends Base {\n  /**\n   * Initializes the FormValidator.\n   *\n   * @param {string | HTMLFormElement} element - Specifies the element to render as component.\n   * @param {FormValidatorModel} options - Specifies the FormValidator model.\n   * @private\n   */\n  constructor(element, options) {\n    super(options, element);\n    this.validated = [];\n    this.errorRules = [];\n    this.allowSubmit = false;\n    this.required = 'required';\n    this.infoElement = null;\n    this.inputElement = null;\n    this.selectQuery = 'input:not([type=reset]):not([type=button]), select, textarea'; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.localyMessage = {};\n    /**\n     * Specifies the default messages for validation rules.\n     *\n     * @default { List of validation message }\n     */\n\n    this.defaultMessages = {\n      required: 'This field is required.',\n      email: 'Please enter a valid email address.',\n      url: 'Please enter a valid URL.',\n      date: 'Please enter a valid date.',\n      dateIso: 'Please enter a valid date ( ISO ).',\n      creditcard: 'Please enter valid card number',\n      number: 'Please enter a valid number.',\n      digits: 'Please enter only digits.',\n      maxLength: 'Please enter no more than {0} characters.',\n      minLength: 'Please enter at least {0} characters.',\n      rangeLength: 'Please enter a value between {0} and {1} characters long.',\n      range: 'Please enter a value between {0} and {1}.',\n      max: 'Please enter a value less than or equal to {0}.',\n      min: 'Please enter a value greater than or equal to {0}.',\n      regex: 'Please enter a correct value.',\n      tel: 'Please enter a valid phone number.',\n      pattern: 'Please enter a correct pattern value.',\n      equalTo: 'Please enter the valid match text'\n    };\n\n    if (typeof this.rules === 'undefined') {\n      this.rules = {};\n    }\n\n    this.l10n = new L10n('formValidator', this.defaultMessages, this.locale);\n\n    if (this.locale) {\n      this.localeFunc();\n    }\n\n    onIntlChange.on('notifyExternalChange', this.afterLocalization, this);\n    element = typeof element === 'string' ? select(element, document) : element; // Set novalidate to prevent default HTML5 form validation\n\n    if (this.element != null) {\n      this.element.setAttribute('novalidate', '');\n      this.inputElements = selectAll(this.selectQuery, this.element);\n      this.createHTML5Rules();\n      this.wireEvents();\n    } else {\n      return undefined;\n    }\n  }\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n\n  /**\n   * Add validation rules to the corresponding input element based on `name` attribute.\n   *\n   * @param {string} name `name` of form field.\n   * @param {Object} rules Validation rules for the corresponding element.\n   * @returns {void}\n   */\n\n\n  addRules(name, rules) {\n    if (name) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.rules.hasOwnProperty(name)) {\n        extend(this.rules[name], rules, {});\n      } else {\n        this.rules[name] = rules;\n      }\n    }\n  }\n  /**\n   * Remove validation to the corresponding field based on name attribute.\n   * When no parameter is passed, remove all the validations in the form.\n   *\n   * @param {string} name Input name attribute value.\n   * @param {string[]} rules List of validation rules need to be remove from the corresponding element.\n   * @returns {void}\n   */\n\n\n  removeRules(name, rules) {\n    if (!name && !rules) {\n      this.rules = {};\n    } else if (this.rules[name] && !rules) {\n      delete this.rules[name];\n    } else if (!isNullOrUndefined(this.rules[name] && rules)) {\n      for (let i = 0; i < rules.length; i++) {\n        delete this.rules[name][rules[i]];\n      }\n    } else {\n      return;\n    }\n  }\n  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Validate the current form values using defined rules.\n   * Returns `true` when the form is valid otherwise `false`\n   *\n   * @param {string} selected - Optional parameter to validate specified element.\n   * @returns {boolean}\n   */\n\n\n  validate(selected) {\n    const rules = Object.keys(this.rules);\n\n    if (selected && rules.length) {\n      this.validateRules(selected); //filter the selected element it don't have any valid input element\n\n      return rules.indexOf(selected) !== -1 && this.errorRules.filter(data => {\n        return data.name === selected;\n      }).length === 0;\n    } else {\n      this.errorRules = [];\n\n      for (const name of rules) {\n        this.validateRules(name);\n      }\n\n      return this.errorRules.length === 0;\n    }\n  }\n  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Reset the value of all the fields in form.\n   *\n   * @returns {void}\n   */\n\n\n  reset() {\n    this.element.reset();\n    this.clearForm();\n  }\n  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Get input element by name.\n   *\n   * @param {string} name - Input element name attribute value.\n   * @returns {HTMLInputElement}\n   */\n\n\n  getInputElement(name) {\n    this.inputElement = select('[name=\"' + name + '\"]', this.element);\n    return this.inputElement;\n  }\n  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Destroy the form validator object and error elements.\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    this.reset();\n    this.unwireEvents();\n    this.rules = {};\n    const elements = selectAll('.' + this.errorClass + ', .' + this.validClass, this.element);\n\n    for (const element of elements) {\n      detach(element);\n    }\n\n    super.destroy();\n    onIntlChange.off('notifyExternalChange', this.afterLocalization);\n  }\n  /**\n   * @param {FormValidatorModel} newProp - Returns the dynamic property value of the component.\n   * @param {FormValidatorModel} oldProp - Returns the previous property value of the component.\n   * @returns {void}\n   * @private\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  onPropertyChanged(newProp, oldProp) {\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'locale':\n          this.localeFunc();\n          break;\n      }\n    }\n  }\n  /**\n   * @private\n   * @returns {void}\n   */\n\n\n  localeFunc() {\n    for (const key of Object.keys(this.defaultMessages)) {\n      this.l10n.setLocale(this.locale);\n      const value = this.l10n.getConstant(key);\n      this.localyMessage[key] = value;\n    }\n  }\n  /**\n   * @private\n   * @returns {string} - Returns the component name.\n   */\n\n\n  getModuleName() {\n    return 'formValidator';\n  }\n  /**\n   * @param {any} args - Specifies the culture name.\n   * @private\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n\n\n  afterLocalization(args) {\n    this.locale = args.locale;\n    this.localeFunc();\n  }\n  /**\n   * Allows you to refresh the form validator base events to the elements inside the form.\n   *\n   * @returns {void}\n   */\n\n\n  refresh() {\n    this.unwireEvents();\n    this.inputElements = selectAll(this.selectQuery, this.element);\n    this.wireEvents();\n  }\n\n  clearForm() {\n    this.errorRules = [];\n    this.validated = [];\n    const elements = selectAll(this.selectQuery, this.element);\n\n    for (const element of elements) {\n      const input = element;\n      input.removeAttribute('aria-invalid');\n      input.classList.remove(this.errorClass);\n\n      if (input.name.length > 0) {\n        this.getInputElement(input.name);\n        this.getErrorElement(input.name);\n        this.hideMessage(input.name);\n      }\n\n      input.classList.remove(this.validClass);\n    }\n  }\n\n  createHTML5Rules() {\n    const defRules = ['required', 'validateHidden', 'regex', 'rangeLength', 'maxLength', 'minLength', 'dateIso', 'digits', 'pattern', 'data-val-required', 'type', 'data-validation', 'min', 'max', 'range', 'equalTo', 'data-val-minlength-min', 'data-val-equalto-other', 'data-val-maxlength-max', 'data-val-range-min', 'data-val-regex-pattern', 'data-val-length-max', 'data-val-creditcard', 'data-val-phone'];\n    const acceptedTypes = ['hidden', 'email', 'url', 'date', 'number', 'tel'];\n\n    for (const input of this.inputElements) {\n      // Default attribute rules\n      const allRule = {};\n\n      for (let rule of defRules) {\n        if (input.getAttribute(rule) !== null) {\n          switch (rule) {\n            case 'required':\n              this.defRule(input, allRule, rule, input.required);\n              break;\n\n            case 'data-validation':\n              rule = input.getAttribute(rule);\n              this.defRule(input, allRule, rule, true);\n              break;\n\n            case 'type':\n              if (acceptedTypes.indexOf(input.type) !== -1) {\n                this.defRule(input, allRule, input.type, true);\n              }\n\n              break;\n\n            case 'rangeLength':\n            case 'range':\n              this.defRule(input, allRule, rule, JSON.parse(input.getAttribute(rule)));\n              break;\n\n            case 'equalTo':\n              {\n                const id = input.getAttribute(rule);\n                this.defRule(input, allRule, rule, id);\n              }\n              break;\n\n            default:\n              if (input.getAttribute('data-val') === 'true') {\n                this.annotationRule(input, allRule, rule, input.getAttribute(rule));\n              } else {\n                this.defRule(input, allRule, rule, input.getAttribute(rule));\n              }\n\n          }\n        }\n      } //adding pattern type validation\n\n\n      if (Object.keys(allRule).length !== 0) {\n        this.addRules(input.name, allRule);\n      }\n    }\n  }\n\n  annotationRule(input, ruleCon, ruleName, value) {\n    const annotationRule = ruleName.split('-');\n    const rulesList = ['required', 'creditcard', 'phone', 'maxlength', 'minlength', 'range', 'regex', 'equalto'];\n    const ruleFirstName = annotationRule[annotationRule.length - 1];\n    const ruleSecondName = annotationRule[annotationRule.length - 2];\n\n    if (rulesList.indexOf(ruleFirstName) !== -1) {\n      switch (ruleFirstName) {\n        case 'required':\n          this.defRule(input, ruleCon, 'required', value);\n          break;\n\n        case 'creditcard':\n          this.defRule(input, ruleCon, 'creditcard', value);\n          break;\n\n        case 'phone':\n          this.defRule(input, ruleCon, 'tel', value);\n          break;\n      }\n    } else if (rulesList.indexOf(ruleSecondName) !== -1) {\n      switch (ruleSecondName) {\n        case 'maxlength':\n          this.defRule(input, ruleCon, 'maxLength', value);\n          break;\n\n        case 'minlength':\n          this.defRule(input, ruleCon, 'minLength', value);\n          break;\n\n        case 'range':\n          {\n            const minvalue = input.getAttribute('data-val-range-min');\n            const maxvalue = input.getAttribute('data-val-range-max');\n            this.defRule(input, ruleCon, 'range', [minvalue, maxvalue]);\n          }\n          break;\n\n        case 'equalto':\n          {\n            const id = input.getAttribute(ruleName).split('.');\n            this.defRule(input, ruleCon, 'equalTo', id[id.length - 1]);\n          }\n          break;\n\n        case 'regex':\n          this.defRule(input, ruleCon, 'regex', value);\n          break;\n      }\n    }\n  }\n\n  defRule(input, ruleCon, ruleName, value) {\n    const message = input.getAttribute('data-' + ruleName + '-message');\n    const annotationMessage = input.getAttribute('data-val-' + ruleName);\n    let customMessage;\n\n    if (this.rules[input.name] && ruleName !== 'validateHidden' && ruleName !== 'hidden') {\n      this.getInputElement(input.name);\n      customMessage = this.getErrorMessage(this.rules[input.name][ruleName], ruleName);\n    }\n\n    if (message) {\n      value = [value, message];\n    } else if (annotationMessage) {\n      value = [value, annotationMessage];\n    } else if (customMessage) {\n      value = [value, customMessage];\n    }\n\n    ruleCon[ruleName] = value;\n  } // Wire events to the form elements\n\n\n  wireEvents() {\n    for (const input of this.inputElements) {\n      if (FormValidator_1.isCheckable(input)) {\n        EventHandler.add(input, 'click', this.clickHandler, this);\n      } else if (input.tagName === 'SELECT') {\n        EventHandler.add(input, 'change', this.changeHandler, this);\n      } else {\n        EventHandler.add(input, 'focusout', this.focusOutHandler, this);\n        EventHandler.add(input, 'keyup', this.keyUpHandler, this);\n      }\n    }\n\n    EventHandler.add(this.element, 'submit', this.submitHandler, this);\n    EventHandler.add(this.element, 'reset', this.resetHandler, this);\n  } // UnWire events to the form elements\n\n\n  unwireEvents() {\n    for (const input of this.inputElements) {\n      EventHandler.clearEvents(input);\n    }\n\n    EventHandler.remove(this.element, 'submit', this.submitHandler);\n    EventHandler.remove(this.element, 'reset', this.resetHandler);\n  } // Handle input element focusout event\n\n\n  focusOutHandler(e) {\n    this.trigger('focusout', e); //FormValidator.triggerCallback(this.focusout, e);\n\n    const element = e.target;\n\n    if (this.rules[element.name]) {\n      if (this.rules[element.name][this.required] || element.value.length > 0) {\n        this.validate(element.name);\n      } else if (this.validated.indexOf(element.name) === -1) {\n        this.validated.push(element.name);\n      }\n    }\n  } // Handle input element keyup event\n\n\n  keyUpHandler(e) {\n    this.trigger('keyup', e);\n    const element = e.target; // List of keys need to prevent while validation\n\n    const excludeKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];\n\n    if (e.which === 9 && (!this.rules[element.name] || this.rules[element.name] && !this.rules[element.name][this.required])) {\n      return;\n    }\n\n    if (this.validated.indexOf(element.name) !== -1 && this.rules[element.name] && excludeKeys.indexOf(e.which) === -1) {\n      this.validate(element.name);\n    }\n  } // Handle input click event\n\n\n  clickHandler(e) {\n    this.trigger('click', e);\n    const element = e.target; // If element type is not submit allow validation\n\n    if (element.type !== 'submit') {\n      this.validate(element.name);\n    } else if (element.getAttribute('formnovalidate') !== null) {\n      // Prevent form validation, if submit button has formnovalidate attribute\n      this.allowSubmit = true;\n    }\n  } // Handle input change event\n\n\n  changeHandler(e) {\n    this.trigger('change', e);\n    const element = e.target;\n    this.validate(element.name);\n  } // Handle form submit event\n\n\n  submitHandler(e) {\n    this.trigger('submit', e); //FormValidator.triggerCallback(this.submit, e);\n    // Prevent form submit if validation failed\n\n    if (!this.allowSubmit && !this.validate()) {\n      e.preventDefault();\n    } else {\n      this.allowSubmit = false;\n    }\n  } // Handle form reset\n\n\n  resetHandler() {\n    this.clearForm();\n  } // Validate each rule based on input element name\n\n\n  validateRules(name) {\n    if (!this.rules[name]) {\n      return;\n    }\n\n    const rules = Object.keys(this.rules[name]);\n    let hiddenType = false;\n    let validateHiddenType = false;\n    const vhPos = rules.indexOf('validateHidden');\n    const hPos = rules.indexOf('hidden');\n    this.getInputElement(name);\n\n    if (hPos !== -1) {\n      hiddenType = true;\n    }\n\n    if (vhPos !== -1) {\n      validateHiddenType = true;\n    }\n\n    if (!hiddenType || hiddenType && validateHiddenType) {\n      if (vhPos !== -1) {\n        rules.splice(vhPos, 1);\n      }\n\n      if (hPos !== -1) {\n        rules.splice(hPos - 1, 1);\n      }\n\n      this.getErrorElement(name);\n\n      for (const rule of rules) {\n        const errorMessage = this.getErrorMessage(this.rules[name][rule], rule);\n        const errorRule = {\n          name: name,\n          message: errorMessage\n        };\n        const eventArgs = {\n          inputName: name,\n          element: this.inputElement,\n          message: errorMessage\n        };\n\n        if (!this.isValid(name, rule) && !this.inputElement.classList.contains(this.ignore)) {\n          this.removeErrorRules(name);\n          this.errorRules.push(errorRule); // Set aria attributes to invalid elements\n\n          this.inputElement.setAttribute('aria-invalid', 'true');\n          this.inputElement.setAttribute('aria-describedby', this.inputElement.id + '-info');\n          this.inputElement.classList.add(this.errorClass);\n          this.inputElement.classList.remove(this.validClass);\n\n          if (!this.infoElement) {\n            this.createErrorElement(name, errorRule.message, this.inputElement);\n          } else {\n            this.showMessage(errorRule);\n          }\n\n          eventArgs.errorElement = this.infoElement;\n          eventArgs.status = 'failure';\n          this.inputElement.classList.add(this.errorClass);\n          this.inputElement.classList.remove(this.validClass);\n          this.optionalValidationStatus(name, eventArgs);\n          this.trigger('validationComplete', eventArgs); // Set aria-required to required rule elements\n\n          if (rule === 'required') {\n            this.inputElement.setAttribute('aria-required', 'true');\n          }\n\n          break;\n        } else {\n          this.hideMessage(name);\n          eventArgs.status = 'success';\n          this.trigger('validationComplete', eventArgs);\n        }\n      }\n    } else {\n      return;\n    }\n  } // Update the optional validation status\n\n\n  optionalValidationStatus(name, refer) {\n    if (!this.rules[name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {\n      this.infoElement.innerHTML = this.inputElement.value;\n      this.infoElement.setAttribute('aria-invalid', 'false');\n      refer.status = '';\n      this.hideMessage(name);\n    }\n  } // Check the input element whether it's value satisfy the validation rule or not\n\n\n  isValid(name, rule) {\n    const params = this.rules[name][rule];\n    const param = params instanceof Array && typeof params[1] === 'string' ? params[0] : params;\n    const currentRule = this.rules[name][rule];\n    const args = {\n      value: this.inputElement.value,\n      param: param,\n      element: this.inputElement,\n      formElement: this.element\n    };\n    this.trigger('validationBegin', args);\n\n    if (!args.param && rule === 'required') {\n      return true;\n    }\n\n    if (currentRule && typeof currentRule[0] === 'function') {\n      const fn = currentRule[0];\n      return fn.call(this, {\n        element: this.inputElement,\n        value: this.inputElement.value\n      });\n    } else if (FormValidator_1.isCheckable(this.inputElement)) {\n      if (rule !== 'required') {\n        return true;\n      }\n\n      return selectAll('input[name=\"' + name + '\"]:checked', this.element).length > 0;\n    } else {\n      return FormValidator_1.checkValidator[rule](args);\n    }\n  } // Return default error message or custom error message\n\n\n  getErrorMessage(ruleValue, rule) {\n    let message = this.inputElement.getAttribute('data-' + rule + '-message') ? this.inputElement.getAttribute('data-' + rule + '-message') : ruleValue instanceof Array && typeof ruleValue[1] === 'string' ? ruleValue[1] : Object.keys(this.localyMessage).length !== 0 ? this.localyMessage[rule] : this.defaultMessages[rule];\n    const formats = message.match(/{(\\d)}/g);\n\n    if (!isNullOrUndefined(formats)) {\n      for (let i = 0; i < formats.length; i++) {\n        const value = ruleValue instanceof Array ? ruleValue[i] : ruleValue;\n        message = message.replace(formats[i], value);\n      }\n    }\n\n    return message;\n  } // Create error element based on name and error message\n\n\n  createErrorElement(name, message, input) {\n    let errorElement = createElement(this.errorElement, {\n      className: this.errorClass,\n      innerHTML: message,\n      attrs: {\n        for: name\n      }\n    }); // Create message design if errorOption is message\n\n    if (this.errorOption === ErrorOption.Message) {\n      errorElement.classList.remove(this.errorClass);\n      errorElement.classList.add('e-message');\n      errorElement = createElement(this.errorContainer, {\n        className: this.errorClass,\n        innerHTML: errorElement.outerHTML\n      });\n    }\n\n    errorElement.id = this.inputElement.name + '-info'; // Append error message into MVC error message element\n\n    if (this.element.querySelector('[data-valmsg-for=\"' + input.id + '\"]')) {\n      this.element.querySelector('[data-valmsg-for=\"' + input.id + '\"]').appendChild(errorElement);\n    } else if (input.hasAttribute('data-msg-containerid') === true) {\n      // Append error message into custom div element\n      const containerId = input.getAttribute('data-msg-containerid');\n      const divElement = select('#' + containerId, this.element);\n      divElement.appendChild(errorElement);\n    } else if (this.customPlacement != null) {\n      // Call custom placement function if customPlacement is not null\n      this.customPlacement.call(this, this.inputElement, errorElement);\n    } else {\n      this.inputElement.parentNode.insertBefore(errorElement, this.inputElement.nextSibling);\n    }\n\n    errorElement.style.display = 'block';\n    this.getErrorElement(name);\n    this.validated.push(name);\n    this.checkRequired(name);\n  } // Get error element by name\n\n\n  getErrorElement(name) {\n    this.infoElement = select(this.errorElement + '.' + this.errorClass, this.inputElement.parentElement);\n\n    if (!this.infoElement) {\n      this.infoElement = select(this.errorElement + '.' + this.errorClass + '[for=\"' + name + '\"]', this.element);\n    }\n\n    return this.infoElement;\n  } // Remove existing rule from errorRules object\n\n\n  removeErrorRules(name) {\n    for (let i = 0; i < this.errorRules.length; i++) {\n      const rule = this.errorRules[i];\n\n      if (rule.name === name) {\n        this.errorRules.splice(i, 1);\n      }\n    }\n  } // Show error message to the input element\n\n\n  showMessage(errorRule) {\n    this.infoElement.style.display = 'block';\n    this.infoElement.innerHTML = errorRule.message;\n    this.checkRequired(errorRule.name);\n  } // Hide error message based on input name\n\n\n  hideMessage(name) {\n    if (this.infoElement) {\n      this.infoElement.style.display = 'none';\n      this.removeErrorRules(name);\n      this.inputElement.classList.add(this.validClass);\n      this.inputElement.classList.remove(this.errorClass);\n      this.inputElement.setAttribute('aria-invalid', 'false');\n    }\n  } // Check whether the input element have required rule and its value is not empty\n\n\n  checkRequired(name) {\n    if (!this.rules[name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {\n      this.infoElement.innerHTML = this.inputElement.value;\n      this.infoElement.setAttribute('aria-invalid', 'false');\n      this.hideMessage(name);\n    }\n  } // Return boolean result if the input have chekcable or submit types\n\n\n  static isCheckable(input) {\n    const inputType = input.getAttribute('type');\n    return inputType && (inputType === 'checkbox' || inputType === 'radio' || inputType === 'submit');\n  }\n\n}; // List of function to validate the rules\n\nFormValidator.checkValidator = {\n  required: option => {\n    return !isNaN(Date.parse(option.value)) ? !isNaN(new Date(option.value).getTime()) : option.value.toString().length > 0;\n  },\n  email: option => {\n    return regex.EMAIL.test(option.value);\n  },\n  url: option => {\n    return regex.URL.test(option.value);\n  },\n  dateIso: option => {\n    return regex.DATE_ISO.test(option.value);\n  },\n  tel: option => {\n    return regex.PHONE.test(option.value);\n  },\n  creditcard: option => {\n    return regex.CREDITCARD.test(option.value);\n  },\n  number: option => {\n    return !isNaN(Number(option.value)) && option.value.indexOf(' ') === -1;\n  },\n  digits: option => {\n    return regex.DIGITS.test(option.value);\n  },\n  maxLength: option => {\n    return option.value.length <= option.param;\n  },\n  minLength: option => {\n    return option.value.length >= option.param;\n  },\n  rangeLength: option => {\n    const param = option.param;\n    return option.value.length >= param[0] && option.value.length <= param[1];\n  },\n  range: option => {\n    const param = option.param;\n    return !isNaN(Number(option.value)) && Number(option.value) >= param[0] && Number(option.value) <= param[1];\n  },\n  date: option => {\n    return !isNaN(new Date(option.value).getTime());\n  },\n  max: option => {\n    if (!isNaN(Number(option.value))) {\n      // Maximum rule validation for number\n      return +option.value <= option.param;\n    } // Maximum rule validation for date\n\n\n    return new Date(option.value).getTime() <= new Date(JSON.parse(JSON.stringify(option.param))).getTime();\n  },\n  min: option => {\n    if (!isNaN(Number(option.value))) {\n      // Minimum rule validation for number\n      return +option.value >= option.param;\n    } else if (option.value.indexOf(',') !== -1) {\n      const uNum = option.value.replace(/,/g, '');\n      return parseFloat(uNum) >= option.param;\n    } else {\n      // Minimum rule validation for date\n      return new Date(option.value).getTime() >= new Date(JSON.parse(JSON.stringify(option.param))).getTime();\n    }\n  },\n  regex: option => {\n    return new RegExp(option.param).test(option.value);\n  },\n  equalTo: option => {\n    const compareTo = option.formElement.querySelector('#' + option.param);\n    option.param = compareTo.value;\n    return option.param === option.value;\n  }\n};\n\n__decorate$3([Property('')], FormValidator.prototype, \"locale\", void 0);\n\n__decorate$3([Property('e-hidden')], FormValidator.prototype, \"ignore\", void 0);\n\n__decorate$3([Property()], FormValidator.prototype, \"rules\", void 0);\n\n__decorate$3([Property('e-error')], FormValidator.prototype, \"errorClass\", void 0);\n\n__decorate$3([Property('e-valid')], FormValidator.prototype, \"validClass\", void 0);\n\n__decorate$3([Property('label')], FormValidator.prototype, \"errorElement\", void 0);\n\n__decorate$3([Property('div')], FormValidator.prototype, \"errorContainer\", void 0);\n\n__decorate$3([Property(ErrorOption.Label)], FormValidator.prototype, \"errorOption\", void 0);\n\n__decorate$3([Event()], FormValidator.prototype, \"focusout\", void 0);\n\n__decorate$3([Event()], FormValidator.prototype, \"keyup\", void 0);\n\n__decorate$3([Event()], FormValidator.prototype, \"click\", void 0);\n\n__decorate$3([Event()], FormValidator.prototype, \"change\", void 0);\n\n__decorate$3([Event()], FormValidator.prototype, \"submit\", void 0);\n\n__decorate$3([Event()], FormValidator.prototype, \"validationBegin\", void 0);\n\n__decorate$3([Event()], FormValidator.prototype, \"validationComplete\", void 0);\n\n__decorate$3([Event()], FormValidator.prototype, \"customPlacement\", void 0);\n\nFormValidator = FormValidator_1 = __decorate$3([NotifyPropertyChanges], FormValidator);\n/**\n * Input box Component\n */\n\nvar __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nconst CONTROL_WRAPPER = 'e-upload e-control-wrapper';\nconst INPUT_WRAPPER = 'e-file-select';\nconst DROP_AREA = 'e-file-drop';\nconst DROP_WRAPPER = 'e-file-select-wrap';\nconst LIST_PARENT = 'e-upload-files';\nconst FILE = 'e-upload-file-list';\nconst STATUS = 'e-file-status';\nconst ACTION_BUTTONS = 'e-upload-actions';\nconst UPLOAD_BUTTONS = 'e-file-upload-btn e-css e-btn e-flat e-primary';\nconst CLEAR_BUTTONS = 'e-file-clear-btn e-css e-btn e-flat';\nconst FILE_NAME = 'e-file-name';\nconst FILE_TYPE = 'e-file-type';\nconst FILE_SIZE = 'e-file-size';\nconst REMOVE_ICON = 'e-file-remove-btn';\nconst DELETE_ICON = 'e-file-delete-btn';\nconst SPINNER_PANE = 'e-spinner-pane';\nconst ABORT_ICON = 'e-file-abort-btn';\nconst RETRY_ICON = 'e-file-reload-btn';\nconst DRAG_HOVER = 'e-upload-drag-hover';\nconst PROGRESS_WRAPPER = 'e-upload-progress-wrap';\nconst PROGRESSBAR = 'e-upload-progress-bar';\nconst PROGRESSBAR_TEXT = 'e-progress-bar-text';\nconst UPLOAD_INPROGRESS = 'e-upload-progress';\nconst UPLOAD_SUCCESS = 'e-upload-success';\nconst UPLOAD_FAILED = 'e-upload-fails';\nconst TEXT_CONTAINER = 'e-file-container';\nconst VALIDATION_FAILS = 'e-validation-fails';\nconst RTL = 'e-rtl';\nconst DISABLED = 'e-disabled';\nconst RTL_CONTAINER = 'e-rtl-container';\nconst ICON_FOCUSED = 'e-clear-icon-focus';\nconst PROGRESS_INNER_WRAPPER = 'e-progress-inner-wrap';\nconst PAUSE_UPLOAD = 'e-file-pause-btn';\nconst RESUME_UPLOAD = 'e-file-play-btn';\nconst RESTRICT_RETRY = 'e-restrict-retry';\nconst wrapperAttr$1 = ['title', 'style', 'class'];\nconst FORM_UPLOAD = 'e-form-upload';\nconst HIDDEN_INPUT = 'e-hidden-file-input';\nconst INVALID_FILE = 'e-file-invalid';\nconst INFORMATION = 'e-file-information';\n\nclass FilesProp extends ChildProperty {}\n\n__decorate$4([Property('')], FilesProp.prototype, \"name\", void 0);\n\n__decorate$4([Property(null)], FilesProp.prototype, \"size\", void 0);\n\n__decorate$4([Property('')], FilesProp.prototype, \"type\", void 0);\n\nclass ButtonsProps extends ChildProperty {}\n\n__decorate$4([Property('Browse...')], ButtonsProps.prototype, \"browse\", void 0);\n\n__decorate$4([Property('Upload')], ButtonsProps.prototype, \"upload\", void 0);\n\n__decorate$4([Property('Clear')], ButtonsProps.prototype, \"clear\", void 0);\n\nclass AsyncSettings extends ChildProperty {}\n\n__decorate$4([Property('')], AsyncSettings.prototype, \"saveUrl\", void 0);\n\n__decorate$4([Property('')], AsyncSettings.prototype, \"removeUrl\", void 0);\n\n__decorate$4([Property(0)], AsyncSettings.prototype, \"chunkSize\", void 0);\n\n__decorate$4([Property(3)], AsyncSettings.prototype, \"retryCount\", void 0);\n\n__decorate$4([Property(500)], AsyncSettings.prototype, \"retryAfterDelay\", void 0);\n/**\n * The uploader component allows to upload images, documents, and other files from local to server.\n * ```html\n * <input type='file' name='images[]' id='upload'/>\n * ```\n * ```typescript\n * <script>\n *   var uploadObj = new Uploader();\n *   uploadObj.appendTo('#upload');\n * </script>\n * ```\n */\n\n\nlet Uploader = class Uploader extends Component {\n  /**\n   * Triggers when change the Uploader value.\n   *\n   * @param {UploaderModel} options - Specifies the Uploader model.\n   * @param {string | HTMLInputElement} element - Specifies the element to render as component.\n   * @private\n   */\n  constructor(options, element) {\n    super(options, element);\n    this.initialAttr = {\n      accept: null,\n      multiple: false,\n      disabled: false\n    };\n    this.uploadedFilesData = [];\n    this.base64String = [];\n    this.isForm = false;\n    this.allTypes = false;\n    this.pausedData = [];\n    this.uploadMetaData = [];\n    this.tabIndex = '0';\n    this.btnTabIndex = '0';\n    this.disableKeyboardNavigation = false;\n    this.count = -1;\n    this.actionCompleteCount = 0;\n    this.flag = true;\n    this.selectedFiles = [];\n    this.uploaderName = 'UploadFiles';\n    this.fileStreams = [];\n    this.newFileRef = 0;\n    this.isFirstFileOnSelection = false;\n    this.dragCounter = 0;\n    /**\n     * Get the file item(li) which are shown in file list.\n     *\n     * @private\n     */\n\n    this.fileList = [];\n    /**\n     * Get the data of files which are shown in file list.\n     *\n     * @private\n     */\n\n    this.filesData = [];\n    this.uploaderOptions = options;\n  }\n  /**\n   * Calls internally if any of the property value is changed.\n   *\n   * @param {UploaderModel} newProp - Returns the dynamic property value of the component.\n   * @param {UploaderModel} oldProp - Returns the previous property value of the component.\n   * @returns {void}\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'allowedExtensions':\n          this.setExtensions(this.allowedExtensions);\n          this.clearAll();\n          break;\n\n        case 'enabled':\n          this.setControlStatus();\n          break;\n\n        case 'multiple':\n          this.setMultipleSelection();\n          break;\n\n        case 'enableRtl':\n          this.setRTL();\n          this.reRenderFileList();\n          break;\n\n        case 'buttons':\n          this.buttons.browse = isNullOrUndefined(this.buttons.browse) ? '' : this.buttons.browse;\n          this.buttons.clear = isNullOrUndefined(this.buttons.clear) ? '' : this.buttons.clear;\n          this.buttons.upload = isNullOrUndefined(this.buttons.upload) ? '' : this.buttons.upload;\n          this.renderButtonTemplates();\n          break;\n\n        case 'dropArea':\n          this.unBindDropEvents();\n          this.updateDropArea();\n          break;\n\n        case 'htmlAttributes':\n          this.updateHTMLAttrToElement();\n          this.updateHTMLAttrToWrapper();\n          this.checkHTMLAttributes(true);\n          break;\n\n        case 'files':\n          this.renderPreLoadFiles();\n          break;\n\n        case 'directoryUpload':\n          this.updateDirectoryAttributes();\n          break;\n\n        case 'template':\n          if (!this.isServerBlazor) {\n            this.clearAll();\n          }\n\n          break;\n\n        case 'minFileSize':\n        case 'maxFileSize':\n        case 'autoUpload':\n          this.clearAll();\n          break;\n\n        case 'sequentialUpload':\n          this.clearAll();\n          break;\n\n        case 'locale':\n          this.l10n.setLocale(this.locale);\n          this.setLocalizedTexts();\n          this.preLocaleObj = getValue('currentLocale', this.l10n);\n          break;\n\n        case 'cssClass':\n          this.setCSSClass(oldProp.cssClass);\n          break;\n      }\n    }\n  }\n\n  setLocalizedTexts() {\n    if (isNullOrUndefined(this.template)) {\n      if (typeof this.buttons.browse === 'string') {\n        this.browseButton.innerText = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;\n        this.browseButton.setAttribute('title', this.browseButton.innerText);\n\n        if (this.uploadWrapper && !isNullOrUndefined(this.uploadWrapper.querySelector('.' + DROP_AREA))) {\n          this.uploadWrapper.querySelector('.' + DROP_AREA).innerHTML = this.localizedTexts('dropFilesHint');\n        }\n      }\n\n      this.updateFileList();\n    }\n  }\n\n  getKeyValue(val) {\n    let keyValue;\n\n    for (const key of Object.keys(this.preLocaleObj)) {\n      if (this.preLocaleObj[key] === val) {\n        keyValue = key;\n      }\n    }\n\n    return keyValue;\n  }\n\n  updateFileList() {\n    let element;\n    /* istanbul ignore next */\n\n    if (this.fileList.length > 0 && !isNullOrUndefined(this.uploadWrapper.querySelector('.' + LIST_PARENT))) {\n      for (let i = 0; i < this.fileList.length; i++) {\n        element = this.fileList[i].querySelector('.e-file-status');\n        element.innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status));\n        this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status));\n\n        if (this.fileList[i].classList.contains(UPLOAD_SUCCESS)) {\n          this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('delete'));\n        }\n\n        if (this.fileList[i].querySelector('.e-file-play-btn')) {\n          this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('resume'));\n        }\n\n        if (this.fileList[i].querySelector('.e-file-remove-btn')) {\n          this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('remove'));\n        }\n\n        if (this.fileList[i].querySelector('.e-file-reload-btn')) {\n          this.fileList[i].querySelector('.e-icons').setAttribute('title', this.localizedTexts('retry'));\n        }\n\n        if (!this.autoUpload) {\n          this.uploadButton.innerText = this.buttons.upload === 'Upload' ? this.localizedTexts('Upload') : this.buttons.upload;\n          this.uploadButton.setAttribute('title', this.localizedTexts('Upload'));\n          this.clearButton.innerText = this.buttons.clear === 'Clear' ? this.localizedTexts('Clear') : this.buttons.clear;\n          this.clearButton.setAttribute('title', this.localizedTexts('Clear'));\n        }\n      }\n    }\n  }\n\n  reRenderFileList() {\n    if (this.listParent) {\n      detach(this.listParent);\n      this.listParent = null;\n      this.fileList = [];\n      this.createFileList(this.filesData);\n\n      if (this.actionButtons) {\n        this.removeActionButtons();\n        this.renderActionButtons();\n        this.checkActionButtonStatus();\n      }\n    }\n  }\n\n  preRender() {\n    this.localeText = {\n      Browse: 'Browse...',\n      Clear: 'Clear',\n      Upload: 'Upload',\n      dropFilesHint: 'Or drop files here',\n      invalidMaxFileSize: 'File size is too large',\n      invalidMinFileSize: 'File size is too small',\n      invalidFileType: 'File type is not allowed',\n      uploadFailedMessage: 'File failed to upload',\n      uploadSuccessMessage: 'File uploaded successfully',\n      removedSuccessMessage: 'File removed successfully',\n      removedFailedMessage: 'Unable to remove file',\n      inProgress: 'Uploading',\n      readyToUploadMessage: 'Ready to upload',\n      abort: 'Abort',\n      remove: 'Remove',\n      cancel: 'Cancel',\n      delete: 'Delete file',\n      pauseUpload: 'File upload paused',\n      pause: 'Pause',\n      resume: 'Resume',\n      retry: 'Retry',\n      fileUploadCancel: 'File upload canceled',\n      invalidFileSelection: 'Invalid files selected',\n      totalFiles: 'Total files',\n      size: 'Size'\n    };\n    this.l10n = new L10n('uploader', this.localeText, this.locale);\n    this.preLocaleObj = getValue('currentLocale', this.l10n);\n    this.isServerBlazor = isBlazor() && this.isServerRendered ? true : false;\n    this.isBlazorTemplate = this.isServerBlazor && this.template !== '' && !isNullOrUndefined(this.template) ? true : false;\n    this.isBlazorSaveUrl = this.isServerRendered && (this.asyncSettings.saveUrl === '' || isNullOrUndefined(this.asyncSettings.saveUrl)) ? true : false;\n\n    if (this.isBlazorSaveUrl && this.sequentialUpload) {\n      this.sequentialUpload = false;\n    }\n\n    if (!this.isBlazorSaveUrl) {\n      this.formRendered();\n    }\n\n    if (!this.isServerBlazor) {\n      this.updateHTMLAttrToElement();\n      this.checkHTMLAttributes(false);\n      const ejInstance = getValue('ej2_instances', this.element);\n      /* istanbul ignore next */\n\n      if (this.element.tagName === 'EJS-UPLOADER') {\n        const inputElement = this.createElement('input', {\n          attrs: {\n            type: 'file'\n          }\n        });\n        let index = 0;\n\n        for (index; index < this.element.attributes.length; index++) {\n          inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);\n          inputElement.innerHTML = this.element.innerHTML;\n        }\n\n        if (!inputElement.hasAttribute('name')) {\n          inputElement.setAttribute('name', 'UploadFiles');\n        }\n\n        this.element.appendChild(inputElement);\n        this.element = inputElement;\n        setValue('ej2_instances', ejInstance, this.element);\n      }\n      /* istanbul ignore next */\n\n\n      if (ejInstance[0].isPureReactComponent) {\n        if (!isNullOrUndefined(ejInstance[0].props.name)) {\n          this.element.setAttribute('name', ejInstance[0].props.name);\n        } else if (!isNullOrUndefined(ejInstance[0].props.id) && isNullOrUndefined(ejInstance[0].props.name)) {\n          this.element.setAttribute('name', ejInstance[0].props.id);\n        } else {\n          this.element.setAttribute('name', 'UploadFiles');\n        }\n      }\n\n      if (isNullOrUndefined(this.element.getAttribute('name'))) {\n        this.element.setAttribute('name', this.element.getAttribute('id'));\n      }\n\n      if (!this.element.hasAttribute('type')) {\n        this.element.setAttribute('type', 'file');\n      }\n\n      this.updateDirectoryAttributes();\n    }\n\n    this.keyConfigs = {\n      enter: 'enter'\n    };\n\n    if (this.element.hasAttribute('tabindex')) {\n      this.tabIndex = this.element.getAttribute('tabindex');\n    }\n\n    this.browserName = Browser.info.name;\n    this.uploaderName = this.element.getAttribute('name');\n  }\n\n  formRendered() {\n    let parentEle = closest(this.element, 'form');\n\n    if (!isNullOrUndefined(parentEle)) {\n      for (; parentEle && parentEle !== document.documentElement; parentEle = parentEle.parentElement) {\n        if (parentEle.tagName === 'FORM') {\n          this.isForm = true;\n          this.formElement = parentEle;\n          parentEle.setAttribute('enctype', 'multipart/form-data');\n          parentEle.setAttribute('encoding', 'multipart/form-data');\n        }\n      }\n    }\n  }\n\n  getPersistData() {\n    return this.addOnPersist(['filesData']);\n  }\n  /**\n   * Return the module name of the component.\n   *\n   * @returns {string} Returns the component name.\n   */\n\n\n  getModuleName() {\n    return 'uploader';\n  }\n\n  updateDirectoryAttributes() {\n    if (this.directoryUpload) {\n      this.element.setAttribute('directory', 'true');\n      this.element.setAttribute('webkitdirectory', 'true');\n    } else {\n      this.element.removeAttribute('directory');\n      this.element.removeAttribute('webkitdirectory');\n    }\n  }\n  /**\n   * To Initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  render() {\n    if (!this.isServerBlazor) {\n      this.renderBrowseButton();\n      this.initializeUpload();\n      this.updateHTMLAttrToWrapper();\n      this.wireEvents();\n      this.setMultipleSelection();\n      this.setExtensions(this.allowedExtensions);\n      this.setRTL();\n      this.renderPreLoadFiles();\n      this.setControlStatus();\n      this.setCSSClass();\n    } else {\n      this.dropAreaWrapper = closest(this.element, '.' + DROP_WRAPPER);\n      this.uploadWrapper = closest(this.element, '.e-upload.e-control-wrapper');\n      this.browseButton = this.dropAreaWrapper.querySelector('button.e-upload-browse-btn');\n      this.setDropArea();\n      this.renderPreLoadFiles();\n      this.wireEvents();\n    }\n\n    if (this.isServerBlazor) {\n      this.renderComplete();\n    }\n  }\n\n  renderBrowseButton() {\n    this.browseButton = this.createElement('button', {\n      className: 'e-css e-btn',\n      attrs: {\n        'type': 'button'\n      }\n    });\n    this.browseButton.setAttribute('tabindex', this.tabIndex);\n\n    if (typeof this.buttons.browse === 'string') {\n      this.browseButton.textContent = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;\n      this.browseButton.setAttribute('title', this.browseButton.innerText);\n    } else {\n      this.browseButton.appendChild(this.buttons.browse);\n    }\n\n    this.element.setAttribute('aria-label', 'Uploader');\n  }\n\n  renderActionButtons() {\n    this.element.setAttribute('tabindex', '-1');\n\n    if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n      this.actionButtons = this.createElement('div', {\n        className: ACTION_BUTTONS\n      });\n      this.uploadButton = this.createElement('button', {\n        className: UPLOAD_BUTTONS,\n        attrs: {\n          'type': 'button',\n          'tabindex': this.btnTabIndex\n        }\n      });\n      this.clearButton = this.createElement('button', {\n        className: CLEAR_BUTTONS,\n        attrs: {\n          'type': 'button',\n          'tabindex': this.btnTabIndex\n        }\n      });\n      this.actionButtons.appendChild(this.clearButton);\n      this.actionButtons.appendChild(this.uploadButton);\n      this.renderButtonTemplates();\n      this.uploadWrapper.appendChild(this.actionButtons);\n      this.browseButton.blur();\n\n      if (!this.isPreloadFiles) {\n        this.uploadButton.focus();\n      }\n\n      this.wireActionButtonEvents();\n    }\n  }\n  /* istanbul ignore next */\n\n\n  serverActionButtonsEventBind(element) {\n    if (element && !this.isForm) {\n      this.browseButton.blur();\n      this.actionButtons = element;\n      this.uploadButton = this.actionButtons.querySelector('.e-file-upload-btn');\n      this.clearButton = this.actionButtons.querySelector('.e-file-clear-btn');\n      this.uploadButton.focus();\n      this.unwireActionButtonEvents();\n      this.wireActionButtonEvents();\n      this.checkActionButtonStatus();\n    }\n  }\n  /* istanbul ignore next */\n\n\n  serverUlElement(element) {\n    if (element) {\n      if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n        this.listParent = element;\n        this.fileList = [].slice.call(this.listParent.querySelectorAll('li'));\n        this.serverRemoveIconBindEvent();\n\n        if (!this.isForm) {\n          this.checkAutoUpload(this.filesData);\n        }\n      }\n    }\n  }\n\n  wireActionButtonEvents() {\n    EventHandler.add(this.uploadButton, 'click', this.uploadButtonClick, this);\n    EventHandler.add(this.clearButton, 'click', this.clearButtonClick, this);\n  }\n\n  unwireActionButtonEvents() {\n    EventHandler.remove(this.uploadButton, 'click', this.uploadButtonClick);\n    EventHandler.remove(this.clearButton, 'click', this.clearButtonClick);\n  }\n\n  removeActionButtons() {\n    if (this.actionButtons) {\n      this.unwireActionButtonEvents();\n\n      if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n        detach(this.actionButtons);\n      }\n\n      this.actionButtons = null;\n    }\n  }\n\n  renderButtonTemplates() {\n    if (typeof this.buttons.browse === 'string') {\n      this.browseButton.textContent = this.buttons.browse === 'Browse...' ? this.localizedTexts('Browse') : this.buttons.browse;\n      this.browseButton.setAttribute('title', this.browseButton.textContent);\n    } else {\n      this.browseButton.innerHTML = '';\n      this.browseButton.appendChild(this.buttons.browse);\n    }\n\n    if (this.uploadButton) {\n      const uploadText = isNullOrUndefined(this.buttons.upload) ? 'Upload' : this.buttons.upload;\n      this.buttons.upload = uploadText;\n\n      if (typeof this.buttons.upload === 'string') {\n        this.uploadButton.textContent = this.buttons.upload === 'Upload' ? this.localizedTexts('Upload') : this.buttons.upload;\n        this.uploadButton.setAttribute('title', this.uploadButton.textContent);\n      } else {\n        this.uploadButton.innerHTML = '';\n        this.uploadButton.appendChild(this.buttons.upload);\n      }\n    }\n\n    if (this.clearButton) {\n      const clearText = isNullOrUndefined(this.buttons.clear) ? 'Clear' : this.buttons.clear;\n      this.buttons.clear = clearText;\n\n      if (typeof this.buttons.clear === 'string') {\n        this.clearButton.textContent = this.buttons.clear === 'Clear' ? this.localizedTexts('Clear') : this.buttons.clear;\n        this.clearButton.setAttribute('title', this.clearButton.textContent);\n      } else {\n        this.clearButton.innerHTML = '';\n        this.clearButton.appendChild(this.buttons.clear);\n      }\n    }\n  }\n\n  initializeUpload() {\n    this.element.setAttribute('tabindex', '-1');\n    const inputWrapper = this.createElement('span', {\n      className: INPUT_WRAPPER\n    });\n    this.element.parentElement.insertBefore(inputWrapper, this.element);\n    this.dropAreaWrapper = this.createElement('div', {\n      className: DROP_WRAPPER\n    });\n    this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);\n    inputWrapper.appendChild(this.element);\n    this.dropAreaWrapper.appendChild(this.browseButton);\n    this.dropAreaWrapper.appendChild(inputWrapper);\n    this.uploadWrapper = this.createElement('div', {\n      className: CONTROL_WRAPPER\n    });\n    this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);\n    this.uploadWrapper.appendChild(this.dropAreaWrapper);\n    this.setDropArea();\n  }\n\n  renderPreLoadFiles() {\n    if (this.files.length) {\n      if (this.enablePersistence && this.filesData.length) {\n        this.createFileList(this.filesData);\n        return;\n      }\n\n      if (isNullOrUndefined(this.files[0].size)) {\n        return;\n      }\n\n      this.isPreloadFiles = true;\n      let files = [].slice.call(this.files);\n      const filesData = [];\n\n      if (!this.multiple) {\n        this.clearData();\n        files = [files[0]];\n      }\n\n      for (const data of files) {\n        const fileData = {\n          name: data.name + '.' + data.type.split('.')[data.type.split('.').length - 1],\n          rawFile: '',\n          size: data.size,\n          status: this.localizedTexts('uploadSuccessMessage'),\n          type: data.type,\n          validationMessages: {\n            minSize: '',\n            maxSize: ''\n          },\n          statusCode: '2'\n        };\n        filesData.push(fileData);\n        this.filesData.push(fileData);\n      }\n\n      this.createFileList(filesData);\n\n      if (!this.autoUpload && this.listParent && !this.actionButtons && (!this.isForm || this.allowUpload()) && this.showFileList) {\n        this.renderActionButtons();\n      }\n\n      this.checkActionButtonStatus();\n\n      if (this.sequentialUpload) {\n        this.count = this.filesData.length - 1;\n      }\n\n      this.isPreloadFiles = false;\n    }\n  }\n\n  checkActionButtonStatus() {\n    if (this.actionButtons) {\n      const length = this.uploadWrapper.querySelectorAll('.' + VALIDATION_FAILS).length + this.uploadWrapper.querySelectorAll('.e-upload-fails:not(.e-upload-progress)').length + this.uploadWrapper.querySelectorAll('span.' + UPLOAD_SUCCESS).length + this.uploadWrapper.querySelectorAll('span.' + UPLOAD_INPROGRESS).length;\n\n      if (length > 0 && length === this.uploadWrapper.querySelectorAll('li').length) {\n        this.uploadButton.setAttribute('disabled', 'disabled');\n      } else {\n        this.uploadButton.removeAttribute('disabled');\n      }\n    }\n  }\n\n  setDropArea() {\n    const dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');\n\n    if (this.dropArea) {\n      this.dropZoneElement = typeof this.dropArea !== 'string' ? this.dropArea : select(this.dropArea, document);\n      let element = this.element;\n      let enableDropText = false;\n\n      while (element.parentNode) {\n        element = element.parentNode;\n\n        if (element === this.dropZoneElement) {\n          enableDropText = true;\n\n          if (!dropTextArea) {\n            this.createDropTextHint();\n          } else if (!this.isServerBlazor) {\n            dropTextArea.innerHTML = this.localizedTexts('dropFilesHint');\n          }\n        }\n      }\n\n      if (!enableDropText && dropTextArea) {\n        remove(dropTextArea);\n      }\n    } else if (!isNullOrUndefined(this.uploaderOptions) && this.uploaderOptions.dropArea === undefined) {\n      this.createDropTextHint();\n      this.dropZoneElement = this.uploadWrapper;\n      this.setProperties({\n        dropArea: this.uploadWrapper\n      }, true);\n    }\n\n    this.bindDropEvents();\n  }\n\n  updateDropArea() {\n    if (this.dropArea) {\n      this.setDropArea();\n    } else {\n      this.dropZoneElement = null;\n      const dropTextArea = this.dropAreaWrapper.querySelector('.e-file-drop');\n\n      if (dropTextArea) {\n        remove(dropTextArea);\n      }\n    }\n  }\n\n  createDropTextHint() {\n    if (!this.isServerBlazor) {\n      const fileDropArea = this.createElement('span', {\n        className: DROP_AREA\n      });\n      fileDropArea.innerHTML = this.localizedTexts('dropFilesHint');\n      this.dropAreaWrapper.appendChild(fileDropArea);\n    }\n  }\n\n  updateHTMLAttrToElement() {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (const pro of Object.keys(this.htmlAttributes)) {\n        if (wrapperAttr$1.indexOf(pro) < 0) {\n          this.element.setAttribute(pro, this.htmlAttributes[pro]);\n        }\n      }\n    }\n  }\n\n  updateHTMLAttrToWrapper() {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (const pro of Object.keys(this.htmlAttributes)) {\n        if (wrapperAttr$1.indexOf(pro) > -1) {\n          if (pro === 'class') {\n            const updatedClassValues = this.htmlAttributes[pro].replace(/\\s+/g, ' ').trim();\n\n            if (updatedClassValues !== '') {\n              addClass([this.uploadWrapper], updatedClassValues.split(' '));\n            }\n          } else if (pro === 'style') {\n            let uploadStyle = this.uploadWrapper.getAttribute(pro);\n            uploadStyle = !isNullOrUndefined(uploadStyle) ? uploadStyle + this.htmlAttributes[pro] : this.htmlAttributes[pro];\n            this.uploadWrapper.setAttribute(pro, uploadStyle);\n          } else {\n            this.uploadWrapper.setAttribute(pro, this.htmlAttributes[pro]);\n          }\n        }\n      }\n    }\n  }\n\n  setMultipleSelection() {\n    if (this.multiple && !this.element.hasAttribute('multiple')) {\n      const newAttr = document.createAttribute('multiple');\n      newAttr.value = 'multiple';\n      this.element.setAttributeNode(newAttr);\n    } else if (!this.multiple) {\n      this.element.removeAttribute('multiple');\n    }\n  }\n\n  checkAutoUpload(fileData) {\n    if (this.autoUpload) {\n      if (this.sequentialUpload) {\n        /* istanbul ignore next */\n        this.sequenceUpload(fileData);\n      } else {\n        this.upload(fileData);\n      }\n\n      this.removeActionButtons();\n    } else if (!this.actionButtons) {\n      this.renderActionButtons();\n    }\n\n    this.checkActionButtonStatus();\n  }\n\n  sequenceUpload(fileData) {\n    if (this.filesData.length - fileData.length === 0 || this.filesData[this.filesData.length - fileData.length - 1].statusCode !== '1') {\n      ++this.count;\n      const isFileListCreated = this.showFileList ? false : true;\n\n      if (typeof this.filesData[this.count] === 'object') {\n        this.isFirstFileOnSelection = false;\n        this.upload(this.filesData[this.count], isFileListCreated);\n\n        if (this.filesData[this.count].statusCode === '0') {\n          this.sequenceUpload(fileData);\n        }\n      } else {\n        --this.count;\n      }\n    }\n  }\n\n  setCSSClass(oldCSSClass) {\n    let updatedCssClassValue = this.cssClass;\n\n    if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n      updatedCssClassValue = this.cssClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    if (!isNullOrUndefined(this.cssClass) && updatedCssClassValue !== '') {\n      addClass([this.uploadWrapper], updatedCssClassValue.split(updatedCssClassValue.indexOf(',') > -1 ? ',' : ' '));\n    }\n\n    let updatedOldCssClass = oldCSSClass;\n\n    if (!isNullOrUndefined(oldCSSClass)) {\n      updatedOldCssClass = oldCSSClass.replace(/\\s+/g, ' ').trim();\n    }\n\n    if (!isNullOrUndefined(oldCSSClass) && updatedOldCssClass !== '') {\n      removeClass([this.uploadWrapper], updatedOldCssClass.split(' '));\n    }\n  }\n\n  wireEvents() {\n    EventHandler.add(this.browseButton, 'click', this.browseButtonClick, this);\n    EventHandler.add(this.element, 'change', this.onSelectFiles, this);\n    EventHandler.add(document, 'click', this.removeFocus, this);\n    this.keyboardModule = new KeyboardEvents(this.uploadWrapper, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n\n    if (this.isForm) {\n      EventHandler.add(this.formElement, 'reset', this.resetForm, this);\n    }\n  }\n\n  unWireEvents() {\n    EventHandler.remove(this.browseButton, 'click', this.browseButtonClick);\n    EventHandler.remove(this.element, 'change', this.onSelectFiles);\n    EventHandler.remove(document, 'click', this.removeFocus);\n\n    if (this.isForm) {\n      EventHandler.remove(this.formElement, 'reset', this.resetForm);\n    }\n\n    if (this.keyboardModule) {\n      this.keyboardModule.destroy();\n    }\n  }\n\n  resetForm() {\n    this.clearAll();\n  }\n\n  keyActionHandler(e) {\n    const targetElement = e.target;\n\n    switch (e.action) {\n      case 'enter':\n        if (e.target === this.clearButton) {\n          this.clearButtonClick();\n        } else if (e.target === this.uploadButton) {\n          this.uploadButtonClick();\n        } else if (e.target === this.browseButton) {\n          this.browseButtonClick();\n        } else if (targetElement.classList.contains(PAUSE_UPLOAD)) {\n          const metaData = this.getCurrentMetaData(null, e);\n          metaData.file.statusCode = '4';\n          metaData.file.status = this.localizedTexts('pauseUpload');\n          this.abortUpload(metaData, false);\n        } else if (targetElement.classList.contains(RESUME_UPLOAD)) {\n          this.resumeUpload(this.getCurrentMetaData(null, e), e);\n        } else if (targetElement.classList.contains(RETRY_ICON)) {\n          const metaData = this.getCurrentMetaData(null, e);\n\n          if (!isNullOrUndefined(metaData)) {\n            metaData.file.statusCode = '1';\n            metaData.file.status = this.localizedTexts('readyToUploadMessage');\n            this.chunkUpload(metaData.file);\n          } else {\n            const target = e.target.parentElement;\n            const fileData = this.filesData[this.fileList.indexOf(target)];\n            this.retry(fileData);\n          }\n        } else {\n          this.removeFiles(e);\n\n          if (!targetElement.classList.contains(ABORT_ICON)) {\n            this.browseButton.focus();\n          }\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n        break;\n    }\n  }\n\n  getCurrentMetaData(fileInfo, e) {\n    let fileData;\n    let targetMetaData;\n\n    if (isNullOrUndefined(fileInfo)) {\n      const target = e.target.parentElement;\n      fileData = this.filesData[this.fileList.indexOf(target)];\n    } else {\n      fileData = fileInfo;\n    }\n\n    for (let i = 0; i < this.uploadMetaData.length; i++) {\n      if (this.uploadMetaData[i].file.name === fileData.name) {\n        targetMetaData = this.uploadMetaData[i];\n      }\n    }\n\n    return targetMetaData;\n  }\n\n  removeFocus() {\n    if (this.uploadWrapper && this.listParent && this.listParent.querySelector('.' + ICON_FOCUSED)) {\n      document.activeElement.blur();\n      this.listParent.querySelector('.' + ICON_FOCUSED).classList.remove(ICON_FOCUSED);\n    }\n  }\n\n  browseButtonClick() {\n    this.element.click();\n  }\n\n  uploadButtonClick() {\n    if (this.sequentialUpload) {\n      this.sequenceUpload(this.filesData);\n    } else {\n      this.upload(this.filesData);\n    }\n  }\n\n  clearButtonClick() {\n    this.clearAll();\n    /* istanbul ignore next */\n\n    if (this.sequentialUpload) {\n      this.count = -1;\n    }\n\n    this.actionCompleteCount = 0;\n  }\n\n  bindDropEvents() {\n    if (this.dropZoneElement) {\n      EventHandler.add(this.dropZoneElement, 'drop', this.dropElement, this);\n      EventHandler.add(this.dropZoneElement, 'dragover', this.dragHover, this);\n      EventHandler.add(this.dropZoneElement, 'dragleave', this.onDragLeave, this);\n      EventHandler.add(this.dropZoneElement, 'paste', this.onPasteFile, this);\n      EventHandler.add(this.dropZoneElement, 'dragenter', this.onDragEnter, this);\n    }\n  }\n\n  unBindDropEvents() {\n    if (this.dropZoneElement) {\n      EventHandler.remove(this.dropZoneElement, 'drop', this.dropElement);\n      EventHandler.remove(this.dropZoneElement, 'dragover', this.dragHover);\n      EventHandler.remove(this.dropZoneElement, 'dragleave', this.onDragLeave);\n      EventHandler.remove(this.dropZoneElement, 'dragenter', this.onDragEnter);\n    }\n  }\n\n  onDragEnter(e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.dropZoneElement.classList.add(DRAG_HOVER);\n    this.dragCounter = this.dragCounter + 1;\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  onDragLeave() {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.dragCounter = this.dragCounter - 1;\n\n    if (!this.dragCounter) {\n      this.dropZoneElement.classList.remove(DRAG_HOVER);\n    }\n  }\n\n  dragHover(e) {\n    if (!this.enabled) {\n      return;\n    }\n\n    if (this.dropEffect !== 'Default') {\n      e.dataTransfer.dropEffect = this.dropEffect.toLowerCase();\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n  }\n  /* istanbul ignore next */\n\n\n  dropElement(e) {\n    this.dragCounter = 0;\n    this.dropZoneElement.classList.remove(DRAG_HOVER);\n    this.onSelectFiles(e);\n    e.preventDefault();\n    e.stopPropagation();\n  }\n  /* istanbul ignore next */\n\n\n  onPasteFile(event) {\n    const item = event.clipboardData.items;\n\n    if (item.length !== 1) {\n      return;\n    }\n\n    const pasteFile = [].slice.call(item)[0];\n\n    if (pasteFile.kind === 'file' && pasteFile.type.match('^image/')) {\n      this.renderSelectedFiles(event, [pasteFile.getAsFile()], false, true);\n    }\n  }\n\n  getSelectedFiles(index) {\n    const data = [];\n    const liElement = this.fileList[index];\n    const allFiles = this.getFilesData();\n    const nameElements = +liElement.getAttribute('data-files-count');\n    let startIndex = 0;\n\n    for (let i = 0; i < index; i++) {\n      startIndex += +this.fileList[i].getAttribute('data-files-count');\n    }\n\n    for (let j = startIndex; j < startIndex + nameElements; j++) {\n      data.push(allFiles[j]);\n    }\n\n    return data;\n  }\n\n  removeFiles(args) {\n    if (!this.enabled) {\n      return;\n    }\n\n    const selectedElement = args.target.parentElement;\n\n    if (this.isBlazorSaveUrl) {\n      this.fileList = [].slice.call(this.uploadWrapper.querySelectorAll('li'));\n    }\n\n    const index = this.fileList.indexOf(selectedElement);\n    const liElement = this.fileList[index];\n    const formUpload = this.isFormUpload();\n    const fileData = formUpload ? this.getSelectedFiles(index) : this.getFilesInArray(this.filesData[index]);\n\n    if (isNullOrUndefined(fileData)) {\n      return;\n    }\n\n    if (args.target.classList.contains(ABORT_ICON) && !formUpload) {\n      fileData[0].statusCode = '5';\n\n      if (!isNullOrUndefined(liElement)) {\n        const spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n        createSpinner({\n          target: spinnerTarget,\n          width: '20px'\n        });\n        showSpinner(spinnerTarget);\n      }\n\n      if (this.sequentialUpload) {\n        /* istanbul ignore next */\n        this.uploadSequential();\n      }\n\n      if (!liElement.classList.contains(RESTRICT_RETRY)) {\n        this.checkActionComplete(true);\n      }\n    } else if (!closest(args.target, '.' + SPINNER_PANE)) {\n      this.remove(fileData, false, false, true, args);\n    }\n\n    this.element.value = '';\n    this.checkActionButtonStatus();\n  }\n\n  removeFilesData(file, customTemplate) {\n    let index;\n\n    if (customTemplate) {\n      if (!this.showFileList) {\n        index = this.filesData.indexOf(file);\n        this.filesData.splice(index, 1);\n      }\n\n      return;\n    }\n\n    const selectedElement = this.getLiElement(file);\n\n    if (isNullOrUndefined(selectedElement)) {\n      return;\n    }\n\n    if (!this.isBlazorSaveUrl) {\n      detach(selectedElement);\n    }\n\n    index = this.fileList.indexOf(selectedElement);\n    this.fileList.splice(index, 1);\n    this.filesData.splice(index, 1);\n\n    if (!this.isBlazorSaveUrl) {\n      if (this.fileList.length === 0 && !isNullOrUndefined(this.listParent)) {\n        detach(this.listParent);\n        this.listParent = null;\n        this.removeActionButtons();\n      }\n\n      if (this.sequentialUpload) {\n        /* istanbul ignore next */\n        if (index <= this.count) {\n          --this.count;\n        }\n      }\n    } else {\n      this.interopAdaptor.invokeMethodAsync('removeFileData', index);\n    }\n  }\n\n  removeUploadedFile(file, eventArgs, removeDirectly, custom) {\n    const selectedFiles = file;\n    const ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n    ajax.emitError = false;\n    const formData = new FormData();\n\n    ajax.beforeSend = e => {\n      eventArgs.currentRequest = ajax.httpRequest;\n\n      if (isBlazor()) {\n        if (this.currentRequestHeader) {\n          this.updateCustomheader(ajax.httpRequest, this.currentRequestHeader);\n        }\n\n        if (this.customFormDatas) {\n          this.updateFormData(formData, this.customFormDatas);\n        }\n      }\n\n      if (!removeDirectly) {\n        this.trigger('removing', eventArgs, eventArgs => {\n          if (eventArgs.cancel) {\n            e.cancel = true;\n          } else {\n            this.removingEventCallback(eventArgs, formData, selectedFiles, file);\n          }\n        });\n      } else {\n        this.removingEventCallback(eventArgs, formData, selectedFiles, file);\n      }\n    };\n\n    if (this.isServerBlazor) {\n      const name = this.element.getAttribute('name');\n\n      if (!isNullOrUndefined(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {\n        formData.append(name, selectedFiles.rawFile, selectedFiles.name);\n      } else {\n        formData.append(name, selectedFiles.name);\n      }\n    }\n\n    ajax.onLoad = e => {\n      this.removeCompleted(e, selectedFiles, custom);\n      return {};\n    };\n    /* istanbul ignore next */\n\n\n    ajax.onError = e => {\n      this.removeFailed(e, selectedFiles, custom);\n      return {};\n    };\n\n    ajax.send(formData);\n  }\n\n  removingEventCallback(eventArgs, formData, selectedFiles, file) {\n    /* istanbul ignore next */\n    const name = this.element.getAttribute('name');\n    const liElement = this.getLiElement(file);\n\n    if (!isNullOrUndefined(liElement) && (!isNullOrUndefined(liElement.querySelector('.' + DELETE_ICON)) || !isNullOrUndefined(liElement.querySelector('.' + REMOVE_ICON)))) {\n      const spinnerTarget = liElement.querySelector('.' + DELETE_ICON) ? liElement.querySelector('.' + DELETE_ICON) : liElement.querySelector('.' + REMOVE_ICON);\n      createSpinner({\n        target: spinnerTarget,\n        width: '20px'\n      });\n      showSpinner(spinnerTarget);\n    }\n\n    if (!this.isServerBlazor) {\n      if (eventArgs.postRawFile && !isNullOrUndefined(selectedFiles.rawFile) && selectedFiles.rawFile !== '') {\n        formData.append(name, selectedFiles.rawFile, selectedFiles.name);\n      } else {\n        formData.append(name, selectedFiles.name);\n      }\n\n      this.updateFormData(formData, eventArgs.customFormData);\n    }\n  }\n  /* istanbul ignore next */\n\n\n  updateFormData(formData, customData) {\n    if (customData.length > 0 && customData[0]) {\n      for (let i = 0; i < customData.length; i++) {\n        const data = customData[i]; // eslint-disable-next-line @typescript-eslint/tslint/config\n\n        const value = Object.keys(data).map(function (e) {\n          return data[e];\n        });\n        formData.append(Object.keys(data)[0], value);\n      }\n    }\n  }\n  /* istanbul ignore next */\n\n\n  updateCustomheader(request, currentRequest) {\n    if (currentRequest.length > 0 && currentRequest[0]) {\n      for (let i = 0; i < currentRequest.length; i++) {\n        const data = currentRequest[i]; // eslint-disable-next-line @typescript-eslint/tslint/config\n\n        const value = Object.keys(data).map(function (e) {\n          return data[e];\n        });\n        request.setRequestHeader(Object.keys(data)[0], value);\n      }\n    }\n  }\n\n  removeCompleted(e, files, customTemplate) {\n    const response = e && e.currentTarget ? this.getResponse(e) : null;\n    const status = e.target;\n\n    if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {\n      const args = {\n        e,\n        response: response,\n        operation: 'remove',\n        file: this.updateStatus(files, this.localizedTexts('removedSuccessMessage'), '2')\n      };\n      this.trigger('success', args);\n      this.removeFilesData(files, customTemplate);\n      const index = this.uploadedFilesData.indexOf(files);\n      this.uploadedFilesData.splice(index, 1);\n      this.trigger('change', {\n        files: this.uploadedFilesData\n      });\n    } else {\n      this.removeFailed(e, files, customTemplate);\n    }\n  }\n\n  removeFailed(e, files, customTemplate) {\n    const response = e && e.currentTarget ? this.getResponse(e) : null;\n    const args = {\n      e,\n      response: response,\n      operation: 'remove',\n      file: this.updateStatus(files, this.localizedTexts('removedFailedMessage'), '0')\n    };\n\n    if (!customTemplate) {\n      const index = this.filesData.indexOf(files);\n      const rootElement = this.fileList[index];\n\n      if (rootElement) {\n        rootElement.classList.remove(UPLOAD_SUCCESS);\n        rootElement.classList.add(UPLOAD_FAILED);\n        const statusElement = rootElement.querySelector('.' + STATUS);\n\n        if (statusElement) {\n          statusElement.classList.remove(UPLOAD_SUCCESS);\n          statusElement.classList.add(UPLOAD_FAILED);\n        }\n      }\n\n      this.checkActionButtonStatus();\n    }\n\n    this.trigger('failure', args);\n    const liElement = this.getLiElement(files);\n    /* istanbul ignore next */\n\n    if (!isNullOrUndefined(liElement) && !isNullOrUndefined(liElement.querySelector('.' + DELETE_ICON))) {\n      const spinnerTarget = liElement.querySelector('.' + DELETE_ICON);\n      hideSpinner(spinnerTarget);\n      detach(liElement.querySelector('.e-spinner-pane'));\n    }\n  }\n  /* istanbul ignore next */\n\n\n  getFilesFromFolder(event) {\n    this.filesEntries = [];\n    const items = this.multiple ? event.dataTransfer.items : [event.dataTransfer.items[0]];\n    const validDirectoryUpload = this.checkDirectoryUpload(items);\n\n    if (!validDirectoryUpload) {\n      return;\n    }\n\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i].webkitGetAsEntry();\n\n      if (item.isFile) {\n        const files = [];\n        item.file(fileObj => {\n          const path = item.fullPath;\n          files.push({\n            'path': path,\n            'file': fileObj\n          });\n        });\n        this.renderSelectedFiles(event, files, true);\n      } else if (item.isDirectory) {\n        this.traverseFileTree(item, event);\n      }\n    }\n  }\n  /* istanbul ignore next */\n\n\n  checkDirectoryUpload(items) {\n    for (let i = 0; items && i < items.length; i++) {\n      const item = items[i].webkitGetAsEntry();\n\n      if (item.isDirectory) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n  /* istanbul ignore next */\n\n\n  traverseFileTree(item, event) {\n    /* eslint-enable @typescript-eslint/explicit-module-boundary-types */\n    if (item.isFile) {\n      this.filesEntries.push(item);\n    } else if (item.isDirectory) {\n      const directoryReader = item.createReader();\n      this.readFileFromDirectory(directoryReader, event);\n    }\n  }\n  /* istanbul ignore next */\n\n\n  readFileFromDirectory(directoryReader, event) {\n    directoryReader.readEntries(entries => {\n      for (let i = 0; i < entries.length; i++) {\n        this.traverseFileTree(entries[i], event);\n      }\n\n      this.pushFilesEntries(event);\n\n      if (entries.length) {\n        this.readFileFromDirectory(directoryReader);\n      }\n    });\n  }\n\n  pushFilesEntries(event) {\n    const files = [];\n\n    for (let i = 0; i < this.filesEntries.length; i++) {\n      this.filesEntries[i].file(fileObj => {\n        if (this.filesEntries.length) {\n          const path = this.filesEntries[i].fullPath;\n          files.push({\n            'path': path,\n            'file': fileObj\n          });\n\n          if (i === this.filesEntries.length - 1) {\n            this.filesEntries = [];\n            this.renderSelectedFiles(event, files, true);\n          }\n        }\n      });\n    }\n  }\n\n  onSelectFiles(args) {\n    if (!this.enabled) {\n      return;\n    }\n\n    let targetFiles;\n    /* istanbul ignore next */\n\n    if (args.type === 'drop') {\n      if (this.directoryUpload) {\n        this.getFilesFromFolder(args);\n      } else {\n        const files = this.sortFilesList = args.dataTransfer.files;\n\n        if (this.browserName !== 'msie' && this.browserName !== 'edge' && this.browserName !== 'safari') {\n          this.element.files = files;\n        }\n\n        if (files.length > 0) {\n          targetFiles = this.multiple ? this.sortFileList(files) : [files[0]];\n          this.renderSelectedFiles(args, targetFiles);\n        }\n      }\n    } else {\n      targetFiles = [].slice.call(args.target.files);\n      this.renderSelectedFiles(args, targetFiles);\n    }\n  }\n  /* istanbul ignore next */\n\n\n  getBase64(file) {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsDataURL(file);\n\n      fileReader.onload = () => resolve(fileReader.result);\n\n      fileReader.onerror = error => reject(error);\n    });\n  }\n  /* istanbul ignore next */\n\n  /* tslint:ignore */\n\n\n  renderSelectedFiles(args, targetFiles, directory, paste) {\n    this.base64String = [];\n    const eventArgs = {\n      event: args,\n      cancel: false,\n      filesData: [],\n      isModified: false,\n      modifiedFilesData: [],\n      progressInterval: '',\n      isCanceled: false,\n      currentRequest: null,\n      customFormData: null\n    };\n    /* istanbul ignore next */\n\n    if (targetFiles.length < 1) {\n      eventArgs.isCanceled = true;\n      this.trigger('selected', eventArgs);\n      return;\n    }\n\n    this.flag = true;\n    let fileData = [];\n\n    if (!this.multiple) {\n      this.clearData(true);\n      targetFiles = [targetFiles[0]];\n    }\n\n    for (let i = 0; i < targetFiles.length; i++) {\n      const file = directory ? targetFiles[i].file : targetFiles[i];\n      this.updateInitialFileDetails(args, targetFiles, file, i, fileData, directory, paste);\n    }\n\n    eventArgs.filesData = fileData;\n\n    if (this.allowedExtensions.indexOf('*') > -1) {\n      this.allTypes = true;\n    }\n\n    if (!this.allTypes) {\n      fileData = this.checkExtension(fileData);\n    }\n\n    this.trigger('selected', eventArgs, eventArgs => {\n      this._internalRenderSelect(eventArgs, fileData);\n    });\n  }\n\n  updateInitialFileDetails(args, // eslint-disable-next-line @typescript-eslint/indent\n  targetFiles, file, i, fileData, directory, paste) {\n    const fileName = directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ? getUniqueID(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name) : this.directoryUpload ? targetFiles[i].webkitRelativePath : file.name;\n    const fileDetails = {\n      name: fileName,\n      rawFile: file,\n      size: file.size,\n      status: this.localizedTexts('readyToUploadMessage'),\n      type: this.getFileType(file.name),\n      validationMessages: this.validatedFileSize(file.size),\n      statusCode: '1',\n      id: getUniqueID(file.name.substring(0, file.name.lastIndexOf('.'))) + '.' + this.getFileType(file.name)\n    };\n    /* istanbul ignore next */\n\n    if (paste) {\n      fileDetails.fileSource = 'paste';\n    }\n\n    fileDetails.status = fileDetails.validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : fileDetails.validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : fileDetails.status;\n\n    if (fileDetails.validationMessages.minSize !== '' || fileDetails.validationMessages.maxSize !== '') {\n      fileDetails.statusCode = '0';\n    }\n\n    fileData.push(fileDetails);\n  }\n\n  _internalRenderSelect(eventArgs, fileData) {\n    if (!eventArgs.cancel) {\n      /* istanbul ignore next */\n      if (isBlazor()) {\n        this.currentRequestHeader = eventArgs.currentRequest;\n        this.customFormDatas = eventArgs.customFormData;\n      }\n\n      this.selectedFiles = this.selectedFiles.concat(fileData);\n      this.btnTabIndex = this.disableKeyboardNavigation ? '-1' : '0';\n\n      if (this.showFileList) {\n        if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {\n          for (let j = 0; j < eventArgs.modifiedFilesData.length; j++) {\n            for (let k = 0; k < fileData.length; k++) {\n              if (eventArgs.modifiedFilesData[j].id === fileData[k].id) {\n                eventArgs.modifiedFilesData[j].rawFile = fileData[k].rawFile;\n              }\n            }\n          }\n\n          const dataFiles = this.allTypes ? eventArgs.modifiedFilesData : this.checkExtension(eventArgs.modifiedFilesData);\n          this.updateSortedFileList(dataFiles);\n          this.filesData = dataFiles;\n\n          if (!this.isForm || this.allowUpload()) {\n            this.checkAutoUpload(dataFiles);\n          }\n        } else {\n          this.createFileList(fileData, true);\n\n          if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n            this.filesData = this.filesData.concat(fileData);\n          }\n\n          if (!this.isForm || this.allowUpload()) {\n            if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n              this.checkAutoUpload(fileData);\n            }\n          }\n        }\n\n        if (!isNullOrUndefined(eventArgs.progressInterval) && eventArgs.progressInterval !== '') {\n          this.progressInterval = eventArgs.progressInterval;\n        }\n      } else {\n        this.filesData = this.filesData.concat(fileData);\n\n        if (this.isBlazorSaveUrl) {\n          this.interopAdaptor.invokeMethodAsync('updateServerFileData', this.filesData, this.isForm);\n        }\n\n        if (this.autoUpload) {\n          this.upload(this.filesData, true);\n        }\n      }\n\n      this.raiseActionComplete();\n      this.isFirstFileOnSelection = true;\n    }\n  }\n\n  allowUpload() {\n    let allowFormUpload = false;\n\n    if (this.isForm && !isNullOrUndefined(this.asyncSettings.saveUrl) && this.asyncSettings.saveUrl !== '') {\n      allowFormUpload = true;\n    }\n\n    return allowFormUpload;\n  }\n\n  isFormUpload() {\n    let isFormUpload = false;\n\n    if (this.isForm && (isNullOrUndefined(this.asyncSettings.saveUrl) || this.asyncSettings.saveUrl === '') && (isNullOrUndefined(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === '')) {\n      isFormUpload = true;\n    }\n\n    return isFormUpload;\n  }\n\n  clearData(singleUpload) {\n    if (!isNullOrUndefined(this.listParent) && !(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n      detach(this.listParent);\n      this.listParent = null;\n    }\n\n    if (this.browserName !== 'msie' && !singleUpload) {\n      this.element.value = '';\n    }\n\n    this.fileList = [];\n    this.filesData = [];\n\n    if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n      this.interopAdaptor.invokeMethodAsync('clearAll');\n    } else {\n      this.removeActionButtons();\n    }\n  }\n\n  updateSortedFileList(filesData) {\n    const previousListClone = this.createElement('div', {\n      id: 'clonewrapper'\n    });\n    let added = -1;\n    let removedList;\n\n    if (this.listParent) {\n      for (let i = 0; i < this.listParent.querySelectorAll('li').length; i++) {\n        const liElement = this.listParent.querySelectorAll('li')[i];\n        previousListClone.appendChild(liElement.cloneNode(true));\n      }\n\n      removedList = this.listParent.querySelectorAll('li');\n\n      for (const item of removedList) {\n        detach(item);\n      }\n\n      this.removeActionButtons();\n      const oldList = [].slice.call(previousListClone.childNodes);\n      detach(this.listParent);\n      this.listParent = null;\n      this.fileList = [];\n      this.createParentUL();\n\n      for (let index = 0; index < filesData.length; index++) {\n        for (let j = 0; j < this.filesData.length; j++) {\n          if (this.filesData[j].name === filesData[index].name) {\n            this.listParent.appendChild(oldList[j]);\n            EventHandler.add(oldList[j].querySelector('.e-icons'), 'click', this.removeFiles, this);\n            this.fileList.push(oldList[j]);\n            added = index;\n          }\n        }\n\n        if (added !== index) {\n          this.createFileList([filesData[index]]);\n        }\n      }\n    } else {\n      this.createFileList(filesData);\n    }\n  }\n\n  isBlank(str) {\n    return !str || /^\\s*$/.test(str);\n  }\n\n  checkExtension(files) {\n    const dropFiles = files;\n\n    if (!this.isBlank(this.allowedExtensions)) {\n      const allowedExtensions = [];\n      const extensions = this.allowedExtensions.split(',');\n\n      for (const extension of extensions) {\n        allowedExtensions.push(extension.trim().toLocaleLowerCase());\n      }\n\n      for (let i = 0; i < files.length; i++) {\n        if (allowedExtensions.indexOf(('.' + files[i].type).toLocaleLowerCase()) === -1) {\n          files[i].status = this.localizedTexts('invalidFileType');\n          files[i].statusCode = '0';\n        }\n      }\n    }\n\n    return dropFiles;\n  }\n\n  validatedFileSize(fileSize) {\n    let minSizeError = '';\n    let maxSizeError = '';\n\n    if (fileSize < this.minFileSize) {\n      minSizeError = this.localizedTexts('invalidMinFileSize');\n    } else if (fileSize > this.maxFileSize) {\n      maxSizeError = this.localizedTexts('invalidMaxFileSize');\n    } else {\n      minSizeError = '';\n      maxSizeError = '';\n    }\n\n    const errorMessage = {\n      minSize: minSizeError,\n      maxSize: maxSizeError\n    };\n    return errorMessage;\n  }\n\n  isPreLoadFile(fileData) {\n    let isPreload = false;\n\n    for (let i = 0; i < this.files.length; i++) {\n      if (this.files[i].name === fileData.name.slice(0, fileData.name.lastIndexOf('.')) && this.files[i].type === fileData.type) {\n        isPreload = true;\n      }\n    }\n\n    return isPreload;\n  }\n\n  createCustomfileList(fileData) {\n    this.createParentUL();\n    resetBlazorTemplate(this.element.id + 'Template', 'Template');\n\n    for (const listItem of fileData) {\n      const listElement = this.createElement('li', {\n        className: FILE,\n        attrs: {\n          'data-file-name': listItem.name\n        }\n      });\n      this.uploadTemplateFn = this.templateComplier(this.template);\n      const liTempCompiler = this.uploadTemplateFn(listItem, this, 'template', this.element.id + 'Template', this.isStringTemplate, null, listElement);\n\n      if (liTempCompiler) {\n        const fromElements = [].slice.call(liTempCompiler);\n        append(fromElements, listElement);\n      }\n\n      const index = fileData.indexOf(listItem);\n      const eventArgs = {\n        element: listElement,\n        fileInfo: listItem,\n        index: index,\n        isPreload: this.isPreLoadFile(listItem)\n      };\n      const eventsArgs = {\n        element: listElement,\n        fileInfo: listItem,\n        index: index,\n        isPreload: this.isPreLoadFile(listItem)\n      };\n      this.trigger('rendering', eventArgs);\n      this.trigger('fileListRendering', eventsArgs);\n      this.listParent.appendChild(listElement);\n      this.fileList.push(listElement);\n    }\n\n    this.renderReactTemplates();\n    updateBlazorTemplate(this.element.id + 'Template', 'Template', this, false);\n  }\n\n  createParentUL() {\n    if (isNullOrUndefined(this.listParent)) {\n      this.listParent = this.createElement('ul', {\n        className: LIST_PARENT\n      });\n      this.uploadWrapper.appendChild(this.listParent);\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  formFileList(fileData, files) {\n    const fileList = this.createElement('li', {\n      className: FILE\n    });\n    fileList.setAttribute('data-files-count', fileData.length + '');\n    const fileContainer = this.createElement('span', {\n      className: TEXT_CONTAINER\n    });\n    let statusMessage;\n\n    for (const listItem of fileData) {\n      const fileNameEle = this.createElement('span', {\n        className: FILE_NAME\n      });\n      fileNameEle.innerHTML = this.getFileNameOnly(listItem.name);\n      const fileTypeEle = this.createElement('span', {\n        className: FILE_TYPE\n      });\n      const fileType = this.getFileType(listItem.name);\n      fileTypeEle.innerHTML = '.' + fileType;\n\n      if (!fileType) {\n        fileTypeEle.classList.add('e-hidden');\n      }\n\n      if (!this.enableRtl) {\n        fileContainer.appendChild(fileNameEle);\n        fileContainer.appendChild(fileTypeEle);\n      } else {\n        const rtlContainer = this.createElement('span', {\n          className: RTL_CONTAINER\n        });\n        rtlContainer.appendChild(fileTypeEle);\n        rtlContainer.appendChild(fileNameEle);\n        fileContainer.appendChild(rtlContainer);\n      }\n\n      this.truncateName(fileNameEle);\n      statusMessage = this.formValidateFileInfo(listItem, fileList);\n    }\n\n    fileList.appendChild(fileContainer);\n    this.setListToFileInfo(fileData, fileList);\n    const index = this.listParent.querySelectorAll('li').length;\n    const infoEle = this.createElement('span');\n\n    if (fileList.classList.contains(INVALID_FILE)) {\n      infoEle.classList.add(STATUS);\n      infoEle.classList.add(INVALID_FILE);\n      infoEle.innerText = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;\n    } else {\n      infoEle.classList.add(fileData.length > 1 ? INFORMATION : FILE_SIZE);\n      infoEle.innerText = fileData.length > 1 ? this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(fileData)) : this.bytesToSize(fileData[0].size);\n      this.createFormInput(fileData);\n    }\n\n    fileContainer.appendChild(infoEle);\n\n    if (isNullOrUndefined(fileList.querySelector('.e-icons'))) {\n      const iconElement = this.createElement('span', {\n        className: 'e-icons',\n        attrs: {\n          'tabindex': this.btnTabIndex\n        }\n      });\n      /* istanbul ignore next */\n\n      if (this.browserName === 'msie') {\n        iconElement.classList.add('e-msie');\n      }\n\n      iconElement.setAttribute('title', this.localizedTexts('remove'));\n      fileList.appendChild(fileContainer);\n      fileList.appendChild(iconElement);\n      EventHandler.add(iconElement, 'click', this.removeFiles, this);\n      iconElement.classList.add(REMOVE_ICON);\n    }\n\n    const eventArgs = {\n      element: fileList,\n      fileInfo: this.mergeFileInfo(fileData, fileList),\n      index: index,\n      isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))\n    };\n    const eventsArgs = {\n      element: fileList,\n      fileInfo: this.mergeFileInfo(fileData, fileList),\n      index: index,\n      isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))\n    };\n    this.trigger('rendering', eventArgs);\n    this.trigger('fileListRendering', eventsArgs);\n    this.listParent.appendChild(fileList);\n    this.fileList.push(fileList);\n  }\n\n  formValidateFileInfo(listItem, fileList) {\n    let statusMessage = listItem.status;\n    const validationMessages = this.validatedFileSize(listItem.size);\n\n    if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {\n      this.addInvalidClass(fileList);\n      statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;\n    }\n\n    const typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;\n\n    if (typeValidationMessage === this.localizedTexts('invalidFileType')) {\n      this.addInvalidClass(fileList);\n      statusMessage = typeValidationMessage;\n    }\n\n    return statusMessage;\n  }\n\n  addInvalidClass(fileList) {\n    fileList.classList.add(INVALID_FILE);\n  }\n\n  createFormInput(fileData) {\n    const inputElement = this.element.cloneNode(true);\n    inputElement.classList.add(HIDDEN_INPUT);\n\n    for (const listItem of fileData) {\n      listItem.input = inputElement;\n    }\n\n    inputElement.setAttribute('name', this.uploaderName);\n    this.uploadWrapper.querySelector('.' + INPUT_WRAPPER).appendChild(inputElement);\n\n    if (this.browserName !== 'msie' && this.browserName !== 'edge') {\n      this.element.value = '';\n    }\n  }\n\n  getFileSize(fileData) {\n    let fileSize = 0;\n\n    for (const file of fileData) {\n      fileSize += file.size;\n    }\n\n    return fileSize;\n  }\n\n  mergeFileInfo(fileData, fileList) {\n    const result = {\n      name: '',\n      rawFile: '',\n      size: 0,\n      status: '',\n      type: '',\n      validationMessages: {\n        minSize: '',\n        maxSize: ''\n      },\n      statusCode: '1',\n      list: fileList\n    };\n    const fileNames = [];\n    let type = '';\n\n    for (const listItem of fileData) {\n      fileNames.push(listItem.name);\n      type = listItem.type;\n    }\n\n    result.name = fileNames.join(', ');\n    result.size = this.getFileSize(fileData);\n    result.type = type;\n    result.status = this.statusForFormUpload(fileData, fileList);\n    return result;\n  }\n\n  statusForFormUpload(fileData, fileList) {\n    let isValid = true;\n    let statusMessage;\n\n    for (const listItem of fileData) {\n      statusMessage = listItem.status;\n      const validationMessages = this.validatedFileSize(listItem.size);\n\n      if (validationMessages.minSize !== '' || validationMessages.maxSize !== '') {\n        isValid = false;\n        statusMessage = validationMessages.minSize !== '' ? this.localizedTexts('invalidMinFileSize') : validationMessages.maxSize !== '' ? this.localizedTexts('invalidMaxFileSize') : statusMessage;\n      }\n\n      const typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;\n\n      if (typeValidationMessage === this.localizedTexts('invalidFileType')) {\n        isValid = false;\n        statusMessage = typeValidationMessage;\n      }\n    }\n\n    if (!isValid) {\n      fileList.classList.add(INVALID_FILE);\n      statusMessage = fileData.length > 1 ? this.localizedTexts('invalidFileSelection') : statusMessage;\n    } else {\n      statusMessage = this.localizedTexts('totalFiles') + ': ' + fileData.length + ' , ' + this.localizedTexts('size') + ': ' + this.bytesToSize(this.getFileSize(fileData));\n    }\n\n    return statusMessage;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  formCustomFileList(fileData, files) {\n    this.createParentUL();\n    resetBlazorTemplate(this.element.id + 'Template', 'Template');\n    const fileList = this.createElement('li', {\n      className: FILE\n    });\n    fileList.setAttribute('data-files-count', fileData.length + '');\n    this.setListToFileInfo(fileData, fileList);\n    const result = this.mergeFileInfo(fileData, fileList);\n    fileList.setAttribute('data-file-name', result.name);\n    this.uploadTemplateFn = this.templateComplier(this.template);\n    const liTempCompiler = this.uploadTemplateFn(result, this, 'template', this.element.id + 'Template', this.isStringTemplate, null, fileList);\n\n    if (liTempCompiler) {\n      const fromElements = [].slice.call(liTempCompiler);\n      append(fromElements, fileList);\n    }\n\n    const index = this.listParent.querySelectorAll('li').length;\n\n    if (!fileList.classList.contains(INVALID_FILE)) {\n      this.createFormInput(fileData);\n    }\n\n    const eventArgs = {\n      element: fileList,\n      fileInfo: result,\n      index: index,\n      isPreload: this.isPreLoadFile(result)\n    };\n    const eventsArgs = {\n      element: fileList,\n      fileInfo: result,\n      index: index,\n      isPreload: this.isPreLoadFile(result)\n    };\n    this.trigger('rendering', eventArgs);\n    this.trigger('fileListRendering', eventsArgs);\n    this.listParent.appendChild(fileList);\n    this.fileList.push(fileList);\n    this.renderReactTemplates();\n    updateBlazorTemplate(this.element.id + 'Template', 'Template', this, false);\n  }\n  /* eslint-disable valid-jsdoc, jsdoc/require-param */\n\n  /**\n   * Create the file list for specified files data.\n   *\n   * @param { FileInfo[] } fileData - Specifies the files data for file list creation.\n   * @returns {void}\n   */\n\n\n  createFileList(fileData, isSelectedFile) {\n    /* eslint-enable valid-jsdoc, jsdoc/require-param */\n    if (this.isBlazorSaveUrl || this.isBlazorTemplate) {\n      const fileListData = isSelectedFile ? this.filesData = this.filesData.concat(fileData) : fileData;\n      this.interopAdaptor.invokeMethodAsync('createFileList', fileListData, this.isForm);\n    } else {\n      this.createParentUL();\n\n      if (this.template !== '' && !isNullOrUndefined(this.template)) {\n        if (this.isFormUpload()) {\n          this.uploadWrapper.classList.add(FORM_UPLOAD);\n          this.formCustomFileList(fileData, this.element.files);\n        } else {\n          this.createCustomfileList(fileData);\n        }\n      } else if (this.isFormUpload()) {\n        this.uploadWrapper.classList.add(FORM_UPLOAD);\n        this.formFileList(fileData, this.element.files);\n      } else {\n        for (const listItem of fileData) {\n          const liElement = this.createElement('li', {\n            className: FILE,\n            attrs: {\n              'data-file-name': listItem.name,\n              'data-files-count': '1'\n            }\n          });\n          const textContainer = this.createElement('span', {\n            className: TEXT_CONTAINER\n          });\n          const textElement = this.createElement('span', {\n            className: FILE_NAME,\n            attrs: {\n              'title': listItem.name\n            }\n          });\n          textElement.innerHTML = this.getFileNameOnly(listItem.name);\n          const fileExtension = this.createElement('span', {\n            className: FILE_TYPE\n          });\n          const fileType = this.getFileType(listItem.name);\n          fileExtension.innerHTML = '.' + fileType;\n\n          if (!fileType) {\n            fileExtension.classList.add('e-hidden');\n          }\n\n          if (!this.enableRtl) {\n            textContainer.appendChild(textElement);\n            textContainer.appendChild(fileExtension);\n          } else {\n            const rtlContainer = this.createElement('span', {\n              className: RTL_CONTAINER\n            });\n            rtlContainer.appendChild(fileExtension);\n            rtlContainer.appendChild(textElement);\n            textContainer.appendChild(rtlContainer);\n          }\n\n          const fileSize = this.createElement('span', {\n            className: FILE_SIZE\n          });\n          fileSize.innerHTML = this.bytesToSize(listItem.size);\n          textContainer.appendChild(fileSize);\n          const statusElement = this.createElement('span', {\n            className: STATUS\n          });\n          textContainer.appendChild(statusElement);\n          statusElement.innerHTML = listItem.status;\n          liElement.appendChild(textContainer);\n          const iconElement = this.createElement('span', {\n            className: ' e-icons',\n            attrs: {\n              'tabindex': this.btnTabIndex\n            }\n          });\n          /* istanbul ignore next */\n\n          if (this.browserName === 'msie') {\n            iconElement.classList.add('e-msie');\n          }\n\n          iconElement.setAttribute('title', this.localizedTexts('remove'));\n          liElement.appendChild(iconElement);\n          EventHandler.add(iconElement, 'click', this.removeFiles, this);\n\n          if (listItem.statusCode === '2') {\n            statusElement.classList.add(UPLOAD_SUCCESS);\n            iconElement.classList.add(DELETE_ICON);\n            iconElement.setAttribute('title', this.localizedTexts('delete'));\n          } else if (listItem.statusCode !== '1') {\n            statusElement.classList.remove(UPLOAD_SUCCESS);\n            statusElement.classList.add(VALIDATION_FAILS);\n          }\n\n          if (this.autoUpload && listItem.statusCode === '1' && this.asyncSettings.saveUrl !== '') {\n            statusElement.innerHTML = '';\n          }\n\n          if (!iconElement.classList.contains(DELETE_ICON)) {\n            iconElement.classList.add(REMOVE_ICON);\n          }\n\n          const index = fileData.indexOf(listItem);\n          const eventArgs = {\n            element: liElement,\n            fileInfo: listItem,\n            index: index,\n            isPreload: this.isPreLoadFile(listItem)\n          };\n          const eventsArgs = {\n            element: liElement,\n            fileInfo: listItem,\n            index: index,\n            isPreload: this.isPreLoadFile(listItem)\n          };\n          this.trigger('rendering', eventArgs);\n          this.trigger('fileListRendering', eventsArgs);\n          this.listParent.appendChild(liElement);\n          this.fileList.push(liElement);\n          this.truncateName(textElement);\n          const preventActionComplete = this.flag;\n\n          if (this.isPreLoadFile(listItem)) {\n            this.flag = false;\n            this.checkActionComplete(true);\n            this.flag = preventActionComplete;\n          }\n        }\n      }\n    }\n  }\n\n  getSlicedName(nameElement) {\n    const text = nameElement.textContent;\n    nameElement.dataset.tail = text.slice(text.length - 10);\n  }\n\n  setListToFileInfo(fileData, fileList) {\n    for (const listItem of fileData) {\n      listItem.list = fileList;\n    }\n  }\n\n  truncateName(name) {\n    const nameElement = name;\n\n    if (this.browserName !== 'edge' && nameElement.offsetWidth < nameElement.scrollWidth) {\n      this.getSlicedName(nameElement);\n      /* istanbul ignore next */\n    } else if (nameElement.offsetWidth + 1 < nameElement.scrollWidth) {\n      this.getSlicedName(nameElement);\n    }\n  }\n\n  getFileType(name) {\n    let extension;\n    const index = name.lastIndexOf('.');\n\n    if (index >= 0) {\n      extension = name.substring(index + 1);\n    }\n\n    return extension ? extension : '';\n  }\n\n  getFileNameOnly(name) {\n    let type = this.getFileType(name);\n    const names = name.split('.' + type);\n    return type = names[0];\n  }\n\n  setInitialAttributes() {\n    if (this.initialAttr.accept) {\n      this.element.setAttribute('accept', this.initialAttr.accept);\n    }\n\n    if (this.initialAttr.disabled) {\n      this.element.setAttribute('disabled', 'disabled');\n    }\n\n    if (this.initialAttr.multiple) {\n      const newAttr = document.createAttribute('multiple');\n      this.element.setAttributeNode(newAttr);\n    }\n  }\n\n  filterfileList(files) {\n    const filterFiles = [];\n    let li;\n\n    for (let i = 0; i < files.length; i++) {\n      li = this.getLiElement(files[i]);\n\n      if (!li.classList.contains(UPLOAD_SUCCESS)) {\n        filterFiles.push(files[i]);\n      }\n    }\n\n    return filterFiles;\n  }\n\n  updateStatus(files, status, statusCode, updateLiStatus = true) {\n    if (!(status === '' || isNullOrUndefined(status)) && !(statusCode === '' || isNullOrUndefined(statusCode))) {\n      if (this.isBlazorSaveUrl) {\n        for (let i = 0; i < this.filesData.length; i++) {\n          if (this.filesData[i].name === files.name) {\n            this.filesData[i].status = status;\n            this.filesData[i].statusCode = statusCode;\n          }\n        }\n      } else {\n        files.status = status;\n        files.statusCode = statusCode;\n      }\n    }\n\n    if (updateLiStatus) {\n      const li = this.getLiElement(files);\n\n      if (!isNullOrUndefined(li)) {\n        if (!isNullOrUndefined(li.querySelector('.' + STATUS)) && !(status === '' || isNullOrUndefined(status))) {\n          li.querySelector('.' + STATUS).textContent = status;\n        }\n      }\n    }\n\n    return files;\n  }\n\n  getLiElement(files) {\n    let index;\n\n    for (let i = 0; i < this.filesData.length; i++) {\n      if (!isNullOrUndefined(this.filesData[i].id) && !isNullOrUndefined(files.id) ? this.filesData[i].name === files.name && this.filesData[i].id === files.id : this.filesData[i].name === files.name) {\n        index = i;\n      }\n    }\n\n    return this.fileList[index];\n  }\n\n  createProgressBar(liElement) {\n    const progressbarWrapper = this.createElement('span', {\n      className: PROGRESS_WRAPPER\n    });\n    const progressBar = this.createElement('progressbar', {\n      className: PROGRESSBAR,\n      attrs: {\n        value: '0',\n        max: '100'\n      }\n    });\n    const progressbarInnerWrapper = this.createElement('span', {\n      className: PROGRESS_INNER_WRAPPER\n    });\n    progressBar.setAttribute('style', 'width: 0%');\n    const progressbarText = this.createElement('span', {\n      className: PROGRESSBAR_TEXT\n    });\n    progressbarText.textContent = '0%';\n    progressbarInnerWrapper.appendChild(progressBar);\n    progressbarWrapper.appendChild(progressbarInnerWrapper);\n    progressbarWrapper.appendChild(progressbarText);\n    liElement.querySelector('.' + TEXT_CONTAINER).appendChild(progressbarWrapper);\n  }\n  /* istanbul ignore next */\n\n\n  updateProgressbar(e, li) {\n    if (!isNaN(Math.round(e.loaded / e.total * 100)) && !isNullOrUndefined(li.querySelector('.' + PROGRESSBAR))) {\n      if (!isNullOrUndefined(this.progressInterval) && this.progressInterval !== '') {\n        const value = Math.round(e.loaded / e.total * 100) % parseInt(this.progressInterval, 10);\n\n        if (value === 0 || value === 100) {\n          this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + '%');\n        }\n      } else {\n        this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + '%');\n      }\n    }\n  }\n\n  changeProgressValue(li, progressValue) {\n    li.querySelector('.' + PROGRESSBAR).setAttribute('style', 'width:' + progressValue);\n    li.querySelector('.' + PROGRESSBAR_TEXT).textContent = progressValue;\n  }\n\n  uploadInProgress(e, files, customUI, request) {\n    const li = this.getLiElement(files);\n\n    if (isNullOrUndefined(li) && !customUI) {\n      return;\n    }\n\n    if (!isNullOrUndefined(li)) {\n      /* istanbul ignore next */\n      if (files.statusCode === '5') {\n        this.cancelUploadingFile(files, e, request, li);\n      }\n\n      if (!(li.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0) && li.querySelector('.' + STATUS)) {\n        li.querySelector('.' + STATUS).classList.add(UPLOAD_INPROGRESS);\n        this.createProgressBar(li);\n        this.updateProgressBarClasses(li, UPLOAD_INPROGRESS);\n        li.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);\n      }\n\n      this.updateProgressbar(e, li);\n      const iconEle = li.querySelector('.' + REMOVE_ICON);\n\n      if (!isNullOrUndefined(iconEle)) {\n        iconEle.classList.add(ABORT_ICON, UPLOAD_INPROGRESS);\n        iconEle.setAttribute('title', this.localizedTexts('abort'));\n        iconEle.classList.remove(REMOVE_ICON);\n      }\n    } else {\n      this.cancelUploadingFile(files, e, request);\n    }\n\n    const args = {\n      e,\n      operation: 'upload',\n      file: this.updateStatus(files, this.localizedTexts('inProgress'), '3')\n    };\n    this.trigger('progress', args);\n  }\n  /* istanbul ignore next */\n\n\n  cancelUploadingFile(files, e, request, li) {\n    if (files.statusCode === '5') {\n      const eventArgs = {\n        event: e,\n        fileData: files,\n        cancel: false,\n        customFormData: []\n      };\n      this.trigger('canceling', eventArgs, eventArgs => {\n        if (eventArgs.cancel) {\n          files.statusCode = '3';\n\n          if (!isNullOrUndefined(li)) {\n            const spinnerTarget = li.querySelector('.' + ABORT_ICON);\n\n            if (!isNullOrUndefined(spinnerTarget)) {\n              hideSpinner(spinnerTarget);\n              detach(li.querySelector('.e-spinner-pane'));\n            }\n          }\n        } else {\n          request.emitError = false;\n          request.httpRequest.abort();\n          const formData = new FormData();\n\n          if (files.statusCode === '5') {\n            const name = this.element.getAttribute('name');\n            formData.append(name, files.name);\n            formData.append('cancel-uploading', files.name);\n            this.updateFormData(formData, eventArgs.customFormData);\n            const ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n            ajax.emitError = false;\n\n            ajax.onLoad = e => {\n              this.removecanceledFile(e, files);\n              return {};\n            };\n\n            ajax.send(formData);\n          }\n        }\n      });\n    }\n  }\n\n  removecanceledFile(e, file) {\n    const liElement = this.getLiElement(file);\n\n    if (liElement.querySelector('.' + RETRY_ICON) || isNullOrUndefined(liElement.querySelector('.' + ABORT_ICON))) {\n      return;\n    }\n\n    this.updateStatus(file, this.localizedTexts('fileUploadCancel'), '5');\n    this.renderFailureState(e, file, liElement);\n    const spinnerTarget = liElement.querySelector('.' + REMOVE_ICON);\n\n    if (!isNullOrUndefined(liElement)) {\n      hideSpinner(spinnerTarget);\n\n      if (!isNullOrUndefined(liElement.querySelector('.e-spinner-pane'))) {\n        detach(liElement.querySelector('.e-spinner-pane'));\n      }\n    }\n\n    const requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n    const args = {\n      event: e,\n      response: requestResponse,\n      operation: 'cancel',\n      file: file\n    };\n    this.trigger('success', args);\n  }\n\n  renderFailureState(e, file, liElement) {\n    this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n    this.removeProgressbar(liElement, 'failure');\n\n    if (!isNullOrUndefined(liElement.querySelector('.e-file-status'))) {\n      liElement.querySelector('.e-file-status').classList.add(UPLOAD_FAILED);\n    }\n\n    const deleteIcon = liElement.querySelector('.' + ABORT_ICON);\n\n    if (isNullOrUndefined(deleteIcon)) {\n      return;\n    }\n\n    deleteIcon.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);\n    deleteIcon.classList.add(REMOVE_ICON);\n    deleteIcon.setAttribute('title', this.localizedTexts('remove'));\n    this.pauseButton = this.createElement('span', {\n      className: 'e-icons e-file-reload-btn',\n      attrs: {\n        'tabindex': this.btnTabIndex\n      }\n    });\n    deleteIcon.parentElement.insertBefore(this.pauseButton, deleteIcon);\n    this.pauseButton.setAttribute('title', this.localizedTexts('retry'));\n    const retryElement = liElement.querySelector('.' + RETRY_ICON);\n    /* istanbul ignore next */\n\n    retryElement.addEventListener('click', e => {\n      this.reloadcanceledFile(e, file, liElement, false);\n    }, false);\n  }\n\n  reloadcanceledFile(e, file, liElement, custom) {\n    file.statusCode = '1';\n    file.status = this.localizedTexts('readyToUploadMessage');\n\n    if (!custom) {\n      if (!isNullOrUndefined(liElement.querySelector('.' + STATUS))) {\n        liElement.querySelector('.' + STATUS).classList.remove(UPLOAD_FAILED);\n      }\n\n      if (!isNullOrUndefined(liElement.querySelector('.' + RETRY_ICON))) {\n        detach(liElement.querySelector('.' + RETRY_ICON));\n      }\n\n      this.pauseButton = null;\n    }\n    /* istanbul ignore next */\n\n\n    liElement.classList.add(RESTRICT_RETRY);\n    this.upload([file]);\n  }\n  /* istanbul ignore next */\n\n\n  uploadComplete(e, file, customUI) {\n    const status = e.target;\n\n    if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {\n      const li = this.getLiElement(file);\n\n      if (isNullOrUndefined(li) && (!customUI || isNullOrUndefined(customUI))) {\n        return;\n      }\n\n      if (!isNullOrUndefined(li)) {\n        this.updateProgressBarClasses(li, UPLOAD_SUCCESS);\n        this.removeProgressbar(li, 'success');\n        const iconEle = li.querySelector('.' + ABORT_ICON);\n\n        if (!isNullOrUndefined(iconEle)) {\n          iconEle.classList.add(DELETE_ICON);\n          iconEle.setAttribute('title', this.localizedTexts('delete'));\n          iconEle.classList.remove(ABORT_ICON);\n          iconEle.classList.remove(UPLOAD_INPROGRESS);\n        }\n      }\n\n      this.raiseSuccessEvent(e, file);\n    } else {\n      this.uploadFailed(e, file);\n    }\n  }\n\n  getResponse(e) {\n    const target = e.currentTarget;\n    const response = {\n      readyState: target.readyState,\n      statusCode: target.status,\n      statusText: target.statusText,\n      headers: target.getAllResponseHeaders(),\n      withCredentials: target.withCredentials\n    };\n    return response;\n  }\n  /* istanbul ignore next */\n\n\n  serverRemoveIconBindEvent() {\n    if (this.uploadWrapper && this.isBlazorSaveUrl) {\n      const iconElement = [].slice.call(this.uploadWrapper.querySelectorAll('ul li'));\n\n      for (let i = 0; i < iconElement.length; i++) {\n        const removeIconEle = iconElement[i] ? iconElement[i].querySelector('.e-icons') : null;\n\n        if (removeIconEle) {\n          EventHandler.remove(removeIconEle, 'click', this.removeFiles);\n          EventHandler.add(removeIconEle, 'click', this.removeFiles, this);\n        }\n      }\n    }\n  }\n\n  raiseSuccessEvent(e, file) {\n    const response = e && e.currentTarget ? this.getResponse(e) : null;\n    const statusMessage = this.localizedTexts('uploadSuccessMessage');\n    const args = {\n      e,\n      response: response,\n      operation: 'upload',\n      file: this.updateStatus(file, statusMessage, '2', false),\n      statusText: statusMessage\n    };\n\n    if (!this.isBlazorSaveUrl) {\n      const liElement = this.getLiElement(file);\n\n      if (!isNullOrUndefined(liElement)) {\n        const spinnerEle = liElement.querySelector('.' + SPINNER_PANE);\n\n        if (!isNullOrUndefined(spinnerEle)) {\n          hideSpinner(liElement);\n          detach(spinnerEle);\n        }\n      }\n    }\n\n    this.trigger('success', args, args => {\n      this.updateStatus(file, args.statusText, '2');\n      this.uploadedFilesData.push(file);\n\n      if (!this.isBlazorSaveUrl) {\n        this.trigger('change', {\n          file: this.uploadedFilesData\n        });\n      }\n\n      this.checkActionButtonStatus();\n\n      if (this.fileList.length > 0) {\n        if (!this.getLiElement(file).classList.contains(RESTRICT_RETRY)) {\n          this.uploadSequential();\n          this.checkActionComplete(true);\n        } else {\n          /* istanbul ignore next */\n          this.getLiElement(file).classList.remove(RESTRICT_RETRY);\n        }\n      }\n    });\n  }\n\n  uploadFailed(e, file) {\n    const li = this.getLiElement(file);\n    const response = e && e.currentTarget ? this.getResponse(e) : null;\n    const statusMessage = this.localizedTexts('uploadFailedMessage');\n    const args = {\n      e,\n      response: response,\n      operation: 'upload',\n      file: this.updateStatus(file, statusMessage, '0', false),\n      statusText: statusMessage\n    };\n\n    if (!isNullOrUndefined(li)) {\n      this.renderFailureState(e, file, li);\n    }\n\n    this.trigger('failure', args, args => {\n      this.updateStatus(file, args.statusText, '0');\n      this.checkActionButtonStatus();\n      this.uploadSequential();\n      this.checkActionComplete(true);\n    });\n  }\n\n  uploadSequential() {\n    if (this.sequentialUpload) {\n      if (this.autoUpload) {\n        /* istanbul ignore next */\n        this.checkAutoUpload(this.filesData);\n      } else {\n        this.uploadButtonClick();\n      }\n    }\n  }\n\n  checkActionComplete(increment) {\n    if (increment) {\n      ++this.actionCompleteCount;\n    } else {\n      --this.actionCompleteCount;\n    }\n\n    this.raiseActionComplete();\n  }\n\n  raiseActionComplete() {\n    if (this.filesData.length === this.actionCompleteCount && this.flag) {\n      this.flag = false;\n      const eventArgs = {\n        fileData: []\n      };\n      eventArgs.fileData = this.getSelectedFileStatus(this.selectedFiles);\n      this.trigger('actionComplete', eventArgs);\n    }\n  }\n\n  getSelectedFileStatus(selectedFiles) {\n    const matchFiles = [];\n    let matchFilesIndex = 0;\n\n    for (let selectFileIndex = 0; selectFileIndex < selectedFiles.length; selectFileIndex++) {\n      const selectedFileData = selectedFiles[selectFileIndex];\n\n      for (let fileDataIndex = 0; fileDataIndex < this.filesData.length; fileDataIndex++) {\n        if (this.filesData[fileDataIndex].name === selectedFileData.name) {\n          matchFiles[matchFilesIndex] = this.filesData[fileDataIndex];\n          ++matchFilesIndex;\n        }\n      }\n    }\n\n    return matchFiles;\n  }\n\n  updateProgressBarClasses(li, className) {\n    const progressBar = li.querySelector('.' + PROGRESSBAR);\n\n    if (!isNullOrUndefined(progressBar)) {\n      progressBar.classList.add(className);\n    }\n  }\n\n  removeProgressbar(li, callType) {\n    if (!isNullOrUndefined(li.querySelector('.' + PROGRESS_WRAPPER))) {\n      this.progressAnimation = new Animation({\n        duration: 1250\n      });\n      this.progressAnimation.animate(li.querySelector('.' + PROGRESS_WRAPPER), {\n        name: 'FadeOut'\n      });\n      this.progressAnimation.animate(li.querySelector('.' + PROGRESSBAR_TEXT), {\n        name: 'FadeOut'\n      });\n      setTimeout(() => {\n        this.animateProgressBar(li, callType);\n      }, 750);\n    }\n  }\n  /* istanbul ignore next */\n\n\n  animateProgressBar(li, callType) {\n    if (callType === 'success') {\n      li.classList.add(UPLOAD_SUCCESS);\n\n      if (!isNullOrUndefined(li.querySelector('.' + STATUS))) {\n        li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);\n        this.progressAnimation.animate(li.querySelector('.' + STATUS), {\n          name: 'FadeIn'\n        });\n        li.querySelector('.' + STATUS).classList.add(UPLOAD_SUCCESS);\n      }\n    } else {\n      if (!isNullOrUndefined(li.querySelector('.' + STATUS))) {\n        li.querySelector('.' + STATUS).classList.remove(UPLOAD_INPROGRESS);\n        this.progressAnimation.animate(li.querySelector('.' + STATUS), {\n          name: 'FadeIn'\n        });\n        li.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);\n      }\n    }\n\n    if (li.querySelector('.' + PROGRESS_WRAPPER)) {\n      detach(li.querySelector('.' + PROGRESS_WRAPPER));\n    }\n  }\n\n  setExtensions(extensions) {\n    if (extensions !== '' && !isNullOrUndefined(extensions)) {\n      this.element.setAttribute('accept', extensions);\n    } else {\n      this.element.removeAttribute('accept');\n    }\n  }\n\n  templateComplier(uploadTemplate) {\n    if (uploadTemplate) {\n      try {\n        if (selectAll(uploadTemplate, document).length) {\n          return compile(select(uploadTemplate, document).innerHTML.trim());\n        }\n      } catch (exception) {\n        return compile(uploadTemplate);\n      }\n    }\n\n    return undefined;\n  }\n\n  setRTL() {\n    if (this.enableRtl) {\n      addClass([this.uploadWrapper], RTL);\n    } else {\n      removeClass([this.uploadWrapper], RTL);\n    }\n  }\n\n  localizedTexts(localeText) {\n    this.l10n.setLocale(this.locale);\n    return this.l10n.getConstant(localeText);\n  }\n\n  setControlStatus() {\n    if (!this.enabled) {\n      this.uploadWrapper.classList.add(DISABLED);\n      this.element.setAttribute('disabled', 'disabled');\n      this.browseButton.setAttribute('disabled', 'disabled');\n\n      if (!isNullOrUndefined(this.clearButton)) {\n        this.clearButton.setAttribute('disabled', 'disabled');\n      }\n\n      if (!isNullOrUndefined(this.uploadButton)) {\n        this.uploadButton.setAttribute('disabled', 'disabled');\n      }\n    } else {\n      if (this.uploadWrapper.classList.contains(DISABLED)) {\n        this.uploadWrapper.classList.remove(DISABLED);\n      }\n\n      if (!isNullOrUndefined(this.browseButton) && this.element.hasAttribute('disabled')) {\n        this.element.removeAttribute('disabled');\n        this.browseButton.removeAttribute('disabled');\n      }\n\n      if (!isNullOrUndefined(this.clearButton) && this.clearButton.hasAttribute('disabled')) {\n        this.clearButton.removeAttribute('disabled');\n      }\n\n      if (!isNullOrUndefined(this.uploadButton) && this.uploadButton.hasAttribute('disabled')) {\n        this.uploadButton.hasAttribute('disabled');\n      }\n    }\n  }\n\n  checkHTMLAttributes(isDynamic) {\n    const attributes$$1 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['accept', 'multiple', 'disabled'];\n\n    for (const prop of attributes$$1) {\n      if (!isNullOrUndefined(this.element.getAttribute(prop))) {\n        switch (prop) {\n          case 'accept':\n            if (isNullOrUndefined(this.uploaderOptions) || this.uploaderOptions['allowedExtensions'] === undefined || isDynamic) {\n              this.setProperties({\n                allowedExtensions: this.element.getAttribute('accept')\n              }, !isDynamic);\n              this.initialAttr.accept = this.allowedExtensions;\n            }\n\n            break;\n\n          case 'multiple':\n            if (isNullOrUndefined(this.uploaderOptions) || this.uploaderOptions['multiple'] === undefined || isDynamic) {\n              const isMutiple = this.element.getAttribute(prop) === 'multiple' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? true : false;\n              this.setProperties({\n                multiple: isMutiple\n              }, !isDynamic);\n              this.initialAttr.multiple = true;\n            }\n\n            break;\n\n          case 'disabled':\n            if (isNullOrUndefined(this.uploaderOptions) || this.uploaderOptions['enabled'] === undefined || isDynamic) {\n              const isDisabled = this.element.getAttribute(prop) === 'disabled' || this.element.getAttribute(prop) === '' || this.element.getAttribute(prop) === 'true' ? false : true;\n              this.setProperties({\n                enabled: isDisabled\n              }, !isDynamic);\n              this.initialAttr.disabled = true;\n            }\n\n        }\n      }\n    }\n  }\n\n  chunkUpload(file, custom, fileIndex) {\n    const start = 0;\n    const end = Math.min(this.asyncSettings.chunkSize, file.size);\n    const index = 0;\n    const blob = file.rawFile.slice(start, end);\n    const metaData = {\n      chunkIndex: index,\n      blob: blob,\n      file: file,\n      start: start,\n      end: end,\n      retryCount: 0,\n      request: null\n    };\n    this.sendRequest(file, metaData, custom, fileIndex);\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  sendRequest(file, metaData, custom, fileIndex) {\n    const formData = new FormData();\n    const blob = file.rawFile.slice(metaData.start, metaData.end);\n    formData.append('chunkFile', blob, file.name);\n    formData.append(this.uploaderName, blob, file.name);\n    formData.append('chunk-index', metaData.chunkIndex.toString());\n    formData.append('chunkIndex', metaData.chunkIndex.toString());\n    const totalChunk = Math.max(Math.ceil(file.size / this.asyncSettings.chunkSize), 1);\n    formData.append('total-chunk', totalChunk.toString());\n    formData.append('totalChunk', totalChunk.toString());\n    const ajax = new Ajax({\n      url: this.asyncSettings.saveUrl,\n      type: 'POST',\n      async: true,\n      contentType: null\n    });\n    ajax.emitError = false;\n\n    ajax.onLoad = e => {\n      this.chunkUploadComplete(e, metaData, custom);\n      return {};\n    };\n\n    ajax.onUploadProgress = e => {\n      this.chunkUploadInProgress(e, metaData, custom);\n      return {};\n    };\n\n    const eventArgs = {\n      fileData: file,\n      customFormData: [],\n      cancel: false,\n      chunkSize: this.asyncSettings.chunkSize === 0 ? null : this.asyncSettings.chunkSize\n    };\n\n    ajax.beforeSend = e => {\n      eventArgs.currentRequest = ajax.httpRequest;\n      eventArgs.currentChunkIndex = metaData.chunkIndex;\n      /* istanbul ignore next */\n\n      if (isBlazor()) {\n        if (this.currentRequestHeader) {\n          this.updateCustomheader(ajax.httpRequest, this.currentRequestHeader);\n        }\n\n        if (this.customFormDatas) {\n          this.updateFormData(formData, this.customFormDatas);\n        }\n      }\n\n      if (eventArgs.currentChunkIndex === 0) {\n        // This event is currently not required but to avoid breaking changes for previous customer, we have included.\n        this.trigger('uploading', eventArgs, eventArgs => {\n          this.uploadingEventCallback(formData, eventArgs, e, file);\n        });\n      } else {\n        this.trigger('chunkUploading', eventArgs, eventArgs => {\n          this.uploadingEventCallback(formData, eventArgs, e, file);\n        });\n      }\n    };\n    /* istanbul ignore next */\n\n\n    ajax.onError = e => {\n      this.chunkUploadFailed(e, metaData, custom);\n      return {};\n    };\n\n    ajax.send(formData);\n    metaData.request = ajax;\n  }\n\n  uploadingEventCallback(formData, eventArgs, e, file) {\n    if (eventArgs.cancel) {\n      this.eventCancelByArgs(e, eventArgs, file);\n    } else {\n      this.updateFormData(formData, eventArgs.customFormData);\n    }\n  }\n\n  eventCancelByArgs(e, eventArgs, file) {\n    e.cancel = true;\n\n    if (eventArgs.fileData.statusCode === '5') {\n      return;\n    }\n\n    eventArgs.fileData.statusCode = '5';\n    eventArgs.fileData.status = this.localizedTexts('fileUploadCancel');\n    const liElement = this.getLiElement(eventArgs.fileData);\n\n    if (liElement) {\n      if (!isNullOrUndefined(liElement.querySelector('.' + STATUS))) {\n        liElement.querySelector('.' + STATUS).innerHTML = this.localizedTexts('fileUploadCancel');\n        liElement.querySelector('.' + STATUS).classList.add(UPLOAD_FAILED);\n      }\n\n      this.pauseButton = this.createElement('span', {\n        className: 'e-icons e-file-reload-btn',\n        attrs: {\n          'tabindex': this.btnTabIndex\n        }\n      });\n      const removeIcon = liElement.querySelector('.' + REMOVE_ICON);\n\n      if (removeIcon) {\n        removeIcon.parentElement.insertBefore(this.pauseButton, removeIcon);\n      }\n\n      this.pauseButton.setAttribute('title', this.localizedTexts('retry'));\n      /* istanbul ignore next */\n\n      this.pauseButton.addEventListener('click', e => {\n        this.reloadcanceledFile(e, file, liElement);\n      }, false);\n      this.checkActionButtonStatus();\n    }\n  }\n\n  checkChunkUpload() {\n    return this.asyncSettings.chunkSize <= 0 || isNullOrUndefined(this.asyncSettings.chunkSize) ? false : true;\n  }\n\n  chunkUploadComplete(e, metaData, custom) {\n    const response = e.target;\n    let liElement;\n\n    if (response.readyState === 4 && response.status >= 200 && response.status < 300) {\n      const requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n      const totalChunk = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);\n      const eventArgs = {\n        event: e,\n        file: metaData.file,\n        chunkIndex: metaData.chunkIndex,\n        totalChunk: totalChunk,\n        chunkSize: this.asyncSettings.chunkSize,\n        response: requestResponse\n      };\n      this.trigger('chunkSuccess', eventArgs);\n\n      if (isNullOrUndefined(custom) || !custom) {\n        liElement = this.getLiElement(metaData.file);\n      }\n\n      this.updateMetaData(metaData);\n\n      if (metaData.end === metaData.file.size) {\n        metaData.file.statusCode = '3';\n      }\n\n      if (metaData.file.statusCode === '5') {\n        const eventArgs = {\n          event: e,\n          fileData: metaData.file,\n          cancel: false,\n          customFormData: []\n        };\n        this.trigger('canceling', eventArgs, eventArgs => {\n          /* istanbul ignore next */\n          if (eventArgs.cancel) {\n            metaData.file.statusCode = '3';\n            const spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n\n            if (!isNullOrUndefined(liElement) && !isNullOrUndefined(spinnerTarget)) {\n              hideSpinner(spinnerTarget);\n              detach(liElement.querySelector('.e-spinner-pane'));\n            }\n\n            this.sendNextRequest(metaData);\n          } else {\n            metaData.request.emitError = false;\n            response.abort();\n            const formData = new FormData();\n            const name = this.element.getAttribute('name');\n            formData.append(name, metaData.file.name);\n            formData.append('cancel-uploading', metaData.file.name);\n            formData.append('cancelUploading', metaData.file.name);\n            this.updateFormData(formData, eventArgs.customFormData);\n            const ajax = new Ajax(this.asyncSettings.removeUrl, 'POST', true, null);\n            ajax.emitError = false;\n\n            ajax.onLoad = e => {\n              this.removeChunkFile(e, metaData, custom);\n              return {};\n            };\n\n            ajax.send(formData);\n          }\n        });\n      } else {\n        if (totalChunk - 1 === metaData.chunkIndex && totalChunk > metaData.chunkIndex) {\n          const index = this.pausedData.indexOf(metaData);\n\n          if (index >= 0) {\n            this.pausedData.splice(index, 1);\n          }\n\n          if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {\n            if (liElement && !isNullOrUndefined(liElement.querySelector('.' + PAUSE_UPLOAD))) {\n              detach(liElement.querySelector('.' + PAUSE_UPLOAD));\n            }\n\n            this.removeChunkProgressBar(metaData);\n          }\n\n          this.raiseSuccessEvent(e, metaData.file);\n          return;\n        }\n\n        if (metaData.file.statusCode !== '4') {\n          this.sendNextRequest(metaData);\n        }\n      }\n    } else {\n      this.chunkUploadFailed(e, metaData);\n    }\n  }\n\n  sendNextRequest(metaData) {\n    metaData.start = metaData.end;\n    metaData.end += this.asyncSettings.chunkSize;\n    metaData.end = Math.min(metaData.end, metaData.file.size);\n    metaData.chunkIndex += 1;\n    this.sendRequest(metaData.file, metaData);\n  }\n\n  removeChunkFile(e, metaData, custom) {\n    if (isNullOrUndefined(this.template) && isNullOrUndefined(custom) && !custom) {\n      const liElement = this.getLiElement(metaData.file);\n      const deleteIcon = liElement.querySelector('.' + ABORT_ICON);\n      const spinnerTarget = deleteIcon;\n      this.updateStatus(metaData.file, this.localizedTexts('fileUploadCancel'), '5');\n      this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n      this.removeProgressbar(liElement, 'failure');\n      deleteIcon && deleteIcon.classList.remove(ABORT_ICON);\n      deleteIcon && deleteIcon.classList.add(REMOVE_ICON);\n      deleteIcon && deleteIcon.setAttribute('title', this.localizedTexts('remove'));\n      const pauseIcon = liElement.querySelector('.' + PAUSE_UPLOAD);\n      pauseIcon && pauseIcon.classList.add(RETRY_ICON);\n      pauseIcon && pauseIcon.classList.remove(PAUSE_UPLOAD);\n      pauseIcon && pauseIcon.setAttribute('title', this.localizedTexts('retry'));\n\n      if (!isNullOrUndefined(liElement) && !isNullOrUndefined(deleteIcon) && !isNullOrUndefined(liElement.querySelector('.e-spinner-pane'))) {\n        hideSpinner(spinnerTarget);\n        detach(liElement.querySelector('.e-spinner-pane'));\n      }\n    }\n  }\n\n  pauseUpload(metaData, e, custom) {\n    metaData.file.statusCode = '4';\n    metaData.file.status = this.localizedTexts('pause');\n    this.updateMetaData(metaData);\n    const eventArgs = {\n      event: e ? e : null,\n      file: metaData.file,\n      chunkIndex: metaData.chunkIndex,\n      chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),\n      chunkSize: this.asyncSettings.chunkSize\n    };\n    this.abortUpload(metaData, custom, eventArgs);\n  }\n\n  abortUpload(metaData, custom, eventArgs) {\n    if (metaData.file.statusCode !== '4') {\n      metaData.request.emitError = false;\n      metaData.request.httpRequest.abort();\n    }\n\n    const liElement = this.getLiElement(metaData.file);\n\n    if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {\n      const targetElement = liElement.querySelector('.' + PAUSE_UPLOAD);\n      targetElement.classList.remove(PAUSE_UPLOAD);\n      targetElement.classList.add(RESUME_UPLOAD);\n      targetElement.setAttribute('title', this.localizedTexts('resume'));\n      targetElement.nextElementSibling.classList.add(REMOVE_ICON);\n      targetElement.nextElementSibling.classList.remove(ABORT_ICON);\n      targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('remove'));\n    }\n\n    for (let i = 0; i < this.pausedData.length; i++) {\n      if (this.pausedData[i].file.name === metaData.file.name) {\n        this.pausedData.splice(i, 1);\n      }\n    }\n\n    this.pausedData.push(metaData);\n    this.trigger('pausing', eventArgs);\n  }\n\n  resumeUpload(metaData, e, custom) {\n    const liElement = this.getLiElement(metaData.file);\n    let targetElement;\n\n    if (!isNullOrUndefined(liElement)) {\n      targetElement = liElement.querySelector('.' + RESUME_UPLOAD);\n    }\n\n    if (!isNullOrUndefined(targetElement) && (isNullOrUndefined(custom) || !custom)) {\n      targetElement.classList.remove(RESUME_UPLOAD);\n      targetElement.classList.add(PAUSE_UPLOAD);\n      targetElement.setAttribute('title', this.localizedTexts('pause'));\n      targetElement.nextElementSibling.classList.remove(REMOVE_ICON);\n      targetElement.nextElementSibling.classList.add(ABORT_ICON);\n      targetElement.nextElementSibling.setAttribute('title', this.localizedTexts('abort'));\n    }\n\n    metaData.file.status = this.localizedTexts('inProgress');\n    metaData.file.statusCode = '3';\n    this.updateMetaData(metaData);\n    const eventArgs = {\n      event: e ? e : null,\n      file: metaData.file,\n      chunkIndex: metaData.chunkIndex,\n      chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),\n      chunkSize: this.asyncSettings.chunkSize\n    };\n    this.trigger('resuming', eventArgs);\n\n    for (let i = 0; i < this.pausedData.length; i++) {\n      if (this.pausedData[i].end === this.pausedData[i].file.size) {\n        this.chunkUploadComplete(e, metaData, custom);\n      } else {\n        if (this.pausedData[i].file.name === metaData.file.name) {\n          this.pausedData[i].start = this.pausedData[i].end;\n          this.pausedData[i].end = this.pausedData[i].end + this.asyncSettings.chunkSize;\n          this.pausedData[i].end = Math.min(this.pausedData[i].end, this.pausedData[i].file.size);\n          this.pausedData[i].chunkIndex = this.pausedData[i].chunkIndex + 1;\n          this.sendRequest(this.pausedData[i].file, this.pausedData[i], custom);\n        }\n      }\n    }\n  }\n\n  updateMetaData(metaData) {\n    if (this.uploadMetaData.indexOf(metaData) === -1) {\n      this.uploadMetaData.push(metaData);\n    } else {\n      this.uploadMetaData.splice(this.uploadMetaData.indexOf(metaData), 1);\n      this.uploadMetaData.push(metaData);\n    }\n  }\n\n  removeChunkProgressBar(metaData) {\n    const liElement = this.getLiElement(metaData.file);\n\n    if (!isNullOrUndefined(liElement)) {\n      this.updateProgressBarClasses(liElement, UPLOAD_SUCCESS);\n      this.removeProgressbar(liElement, 'success');\n      const cancelButton = liElement.querySelector('.' + ABORT_ICON);\n\n      if (!isNullOrUndefined(cancelButton)) {\n        cancelButton.classList.add(DELETE_ICON);\n        cancelButton.setAttribute('title', this.localizedTexts('delete'));\n        cancelButton.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);\n      }\n    }\n  }\n\n  chunkUploadFailed(e, metaData, custom) {\n    const chunkCount = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);\n    let liElement;\n\n    if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {\n      liElement = this.getLiElement(metaData.file);\n    }\n\n    const requestResponse = e && e.currentTarget ? this.getResponse(e) : null;\n    const eventArgs = {\n      event: e,\n      file: metaData.file,\n      chunkIndex: metaData.chunkIndex,\n      totalChunk: chunkCount,\n      chunkSize: this.asyncSettings.chunkSize,\n      cancel: false,\n      response: requestResponse\n    };\n    this.trigger('chunkFailure', eventArgs, eventArgs => {\n      // To prevent triggering of failure event\n      if (!eventArgs.cancel) {\n        if (metaData.retryCount < this.asyncSettings.retryCount) {\n          setTimeout(() => {\n            this.retryRequest(liElement, metaData, custom);\n          }, this.asyncSettings.retryAfterDelay);\n        } else {\n          if (!isNullOrUndefined(liElement)) {\n            const pauseButton = liElement.querySelector('.' + PAUSE_UPLOAD) ? liElement.querySelector('.' + PAUSE_UPLOAD) : liElement.querySelector('.' + RESUME_UPLOAD);\n\n            if (!isNullOrUndefined(pauseButton)) {\n              pauseButton.classList.add(RETRY_ICON);\n              pauseButton.classList.remove(PAUSE_UPLOAD, RESUME_UPLOAD);\n            }\n\n            this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n            this.removeProgressbar(liElement, 'failure');\n            liElement.querySelector('.e-icons').classList.remove(UPLOAD_INPROGRESS);\n            const iconElement = liElement.querySelector('.' + ABORT_ICON) ? liElement.querySelector('.' + ABORT_ICON) : liElement.querySelector('.' + REMOVE_ICON);\n            iconElement.classList.remove(ABORT_ICON);\n\n            if (!isNullOrUndefined(liElement.querySelector('.' + PAUSE_UPLOAD))) {\n              detach(liElement.querySelector('.' + PAUSE_UPLOAD));\n            }\n\n            if (metaData.start > 0) {\n              iconElement.classList.add(DELETE_ICON);\n              iconElement.setAttribute('title', this.localizedTexts('delete'));\n            } else {\n              iconElement.classList.add(REMOVE_ICON);\n              iconElement.setAttribute('title', this.localizedTexts('remove'));\n            }\n          }\n\n          metaData.retryCount = 0;\n          const file = metaData.file;\n          const failureMessage = this.localizedTexts('uploadFailedMessage');\n          const args = {\n            e,\n            response: requestResponse,\n            operation: 'upload',\n            file: this.updateStatus(file, failureMessage, '0', false),\n            statusText: failureMessage\n          };\n          this.trigger('failure', args, args => {\n            this.updateStatus(file, args.statusText, '0');\n            this.uploadSequential();\n            this.checkActionComplete(true);\n          });\n        }\n      }\n    });\n  }\n\n  retryRequest(liElement, metaData, custom) {\n    if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {\n      this.updateProgressBarClasses(liElement, UPLOAD_FAILED);\n    }\n\n    metaData.retryCount += 1;\n    this.sendRequest(metaData.file, metaData);\n  }\n\n  checkPausePlayAction(e) {\n    const targetElement = e.target;\n    const selectedElement = e.target.parentElement;\n    const index = this.fileList.indexOf(selectedElement);\n    const fileData = this.filesData[index];\n    const metaData = this.getCurrentMetaData(fileData);\n\n    if (targetElement.classList.contains(PAUSE_UPLOAD)) {\n      /* istanbul ignore next */\n      this.pauseUpload(metaData, e);\n    } else if (targetElement.classList.contains(RESUME_UPLOAD)) {\n      /* istanbul ignore next */\n      this.resumeUpload(metaData, e);\n    } else if (targetElement.classList.contains(RETRY_ICON)) {\n      if (metaData.file.status === this.localizedTexts('fileUploadCancel')) {\n        this.retryUpload(metaData, false);\n      } else {\n        this.retryUpload(metaData, true);\n      }\n    }\n  }\n\n  retryUpload(metaData, fromcanceledStage) {\n    if (fromcanceledStage) {\n      metaData.end = metaData.end + this.asyncSettings.chunkSize;\n      metaData.start = metaData.start + this.asyncSettings.chunkSize;\n      this.sendRequest(metaData.file, metaData);\n    } else {\n      metaData.file.statusCode = '1';\n      metaData.file.status = this.localizedTexts('readyToUploadMessage');\n      this.chunkUpload(metaData.file);\n    }\n    /* istanbul ignore next */\n\n\n    this.getLiElement(metaData.file).classList.add(RESTRICT_RETRY);\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  chunkUploadInProgress(e, metaData, custom) {\n    if (metaData.file.statusCode === '4') {\n      return;\n    }\n\n    if (metaData.file.statusCode !== '4' && metaData.file.statusCode !== '5') {\n      metaData.file.statusCode = '3';\n      metaData.file.status = this.localizedTexts('inProgress');\n    }\n\n    this.updateMetaData(metaData);\n    const liElement = this.getLiElement(metaData.file);\n\n    if (isNullOrUndefined(liElement)) {\n      return;\n    }\n\n    const retryElement = liElement.querySelector('.' + RETRY_ICON);\n\n    if (!isNullOrUndefined(retryElement)) {\n      retryElement.classList.add(PAUSE_UPLOAD);\n      retryElement.setAttribute('title', this.localizedTexts('pause'));\n      retryElement.classList.remove(RETRY_ICON);\n    }\n\n    if (!isNullOrUndefined(liElement)) {\n      if (!(liElement.querySelectorAll('.' + PROGRESS_WRAPPER).length > 0)) {\n        const statusElement = liElement.querySelector('.' + STATUS);\n\n        if (isNullOrUndefined(this.template)) {\n          statusElement.classList.add(UPLOAD_INPROGRESS);\n          statusElement.classList.remove(UPLOAD_FAILED);\n          this.createProgressBar(liElement);\n          this.updateProgressBarClasses(liElement, UPLOAD_INPROGRESS);\n        }\n\n        const clearIcon = liElement.querySelector('.' + REMOVE_ICON) ? liElement.querySelector('.' + REMOVE_ICON) : liElement.querySelector('.' + DELETE_ICON);\n\n        if (!isNullOrUndefined(clearIcon)) {\n          clearIcon.classList.add(ABORT_ICON);\n          clearIcon.setAttribute('title', this.localizedTexts('abort'));\n          clearIcon.classList.remove(REMOVE_ICON);\n        }\n      }\n\n      if (!isNaN(Math.round(e.loaded / e.total * 100)) && isNullOrUndefined(this.template) && metaData.file.statusCode !== '4') {\n        let progressVal;\n        let totalChunks = Math.ceil(metaData.file.size / this.asyncSettings.chunkSize) - 1;\n\n        if (this.asyncSettings.chunkSize && totalChunks) {\n          progressVal = Math.round(metaData.chunkIndex / totalChunks * 100);\n          this.changeProgressValue(liElement, progressVal.toString() + '%');\n        }\n      }\n\n      if (metaData.chunkIndex === 0) {\n        this.checkActionButtonStatus();\n      }\n    }\n\n    if (isNullOrUndefined(liElement.querySelector('.' + PAUSE_UPLOAD)) && isNullOrUndefined(this.template) && isNullOrUndefined(liElement.querySelector('.' + DELETE_ICON))) {\n      this.pauseButton = this.createElement('span', {\n        className: 'e-icons e-file-pause-btn',\n        attrs: {\n          'tabindex': this.btnTabIndex\n        }\n      });\n\n      if (this.browserName === 'msie') {\n        this.pauseButton.classList.add('e-msie');\n      }\n\n      const abortIcon = liElement.querySelector('.' + ABORT_ICON);\n      abortIcon.parentElement.insertBefore(this.pauseButton, abortIcon);\n      this.pauseButton.setAttribute('title', this.localizedTexts('pause'));\n      this.pauseButton.addEventListener('click', e => {\n        this.checkPausePlayAction(e);\n      }, false);\n    }\n  }\n  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * It is used to convert bytes value into kilobytes or megabytes depending on the size based\n   * on [binary prefix](https://en.wikipedia.org/wiki/Binary_prefix).\n   *\n   * @param { number } bytes - Specifies the file size in bytes.\n   * @returns {string}\n   */\n\n\n  bytesToSize(bytes) {\n    let i = -1;\n\n    if (!bytes) {\n      return '0.0 KB';\n    }\n\n    do {\n      bytes = bytes / 1024;\n      i++;\n    } while (bytes > 99);\n\n    if (i >= 2) {\n      bytes = bytes * 1024;\n      i = 1;\n    }\n\n    return Math.max(bytes, 0).toFixed(1) + ' ' + ['KB', 'MB'][i];\n  }\n  /**\n   * Allows you to sort the file data alphabetically based on its file name clearly.\n   *\n   * @param { FileList } filesData - specifies the files data for upload.\n   * @returns {File[]}\n   */\n\n  /* istanbul ignore next */\n\n\n  sortFileList(filesData) {\n    filesData = filesData ? filesData : this.sortFilesList;\n    const files = filesData;\n    const fileNames = [];\n\n    for (let i = 0; i < files.length; i++) {\n      fileNames.push(files[i].name);\n    }\n\n    const sortedFileNames = fileNames.sort();\n    const sortedFilesData = [];\n\n    for (const name of sortedFileNames) {\n      for (let i = 0; i < files.length; i++) {\n        if (name === files[i].name) {\n          sortedFilesData.push(files[i]);\n        }\n      }\n    }\n\n    return sortedFilesData;\n  }\n  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.\n   *\n   * @method destroy\n   * @returns {void}\n   */\n\n\n  destroy() {\n    this.element.value = null;\n    this.clearTemplate();\n\n    if (!(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n      this.clearAll();\n    }\n\n    this.unWireEvents();\n    this.unBindDropEvents();\n\n    if (this.multiple) {\n      this.element.removeAttribute('multiple');\n    }\n\n    if (!this.enabled) {\n      this.element.removeAttribute('disabled');\n    }\n\n    this.element.removeAttribute('accept');\n    this.setInitialAttributes();\n    const attributes$$1 = ['aria-label', 'directory', 'webkitdirectory', 'tabindex'];\n\n    for (const key of attributes$$1) {\n      this.element.removeAttribute(key);\n    }\n\n    if (!this.isServerBlazor) {\n      if (!isNullOrUndefined(this.uploadWrapper)) {\n        this.uploadWrapper.parentElement.appendChild(this.element);\n        detach(this.uploadWrapper);\n      }\n\n      this.uploadWrapper = null;\n      super.destroy();\n    } else {\n      this.uploadWrapper = null;\n    }\n  }\n  /**\n   * Allows you to call the upload process manually by calling save URL action.\n   * To process the selected files (added in upload queue), pass an empty argument otherwise\n   * upload the specific file based on its argument.\n   *\n   * @param { FileInfo | FileInfo[] } files - Specifies the files data for upload.\n   * @param {boolean} custom - Specifies whether the uploader is rendered with custom file list.\n   * @returns {void}\n   */\n\n\n  upload(files, custom) {\n    files = files ? files : this.filesData;\n\n    if (this.sequentialUpload && (this.isFirstFileOnSelection || custom)) {\n      this.sequenceUpload(files);\n    } else {\n      const uploadFiles = this.getFilesInArray(files);\n      const eventArgs = {\n        customFormData: [],\n        currentRequest: null,\n        cancel: false\n      };\n      this.trigger('beforeUpload', eventArgs, eventArgs => {\n        if (!eventArgs.cancel) {\n          if (isBlazor()) {\n            this.currentRequestHeader = eventArgs.currentRequest ? eventArgs.currentRequest : this.currentRequestHeader;\n            this.customFormDatas = eventArgs.customFormData && eventArgs.customFormData.length > 0 ? eventArgs.customFormData : this.customFormDatas;\n          }\n\n          this.uploadFiles(uploadFiles, custom);\n        }\n      });\n    }\n  }\n\n  getFilesInArray(files) {\n    let uploadFiles = [];\n\n    if (files instanceof Array) {\n      uploadFiles = files;\n    } else {\n      uploadFiles.push(files);\n    }\n\n    return uploadFiles;\n  }\n  /* istanbul ignore next */\n\n\n  serverReadFileBase64(fileIndex, position, totalCount) {\n    return new Promise((resolve, reject) => {\n      const file = this.fileStreams[fileIndex].rawFile;\n\n      try {\n        const reader = new FileReader();\n\n        reader.onload = (args => {\n          return () => {\n            try {\n              const contents = args.result;\n              const data = contents ? contents.split(';base64,')[1] : null;\n              resolve(data);\n            } catch (e) {\n              reject(e);\n            }\n          };\n        })(reader);\n\n        reader.readAsDataURL(file.slice(position, position + totalCount));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  /* istanbul ignore next */\n\n\n  uploadFileCount(ele) {\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    const files = this.filesData;\n\n    if (!files || files.length === 0) {\n      return -1;\n    }\n\n    const result = files.length;\n    return result;\n  }\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  /* istanbul ignore next */\n\n\n  getFileRead(index, ele) {\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    const files = this.filesData;\n\n    if (!files || files.length === 0) {\n      return -1;\n    }\n\n    const file = files[index];\n    const fileCount = this.newFileRef++;\n    this.fileStreams[fileCount] = file;\n    return fileCount;\n  }\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n\n  /* istanbul ignore next */\n\n\n  getFileInfo(index, ele) {\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    const files = this.filesData;\n\n    if (!files || files.length === 0) {\n      return null;\n    }\n\n    const file = files[index];\n\n    if (!file) {\n      return null;\n    }\n\n    return this.filesData[index];\n  }\n\n  uploadFiles(files, custom) {\n    let selectedFiles = [];\n\n    if (this.asyncSettings.saveUrl === '' || isNullOrUndefined(this.asyncSettings.saveUrl)) {\n      if (this.isServerBlazor) {\n        this.interopAdaptor.invokeMethodAsync('GetFileDetails', files);\n      }\n\n      return;\n    }\n\n    if (!custom || isNullOrUndefined(custom)) {\n      if (!this.multiple) {\n        const file = [];\n        file.push(files[0]);\n        selectedFiles = this.filterfileList(file);\n      } else {\n        selectedFiles = this.filterfileList(files);\n      }\n    } else {\n      selectedFiles = files;\n    }\n\n    for (let i = 0; i < selectedFiles.length; i++) {\n      if (this.isServerBlazor && !this.checkChunkUpload()) {\n        /* istanbul ignore next */\n        if (selectedFiles[i] && selectedFiles[i].rawFile instanceof File) {\n          this.getBase64(selectedFiles[i].rawFile).then(data => {\n            this.base64String.push(data);\n            this.uploadFilesRequest(selectedFiles, i, custom);\n          });\n        }\n      } else {\n        this.uploadFilesRequest(selectedFiles, i, custom);\n      }\n    }\n  }\n\n  uploadFilesRequest(selectedFiles, i, custom) {\n    const cloneFiles = [];\n    const chunkEnabled = this.checkChunkUpload();\n    const ajax = new Ajax(this.asyncSettings.saveUrl, 'POST', true, null);\n    ajax.emitError = false;\n    let getFileData;\n    /* istanbul ignore next */\n\n    if (this.isServerBlazor) {\n      getFileData = selectedFiles.slice(0);\n      cloneFiles.push(getFileData[i].rawFile);\n    }\n\n    const eventArgs = {\n      fileData: this.isServerBlazor ? getFileData[i] : selectedFiles[i],\n      customFormData: [],\n      cancel: false\n    };\n    const formData = new FormData();\n\n    ajax.beforeSend = e => {\n      eventArgs.currentRequest = ajax.httpRequest;\n      /* istanbul ignore next */\n\n      if (isBlazor()) {\n        eventArgs.fileData.rawFile = !chunkEnabled ? this.base64String[i] : eventArgs.fileData.rawFile;\n\n        if (this.currentRequestHeader) {\n          this.updateCustomheader(ajax.httpRequest, this.currentRequestHeader);\n        }\n\n        if (this.customFormDatas) {\n          this.updateFormData(formData, this.customFormDatas);\n        }\n      }\n\n      this.trigger('uploading', eventArgs, eventArgs => {\n        /* istanbul ignore next */\n        if (this.isServerBlazor && !chunkEnabled) {\n          selectedFiles[i].rawFile = eventArgs.fileData.rawFile = cloneFiles[i];\n        }\n\n        if (eventArgs.cancel) {\n          this.eventCancelByArgs(e, eventArgs, selectedFiles[i]);\n        }\n\n        this.updateFormData(formData, eventArgs.customFormData);\n      });\n    };\n\n    if (selectedFiles[i].statusCode === '1') {\n      const name = this.element.getAttribute('name');\n      formData.append(name, selectedFiles[i].rawFile, selectedFiles[i].name);\n\n      if (chunkEnabled && selectedFiles[i].size > this.asyncSettings.chunkSize) {\n        this.chunkUpload(selectedFiles[i], custom, i);\n      } else {\n        ajax.onLoad = e => {\n          if (eventArgs.cancel && this.isServerBlazor) {\n            return {};\n          } else {\n            this.uploadComplete(e, selectedFiles[i], custom);\n            return {};\n          }\n        };\n\n        ajax.onUploadProgress = e => {\n          if (eventArgs.cancel && this.isServerBlazor) {\n            return {};\n          } else {\n            this.uploadInProgress(e, selectedFiles[i], custom, ajax);\n            return {};\n          }\n        };\n        /* istanbul ignore next */\n\n\n        ajax.onError = e => {\n          this.uploadFailed(e, selectedFiles[i]);\n          return {};\n        };\n\n        ajax.send(formData);\n      }\n    }\n  }\n\n  spliceFiles(liIndex) {\n    const liElement = this.fileList[liIndex];\n    const allFiles = this.getFilesData();\n    const nameElements = +liElement.getAttribute('data-files-count');\n    let startIndex = 0;\n\n    for (let i = 0; i < liIndex; i++) {\n      startIndex += +this.fileList[i].getAttribute('data-files-count');\n    }\n\n    const endIndex = startIndex + nameElements - 1;\n\n    for (let j = endIndex; j >= startIndex; j--) {\n      allFiles.splice(j, 1);\n    }\n  }\n  /* eslint-disable valid-jsdoc, jsdoc/require-param */\n\n  /**\n   * Remove the uploaded file from server manually by calling the remove URL action.\n   * If you pass an empty argument to this method, the complete file list can be cleared,\n   * otherwise remove the specific file based on its argument (“file_data”).\n   *\n   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to remove from file list/server.\n   * @param { boolean } customTemplate - Set true if the component rendering with customize template.\n   * @param { boolean } removeDirectly - Set true if files remove without removing event.\n   * @param { boolean } postRawFile - Set false, to post file name only to the remove action.\n   * @returns {void}\n   */\n\n\n  remove(fileData, customTemplate, removeDirectly, postRawFile, args) {\n    if (isNullOrUndefined(postRawFile)) {\n      postRawFile = true;\n    }\n\n    const eventArgs = {\n      event: args,\n      cancel: false,\n      filesData: [],\n      customFormData: [],\n      postRawFile: postRawFile,\n      currentRequest: null\n    };\n    const beforeEventArgs = {\n      cancel: false,\n      customFormData: [],\n      currentRequest: null\n    };\n    this.trigger('beforeRemove', beforeEventArgs, beforeEventArgs => {\n      if (!beforeEventArgs.cancel) {\n        if (isBlazor()) {\n          this.currentRequestHeader = beforeEventArgs.currentRequest;\n          this.customFormDatas = beforeEventArgs.customFormData;\n        }\n\n        if (this.isFormUpload() && !this.isBlazorSaveUrl) {\n          eventArgs.filesData = fileData;\n          this.trigger('removing', eventArgs, eventArgs => {\n            if (!eventArgs.cancel) {\n              const removingFiles = this.getFilesInArray(fileData);\n              let isLiRemoved = false;\n              let liIndex;\n\n              for (const data of removingFiles) {\n                if (!isLiRemoved) {\n                  liIndex = this.fileList.indexOf(data.list);\n                }\n\n                if (liIndex > -1) {\n                  const inputElement = !isNullOrUndefined(data.input) ? data.input : null;\n\n                  if (inputElement) {\n                    detach(inputElement);\n                  }\n\n                  this.spliceFiles(liIndex);\n                  detach(this.fileList[liIndex]);\n                  this.fileList.splice(liIndex, 1);\n                  isLiRemoved = true;\n                  liIndex = -1;\n                }\n              }\n            }\n          });\n        } else if (this.isForm && (isNullOrUndefined(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === '') && !this.isBlazorSaveUrl) {\n          eventArgs.filesData = this.getFilesData();\n          this.trigger('removing', eventArgs, eventArgs => {\n            if (!eventArgs.cancel) {\n              this.clearAll();\n            }\n          });\n        } else {\n          let removeFiles = [];\n          fileData = !isNullOrUndefined(fileData) ? fileData : this.filesData;\n\n          if (fileData instanceof Array) {\n            removeFiles = fileData;\n          } else {\n            removeFiles.push(fileData);\n          }\n\n          eventArgs.filesData = removeFiles;\n          const removeUrl = this.asyncSettings.removeUrl;\n          const validUrl = removeUrl === '' || isNullOrUndefined(removeUrl) ? false : true;\n\n          for (const files of removeFiles) {\n            const fileUploadedIndex = this.uploadedFilesData.indexOf(files);\n\n            if ((files.statusCode === '2' || files.statusCode === '4' || files.statusCode === '0' && fileUploadedIndex !== -1) && validUrl) {\n              this.removeUploadedFile(files, eventArgs, removeDirectly, customTemplate);\n            } else {\n              if (!removeDirectly) {\n                this.trigger('removing', eventArgs, eventArgs => {\n                  if (!eventArgs.cancel) {\n                    this.removeFilesData(files, customTemplate);\n                  }\n                });\n              } else {\n                this.removeFilesData(files, customTemplate);\n              }\n            }\n\n            if (args && !args.target.classList.contains(REMOVE_ICON)) {\n              this.checkActionComplete(false);\n            }\n          }\n        }\n      }\n    });\n  }\n  /* eslint-enable valid-jsdoc, jsdoc/require-param */\n\n  /**\n   * Clear all the file entries from list that can be uploaded files or added in upload queue.\n   *\n   * @returns {void}\n   */\n\n\n  clearAll() {\n    if (isNullOrUndefined(this.listParent) && !(this.isBlazorSaveUrl || this.isBlazorTemplate)) {\n      if (this.browserName !== 'msie') {\n        this.element.value = '';\n      }\n\n      this.filesData = [];\n      return;\n    }\n\n    const eventArgs = {\n      cancel: false,\n      filesData: this.filesData\n    };\n    this.trigger('clearing', eventArgs, eventArgs => {\n      if (!eventArgs.cancel) {\n        this.clearData();\n        this.actionCompleteCount = 0;\n        this.count = -1;\n      }\n    });\n  }\n  /* eslint-disable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Get the data of files which are shown in file list.\n   *\n   * @param { number } index - specifies the file list item(li) index.\n   * @returns {FileInfo[]}\n   */\n\n\n  getFilesData(index) {\n    if (!this.isServerBlazor) {\n      if (isNullOrUndefined(index)) {\n        return this.filesData;\n      } else {\n        return this.getSelectedFiles(index);\n      }\n    } else {\n      for (let i = 0; i < this.filesData.length; i++) {\n        this.filesData[i].rawFile = this.base64String[i];\n      }\n\n      return this.filesData;\n    }\n  }\n  /* eslint-enable valid-jsdoc, jsdoc/require-returns-description */\n\n  /**\n   * Pauses the in-progress chunked upload based on the file data.\n   *\n   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to pause from uploading.\n   * @param { boolean } custom - Set true if used custom UI.\n   * @returns {void}\n   */\n\n\n  pause(fileData, custom) {\n    fileData = fileData ? fileData : this.filesData;\n    const fileDataFiles = this.getFilesInArray(fileData);\n    this.pauseUploading(fileDataFiles, custom);\n  }\n\n  pauseUploading(fileData, custom) {\n    const files = this.getFiles(fileData);\n\n    for (let i = 0; i < files.length; i++) {\n      if (files[i].statusCode === '3') {\n        this.pauseUpload(this.getCurrentMetaData(files[i], null), null, custom);\n      }\n    }\n  }\n\n  getFiles(fileData) {\n    let files = [];\n\n    if (!isNullOrUndefined(fileData) && !(fileData instanceof Array)) {\n      files.push(fileData);\n    } else {\n      files = fileData;\n    }\n\n    return files;\n  }\n  /**\n   * Resumes the chunked upload that is previously paused based on the file data.\n   *\n   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to resume the paused file.\n   * @param { boolean } custom - Set true if used custom UI.\n   * @returns {void}\n   */\n\n\n  resume(fileData, custom) {\n    fileData = fileData ? fileData : this.filesData;\n    const fileDataFiles = this.getFilesInArray(fileData);\n    this.resumeFiles(fileDataFiles, custom);\n  }\n\n  resumeFiles(fileData, custom) {\n    const files = this.getFiles(fileData);\n\n    for (let i = 0; i < files.length; i++) {\n      if (files[i].statusCode === '4') {\n        this.resumeUpload(this.getCurrentMetaData(files[i], null), null, custom);\n      }\n    }\n  }\n  /**\n   * Retries the canceled or failed file upload based on the file data.\n   *\n   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to retry the canceled or failed file.\n   * @param { boolean } fromcanceledStage - Set true to retry from canceled stage and set false to retry from initial stage.\n   * @param {boolean} custom -Specifies whether the uploader is rendered with custom file list.\n   * @returns {void}\n   */\n\n\n  retry(fileData, fromcanceledStage, custom) {\n    fileData = fileData ? fileData : this.filesData;\n    const fileDataFiles = this.getFilesInArray(fileData);\n\n    if (this.sequentialUpload && this.isFirstFileOnSelection) {\n      this.isFirstFileOnSelection = false;\n    }\n\n    this.retryFailedFiles(fileDataFiles, fromcanceledStage, custom);\n  }\n\n  retryFailedFiles(fileData, fromcanceledStage, custom) {\n    const files = this.getFiles(fileData);\n\n    for (let i = 0; i < files.length; i++) {\n      if (files[i].statusCode === '5' || files[i].statusCode === '0') {\n        if (this.asyncSettings.chunkSize > 0) {\n          this.retryUpload(this.getCurrentMetaData(files[i], null), fromcanceledStage);\n        } else {\n          let liElement;\n\n          if (!custom) {\n            liElement = this.fileList[this.filesData.indexOf(files[i])];\n          }\n\n          this.reloadcanceledFile(null, files[i], liElement, custom);\n        }\n      }\n    }\n  }\n  /**\n   * Stops the in-progress chunked upload based on the file data.\n   * When the file upload is canceled, the partially uploaded file is removed from server.\n   *\n   * @param { FileInfo | FileInfo[] } fileData - specifies the files data to cancel the progressing file.\n   * @returns {void}\n   */\n\n\n  cancel(fileData) {\n    fileData = fileData ? fileData : this.filesData;\n    const cancelingFiles = this.getFilesInArray(fileData);\n    this.cancelUpload(cancelingFiles);\n  }\n\n  cancelUpload(fileData) {\n    const files = this.getFiles(fileData);\n\n    if (this.asyncSettings.chunkSize > 0) {\n      for (let i = 0; i < files.length; i++) {\n        if (files[i].statusCode === '3') {\n          const metaData = this.getCurrentMetaData(files[i], null);\n          metaData.file.statusCode = '5';\n          metaData.file.status = this.localizedTexts('fileUploadCancel');\n          this.updateMetaData(metaData);\n          this.showHideUploadSpinner(files[i]);\n        }\n      }\n    } else {\n      for (let i = 0; i < files.length; i++) {\n        if (files[i].statusCode === '3') {\n          files[i].statusCode = '5';\n          files[i].status = this.localizedTexts('fileUploadCancel');\n          this.showHideUploadSpinner(files[i]);\n        }\n      }\n    }\n  }\n\n  showHideUploadSpinner(files) {\n    const liElement = this.getLiElement(files);\n\n    if (!isNullOrUndefined(liElement) && isNullOrUndefined(this.template)) {\n      const spinnerTarget = liElement.querySelector('.' + ABORT_ICON);\n      createSpinner({\n        target: spinnerTarget,\n        width: '20px'\n      });\n      showSpinner(spinnerTarget);\n    }\n  }\n\n};\n\n__decorate$4([Complex({\n  saveUrl: '',\n  removeUrl: ''\n}, AsyncSettings)], Uploader.prototype, \"asyncSettings\", void 0);\n\n__decorate$4([Property(false)], Uploader.prototype, \"sequentialUpload\", void 0);\n\n__decorate$4([Property({})], Uploader.prototype, \"htmlAttributes\", void 0);\n\n__decorate$4([Property('')], Uploader.prototype, \"cssClass\", void 0);\n\n__decorate$4([Property(true)], Uploader.prototype, \"enabled\", void 0);\n\n__decorate$4([Property(null)], Uploader.prototype, \"template\", void 0);\n\n__decorate$4([Property(true)], Uploader.prototype, \"multiple\", void 0);\n\n__decorate$4([Property(true)], Uploader.prototype, \"autoUpload\", void 0);\n\n__decorate$4([Complex({}, ButtonsProps)], Uploader.prototype, \"buttons\", void 0);\n\n__decorate$4([Property('')], Uploader.prototype, \"allowedExtensions\", void 0);\n\n__decorate$4([Property(0)], Uploader.prototype, \"minFileSize\", void 0);\n\n__decorate$4([Property(30000000)], Uploader.prototype, \"maxFileSize\", void 0);\n\n__decorate$4([Property(null)], Uploader.prototype, \"dropArea\", void 0);\n\n__decorate$4([Collection([{}], FilesProp)], Uploader.prototype, \"files\", void 0);\n\n__decorate$4([Property(true)], Uploader.prototype, \"showFileList\", void 0);\n\n__decorate$4([Property(false)], Uploader.prototype, \"directoryUpload\", void 0);\n\n__decorate$4([Property('Default')], Uploader.prototype, \"dropEffect\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"created\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"actionComplete\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"rendering\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"beforeUpload\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"fileListRendering\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"selected\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"uploading\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"success\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"failure\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"removing\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"beforeRemove\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"clearing\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"progress\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"change\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"chunkSuccess\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"chunkFailure\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"chunkUploading\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"canceling\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"pausing\", void 0);\n\n__decorate$4([Event()], Uploader.prototype, \"resuming\", void 0);\n\nUploader = __decorate$4([NotifyPropertyChanges], Uploader);\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Uploader modules\n */\n\nvar __decorate$5 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/* eslint-disable prefer-spread */\n\n\nconst APPLY = 'e-apply';\nconst CANCEL = 'e-cancel';\nconst CURRENT = 'e-current';\nconst CONTAINER = 'e-container';\nconst CTRLBTN = 'e-ctrl-btn';\nconst CTRLSWITCH = 'e-switch-ctrl-btn';\nconst DISABLED$1 = 'e-disabled';\nconst FORMATSWITCH = 'e-value-switch-btn';\nconst HANDLER = 'e-handler';\nconst HEX = 'e-hex';\nconst HIDEHEX = 'e-hide-hex-value';\nconst HIDEOPACITY = 'e-hide-opacity';\nconst HIDERGBA = 'e-hide-switchable-value';\nconst HIDEVALUE = 'e-hide-value';\nconst HIDEVALUESWITCH = 'e-hide-valueswitcher';\nconst HSVAREA = 'e-hsv-color';\nconst HSVCONTAINER = 'e-hsv-container';\nconst INPUTWRAPPER = 'e-selected-value';\nconst MODESWITCH = 'e-mode-switch-btn';\nconst NOCOLOR = 'e-nocolor-item';\nconst OPACITY = 'e-opacity-value';\nconst PALETTES = 'e-palette';\nconst PALETTECONTENT = 'e-color-palette';\nconst PICKERCONTENT = 'e-color-picker';\nconst PREVIEW = 'e-preview-container';\nconst PREVIOUS = 'e-previous';\nconst RTL$1 = 'e-rtl';\nconst SHOWVALUE = 'e-show-value';\nconst SELECT = 'e-selected';\nconst SPLITPREVIEW = 'e-split-preview';\nconst TILE = 'e-tile';\nconst presets = {\n  default: ['#000000', '#f44336', '#e91e63', '#9c27b0', '#673ab7', '#2196f3', '#03a9f4', '#00bcd4', '#009688', '#ffeb3b', '#ffffff', '#ffebee', '#fce4ec', '#f3e5f5', '#ede7f6', '#e3f2fd', '#e1f5fe', '#e0f7fa', '#e0f2f1', '#fffde7', '#f2f2f2', '#ffcdd2', '#f8bbd0', '#e1bee7', '#d1c4e9', '#bbdefb', '#b3e5fc', '#b2ebf2', '#b2dfdb', '#fff9c4', '#e6e6e6', '#ef9a9a', '#f48fb1', '#ce93d8', '#b39ddb', '#90caf9', '#81d4fa', '#80deea', '#80cbc4', '#fff59d', '#cccccc', '#e57373', '#f06292', '#ba68c8', '#9575cd', '#64b5f6', '#4fc3f7', '#4dd0e1', '#4db6ac', '#fff176', '#b3b3b3', '#ef5350', '#ec407a', '#ab47bc', '#7e57c2', '#42a5f5', '#29b6f6', '#26c6da', '#26a69a', '#ffee58', '#999999', '#e53935', '#d81b60', '#8e24aa', '#5e35b1', '#1e88e5', '#039be5', '#00acc1', '#00897b', '#fdd835', '#808080', '#d32f2f', '#c2185b', '#7b1fa2', '#512da8', '#1976d2', '#0288d1', '#0097a7', '#00796b', '#fbc02d', '#666666', '#c62828', '#ad1457', '#6a1b9a', '#4527a0', '#1565c0', '#0277bd', '#00838f', '#00695c', '#f9a825', '#4d4d4d', '#b71c1c', '#880e4f', '#4a148c', '#311b92', '#0d47a1', '#01579b', '#006064', '#004d40', '#f57f17']\n};\n/**\n * ColorPicker component is a user interface to select and adjust color values. It provides supports for various\n * color specification like Red Green Blue, Hue Saturation Value and Hex codes.\n * ```html\n * <input type=\"color\" id=\"color-picker\">\n * ```\n * ```typescript\n * <script>\n *   let colorPickerObj: ColorPicker = new ColorPicker(null , \"#color-picker\");\n * </script>\n * ```\n */\n\nlet ColorPicker = class ColorPicker extends Component {\n  constructor(options, element) {\n    super(options, element);\n  }\n\n  preRender() {\n    const ele = this.element;\n    this.formElement = closest(this.element, 'form');\n\n    if (this.formElement) {\n      EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n    }\n\n    const localeText = {\n      Apply: 'Apply',\n      Cancel: 'Cancel',\n      ModeSwitcher: 'Switch Mode'\n    };\n    this.l10n = new L10n('colorpicker', localeText, this.locale);\n\n    if (ele.getAttribute('ejs-for') && !ele.getAttribute('name')) {\n      ele.setAttribute('name', ele.id);\n    }\n  }\n  /**\n   * To Initialize the component rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  render() {\n    this.initWrapper();\n\n    if (this.inline) {\n      this.createWidget();\n    } else {\n      this.createSplitBtn();\n    }\n\n    if (!this.enableOpacity) {\n      addClass([this.container.parentElement], HIDEOPACITY);\n    }\n\n    this.renderComplete();\n  }\n\n  initWrapper() {\n    const wrapper = this.createElement('div', {\n      className: 'e-' + this.getModuleName() + '-wrapper'\n    });\n    this.element.parentNode.insertBefore(wrapper, this.element);\n    wrapper.appendChild(this.element);\n    attributes(this.element, {\n      'tabindex': '-1',\n      'spellcheck': 'false'\n    });\n    this.container = this.createElement('div', {\n      className: CONTAINER\n    });\n    this.getWrapper().appendChild(this.container);\n    let value = this.value ? this.roundValue(this.value).toLowerCase() : '#008000ff';\n\n    if (this.noColor && this.mode === 'Palette' && this.value === '') {\n      value = '';\n    }\n\n    const slicedValue = value.slice(0, 7);\n\n    if (isNullOrUndefined(this.initialInputValue)) {\n      this.initialInputValue = slicedValue;\n    }\n\n    this.element.value = slicedValue;\n\n    if (this.enableOpacity) {\n      this.setProperties({\n        'value': value\n      }, true);\n    } else {\n      this.setProperties({\n        'value': slicedValue\n      }, true);\n    }\n\n    if (this.enableRtl) {\n      wrapper.classList.add(RTL$1);\n    }\n\n    if (this.cssClass) {\n      addClass([wrapper], this.cssClass.split(' '));\n    }\n\n    this.tileRipple = rippleEffect(this.container, {\n      selector: '.' + TILE\n    });\n    this.ctrlBtnRipple = rippleEffect(this.container, {\n      selector: '.e-btn'\n    });\n  }\n\n  getWrapper() {\n    return this.element.parentElement;\n  }\n\n  createWidget() {\n    if (this.mode === 'Palette') {\n      this.createPalette();\n\n      if (!this.inline) {\n        this.firstPaletteFocus();\n      }\n    } else {\n      this.createPicker();\n\n      if (!this.inline) {\n        this.getDragHandler().focus();\n      }\n    }\n\n    this.isRgb = true;\n    this.createInput();\n    this.createCtrlBtn();\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    if (this.inline && this.disabled) {\n      this.toggleDisabled(true);\n    }\n\n    if (Browser.isDevice) {\n      this.refreshPopupPos();\n    }\n  }\n\n  createSplitBtn() {\n    const splitButton = this.createElement('button', {\n      className: 'e-split-colorpicker'\n    });\n    this.getWrapper().appendChild(splitButton);\n    this.splitBtn = new SplitButton({\n      iconCss: 'e-selected-color',\n      target: this.container,\n      disabled: this.disabled,\n      enableRtl: this.enableRtl,\n      open: this.onOpen.bind(this),\n      click: () => {\n        this.trigger('change', {\n          currentValue: {\n            hex: this.value.slice(0, 7),\n            rgba: this.convertToRgbString(this.hexToRgb(this.value))\n          },\n          previousValue: {\n            hex: null,\n            rgba: null\n          },\n          value: this.value\n        });\n      }\n    });\n    this.splitBtn.createElement = this.createElement;\n    this.splitBtn.appendTo(splitButton);\n    const preview = this.createElement('span', {\n      className: SPLITPREVIEW\n    });\n    select('.e-selected-color', splitButton).appendChild(preview);\n    preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));\n    const popupEle = this.getPopupEle();\n    addClass([popupEle], 'e-colorpicker-popup');\n\n    if (this.cssClass) {\n      addClass([popupEle], this.cssClass.split(' '));\n    }\n\n    if (Browser.isDevice) {\n      const popupInst = this.getPopupInst();\n      popupInst.relateTo = document.body;\n      popupInst.position = {\n        X: 'center',\n        Y: 'center'\n      };\n      popupInst.targetType = 'container';\n      popupInst.collision = {\n        X: 'fit',\n        Y: 'fit'\n      };\n      popupInst.offsetY = 4;\n      popupEle.style.zIndex = getZindexPartial(this.splitBtn.element).toString();\n    }\n\n    this.bindCallBackEvent();\n  }\n\n  onOpen() {\n    this.trigger('open', {\n      element: this.container\n    });\n  }\n\n  getPopupInst() {\n    return getInstance(this.getPopupEle(), Popup);\n  }\n\n  bindCallBackEvent() {\n    this.splitBtn.beforeOpen = args => {\n      const callBackPromise = new Deferred();\n      this.trigger('beforeOpen', args, observeOpenArgs => {\n        if (!observeOpenArgs.cancel) {\n          const popupEle = this.getPopupEle();\n          popupEle.style.top = formatUnit(0 + pageYOffset);\n          popupEle.style.left = formatUnit(0 + pageXOffset);\n          popupEle.style.display = 'block';\n          this.createWidget();\n          popupEle.style.display = '';\n\n          if (Browser.isDevice) {\n            this.modal = this.createElement('div');\n            this.modal.className = 'e-' + this.getModuleName() + ' e-modal';\n            this.modal.style.display = 'none';\n            document.body.insertBefore(this.modal, popupEle);\n            document.body.className += ' e-colorpicker-overflow';\n            this.modal.style.display = 'block';\n            this.modal.style.zIndex = (Number(popupEle.style.zIndex) - 1).toString();\n          }\n        }\n\n        args.cancel = observeOpenArgs.cancel;\n        callBackPromise.resolve(observeOpenArgs);\n      });\n      return callBackPromise;\n    };\n\n    this.splitBtn.beforeClose = args => {\n      const callBackPromise = new Deferred();\n\n      if (!isNullOrUndefined(args.event)) {\n        const beforeCloseArgs = {\n          element: this.container,\n          event: args.event,\n          cancel: false\n        };\n        this.trigger('beforeClose', beforeCloseArgs, observedCloseArgs => {\n          if (Browser.isDevice && args.event.target === this.modal) {\n            observedCloseArgs.cancel = true;\n          }\n\n          if (!observedCloseArgs.cancel) {\n            this.onPopupClose();\n          }\n\n          args.cancel = observedCloseArgs.cancel;\n          callBackPromise.resolve(observedCloseArgs);\n        });\n      } else {\n        callBackPromise.resolve(args);\n      }\n\n      return callBackPromise;\n    };\n  }\n\n  onPopupClose() {\n    this.unWireEvents();\n    this.destroyOtherComp();\n    this.container.style.width = '';\n    select('.' + SPLITPREVIEW, this.splitBtn.element).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));\n    this.container.innerHTML = '';\n    removeClass([this.container], [PICKERCONTENT, PALETTECONTENT]);\n\n    if (Browser.isDevice && this.modal) {\n      removeClass([document.body], 'e-colorpicker-overflow');\n      this.modal.style.display = 'none';\n      this.modal.outerHTML = '';\n      this.modal = null;\n    }\n  }\n\n  createPalette() {\n    classList(this.container, [PALETTECONTENT], [PICKERCONTENT]);\n\n    if (this.presetColors) {\n      const paletteGroup = this.createElement('div', {\n        className: 'e-custom-palette'\n      });\n      this.appendElement(paletteGroup);\n      const keys = Object.keys(this.presetColors);\n\n      if (keys.length === 1) {\n        this.appendPalette(this.presetColors[keys[0]], keys[0], paletteGroup);\n      } else {\n        for (let i = 0, len = keys.length; i < len; i++) {\n          this.appendPalette(this.presetColors[keys[i]], keys[i], paletteGroup);\n        }\n      }\n\n      if (selectAll('.e-row', paletteGroup).length > 10) {\n        addClass([paletteGroup], 'e-palette-group');\n      }\n    } else {\n      this.appendPalette(presets.default, 'default');\n    }\n\n    if (this.mode === 'Palette' && !this.modeSwitcher && this.noColor) {\n      this.setNoColor();\n    }\n\n    const width = parseInt(getComputedStyle(this.container).borderBottomWidth, 10);\n    this.container.style.width = formatUnit(this.container.children[0].offsetWidth + width + width);\n    this.rgb = this.hexToRgb(this.roundValue(this.value));\n    this.hsv = this.rgbToHsv.apply(this, this.rgb);\n  }\n\n  firstPaletteFocus() {\n    if (!select('.' + SELECT, this.container.children[0])) {\n      selectAll('.' + PALETTES, this.container)[0].focus();\n    }\n  }\n\n  appendPalette(colors, key, refEle) {\n    const palette = this.createElement('div', {\n      className: PALETTES,\n      attrs: {\n        'tabindex': '0'\n      }\n    });\n\n    if (refEle) {\n      refEle.appendChild(palette);\n    } else {\n      this.appendElement(palette);\n    }\n\n    let row;\n    let tile;\n    let roundedColor;\n\n    for (let i = 0, len = colors.length; i < len; i++) {\n      if (i === 0 || i % this.columns === 0) {\n        row = this.createElement('div', {\n          className: 'e-row',\n          attrs: {\n            'role': 'presentation'\n          }\n        });\n        palette.appendChild(row);\n      }\n\n      roundedColor = this.roundValue(colors[i]).toLowerCase();\n      tile = this.createElement('span', {\n        className: TILE,\n        attrs: {\n          'role': 'gridcell',\n          'aria-label': roundedColor,\n          'aria-selected': 'false'\n        }\n      });\n      this.trigger('beforeTileRender', {\n        element: tile,\n        presetName: key,\n        value: colors[i]\n      });\n      row.appendChild(tile);\n\n      if (this.value === roundedColor) {\n        this.addTileSelection(tile);\n        palette.focus();\n      }\n\n      tile.style.backgroundColor = this.convertToRgbString(this.hexToRgb(roundedColor));\n    }\n  }\n\n  setNoColor() {\n    const noColorEle = this.container.querySelector('.e-row').children[0];\n    noColorEle.classList.add(NOCOLOR);\n\n    if (!this.value) {\n      noColorEle.classList.add(SELECT);\n      closest(noColorEle, '.' + PALETTES).focus();\n    }\n\n    ['aria-selected', 'aria-label'].forEach(attr => {\n      noColorEle.removeAttribute(attr);\n    });\n    noColorEle.style.backgroundColor = '';\n  }\n\n  appendElement(ele, insertPos = 0) {\n    const refEle = this.container.children[insertPos];\n\n    if (refEle) {\n      this.container.insertBefore(ele, refEle);\n    } else {\n      this.container.appendChild(ele);\n    }\n  }\n\n  addTileSelection(ele) {\n    ele.classList.add(SELECT);\n    ele.setAttribute('aria-selected', 'true');\n  }\n\n  createPicker() {\n    classList(this.container, [PICKERCONTENT], [PALETTECONTENT]);\n    const hsvContainer = this.createElement('div', {\n      className: HSVCONTAINER\n    });\n    this.appendElement(hsvContainer);\n    hsvContainer.appendChild(this.createElement('div', {\n      className: HSVAREA\n    }));\n    const dragHandler = this.createElement('span', {\n      className: HANDLER,\n      attrs: {\n        'tabindex': '0'\n      }\n    });\n    hsvContainer.appendChild(dragHandler);\n    this.rgb = this.hexToRgb(this.value);\n    this.hsv = this.rgbToHsv.apply(this, this.rgb);\n    this.setHsvContainerBg();\n    this.setHandlerPosition();\n    this.createSlider();\n    this.createDragTooltip();\n  }\n\n  setHsvContainerBg(h = this.hsv[0]) {\n    this.getHsvContainer().style.backgroundColor = this.convertToRgbString(this.hsvToRgb(h, 100, 100, 1));\n  }\n\n  getHsvContainer() {\n    return select('.' + HSVCONTAINER, this.container);\n  }\n\n  setHandlerPosition() {\n    const dragHandler = this.getDragHandler();\n    const hsvArea = select('.' + HSVAREA, this.container);\n\n    if (this.enableRtl) {\n      dragHandler.style.left = formatUnit(hsvArea.offsetWidth * Math.abs(100 - this.hsv[1]) / 100);\n    } else {\n      dragHandler.style.left = formatUnit(hsvArea.offsetWidth * this.hsv[1] / 100);\n    }\n\n    dragHandler.style.top = formatUnit(hsvArea.offsetHeight * (100 - this.hsv[2]) / 100);\n  }\n\n  createSlider() {\n    const sliderPreviewWrapper = this.createElement('div', {\n      className: 'e-slider-preview'\n    });\n    this.appendElement(sliderPreviewWrapper, 1);\n    this.createPreview(sliderPreviewWrapper);\n    const sliderWrapper = this.createElement('div', {\n      className: 'e-colorpicker-slider'\n    });\n    sliderPreviewWrapper.insertBefore(sliderWrapper, sliderPreviewWrapper.children[0]);\n    let slider = this.createElement('div', {\n      className: 'e-hue-slider'\n    });\n    sliderWrapper.appendChild(slider);\n    this.hueSlider = new Slider({\n      value: this.hsv[0],\n      min: 0,\n      max: 359,\n      enableRtl: this.enableRtl,\n      enabled: !this.disabled,\n      change: this.hueChange.bind(this)\n    });\n    this.hueSlider.createElement = this.createElement;\n    this.hueSlider.appendTo(slider);\n\n    if (this.enableOpacity) {\n      slider = this.createElement('div', {\n        className: 'e-opacity-slider'\n      });\n      sliderWrapper.appendChild(slider);\n      this.createOpacitySlider(slider);\n    }\n  }\n\n  createOpacitySlider(slider) {\n    this.opacitySlider = new Slider({\n      value: this.rgb[3] * 100,\n      min: 0,\n      max: 100,\n      enableRtl: this.enableRtl,\n      enabled: !this.disabled,\n      change: this.opacityChange.bind(this)\n    });\n    this.opacitySlider.createElement = this.createElement;\n    this.opacitySlider.appendTo(slider);\n    const opacityBgTrack = this.createElement('div', {\n      className: 'e-opacity-empty-track'\n    });\n    slider.appendChild(opacityBgTrack);\n    this.updateOpacitySliderBg();\n  }\n\n  updateOpacitySliderBg() {\n    const direction = this.enableRtl ? 'to left' : 'to right';\n    const opacityEle = select('.e-opacity-empty-track', this.opacitySlider.element);\n\n    if (opacityEle) {\n      opacityEle.style.background = 'linear-gradient(' + direction + ', rgba(' + this.rgb.slice(0, 3) + ', 0) 0%, ' + this.convertToRgbString(this.rgb.slice(0, 3)) + ' 100%)';\n    }\n  }\n\n  hueChange(args) {\n    this.hsv[0] = args.value;\n    this.setHsvContainerBg();\n    this.convertToOtherFormat();\n  }\n\n  opacityChange(args) {\n    const value = args.value;\n    const pValue = this.rgbToHex(this.rgb);\n    this.hsv[3] = value / 100;\n    this.rgb[3] = value / 100;\n    const cValue = this.rgbToHex(this.rgb);\n    this.updateOpacityInput(value);\n    const rgb = this.convertToRgbString(this.rgb);\n    this.updatePreview(rgb);\n    this.triggerEvent(cValue, pValue, rgb);\n  }\n\n  updateOpacityInput(value) {\n    if (this.enableOpacity && !this.getWrapper().classList.contains(HIDEVALUE)) {\n      const opacityTextBoxInst = getInstance(select('.' + OPACITY, this.container), NumericTextBox);\n      opacityTextBoxInst.value = value;\n      opacityTextBoxInst.dataBind();\n    }\n  }\n\n  createPreview(parentEle) {\n    const previewContainer = this.createElement('div', {\n      className: PREVIEW\n    });\n    parentEle.appendChild(previewContainer);\n    let preview = this.createElement('span', {\n      className: 'e-preview ' + CURRENT\n    });\n    previewContainer.appendChild(preview);\n    const colorValue = this.convertToRgbString(this.rgb);\n    preview.style.backgroundColor = colorValue;\n    preview = this.createElement('span', {\n      className: 'e-preview ' + PREVIOUS\n    });\n    previewContainer.appendChild(preview);\n    preview.style.backgroundColor = colorValue;\n  }\n\n  isPicker() {\n    return !this.container.classList.contains(PALETTECONTENT);\n  }\n\n  getPopupEle() {\n    return this.container.parentElement;\n  }\n\n  createNumericInput(element, value, label, max) {\n    const numericInput = new NumericTextBox({\n      value: value,\n      placeholder: label,\n      min: 0,\n      max: max,\n      format: '###.##',\n      showSpinButton: false,\n      floatLabelType: 'Always',\n      enableRtl: this.enableRtl,\n      enabled: !this.disabled,\n      readonly: this.isPicker() ? false : true,\n      change: args => {\n        if (args.event) {\n          this.inputHandler(args.event);\n        }\n      }\n    });\n    numericInput.createElement = this.createElement;\n    numericInput.appendTo(element);\n  }\n\n  createInput() {\n    const isPicker = this.isPicker();\n    const wrapper = this.getWrapper();\n\n    if (isPicker && !wrapper.classList.contains(HIDEVALUE) || !isPicker && wrapper.classList.contains(SHOWVALUE)) {\n      const inputWrap = this.createElement('div', {\n        className: INPUTWRAPPER\n      });\n\n      if (isPicker) {\n        this.appendElement(inputWrap, 2);\n      } else {\n        this.appendElement(inputWrap, 1);\n      }\n\n      const container = this.createElement('div', {\n        className: 'e-input-container'\n      });\n      inputWrap.appendChild(container);\n\n      if (!wrapper.classList.contains(HIDEVALUESWITCH)) {\n        this.appendValueSwitchBtn(inputWrap);\n      }\n\n      if (!wrapper.classList.contains(HIDEHEX)) {\n        const hexInput = this.createElement('input', {\n          className: HEX,\n          attrs: {\n            'maxlength': '7',\n            'spellcheck': 'false'\n          }\n        });\n        container.appendChild(hexInput);\n        Input.createInput({\n          element: hexInput,\n          floatLabelType: 'Always',\n          properties: {\n            placeholder: 'HEX',\n            enableRtl: this.enableRtl,\n            enabled: !this.disabled,\n            readonly: this.isPicker() ? false : true\n          }\n        }, this.createElement);\n        Input.setValue(this.value.slice(0, 7), hexInput);\n        hexInput.addEventListener('input', this.inputHandler.bind(this));\n      }\n\n      if (!wrapper.classList.contains(HIDERGBA)) {\n        let label;\n        let value;\n\n        if (this.isRgb) {\n          label = 'RGB';\n          value = this.rgb;\n        } else {\n          label = 'HSV';\n          value = this.hsv;\n        }\n\n        const clsName = ['rh', 'gs', 'bv'];\n\n        for (let i = 0; i < 3; i++) {\n          this.createNumericInput(container.appendChild(this.createElement('input', {\n            className: 'e-' + clsName[i] + '-value'\n          })), value[i], label[i], 255);\n        }\n\n        if (this.enableOpacity) {\n          this.appendOpacityValue(container);\n        }\n      }\n    }\n  }\n\n  appendOpacityValue(container) {\n    this.createNumericInput(container.appendChild(this.createElement('input', {\n      className: OPACITY\n    })), this.rgb[3] * 100, 'A', 100);\n  }\n\n  appendValueSwitchBtn(targetEle) {\n    const valueSwitchBtn = this.createElement('button', {\n      className: 'e-icons e-css e-btn e-flat e-icon-btn ' + FORMATSWITCH\n    });\n    targetEle.appendChild(valueSwitchBtn);\n\n    if (this.isPicker() && !this.getWrapper().classList.contains(HIDERGBA)) {\n      valueSwitchBtn.addEventListener('click', this.formatSwitchHandler.bind(this));\n    }\n  }\n\n  createCtrlBtn() {\n    if (this.modeSwitcher || this.showButtons) {\n      this.l10n.setLocale(this.locale);\n      const btnWrapper = this.createElement('div', {\n        className: CTRLSWITCH\n      });\n      this.container.appendChild(btnWrapper);\n\n      if (this.showButtons) {\n        const controlBtnWrapper = this.createElement('div', {\n          className: CTRLBTN\n        });\n        btnWrapper.appendChild(controlBtnWrapper);\n        const apply = this.l10n.getConstant('Apply');\n        controlBtnWrapper.appendChild(this.createElement('button', {\n          innerHTML: apply,\n          className: 'e-btn e-css e-flat e-primary e-small ' + APPLY,\n          attrs: {\n            'title': apply\n          }\n        }));\n        const cancel = this.l10n.getConstant('Cancel');\n        controlBtnWrapper.appendChild(this.createElement('button', {\n          innerHTML: cancel,\n          className: 'e-btn e-css e-flat e-small ' + CANCEL,\n          attrs: {\n            'title': cancel\n          }\n        }));\n      }\n\n      if (this.modeSwitcher) {\n        this.appendModeSwitchBtn();\n      }\n    }\n  }\n\n  appendModeSwitchBtn() {\n    const modeSwitcher = this.createElement('button', {\n      className: 'e-icons e-btn e-flat e-icon-btn ' + MODESWITCH,\n      attrs: {\n        title: this.l10n.getConstant('ModeSwitcher')\n      }\n    });\n    select('.' + CTRLSWITCH, this.container).insertBefore(modeSwitcher, select('.' + CTRLBTN, this.container));\n  }\n\n  createDragTooltip() {\n    const tooltip = new Tooltip({\n      opensOn: 'Custom',\n      showTipPointer: false,\n      cssClass: 'e-color-picker-tooltip',\n      beforeOpen: args => {\n        this.tooltipEle = args.element;\n      },\n      animation: {\n        open: {\n          effect: 'None'\n        },\n        close: {\n          effect: 'None'\n        }\n      }\n    });\n    tooltip.createElement = this.createElement;\n    tooltip.appendTo(this.container);\n    tooltip.open(this.container);\n    this.tooltipEle.style.zIndex = getZindexPartial(this.tooltipEle).toString();\n    select('.e-tip-content', this.tooltipEle).appendChild(this.createElement('div', {\n      className: 'e-tip-transparent'\n    }));\n  }\n\n  getTooltipInst() {\n    return getInstance(this.container, Tooltip);\n  }\n\n  setTooltipOffset(value) {\n    this.getTooltipInst().offsetY = value;\n  }\n\n  toggleDisabled(enable) {\n    if (enable) {\n      this.getWrapper().classList.add(DISABLED$1);\n    } else {\n      this.getWrapper().classList.remove(DISABLED$1);\n    }\n\n    if (this.showButtons) {\n      [].slice.call(selectAll('.e-btn', this.container)).forEach(ele => {\n        if (enable) {\n          attributes(ele, {\n            'disabled': ''\n          });\n        } else {\n          ele.removeAttribute('disabled');\n        }\n      });\n    }\n  }\n\n  convertToRgbString(rgb) {\n    return rgb.length ? rgb.length === 4 ? 'rgba(' + rgb.join() + ')' : 'rgb(' + rgb.join() + ')' : '';\n  }\n\n  convertToHsvString(hsv) {\n    return hsv.length === 4 ? 'hsva(' + hsv.join() + ')' : 'hsv(' + hsv.join() + ')';\n  }\n\n  updateHsv() {\n    this.hsv[1] = this.hsv[1] > 100 ? 100 : this.hsv[1];\n    this.hsv[2] = this.hsv[2] > 100 ? 100 : this.hsv[2];\n    this.setHandlerPosition();\n  }\n\n  convertToOtherFormat(isKey = false) {\n    const pValue = this.rgbToHex(this.rgb);\n    this.rgb = this.hsvToRgb.apply(this, this.hsv);\n    const cValue = this.rgbToHex(this.rgb);\n    const rgba = this.convertToRgbString(this.rgb);\n    this.updatePreview(rgba);\n    this.updateInput(cValue);\n    this.triggerEvent(cValue, pValue, rgba, isKey);\n  }\n\n  updateInput(value) {\n    const wrapper = this.getWrapper();\n\n    if (!wrapper.classList.contains(HIDEVALUE)) {\n      if (!wrapper.classList.contains(HIDEHEX)) {\n        Input.setValue(value.substr(0, 7), select('.' + HEX, this.container));\n      }\n\n      if (!wrapper.classList.contains(HIDERGBA)) {\n        if (this.isRgb) {\n          this.updateValue(this.rgb, false);\n        } else {\n          this.updateValue(this.hsv, false);\n        }\n      }\n    }\n  }\n\n  updatePreview(value) {\n    if (this.enableOpacity) {\n      this.updateOpacitySliderBg();\n    }\n\n    select('.e-tip-transparent', this.tooltipEle).style.backgroundColor = value;\n    select('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = value;\n    select('.' + PREVIEW + ' .' + PREVIOUS, this.container).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));\n  }\n\n  getDragHandler() {\n    return select('.' + HANDLER, this.container);\n  }\n\n  removeTileSelection() {\n    const selectedEle = [].slice.call(selectAll('.' + SELECT, this.container.children[0]));\n    selectedEle.forEach(ele => {\n      ele.classList.remove(SELECT);\n      ele.setAttribute('aria-selected', 'false');\n    });\n  }\n\n  convertRgbToNumberArray(value) {\n    return value.slice(value.indexOf('(') + 1, value.indexOf(')')).split(',').map((n, i) => {\n      return i !== 3 ? parseInt(n, 10) : parseFloat(n);\n    });\n  }\n  /**\n   * To get color value in specified type.\n   *\n   * @param {string} value - Specify the color value.\n   * @param {string} type - Specify the type to which the specified color needs to be converted.\n   * @method getValue\n   * @returns {string} - Color value\n   */\n\n\n  getValue(value, type) {\n    if (!value) {\n      value = this.value;\n    }\n\n    type = !type ? 'hex' : type.toLowerCase();\n\n    if (value[0] === 'r') {\n      const cValue = this.convertRgbToNumberArray(value);\n\n      if (type === 'hex' || type === 'hexa') {\n        const hex = this.rgbToHex(cValue);\n        return type === 'hex' ? hex.slice(0, 7) : hex;\n      } else {\n        if (type === 'hsv') {\n          return this.convertToHsvString(this.rgbToHsv.apply(this, cValue.slice(0, 3)));\n        } else {\n          if (type === 'hsva') {\n            return this.convertToHsvString(this.rgbToHsv.apply(this, cValue));\n          } else {\n            return 'null';\n          }\n        }\n      }\n    } else {\n      if (value[0] === 'h') {\n        const cValue = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(value));\n\n        if (type === 'rgba') {\n          return this.convertToRgbString(cValue);\n        } else {\n          if (type === 'hex' || type === 'hexa') {\n            const hex = this.rgbToHex(cValue);\n            return type === 'hex' ? hex.slice(0, 7) : hex;\n          } else {\n            if (type === 'rgb') {\n              return this.convertToRgbString(cValue.slice(0, 3));\n            } else {\n              return 'null';\n            }\n          }\n        }\n      } else {\n        value = this.roundValue(value);\n        let rgb = this.hexToRgb(value);\n\n        if (type === 'rgb' || type === 'hsv') {\n          rgb = rgb.slice(0, 3);\n        }\n\n        if (type === 'rgba' || type === 'rgb') {\n          return this.convertToRgbString(rgb);\n        } else {\n          if (type === 'hsva' || type === 'hsv') {\n            return this.convertToHsvString(this.rgbToHsv.apply(this, rgb));\n          } else {\n            if (type === 'hex') {\n              return value.slice(0, 7);\n            } else {\n              if (type === 'a') {\n                return rgb[3].toString();\n              } else {\n                return 'null';\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\n   * To show/hide ColorPicker popup based on current state of the SplitButton.\n   *\n   * @method toggle\n   * @returns {void}\n   */\n\n\n  toggle() {\n    if (this.container.parentElement.classList.contains('e-popup-close')) {\n      this.splitBtn.toggle();\n    } else {\n      this.closePopup(null);\n    }\n  }\n  /**\n   * Get component name.\n   *\n   * @returns {string} - Module Name\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'colorpicker';\n  }\n  /**\n   * Gets the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - Persist data\n   */\n\n\n  getPersistData() {\n    return this.addOnPersist(['value']);\n  }\n\n  wireEvents() {\n    if (this.isPicker()) {\n      const dragHandler = this.getDragHandler();\n      EventHandler.add(dragHandler, 'keydown', this.pickerKeyDown, this);\n      EventHandler.add(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown, this);\n\n      if (this.modeSwitcher || this.showButtons) {\n        this.addCtrlSwitchEvent();\n      }\n\n      EventHandler.add(select('.' + PREVIOUS, this.container), 'click', this.previewHandler, this);\n    } else {\n      EventHandler.add(this.container, 'click', this.paletteClickHandler, this);\n      EventHandler.add(this.container, 'keydown', this.paletteKeyDown, this);\n    }\n  }\n\n  formResetHandler() {\n    this.value = this.initialInputValue;\n    attributes(this.element, {\n      'value': this.initialInputValue\n    });\n  }\n\n  addCtrlSwitchEvent() {\n    const ctrlSwitchBtn = select('.' + CTRLSWITCH, this.container);\n\n    if (ctrlSwitchBtn) {\n      EventHandler.add(ctrlSwitchBtn, 'click', this.btnClickHandler, this);\n    }\n  }\n\n  pickerKeyDown(e) {\n    switch (e.keyCode) {\n      case 39:\n        this.handlerDragPosition(1, this.enableRtl ? -1 : 1, e);\n        break;\n\n      case 37:\n        this.handlerDragPosition(1, this.enableRtl ? 1 : -1, e);\n        break;\n\n      case 38:\n        this.handlerDragPosition(2, 1, e);\n        break;\n\n      case 40:\n        this.handlerDragPosition(2, -1, e);\n        break;\n\n      case 13:\n        {\n          e.preventDefault();\n          const cValue = this.rgbToHex(this.rgb);\n          this.enterKeyHandler(cValue, e);\n        }\n    }\n  }\n\n  enterKeyHandler(value, e) {\n    this.triggerChangeEvent(value);\n\n    if (!this.inline) {\n      this.closePopup(e);\n      this.splitBtn.element.focus();\n    }\n  }\n\n  closePopup(e) {\n    const beforeCloseArgs = {\n      element: this.container,\n      event: e,\n      cancel: false\n    };\n    this.trigger('beforeClose', beforeCloseArgs, observedcloseArgs => {\n      if (!observedcloseArgs.cancel) {\n        this.splitBtn.toggle();\n        this.onPopupClose();\n      }\n    });\n  }\n\n  triggerChangeEvent(value) {\n    const hex = value.slice(0, 7);\n    this.trigger('change', {\n      currentValue: {\n        hex: hex,\n        rgba: this.convertToRgbString(this.rgb)\n      },\n      previousValue: {\n        hex: this.value.slice(0, 7),\n        rgba: this.convertToRgbString(this.hexToRgb(this.value))\n      },\n      value: this.enableOpacity ? value : hex\n    });\n\n    if (this.enableOpacity) {\n      this.setProperties({\n        'value': value\n      }, true);\n    } else {\n      this.setProperties({\n        'value': hex\n      }, true);\n    }\n\n    this.element.value = hex ? hex : '#000000';\n  }\n\n  handlerDragPosition(prob, value, e) {\n    e.preventDefault();\n    this.hsv[prob] += value * (e.ctrlKey ? 1 : 3);\n\n    if (this.hsv[prob] < 0) {\n      this.hsv[prob] = 0;\n    }\n\n    this.updateHsv();\n    this.convertToOtherFormat(true);\n  }\n\n  handlerDown(e) {\n    e.preventDefault();\n\n    if (e.type === 'mousedown') {\n      this.clientX = Math.abs(e.pageX - pageXOffset);\n      this.clientY = Math.abs(e.pageY - pageYOffset);\n      this.setTooltipOffset(8);\n    } else {\n      this.clientX = Math.abs(e.changedTouches[0].pageX - pageXOffset);\n      this.clientY = Math.abs(e.changedTouches[0].pageY - pageYOffset);\n      this.setTooltipOffset(-8);\n    }\n\n    this.setHsv(this.clientX, this.clientY);\n    this.getDragHandler().style.transition = 'left .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1)';\n    this.updateHsv();\n    this.convertToOtherFormat();\n    this.getDragHandler().focus();\n    EventHandler.add(document, 'mousemove touchmove', this.handlerMove, this);\n    EventHandler.add(document, 'mouseup touchend', this.handlerEnd, this);\n  }\n\n  handlerMove(e) {\n    if (e.type !== 'touchmove') {\n      e.preventDefault();\n    }\n\n    let x;\n    let y;\n\n    if (e.type === 'mousemove') {\n      x = Math.abs(e.pageX - pageXOffset);\n      y = Math.abs(e.pageY - pageYOffset);\n    } else {\n      x = Math.abs(e.changedTouches[0].pageX - pageXOffset);\n      y = Math.abs(e.changedTouches[0].pageY - pageYOffset);\n    }\n\n    this.setHsv(x, y);\n    const dragHandler = this.getDragHandler();\n    this.updateHsv();\n    this.convertToOtherFormat();\n    this.getTooltipInst().refresh(dragHandler);\n\n    if (!this.tooltipEle.style.transform) {\n      if (Math.abs(this.clientX - x) > 8 || Math.abs(this.clientY - y) > 8) {\n        select('.' + HSVAREA, this.container).style.cursor = 'pointer';\n        dragHandler.style.transition = 'none';\n\n        if (!this.inline) {\n          this.tooltipEle.style.zIndex = (parseInt(this.getPopupEle().style.zIndex, 10) + 1).toString();\n        }\n\n        this.tooltipEle.style.transform = 'rotate(45deg)';\n        dragHandler.classList.add('e-hide-handler');\n      }\n    }\n  }\n\n  setHsv(clientX, clientY) {\n    const ele = select('.' + HSVAREA, this.container);\n    const position = ele.getBoundingClientRect();\n\n    if (this.enableRtl) {\n      clientX = clientX > position.right ? 0 : Math.abs(clientX - position.right);\n    } else {\n      clientX = clientX > position.left ? Math.abs(clientX - position.left) : 0;\n    }\n\n    clientY = clientY > position.top ? Math.abs(clientY - position.top) : 0;\n    this.hsv[2] = Math.round(Number(100 * (ele.offsetHeight - Math.max(0, Math.min(ele.offsetHeight, clientY - ele.offsetTop))) / ele.offsetHeight) * 10) / 10;\n    this.hsv[1] = Math.round(Number(100 * Math.max(0, Math.min(ele.offsetWidth, clientX - ele.offsetLeft)) / ele.offsetWidth) * 10) / 10;\n  }\n\n  handlerEnd(e) {\n    if (e.type !== 'touchend') {\n      e.preventDefault();\n    }\n\n    EventHandler.remove(document, 'mousemove touchmove', this.handlerMove);\n    EventHandler.remove(document, 'mouseup touchend', this.handlerEnd);\n    const dragHandler = this.getDragHandler();\n    select('.' + HSVAREA, this.container).style.cursor = '';\n\n    if (this.tooltipEle.style.transform) {\n      this.tooltipEle.style.transform = '';\n      dragHandler.classList.remove('e-hide-handler');\n    }\n\n    if (!this.inline && !this.showButtons) {\n      this.closePopup(e);\n    }\n  }\n\n  btnClickHandler(e) {\n    const target = e.target;\n\n    if (closest(target, '.' + MODESWITCH)) {\n      e.stopPropagation();\n      this.switchToPalette();\n    } else {\n      if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {\n        this.ctrlBtnClick(target, e);\n      }\n    }\n  }\n\n  switchToPalette() {\n    this.trigger('beforeModeSwitch', {\n      element: this.container,\n      mode: 'Palette'\n    });\n    this.unWireEvents();\n    this.destroyOtherComp();\n    detach(select('.e-slider-preview', this.container));\n\n    if (!this.getWrapper().classList.contains(HIDEVALUE)) {\n      remove(select('.' + INPUTWRAPPER, this.container));\n    }\n\n    detach(this.getHsvContainer());\n    this.createPalette();\n    this.firstPaletteFocus();\n    this.createInput();\n    this.refreshPopupPos();\n    this.wireEvents();\n    this.trigger('onModeSwitch', {\n      element: this.container,\n      mode: 'Palette'\n    });\n  }\n\n  refreshPopupPos() {\n    if (!this.inline) {\n      const popupEle = this.getPopupEle();\n      popupEle.style.left = formatUnit(0 + pageXOffset);\n      popupEle.style.top = formatUnit(0 + pageYOffset);\n      this.getPopupInst().refreshPosition(this.splitBtn.element.parentElement);\n    }\n  }\n\n  formatSwitchHandler() {\n    if (this.isRgb) {\n      this.updateValue(this.hsv, true, 3, [360, 100, 100]);\n      this.isRgb = false;\n    } else {\n      this.updateValue(this.rgb, true, 2);\n      this.isRgb = true;\n    }\n  }\n\n  updateValue(value, format, idx, max) {\n    const clsName = ['e-rh-value', 'e-gs-value', 'e-bv-value'];\n    let inst;\n\n    for (let i = 0, len = clsName.length; i < len; i++) {\n      inst = getInstance(select('.' + clsName[i], this.container), NumericTextBox);\n      inst.value = Math.round(value[i]);\n\n      if (format) {\n        inst.placeholder = clsName[i].substr(idx, 1).toUpperCase();\n        inst.max = max ? max[i] : 255;\n      }\n\n      inst.dataBind();\n    }\n  }\n\n  previewHandler(e) {\n    const target = e.target;\n    const pValue = this.rgbToHex(this.rgb);\n    this.rgb = this.convertRgbToNumberArray(target.style.backgroundColor);\n\n    if (!this.rgb[3]) {\n      this.rgb[3] = 1;\n    }\n\n    const cValue = this.rgbToHex(this.rgb);\n    const hsv = this.rgbToHsv.apply(this, this.rgb);\n\n    if (hsv[0] !== this.hsv[0]) {\n      this.hueSlider.setProperties({\n        'value': hsv[0]\n      }, true);\n      this.hueSlider.refresh();\n    }\n\n    this.setHsvContainerBg(hsv[0]);\n\n    if (this.enableOpacity && hsv[3] !== this.hsv[3]) {\n      this.opacitySlider.setProperties({\n        'value': hsv[3] * 100\n      }, true);\n      this.opacitySlider.refresh();\n      this.updateOpacitySliderBg();\n    }\n\n    this.hsv = hsv;\n    this.setHandlerPosition();\n    this.updateInput(cValue);\n    select('.' + PREVIEW + ' .' + CURRENT, this.container).style.backgroundColor = this.convertToRgbString(this.rgb);\n    this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));\n  }\n\n  paletteClickHandler(e) {\n    e.preventDefault();\n    const target = e.target;\n\n    if (target.classList.contains(TILE)) {\n      this.removeTileSelection();\n      this.addTileSelection(target);\n\n      if (target.classList.contains(NOCOLOR)) {\n        this.noColorTile();\n      } else {\n        const cValue = target.getAttribute('aria-label');\n        const pValue = this.rgbToHex(this.rgb);\n        this.rgb = this.hexToRgb(this.roundValue(cValue));\n        this.hsv = this.rgbToHsv.apply(this, this.rgb);\n\n        if (this.getWrapper().classList.contains(SHOWVALUE)) {\n          this.updateInput(cValue);\n        }\n\n        this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));\n      }\n\n      if (!this.inline && !this.showButtons) {\n        this.closePopup(e);\n      }\n    } else {\n      if (closest(target, '.' + MODESWITCH)) {\n        this.switchToPicker();\n      } else {\n        if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {\n          this.ctrlBtnClick(target, e);\n        } else {\n          if (this.getWrapper().classList.contains(SHOWVALUE) && closest(target, '.' + FORMATSWITCH)) {\n            this.formatSwitchHandler();\n          }\n        }\n      }\n    }\n  }\n\n  noColorTile(isKey = false) {\n    const pValue = this.rgbToHex(this.rgb);\n    this.rgb = [];\n    this.hsv = [];\n    this.triggerEvent('', pValue, '', isKey);\n  }\n\n  switchToPicker() {\n    const wrapper = this.getWrapper();\n    this.trigger('beforeModeSwitch', {\n      element: this.container,\n      mode: 'Picker'\n    });\n    this.unWireEvents();\n    [].slice.call(selectAll('.' + PALETTES, this.container)).forEach(ele => {\n      detach(ele);\n    });\n\n    if (wrapper.classList.contains(SHOWVALUE)) {\n      detach(select('.' + INPUTWRAPPER, this.container));\n    }\n\n    this.container.style.width = '';\n    const grpEle = select('.e-custom-palette', this.container);\n\n    if (this.presetColors) {\n      remove(grpEle);\n    }\n\n    this.createPicker();\n    this.getDragHandler().focus();\n    this.createInput();\n    this.refreshPopupPos();\n    this.wireEvents();\n    this.trigger('onModeSwitch', {\n      element: this.container,\n      mode: 'Picker'\n    });\n  }\n\n  ctrlBtnClick(ele, e) {\n    if (ele.classList.contains(APPLY)) {\n      const cValue = this.rgbToHex(this.rgb);\n      this.triggerChangeEvent(cValue);\n    }\n\n    if (!this.inline) {\n      this.closePopup(e);\n      this.splitBtn.element.focus();\n    }\n  }\n\n  paletteKeyDown(e) {\n    const target = e.target;\n\n    if (!target.classList.contains(PALETTES)) {\n      return;\n    }\n\n    let selectedEle;\n    let idx;\n    const tiles = [].slice.call(selectAll('.' + TILE, target));\n    const prevSelectedEle = tiles.filter(tile => tile.classList.contains('e-selected')).pop();\n\n    switch (!e.altKey && e.keyCode) {\n      case 39:\n        e.preventDefault();\n        selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? -1 : 1)] : tiles[this.enableRtl ? tiles.length - 1 : 0];\n        this.keySelectionChanges(selectedEle);\n        break;\n\n      case 37:\n        e.preventDefault();\n        selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? 1 : -1)] : tiles[this.enableRtl ? 0 : tiles.length - 1];\n        this.keySelectionChanges(selectedEle);\n        break;\n\n      case 38:\n        e.preventDefault();\n        idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, -this.columns) : 0;\n        selectedEle = tiles[idx] ? tiles[idx] : tiles[idx - this.columns];\n        this.keySelectionChanges(selectedEle);\n        break;\n\n      case 40:\n        e.preventDefault();\n        idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, this.columns) : tiles.length - 1;\n\n        if (tiles[idx]) {\n          selectedEle = tiles[idx];\n        } else {\n          idx %= tiles.length;\n          idx += tiles[tiles.length - 1].parentElement.childElementCount;\n          selectedEle = tiles[idx];\n        }\n\n        this.keySelectionChanges(selectedEle);\n        break;\n\n      case 13:\n        e.preventDefault();\n\n        if (prevSelectedEle) {\n          const cValue = prevSelectedEle.getAttribute('aria-label');\n          this.enterKeyHandler(cValue ? cValue : '', e);\n        }\n\n    }\n  }\n\n  keySelectionChanges(newEle) {\n    this.removeTileSelection();\n    this.addTileSelection(newEle);\n\n    if (newEle.classList.contains(NOCOLOR)) {\n      this.noColorTile(true);\n    } else {\n      const cValue = newEle.getAttribute('aria-label');\n      const pValue = this.rgbToHex(this.rgb);\n      this.rgb = this.hexToRgb(cValue);\n      this.hsv = this.rgbToHsv.apply(this, this.rgb);\n\n      if (this.getWrapper().classList.contains(SHOWVALUE)) {\n        this.updateInput(cValue);\n      }\n\n      this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), true);\n    }\n  }\n\n  tilePosition(items, element, cIdx) {\n    items = Array.prototype.slice.call(items);\n    const n = items.length;\n    const emptyCount = this.columns - items[n - 1].parentElement.childElementCount;\n    let idx = items.indexOf(element);\n    idx += cIdx;\n\n    if (idx < 0) {\n      idx += n + emptyCount;\n    } else {\n      idx %= n + emptyCount;\n    }\n\n    return idx;\n  }\n\n  inputHandler(e) {\n    const target = e.target;\n\n    if (!target.value.length) {\n      return;\n    }\n\n    let hsv;\n    let pValue;\n    const label = select('.e-float-text', target.parentElement).textContent;\n\n    switch (label) {\n      case 'HEX':\n        {\n          let value = '';\n\n          if (target.value[0] === '#' && target.value.length !== 5 || target.value[0] !== '#' && target.value.length !== 4) {\n            value = this.roundValue(target.value);\n          }\n\n          if (value.length === 9) {\n            pValue = this.rgbToHex(this.rgb);\n            this.rgb = this.hexToRgb(value + value.substr(-2));\n            this.inputValueChange(this.rgbToHsv.apply(this, this.rgb), pValue, target.value);\n          } else {\n            return;\n          }\n\n          break;\n        }\n\n      case 'R':\n        if (this.rgb[0] !== Number(target.value)) {\n          pValue = this.rgbToHex(this.rgb);\n          this.rgb[0] = Number(target.value);\n          hsv = this.rgbToHsv.apply(this, this.rgb);\n          this.inputValueChange(hsv, pValue);\n        }\n\n        break;\n\n      case 'G':\n        if (this.rgb[1] !== Number(target.value)) {\n          pValue = this.rgbToHex(this.rgb);\n          this.rgb[1] = Number(target.value);\n          hsv = this.rgbToHsv.apply(this, this.rgb);\n          this.inputValueChange(hsv, pValue);\n        }\n\n        break;\n\n      case 'B':\n        if (this.rgb[2] !== Number(target.value)) {\n          pValue = this.rgbToHex(this.rgb);\n          this.rgb[2] = Number(target.value);\n          hsv = this.rgbToHsv.apply(this, this.rgb);\n          this.inputValueChange(hsv, pValue);\n        }\n\n        break;\n\n      case 'H':\n        this.hueSlider.value = Number(target.value);\n        break;\n\n      case 'S':\n        if (this.hsv[1] !== Number(target.value)) {\n          this.hsv[1] = Number(target.value);\n          this.updateHsv();\n          this.convertToOtherFormat();\n        }\n\n        break;\n\n      case 'V':\n        if (this.hsv[2] !== Number(target.value)) {\n          this.hsv[2] = Number(target.value);\n          this.updateHsv();\n          this.convertToOtherFormat();\n        }\n\n        break;\n\n      case 'A':\n        this.opacitySlider.value = Number(target.value);\n        break;\n    }\n  }\n\n  inputValueChange(hsv, pValue, value) {\n    if (hsv[0] !== this.hsv[0]) {\n      this.hueSlider.setProperties({\n        'value': hsv[0]\n      }, true);\n      this.hueSlider.refresh();\n      this.setHsvContainerBg(hsv[0]);\n    }\n\n    this.hsv = hsv;\n    const cValue = this.rgbToHex(this.rgb);\n    this.setHandlerPosition();\n    this.updateInput(value ? value : cValue);\n    const rgba = this.convertToRgbString(this.rgb);\n    this.updatePreview(rgba);\n    this.triggerEvent(cValue, pValue, rgba);\n  }\n\n  triggerEvent(cValue, pValue, rgba, isKey = false) {\n    const hex = cValue.slice(0, 7);\n\n    if (!this.showButtons && !isKey) {\n      this.trigger('change', {\n        currentValue: {\n          hex: hex,\n          rgba: rgba\n        },\n        previousValue: {\n          hex: this.value.slice(0, 7),\n          rgba: this.convertToRgbString(this.hexToRgb(this.value))\n        },\n        value: cValue\n      });\n      this.setProperties({\n        'value': cValue\n      }, true);\n      this.element.value = hex ? hex : '#000000';\n    } else {\n      this.trigger('select', {\n        currentValue: {\n          hex: hex,\n          rgba: rgba\n        },\n        previousValue: {\n          hex: pValue.slice(0, 7),\n          rgba: this.convertToRgbString(this.hexToRgb(pValue))\n        }\n      });\n    }\n  }\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers.\n   * Also it maintains the initial input element from the DOM.\n   *\n   * @method destroy\n   * @returns {void}\n   */\n\n\n  destroy() {\n    const wrapper = this.getWrapper();\n    super.destroy();\n    ['tabindex', 'spellcheck'].forEach(attr => {\n      this.element.removeAttribute(attr);\n    });\n\n    if (this.inline) {\n      this.unWireEvents();\n      this.destroyOtherComp();\n    } else {\n      if (this.isPopupOpen()) {\n        this.unWireEvents();\n        this.destroyOtherComp();\n      }\n\n      this.splitBtn.destroy();\n      this.splitBtn = null;\n    }\n\n    this.tileRipple();\n    this.tileRipple = null;\n    this.ctrlBtnRipple();\n    this.ctrlBtnRipple = null;\n\n    if (this.element.nextElementSibling) {\n      detach(this.element.nextElementSibling);\n    }\n\n    if (wrapper) {\n      wrapper.parentElement.insertBefore(this.element, wrapper);\n      detach(wrapper);\n    }\n\n    this.container = null;\n\n    if (this.formElement) {\n      EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n    }\n  }\n\n  destroyOtherComp() {\n    if (this.isPicker()) {\n      this.hueSlider.destroy();\n\n      if (this.enableOpacity) {\n        this.opacitySlider.destroy();\n        this.opacitySlider = null;\n      }\n\n      this.hueSlider = null;\n      const tooltipInst = this.getTooltipInst();\n      tooltipInst.close();\n      tooltipInst.destroy();\n      this.tooltipEle = null;\n    }\n  }\n\n  isPopupOpen() {\n    return this.getPopupEle().classList.contains('e-popup-open');\n  }\n\n  unWireEvents() {\n    if (this.isPicker()) {\n      const dragHandler = this.getDragHandler();\n      EventHandler.remove(dragHandler, 'keydown', this.pickerKeyDown);\n      EventHandler.remove(this.getHsvContainer(), 'mousedown touchstart', this.handlerDown);\n\n      if (this.modeSwitcher || this.showButtons) {\n        EventHandler.remove(select('.' + CTRLSWITCH, this.container), 'click', this.btnClickHandler);\n      }\n\n      EventHandler.remove(select('.' + PREVIOUS, this.container), 'click', this.previewHandler);\n    } else {\n      EventHandler.remove(this.container, 'click', this.paletteClickHandler);\n      EventHandler.remove(this.container, 'keydown', this.paletteKeyDown);\n    }\n  }\n\n  roundValue(value) {\n    if (!value) {\n      return '';\n    }\n\n    if (value[0] !== '#') {\n      value = '#' + value;\n    }\n\n    let len = value.length;\n\n    if (len === 4) {\n      value += 'f';\n      len = 5;\n    }\n\n    if (len === 5) {\n      let tempValue = '';\n\n      for (let i = 1, len = value.length; i < len; i++) {\n        tempValue += value.charAt(i) + value.charAt(i);\n      }\n\n      value = '#' + tempValue;\n      len = 9;\n    }\n\n    if (len === 7) {\n      value += 'ff';\n    }\n\n    return value;\n  }\n\n  hexToRgb(hex) {\n    if (!hex) {\n      return [];\n    }\n\n    hex = hex.trim();\n\n    if (hex.length !== 9) {\n      hex = this.roundValue(hex);\n    }\n\n    const opacity = Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2));\n    hex = hex.slice(1, 7);\n    const bigInt = parseInt(hex, 16);\n    const h = [];\n    h.push(bigInt >> 16 & 255);\n    h.push(bigInt >> 8 & 255);\n    h.push(bigInt & 255);\n    h.push(opacity);\n    return h;\n  }\n\n  rgbToHsv(r, g, b, opacity) {\n    if (this.rgb && !this.rgb.length) {\n      return [];\n    }\n\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h;\n    const v = max;\n    const d = max - min;\n    const s = max === 0 ? 0 : d / max;\n\n    if (max === min) {\n      h = 0;\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    const hsv = [Math.round(h * 360), Math.round(s * 1000) / 10, Math.round(v * 1000) / 10];\n\n    if (!isNullOrUndefined(opacity)) {\n      hsv.push(opacity);\n    }\n\n    return hsv;\n  }\n\n  hsvToRgb(h, s, v, opacity) {\n    let r;\n    let g;\n    let b;\n    s /= 100;\n    v /= 100;\n\n    if (s === 0) {\n      r = g = b = v;\n      return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), opacity];\n    }\n\n    h /= 60;\n    const i = Math.floor(h);\n    const f = h - i;\n    const p = v * (1 - s);\n    const q = v * (1 - s * f);\n    const t = v * (1 - s * (1 - f));\n\n    switch (i) {\n      case 0:\n        r = v;\n        g = t;\n        b = p;\n        break;\n\n      case 1:\n        r = q;\n        g = v;\n        b = p;\n        break;\n\n      case 2:\n        r = p;\n        g = v;\n        b = t;\n        break;\n\n      case 3:\n        r = p;\n        g = q;\n        b = v;\n        break;\n\n      case 4:\n        r = t;\n        g = p;\n        b = v;\n        break;\n\n      default:\n        r = v;\n        g = p;\n        b = q;\n    }\n\n    const rgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n\n    if (!isNullOrUndefined(opacity)) {\n      rgb.push(opacity);\n    }\n\n    return rgb;\n  }\n\n  rgbToHex(rgb) {\n    return rgb.length ? '#' + this.hex(rgb[0]) + this.hex(rgb[1]) + this.hex(rgb[2]) + (!isNullOrUndefined(rgb[3]) ? rgb[3] !== 0 ? (Math.round(rgb[3] * 255) + 0x10000).toString(16).substr(-2) : '00' : '') : '';\n  }\n\n  hex(x) {\n    return ('0' + x.toString(16)).slice(-2);\n  }\n\n  changeModeSwitcherProp(prop) {\n    const ctrlSwitchWrapper = select('.' + CTRLSWITCH, this.container);\n\n    if (prop) {\n      if (ctrlSwitchWrapper) {\n        this.appendModeSwitchBtn();\n      } else {\n        this.createCtrlBtn();\n\n        if (this.isPicker() && !this.disabled) {\n          this.addCtrlSwitchEvent();\n        }\n      }\n    } else {\n      if (ctrlSwitchWrapper) {\n        if (this.showButtons) {\n          detach(select('.' + MODESWITCH, ctrlSwitchWrapper));\n        } else {\n          remove(ctrlSwitchWrapper);\n        }\n      }\n    }\n  }\n\n  changeShowBtnProps(prop) {\n    const ctrlBtnWrapper = select('.' + CTRLSWITCH, this.container);\n\n    if (prop) {\n      if (ctrlBtnWrapper) {\n        remove(ctrlBtnWrapper);\n      }\n\n      this.createCtrlBtn();\n\n      if (this.isPicker() && !this.disabled) {\n        this.addCtrlSwitchEvent();\n      }\n    } else {\n      if (this.modeSwitcher) {\n        detach(select('.' + CTRLBTN, ctrlBtnWrapper));\n      } else {\n        remove(ctrlBtnWrapper);\n      }\n    }\n  }\n\n  changeValueProp(newProp) {\n    if (this.isPicker()) {\n      this.rgb = this.hexToRgb(newProp);\n      this.hsv = this.rgbToHsv.apply(this, this.rgb);\n      this.setHandlerPosition();\n      detach(closest(this.hueSlider.element, '.e-slider-preview'));\n      this.createSlider();\n      this.setHsvContainerBg();\n      this.updateInput(newProp);\n\n      if (this.rgb.length === 4) {\n        this.updateOpacityInput(this.rgb[3] * 100);\n      }\n    } else {\n      this.removeTileSelection();\n      const ele = this.container.querySelector('span[aria-label=\"' + this.roundValue(newProp) + '\"]');\n\n      if (ele) {\n        this.addTileSelection(ele);\n      }\n    }\n  }\n\n  setInputEleProps() {\n    remove(select('.' + INPUTWRAPPER, this.container));\n    this.createInput();\n  }\n\n  changeDisabledProp(newProp) {\n    if (this.isPicker()) {\n      this.hueSlider.enabled = !newProp;\n      this.opacitySlider.enabled = !newProp;\n      this.setInputEleProps();\n    }\n\n    if (newProp) {\n      this.toggleDisabled(true);\n      this.unWireEvents();\n    } else {\n      this.toggleDisabled(false);\n      this.wireEvents();\n    }\n  }\n\n  changeCssClassProps(newProp, oldProp) {\n    const wrapper = this.getWrapper();\n    const popupWrapper = this.getPopupEle();\n\n    if (oldProp) {\n      removeClass([wrapper, popupWrapper], oldProp.split(' '));\n    }\n\n    if (newProp) {\n      addClass([wrapper, popupWrapper], newProp.split(' '));\n    }\n  }\n\n  changeRtlProps(newProp) {\n    if (newProp) {\n      addClass([this.getWrapper()], 'e-rtl');\n    } else {\n      removeClass([this.getWrapper()], 'e-rtl');\n    }\n  }\n\n  changePaletteProps() {\n    detach(this.container.children[0]);\n    this.container.style.width = '';\n    this.createPalette();\n  }\n\n  changeOpacityProps(newProp) {\n    const wrapper = this.getWrapper();\n\n    if (newProp) {\n      removeClass([this.container.parentElement], HIDEOPACITY);\n      this.createOpacitySlider(select('.e-colorpicker-slider', this.container).appendChild(this.createElement('div', {\n        className: 'e-opacity-slider'\n      })));\n\n      if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {\n        this.appendOpacityValue(select('.e-input-container', this.container));\n      }\n    } else {\n      addClass([this.container.parentElement], HIDEOPACITY);\n      this.opacitySlider.destroy();\n      remove(this.opacitySlider.element);\n      this.opacitySlider = null;\n\n      if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {\n        remove(select('.' + OPACITY, this.container).parentElement);\n      }\n    }\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param  {ColorPickerModel} newProp - Specifies new properties\n   * @param  {ColorPickerModel} oldProp - Specifies old properties\n   * @returns {void}\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    if (!isNullOrUndefined(newProp.value)) {\n      const value = this.roundValue(newProp.value);\n\n      if (value.length === 9) {\n        this.element.value = this.roundValue(value).slice(0, 7);\n        const preview = this.splitBtn && select('.' + SPLITPREVIEW, this.splitBtn.element);\n\n        if (preview) {\n          preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(newProp.value));\n        }\n      } else {\n        this.value = oldProp.value;\n      }\n    }\n\n    if (!this.inline && isNullOrUndefined(newProp.inline)) {\n      const otherCompModel = ['disabled', 'enableRtl'];\n      this.splitBtn.setProperties(getModel(newProp, otherCompModel));\n\n      if (!this.isPopupOpen()) {\n        this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);\n        this.changeRtlProps(newProp.enableRtl);\n        return;\n      }\n    }\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'inline':\n          if (newProp.inline) {\n            this.getWrapper().appendChild(this.container);\n            this.splitBtn.destroy();\n            detach(this.element.nextElementSibling);\n\n            if (!this.container.children.length) {\n              this.createWidget();\n            }\n          } else {\n            this.destroyOtherComp();\n            this.unWireEvents();\n            this.container.innerHTML = '';\n            this.createSplitBtn();\n          }\n\n          break;\n\n        case 'cssClass':\n          {\n            this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);\n            let props = newProp.cssClass.split(' ').concat(oldProp.cssClass.split(' '));\n            props = props.reduce((a, b) => {\n              if (a.indexOf(b) < 0) {\n                a.push(b);\n              }\n\n              return a;\n            }, []);\n            let count = 0;\n            props.forEach(cls => {\n              if (count === 0 && (cls === HIDEVALUE || cls === HIDEVALUESWITCH || cls === SHOWVALUE || cls === HIDEHEX || cls === HIDERGBA)) {\n                const inputWrap = select('.' + INPUTWRAPPER, this.container);\n\n                if (inputWrap) {\n                  remove(select('.' + INPUTWRAPPER, this.container));\n                }\n\n                this.createInput();\n                count++;\n              }\n            });\n            break;\n          }\n\n        case 'enableRtl':\n          if (this.isPicker()) {\n            this.hueSlider.enableRtl = newProp.enableRtl;\n\n            if (this.enableOpacity) {\n              this.opacitySlider.enableRtl = newProp.enableRtl;\n            }\n\n            this.setInputEleProps();\n          }\n\n          this.changeRtlProps(newProp.enableRtl);\n          break;\n\n        case 'disabled':\n          this.changeDisabledProp(newProp.disabled);\n          break;\n\n        case 'value':\n          if (this.value !== oldProp.value) {\n            this.changeValueProp(newProp.value);\n          }\n\n          break;\n\n        case 'showButtons':\n          this.changeShowBtnProps(newProp.showButtons);\n          break;\n\n        case 'mode':\n          if (newProp.mode === 'Picker') {\n            this.switchToPicker();\n          } else {\n            this.switchToPalette();\n          }\n\n          break;\n\n        case 'modeSwitcher':\n          this.changeModeSwitcherProp(newProp.modeSwitcher);\n          break;\n\n        case 'columns':\n        case 'presetColors':\n          if (!this.isPicker()) {\n            this.changePaletteProps();\n          }\n\n          break;\n\n        case 'noColor':\n          if (newProp.noColor) {\n            if (this.mode === 'Palette' && !this.modeSwitcher) {\n              this.setNoColor();\n            }\n          } else {\n            this.changePaletteProps();\n          }\n\n          break;\n\n        case 'enableOpacity':\n          this.changeOpacityProps(newProp.enableOpacity);\n          break;\n      }\n    }\n  }\n  /**\n   * Sets the focus to Colorpicker\n   * its native method\n   *\n   * @public\n   * @returns {void}\n   */\n\n\n  focusIn() {\n    this.element.parentElement.focus();\n  }\n\n};\n\n__decorate$5([Property('#008000ff')], ColorPicker.prototype, \"value\", void 0);\n\n__decorate$5([Property('')], ColorPicker.prototype, \"cssClass\", void 0);\n\n__decorate$5([Property(false)], ColorPicker.prototype, \"disabled\", void 0);\n\n__decorate$5([Property('Picker')], ColorPicker.prototype, \"mode\", void 0);\n\n__decorate$5([Property(true)], ColorPicker.prototype, \"modeSwitcher\", void 0);\n\n__decorate$5([Property(null)], ColorPicker.prototype, \"presetColors\", void 0);\n\n__decorate$5([Property(true)], ColorPicker.prototype, \"showButtons\", void 0);\n\n__decorate$5([Property(10)], ColorPicker.prototype, \"columns\", void 0);\n\n__decorate$5([Property(false)], ColorPicker.prototype, \"inline\", void 0);\n\n__decorate$5([Property(false)], ColorPicker.prototype, \"noColor\", void 0);\n\n__decorate$5([Property(false)], ColorPicker.prototype, \"enablePersistence\", void 0);\n\n__decorate$5([Property(true)], ColorPicker.prototype, \"enableOpacity\", void 0);\n\n__decorate$5([Event()], ColorPicker.prototype, \"select\", void 0);\n\n__decorate$5([Event()], ColorPicker.prototype, \"change\", void 0);\n\n__decorate$5([Event()], ColorPicker.prototype, \"beforeTileRender\", void 0);\n\n__decorate$5([Event()], ColorPicker.prototype, \"beforeOpen\", void 0);\n\n__decorate$5([Event()], ColorPicker.prototype, \"open\", void 0);\n\n__decorate$5([Event()], ColorPicker.prototype, \"beforeClose\", void 0);\n\n__decorate$5([Event()], ColorPicker.prototype, \"beforeModeSwitch\", void 0);\n\n__decorate$5([Event()], ColorPicker.prototype, \"onModeSwitch\", void 0);\n\n__decorate$5([Event()], ColorPicker.prototype, \"created\", void 0);\n\nColorPicker = __decorate$5([NotifyPropertyChanges], ColorPicker);\n/**\n * ColorPicker modules\n */\n\nvar __decorate$6 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst HIDE_CLEAR = 'e-clear-icon-hide';\nconst TEXTBOX_FOCUS = 'e-input-focus';\nconst containerAttr = ['title', 'style', 'class'];\n/**\n * Represents the TextBox component that allows the user to enter the values based on it's type.\n * ```html\n * <input name='images' id='textbox'/>\n * ```\n * ```typescript\n * <script>\n *   var textboxObj = new TextBox();\n *   textboxObj.appendTo('#textbox');\n * </script>\n * ```\n */\n\nlet TextBox = class TextBox extends Component {\n  /**\n   *\n   * @param {TextBoxModel} options - Specifies the TextBox model.\n   * @param {string | HTMLInputElement | HTMLTextAreaElement} element - Specifies the element to render as component.\n   * @private\n   */\n  constructor(options, element) {\n    super(options, element);\n    this.previousValue = null;\n    this.isAngular = false;\n    this.isHiddenInput = false;\n    this.isForm = false;\n    this.inputPreviousValue = null;\n    this.isVue = false;\n    this.textboxOptions = options;\n  }\n  /**\n   * Calls internally if any of the property value is changed.\n   *\n   * @param {TextBoxModel} newProp - Returns the dynamic property value of the component.\n   * @param {TextBoxModel} oldProp - Returns the previous property value of the component.\n   * @returns {void}\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'floatLabelType':\n          Input.removeFloating(this.textboxWrapper);\n          Input.addFloating(this.respectiveElement, this.floatLabelType, this.placeholder);\n          break;\n\n        case 'enabled':\n          Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);\n          this.bindClearEvent();\n          break;\n\n        case 'width':\n          Input.setWidth(newProp.width, this.textboxWrapper.container);\n          break;\n\n        case 'value':\n          {\n            const prevOnChange = this.isProtectedOnChange;\n            this.isProtectedOnChange = true;\n\n            if (!this.isBlank(this.value)) {\n              this.value = this.value.toString();\n            }\n\n            this.isProtectedOnChange = prevOnChange;\n            Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);\n\n            if (this.isHiddenInput) {\n              this.element.value = this.respectiveElement.value;\n            }\n\n            this.inputPreviousValue = this.respectiveElement.value;\n            /* istanbul ignore next */\n\n            if ((this.isAngular || this.isVue) && this.preventChange === true) {\n              this.previousValue = this.isAngular ? this.value : this.previousValue;\n              this.preventChange = false;\n            } else if (isNullOrUndefined(this.isAngular) || !this.isAngular || this.isAngular && !this.preventChange || this.isAngular && isNullOrUndefined(this.preventChange)) {\n              this.raiseChangeEvent();\n            }\n          }\n          break;\n\n        case 'htmlAttributes':\n          {\n            this.updateHTMLAttrToElement();\n            this.updateHTMLAttrToWrapper();\n            this.checkAttributes(true);\n            Input.validateInputType(this.textboxWrapper.container, this.element);\n          }\n          break;\n\n        case 'readonly':\n          Input.setReadonly(this.readonly, this.respectiveElement);\n          break;\n\n        case 'type':\n          if (this.respectiveElement.tagName !== 'TEXTAREA') {\n            this.respectiveElement.setAttribute('type', this.type);\n            Input.validateInputType(this.textboxWrapper.container, this.element);\n            this.raiseChangeEvent();\n          }\n\n          break;\n\n        case 'showClearButton':\n          if (this.respectiveElement.tagName !== 'TEXTAREA') {\n            Input.setClearButton(this.showClearButton, this.respectiveElement, this.textboxWrapper);\n            this.bindClearEvent();\n          }\n\n          break;\n\n        case 'enableRtl':\n          Input.setEnableRtl(this.enableRtl, [this.textboxWrapper.container]);\n          break;\n\n        case 'placeholder':\n          Input.setPlaceholder(this.placeholder, this.respectiveElement);\n          break;\n\n        case 'autocomplete':\n          if (this.autocomplete !== 'on' && this.autocomplete !== '') {\n            this.respectiveElement.autocomplete = this.autocomplete;\n          } else {\n            this.removeAttributes(['autocomplete']);\n          }\n\n          break;\n\n        case 'cssClass':\n          this.updateCssClass(newProp.cssClass, oldProp.cssClass);\n          break;\n\n        case 'locale':\n          this.globalize = new Internationalization(this.locale);\n          this.l10n.setLocale(this.locale);\n          this.setProperties({\n            placeholder: this.l10n.getConstant('placeholder')\n          }, true);\n          Input.setPlaceholder(this.placeholder, this.respectiveElement);\n          break;\n      }\n    }\n  }\n  /**\n   * Gets the component name\n   *\n   * @returns {string} Returns the component name.\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'textbox';\n  }\n\n  isBlank(str) {\n    return !str || /^\\s*$/.test(str);\n  }\n\n  preRender() {\n    if (!(isBlazor() && this.isServerRendered)) {\n      this.cloneElement = this.element.cloneNode(true);\n      this.formElement = closest(this.element, 'form');\n\n      if (!isNullOrUndefined(this.formElement)) {\n        this.isForm = true;\n      }\n      /* istanbul ignore next */\n\n\n      if (this.element.tagName === 'EJS-TEXTBOX') {\n        const ejInstance = getValue('ej2_instances', this.element);\n        const inputElement = this.multiline ? this.createElement('textarea') : this.createElement('input');\n        let index = 0;\n\n        for (index; index < this.element.attributes.length; index++) {\n          const attributeName = this.element.attributes[index].nodeName;\n\n          if (attributeName !== 'id') {\n            inputElement.setAttribute(attributeName, this.element.attributes[index].nodeValue);\n            inputElement.innerHTML = this.element.innerHTML;\n\n            if (attributeName === 'name') {\n              this.element.removeAttribute('name');\n            }\n          }\n        }\n\n        this.element.appendChild(inputElement);\n        this.element = inputElement;\n        setValue('ej2_instances', ejInstance, this.element);\n      }\n\n      this.updateHTMLAttrToElement();\n      this.checkAttributes(false);\n\n      if (this.element.tagName !== 'TEXTAREA') {\n        this.element.setAttribute('type', this.type);\n      }\n\n      this.element.setAttribute('role', 'textbox');\n      this.globalize = new Internationalization(this.locale);\n      const localeText = {\n        placeholder: this.placeholder\n      };\n      this.l10n = new L10n('textbox', localeText, this.locale);\n\n      if (this.l10n.getConstant('placeholder') !== '') {\n        this.setProperties({\n          placeholder: this.placeholder || this.l10n.getConstant('placeholder')\n        }, true);\n      }\n\n      if (!this.element.hasAttribute('id')) {\n        this.element.setAttribute('id', getUniqueID('textbox'));\n      }\n\n      if (!this.element.hasAttribute('name')) {\n        this.element.setAttribute('name', this.element.getAttribute('id'));\n      }\n\n      if (this.element.tagName === 'INPUT' && this.multiline) {\n        this.isHiddenInput = true;\n        this.textarea = this.createElement('textarea');\n        this.element.parentNode.insertBefore(this.textarea, this.element);\n        this.element.setAttribute('type', 'hidden');\n        this.textarea.setAttribute('name', this.element.getAttribute('name'));\n        this.element.removeAttribute('name');\n        this.textarea.setAttribute('role', this.element.getAttribute('role'));\n        this.element.removeAttribute('role');\n        this.textarea.setAttribute('id', getUniqueID('textarea'));\n        const apiAttributes = ['placeholder', 'disabled', 'value', 'readonly', 'type', 'autocomplete'];\n\n        for (let index = 0; index < this.element.attributes.length; index++) {\n          const attributeName = this.element.attributes[index].nodeName;\n\n          if (this.element.hasAttribute(attributeName) && containerAttr.indexOf(attributeName) < 0 && !(attributeName === 'id' || attributeName === 'type' || attributeName === 'e-mappinguid')) {\n            // e-mappinguid attribute is handled for Grid component.\n            this.textarea.setAttribute(attributeName, this.element.attributes[index].nodeValue);\n\n            if (apiAttributes.indexOf(attributeName) < 0) {\n              this.element.removeAttribute(attributeName);\n              index--;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  checkAttributes(isDynamic) {\n    const attrs = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ['placeholder', 'disabled', 'value', 'readonly', 'type', 'autocomplete'];\n\n    for (const key of attrs) {\n      if (!isNullOrUndefined(this.element.getAttribute(key))) {\n        switch (key) {\n          case 'disabled':\n            if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions['enabled'] === undefined || isDynamic) {\n              const enabled = this.element.getAttribute(key) === 'disabled' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? false : true;\n              this.setProperties({\n                enabled: enabled\n              }, !isDynamic);\n            }\n\n            break;\n\n          case 'readonly':\n            if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions['readonly'] === undefined || isDynamic) {\n              const readonly = this.element.getAttribute(key) === 'readonly' || this.element.getAttribute(key) === '' || this.element.getAttribute(key) === 'true' ? true : false;\n              this.setProperties({\n                readonly: readonly\n              }, !isDynamic);\n            }\n\n            break;\n\n          case 'placeholder':\n            if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions['placeholder'] === undefined || isDynamic) {\n              this.setProperties({\n                placeholder: this.element.placeholder\n              }, !isDynamic);\n            }\n\n            break;\n\n          case 'autocomplete':\n            if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions['autocomplete'] === undefined || isDynamic) {\n              const autoCompleteTxt = this.element.autocomplete === 'off' ? 'off' : 'on';\n              this.setProperties({\n                autocomplete: autoCompleteTxt\n              }, !isDynamic);\n            }\n\n            break;\n\n          case 'value':\n            if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions['value'] === undefined || isDynamic) {\n              this.setProperties({\n                value: this.element.value\n              }, !isDynamic);\n            }\n\n            break;\n\n          case 'type':\n            if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions['type'] === undefined || isDynamic) {\n              this.setProperties({\n                type: this.element.type\n              }, !isDynamic);\n            }\n\n            break;\n        }\n      }\n    }\n  }\n  /**\n   * To Initialize the control rendering\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  render() {\n    let updatedCssClassValue = this.cssClass;\n\n    if (!isNullOrUndefined(this.cssClass) && this.cssClass !== '') {\n      updatedCssClassValue = this.getInputValidClassList(this.cssClass);\n    }\n\n    if (!(isBlazor() && this.isServerRendered)) {\n      this.respectiveElement = this.isHiddenInput ? this.textarea : this.element;\n      this.textboxWrapper = Input.createInput({\n        element: this.respectiveElement,\n        floatLabelType: this.floatLabelType,\n        properties: {\n          enabled: this.enabled,\n          enableRtl: this.enableRtl,\n          cssClass: updatedCssClassValue,\n          readonly: this.readonly,\n          placeholder: this.placeholder,\n          showClearButton: this.showClearButton\n        }\n      });\n      this.updateHTMLAttrToWrapper();\n\n      if (this.isHiddenInput) {\n        this.respectiveElement.parentNode.insertBefore(this.element, this.respectiveElement);\n      }\n    } else {\n      this.respectiveElement = this.element;\n      this.textboxWrapper = {\n        container: this.element.parentElement\n      };\n\n      if (this.showClearButton && !this.multiline) {\n        this.textboxWrapper.clearButton = this.textboxWrapper.container.querySelector('.e-clear-icon');\n        Input.wireClearBtnEvents(this.respectiveElement, this.textboxWrapper.clearButton, this.textboxWrapper.container);\n      }\n\n      if (this.floatLabelType === 'Auto') {\n        Input.wireFloatingEvents(this.respectiveElement);\n      } // eslint-disable-next-line max-len, @typescript-eslint/no-explicit-any\n\n\n      Input.bindInitialEvent({\n        element: this.respectiveElement,\n        buttons: null,\n        customTag: null,\n        floatLabelType: this.floatLabelType,\n        properties: this.properties\n      });\n    }\n\n    this.wireEvents();\n\n    if (!isNullOrUndefined(this.value)) {\n      Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);\n\n      if (this.isHiddenInput) {\n        this.element.value = this.respectiveElement.value;\n      }\n    }\n\n    if (!isNullOrUndefined(this.value)) {\n      this.initialValue = this.value;\n      this.setInitialValue();\n    }\n\n    if (this.autocomplete !== 'on' && this.autocomplete !== '') {\n      this.respectiveElement.autocomplete = this.autocomplete;\n    } else if (!isNullOrUndefined(this.textboxOptions) && this.textboxOptions['autocomplete'] !== undefined) {\n      this.removeAttributes(['autocomplete']);\n    }\n\n    this.previousValue = this.value;\n    this.inputPreviousValue = this.value;\n    this.respectiveElement.defaultValue = this.respectiveElement.value;\n    Input.setWidth(this.width, this.textboxWrapper.container);\n    this.renderComplete();\n  }\n\n  updateHTMLAttrToWrapper() {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (const key of Object.keys(this.htmlAttributes)) {\n        if (containerAttr.indexOf(key) > -1) {\n          if (key === 'class') {\n            const updatedClassValues = this.getInputValidClassList(this.htmlAttributes[key]);\n\n            if (updatedClassValues !== '') {\n              addClass([this.textboxWrapper.container], updatedClassValues.split(' '));\n            }\n          } else if (key === 'style') {\n            let setStyle = this.textboxWrapper.container.getAttribute(key);\n            setStyle = !isNullOrUndefined(setStyle) ? setStyle + this.htmlAttributes[key] : this.htmlAttributes[key];\n            this.textboxWrapper.container.setAttribute(key, setStyle);\n          } else {\n            this.textboxWrapper.container.setAttribute(key, this.htmlAttributes[key]);\n          }\n        }\n      }\n    }\n  }\n\n  updateHTMLAttrToElement() {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (const key of Object.keys(this.htmlAttributes)) {\n        if (containerAttr.indexOf(key) < 0) {\n          this.element.setAttribute(key, this.htmlAttributes[key]);\n        }\n      }\n    }\n  }\n\n  updateCssClass(newClass, oldClass) {\n    Input.setCssClass(this.getInputValidClassList(newClass), [this.textboxWrapper.container], this.getInputValidClassList(oldClass));\n  }\n\n  getInputValidClassList(inputClassName) {\n    let result = inputClassName;\n\n    if (!isNullOrUndefined(inputClassName) && inputClassName !== '') {\n      result = inputClassName.replace(/\\s+/g, ' ').trim();\n    }\n\n    return result;\n  }\n\n  setInitialValue() {\n    if (!this.isAngular) {\n      this.respectiveElement.setAttribute('value', this.initialValue);\n    }\n  }\n\n  wireEvents() {\n    EventHandler.add(this.respectiveElement, 'focus', this.focusHandler, this);\n    EventHandler.add(this.respectiveElement, 'blur', this.focusOutHandler, this);\n    EventHandler.add(this.respectiveElement, 'input', this.inputHandler, this);\n    EventHandler.add(this.respectiveElement, 'change', this.changeHandler, this);\n\n    if (this.isForm) {\n      EventHandler.add(this.formElement, 'reset', this.resetForm, this);\n    }\n\n    this.bindClearEvent();\n\n    if (!isNullOrUndefined(this.textboxWrapper.container.querySelector('.e-float-text')) && this.floatLabelType === 'Auto' && this.textboxWrapper.container.classList.contains('e-autofill') && this.textboxWrapper.container.classList.contains('e-outline')) {\n      EventHandler.add(this.textboxWrapper.container.querySelector('.e-float-text'), 'animationstart', this.animationHandler, this);\n    }\n  }\n\n  animationHandler() {\n    this.textboxWrapper.container.classList.add('e-valid-input');\n    const label = this.textboxWrapper.container.querySelector('.e-float-text');\n\n    if (!isNullOrUndefined(label)) {\n      label.classList.add('e-label-top');\n\n      if (label.classList.contains('e-label-bottom')) {\n        label.classList.remove('e-label-bottom');\n      }\n    }\n  }\n\n  resetValue(value) {\n    const prevOnChange = this.isProtectedOnChange;\n    this.isProtectedOnChange = true;\n    this.value = value;\n    this.isProtectedOnChange = prevOnChange;\n  }\n\n  resetForm() {\n    if (this.isAngular) {\n      this.resetValue('');\n    } else {\n      this.resetValue(this.initialValue);\n    }\n\n    if (!isNullOrUndefined(this.textboxWrapper)) {\n      const label = this.textboxWrapper.container.querySelector('.e-float-text');\n\n      if (!isNullOrUndefined(label)) {\n        if (isNullOrUndefined(this.initialValue) || this.initialValue === '') {\n          label.classList.add('e-label-bottom');\n          label.classList.remove('e-label-top');\n        } else if (this.initialValue !== '') {\n          label.classList.add('e-label-top');\n          label.classList.remove('e-label-bottom');\n        }\n      }\n    }\n  }\n\n  focusHandler(args) {\n    const eventArgs = {\n      container: this.textboxWrapper.container,\n      event: args,\n      value: this.value\n    };\n    this.trigger('focus', eventArgs);\n  }\n\n  focusOutHandler(args) {\n    if (!(this.previousValue === null && this.value === null && this.respectiveElement.value === '') && this.previousValue !== this.respectiveElement.value) {\n      this.raiseChangeEvent(args, true);\n    }\n\n    const eventArgs = {\n      container: this.textboxWrapper.container,\n      event: args,\n      value: this.value\n    };\n    this.trigger('blur', eventArgs);\n  }\n\n  inputHandler(args) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-this-alias\n    const textboxObj = this;\n    const eventArgs = {\n      event: args,\n      value: this.respectiveElement.value,\n      previousValue: this.inputPreviousValue,\n      container: this.textboxWrapper.container\n    };\n    this.inputPreviousValue = this.respectiveElement.value;\n    /* istanbul ignore next */\n\n    if (this.isAngular) {\n      textboxObj.localChange({\n        value: this.respectiveElement.value\n      });\n      this.preventChange = true;\n    }\n\n    if (this.isVue) {\n      this.preventChange = true;\n    }\n\n    this.trigger('input', eventArgs);\n    args.stopPropagation();\n  }\n\n  changeHandler(args) {\n    this.setProperties({\n      value: this.respectiveElement.value\n    }, true);\n    this.raiseChangeEvent(args, true);\n    args.stopPropagation();\n  }\n\n  raiseChangeEvent(event, interaction) {\n    const eventArgs = {\n      event: event,\n      value: this.value,\n      previousValue: this.previousValue,\n      container: this.textboxWrapper.container,\n      isInteraction: interaction ? interaction : false,\n      isInteracted: interaction ? interaction : false\n    };\n    this.preventChange = false;\n    this.trigger('change', eventArgs);\n    this.previousValue = this.value;\n  }\n\n  bindClearEvent() {\n    if (this.showClearButton && this.respectiveElement.tagName !== 'TEXTAREA') {\n      if (this.enabled) {\n        EventHandler.add(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler, this);\n      } else {\n        EventHandler.remove(this.textboxWrapper.clearButton, 'mousedown touchstart', this.resetInputHandler);\n      }\n    }\n  }\n\n  resetInputHandler(event) {\n    event.preventDefault();\n\n    if (!this.textboxWrapper.clearButton.classList.contains(HIDE_CLEAR)) {\n      Input.setValue('', this.respectiveElement, this.floatLabelType, this.showClearButton);\n\n      if (this.isHiddenInput) {\n        this.element.value = this.respectiveElement.value;\n      }\n\n      this.setProperties({\n        value: this.respectiveElement.value\n      }, true);\n      const eventArgs = {\n        event: event,\n        value: this.respectiveElement.value,\n        previousValue: this.inputPreviousValue,\n        container: this.textboxWrapper.container\n      };\n      this.trigger('input', eventArgs);\n      this.inputPreviousValue = this.respectiveElement.value;\n      this.raiseChangeEvent(event, true);\n    }\n  }\n\n  unWireEvents() {\n    EventHandler.remove(this.respectiveElement, 'focus', this.focusHandler);\n    EventHandler.remove(this.respectiveElement, 'blur', this.focusOutHandler);\n    EventHandler.remove(this.respectiveElement, 'input', this.inputHandler);\n    EventHandler.remove(this.respectiveElement, 'change', this.changeHandler);\n\n    if (this.isForm) {\n      EventHandler.remove(this.formElement, 'reset', this.resetForm);\n    }\n\n    if (!isNullOrUndefined(this.textboxWrapper.container.querySelector('.e-float-text')) && this.floatLabelType === 'Auto' && this.textboxWrapper.container.classList.contains('e-outline') && this.textboxWrapper.container.classList.contains('e-autofill')) {\n      EventHandler.remove(this.textboxWrapper.container.querySelector('.e-float-text'), 'animationstart', this.animationHandler);\n    }\n  }\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers.\n   * Also, it maintains the initial TextBox element from the DOM.\n   *\n   * @method destroy\n   * @returns {void}\n   */\n\n\n  destroy() {\n    this.unWireEvents();\n\n    if (!(isBlazor() && this.isServerRendered)) {\n      if (this.element.tagName === 'INPUT' && this.multiline) {\n        detach(this.textboxWrapper.container.getElementsByTagName('textarea')[0]);\n        this.respectiveElement = this.element;\n        this.element.removeAttribute('type');\n      }\n\n      this.respectiveElement.value = this.respectiveElement.defaultValue;\n      this.respectiveElement.classList.remove('e-input');\n      this.removeAttributes(['aria-placeholder', 'aria-disabled', 'aria-readonly', 'aria-labelledby']);\n\n      if (!isNullOrUndefined(this.textboxWrapper)) {\n        this.textboxWrapper.container.insertAdjacentElement('afterend', this.respectiveElement);\n        detach(this.textboxWrapper.container);\n      }\n\n      this.textboxWrapper = null;\n      super.destroy();\n    } else {\n      this.textboxWrapper = null;\n    }\n  }\n  /**\n   * Adding the icons to the TextBox component.\n   *\n   * @param { string } position - Specify the icon placement on the TextBox. Possible values are append and prepend.\n   * @param { string | string[] } icons - Icon classes which are need to add to the span element which is going to created.\n   * Span element acts as icon or button element for TextBox.\n   * @returns {void}\n   */\n\n\n  addIcon(position, icons) {\n    Input.addIcon(position, icons, this.textboxWrapper.container, this.respectiveElement, this.createElement);\n  }\n  /* eslint-disable valid-jsdoc, jsdoc/require-returns */\n\n  /**\n   * Gets the properties to be maintained in the persisted state.\n   *\n   */\n\n\n  getPersistData() {\n    const keyEntity = ['value'];\n    return this.addOnPersist(keyEntity);\n  }\n  /* eslint-enable valid-jsdoc, jsdoc/require-returns */\n\n  /**\n   * Adding the multiple attributes as key-value pair to the TextBox element.\n   *\n   * @param {string} attributes - Specifies the attributes to be add to TextBox element.\n   * @returns {void}\n   */\n\n\n  addAttributes(attributes$$1) {\n    for (const key of Object.keys(attributes$$1)) {\n      if (key === 'disabled') {\n        this.setProperties({\n          enabled: false\n        }, true);\n        Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);\n      } else if (key === 'readonly') {\n        this.setProperties({\n          readonly: true\n        }, true);\n        Input.setReadonly(this.readonly, this.respectiveElement);\n      } else if (key === 'class') {\n        this.respectiveElement.classList.add(attributes$$1[key]);\n      } else if (key === 'placeholder') {\n        this.setProperties({\n          placeholder: attributes$$1[key]\n        }, true);\n        Input.setPlaceholder(this.placeholder, this.respectiveElement);\n      } else if (key === 'rows' && this.respectiveElement.tagName === 'TEXTAREA') {\n        this.respectiveElement.setAttribute(key, attributes$$1[key]);\n      } else {\n        this.respectiveElement.setAttribute(key, attributes$$1[key]);\n      }\n    }\n  }\n  /**\n   * Removing the multiple attributes as key-value pair to the TextBox element.\n   *\n   * @param { string[] } attributes - Specifies the attributes name to be removed from TextBox element.\n   * @returns {void}\n   */\n\n\n  removeAttributes(attributes$$1) {\n    for (const key of attributes$$1) {\n      if (key === 'disabled') {\n        this.setProperties({\n          enabled: true\n        }, true);\n        Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);\n      } else if (key === 'readonly') {\n        this.setProperties({\n          readonly: false\n        }, true);\n        Input.setReadonly(this.readonly, this.respectiveElement);\n      } else if (key === 'placeholder') {\n        this.setProperties({\n          placeholder: null\n        }, true);\n        Input.setPlaceholder(this.placeholder, this.respectiveElement);\n      } else {\n        this.respectiveElement.removeAttribute(key);\n      }\n    }\n  }\n  /**\n   * Sets the focus to widget for interaction.\n   *\n   * @returns {void}\n   */\n\n\n  focusIn() {\n    if (document.activeElement !== this.respectiveElement && this.enabled) {\n      this.respectiveElement.focus();\n\n      if (this.textboxWrapper.container.classList.contains('e-input-group') || this.textboxWrapper.container.classList.contains('e-outline') || this.textboxWrapper.container.classList.contains('e-filled')) {\n        addClass([this.textboxWrapper.container], [TEXTBOX_FOCUS]);\n      }\n    }\n  }\n  /**\n   * Remove the focus from widget, if the widget is in focus state.\n   *\n   * @returns {void}\n   */\n\n\n  focusOut() {\n    if (document.activeElement === this.respectiveElement && this.enabled) {\n      this.respectiveElement.blur();\n\n      if (this.textboxWrapper.container.classList.contains('e-input-group') || this.textboxWrapper.container.classList.contains('e-outline') || this.textboxWrapper.container.classList.contains('e-filled')) {\n        removeClass([this.textboxWrapper.container], [TEXTBOX_FOCUS]);\n      }\n    }\n  }\n\n};\n\n__decorate$6([Property('text')], TextBox.prototype, \"type\", void 0);\n\n__decorate$6([Property(false)], TextBox.prototype, \"readonly\", void 0);\n\n__decorate$6([Property(null)], TextBox.prototype, \"value\", void 0);\n\n__decorate$6([Property('Never')], TextBox.prototype, \"floatLabelType\", void 0);\n\n__decorate$6([Property('')], TextBox.prototype, \"cssClass\", void 0);\n\n__decorate$6([Property(null)], TextBox.prototype, \"placeholder\", void 0);\n\n__decorate$6([Property('on')], TextBox.prototype, \"autocomplete\", void 0);\n\n__decorate$6([Property({})], TextBox.prototype, \"htmlAttributes\", void 0);\n\n__decorate$6([Property(false)], TextBox.prototype, \"multiline\", void 0);\n\n__decorate$6([Property(true)], TextBox.prototype, \"enabled\", void 0);\n\n__decorate$6([Property(false)], TextBox.prototype, \"showClearButton\", void 0);\n\n__decorate$6([Property(false)], TextBox.prototype, \"enablePersistence\", void 0);\n\n__decorate$6([Property(null)], TextBox.prototype, \"width\", void 0);\n\n__decorate$6([Event()], TextBox.prototype, \"created\", void 0);\n\n__decorate$6([Event()], TextBox.prototype, \"destroyed\", void 0);\n\n__decorate$6([Event()], TextBox.prototype, \"change\", void 0);\n\n__decorate$6([Event()], TextBox.prototype, \"blur\", void 0);\n\n__decorate$6([Event()], TextBox.prototype, \"focus\", void 0);\n\n__decorate$6([Event()], TextBox.prototype, \"input\", void 0);\n\nTextBox = __decorate$6([NotifyPropertyChanges], TextBox);\n/**\n * Uploader modules\n */\n\n/**\n * NumericTextBox all modules\n */\n\nexport { NumericTextBox, regularExpressions, createMask, applyMask, wireEvents, unwireEvents, bindClearEvent, unstrippedValue, strippedValue, maskInputMouseDownHandler, maskInputMouseUpHandler, maskInputFocusHandler, triggerFocus, maskInputBlurHandler, maskInputDropHandler, mobileRemoveFunction, setMaskValue, setElementValue, maskInput, getVal, getMaskedVal, MaskUndo, MaskedTextBox, Input, TicksData, ColorRangeData, LimitData, TooltipData, Slider, regex, ErrorOption, FormValidator, FilesProp, ButtonsProps, AsyncSettings, Uploader, ColorPicker, TextBox }; //# sourceMappingURL=ej2-inputs.es2015.js.map","map":null,"metadata":{},"sourceType":"module"}