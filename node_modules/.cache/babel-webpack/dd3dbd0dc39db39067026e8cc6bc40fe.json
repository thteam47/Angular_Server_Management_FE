{"ast":null,"code":"/**\r\n * Functionality for drawing rectangles with waved edges.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Rectangle } from \"./Rectangle\";\nimport { wavedLine } from \"../rendering/Smoothing\";\nimport * as $path from \"../rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a rectangle with waved edges.\r\n *\r\n * @see {@link IWavedRectangleEvents} for a list of available events\r\n * @see {@link IWavedRectangleAdapters} for a list of available Adapters\r\n */\n\nvar WavedRectangle = function (_super) {\n  __extends(WavedRectangle, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function WavedRectangle() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"WavedRectangle\"; // Add path element\n\n    _this.element = _this.paper.add(\"path\"); // Set defaults\n\n    _this.waveLength = 16;\n    _this.waveHeight = 4;\n    _this.tension = 0.8;\n\n    _this.setPropertyValue(\"wavedLeft\", true);\n\n    _this.setPropertyValue(\"wavedRight\", true);\n\n    _this.setPropertyValue(\"wavedTop\", true);\n\n    _this.setPropertyValue(\"wavedBottom\", true); // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Draws the waved rectangle.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  WavedRectangle.prototype.draw = function () {\n    _super.prototype.draw.call(this);\n\n    var w = this.pixelWidth;\n    var h = this.pixelHeight;\n\n    if (w > 0 && h > 0) {\n      var p1 = {\n        x: 0,\n        y: 0\n      };\n      var p2 = {\n        x: w,\n        y: 0\n      };\n      var p3 = {\n        x: w,\n        y: h\n      };\n      var p4 = {\n        x: 0,\n        y: h\n      };\n      var waveLengthH = Math.min(w, this.waveLength);\n      var waveHeightH = Math.min(h, this.waveHeight);\n      var waveLengthV = Math.min(h, this.waveLength);\n      var waveHeightV = Math.min(w, this.waveHeight);\n      var td = \"\";\n      var rd = \"\";\n      var bd = \"\";\n      var ld = \"\";\n\n      if (this.wavedTop) {\n        td = wavedLine(p1, p2, waveLengthH, waveHeightH, this.tension, true);\n      }\n\n      if (this.wavedRight) {\n        rd = wavedLine(p2, p3, waveLengthV, waveHeightV, this.tension, true);\n      }\n\n      if (this.wavedBottom) {\n        bd = wavedLine(p3, p4, waveLengthH, waveHeightH, this.tension, true);\n      }\n\n      if (this.wavedLeft) {\n        ld = wavedLine(p4, p1, waveLengthV, waveHeightV, this.tension, true);\n      }\n\n      this.path = $path.moveTo(p1) + td + $path.lineTo(p2) + rd + $path.lineTo(p3) + bd + $path.lineTo(p4) + ld + \"z\";\n    }\n  };\n\n  Object.defineProperty(WavedRectangle.prototype, \"waveLength\", {\n    /**\r\n     * @return Wave length (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveLength\");\n    },\n\n    /**\r\n     * Wave length in pixels.\r\n     *\r\n     * @default 16\r\n     * @param value  Wave length (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveLength\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedRectangle.prototype, \"waveHeight\", {\n    /**\r\n     * @return Wave height (px)\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"waveHeight\");\n    },\n\n    /**\r\n     * Wave height in pixels.\r\n     *\r\n     * @default 4\r\n     * @param value  Wave height (px)\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"waveHeight\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets which side should be waved or not. If particular side is set to\r\n   * `false`, a straight line will be drawn on that side.\r\n   *\r\n   * @param top     Top waved?\r\n   * @param right   Right side waved?\r\n   * @param bottom  Bottom Waved?\r\n   * @param left    Left side waved?\r\n   */\n\n  WavedRectangle.prototype.setWavedSides = function (top, right, bottom, left) {\n    this.wavedTop = top;\n    this.wavedRight = right;\n    this.wavedBottom = bottom;\n    this.wavedLeft = left;\n  };\n\n  Object.defineProperty(WavedRectangle.prototype, \"tension\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tension\");\n    },\n\n    /**\r\n     * Tension of the wave.\r\n     *\r\n     * @default 0.8\r\n     * @param value  Tension\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tension\", value);\n      this.invalidate();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedRectangle.prototype, \"wavedRight\", {\n    /**\r\n     * @return Wave right side?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"wavedRight\");\n    },\n\n    /**\r\n     * Specifies if right side should be waved.\r\n     *\r\n     * @default true\r\n     * @param value Waved?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"wavedRight\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedRectangle.prototype, \"wavedLeft\", {\n    /**\r\n     * @return Wave left side?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"wavedLeft\");\n    },\n\n    /**\r\n     * Specifies if left side should be waved.\r\n     *\r\n     * @default true\r\n     * @param value Waved?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"wavedLeft\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedRectangle.prototype, \"wavedTop\", {\n    /**\r\n     * @return Wave top side?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"wavedTop\");\n    },\n\n    /**\r\n     * Specifies if top side should be waved.\r\n     *\r\n     * @default true\r\n     * @param value Waved?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"wavedTop\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(WavedRectangle.prototype, \"wavedBottom\", {\n    /**\r\n     * @return Wave bottom side?\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"wavedBottom\");\n    },\n\n    /**\r\n     * Specifies if bottom side should be waved.\r\n     *\r\n     * @default true\r\n     * @param value Waved?\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"wavedBottom\", value, true);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return WavedRectangle;\n}(Rectangle);\n\nexport { WavedRectangle }; //# sourceMappingURL=WavedRectangle.js.map","map":null,"metadata":{},"sourceType":"module"}