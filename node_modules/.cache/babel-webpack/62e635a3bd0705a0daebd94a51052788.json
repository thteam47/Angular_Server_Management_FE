{"ast":null,"code":"!function (e, t) {\n  \"object\" == typeof exports && \"object\" == typeof module ? module.exports = t() : \"function\" == typeof define && define.amd ? define([], t) : \"object\" == typeof exports ? exports.FitAddon = t() : e.FitAddon = t();\n}(self, function () {\n  return (() => {\n    \"use strict\";\n\n    var e = {\n      775: (e, t) => {\n        Object.defineProperty(t, \"__esModule\", {\n          value: !0\n        }), t.FitAddon = void 0;\n\n        var r = function () {\n          function e() {}\n\n          return e.prototype.activate = function (e) {\n            this._terminal = e;\n          }, e.prototype.dispose = function () {}, e.prototype.fit = function () {\n            var e = this.proposeDimensions();\n\n            if (e && this._terminal) {\n              var t = this._terminal._core;\n              this._terminal.rows === e.rows && this._terminal.cols === e.cols || (t._renderService.clear(), this._terminal.resize(e.cols, e.rows));\n            }\n          }, e.prototype.proposeDimensions = function () {\n            if (this._terminal && this._terminal.element && this._terminal.element.parentElement) {\n              var e = this._terminal._core;\n\n              if (0 !== e._renderService.dimensions.actualCellWidth && 0 !== e._renderService.dimensions.actualCellHeight) {\n                var t = window.getComputedStyle(this._terminal.element.parentElement),\n                    r = parseInt(t.getPropertyValue(\"height\")),\n                    i = Math.max(0, parseInt(t.getPropertyValue(\"width\"))),\n                    n = window.getComputedStyle(this._terminal.element),\n                    o = r - (parseInt(n.getPropertyValue(\"padding-top\")) + parseInt(n.getPropertyValue(\"padding-bottom\"))),\n                    a = i - (parseInt(n.getPropertyValue(\"padding-right\")) + parseInt(n.getPropertyValue(\"padding-left\"))) - e.viewport.scrollBarWidth;\n                return {\n                  cols: Math.max(2, Math.floor(a / e._renderService.dimensions.actualCellWidth)),\n                  rows: Math.max(1, Math.floor(o / e._renderService.dimensions.actualCellHeight))\n                };\n              }\n            }\n          }, e;\n        }();\n\n        t.FitAddon = r;\n      }\n    },\n        t = {};\n    return function r(i) {\n      if (t[i]) return t[i].exports;\n      var n = t[i] = {\n        exports: {}\n      };\n      return e[i](n, n.exports, r), n.exports;\n    }(775);\n  })();\n}); //# sourceMappingURL=xterm-addon-fit.js.map","map":null,"metadata":{},"sourceType":"script"}