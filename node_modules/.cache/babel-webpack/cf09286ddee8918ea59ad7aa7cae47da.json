{"ast":null,"code":"/**\r\n * A collection of DOM-related functions.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Disposer } from \"./Disposer\";\nimport { readFrame, writeFrame } from \"./AsyncPending\";\nimport { options } from \"../Options\";\nimport * as $object from \"./Object\";\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n/**\r\n * SVG namespace.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport var SVGNS = \"http://www.w3.org/2000/svg\";\n/**\r\n * XML namespace.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport var XMLNS = \"http://www.w3.org/2000/xmlns/\";\n/**\r\n * XLINK namespace.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport var XLINK = \"http://www.w3.org/1999/xlink\";\n/**\r\n * Function that adds a disposable event listener directly to a DOM element.\r\n *\r\n * @ignore Exclude from docs\r\n * @param dom       A DOM element to add event to\r\n * @param type      Event type\r\n * @param listener  Event listener\r\n * @returns Disposable event\r\n */\n\nexport function addEventListener(dom, type, listener, options) {\n  //@todo proper type check for options: EventListenerOptions | boolean (TS for some reason gives error on passive parameter)\n  //console.log(type, dom);\n  dom.addEventListener(type, listener, options || false);\n  return new Disposer(function () {\n    dom.removeEventListener(type, listener, options || false);\n  });\n}\n/**\r\n * Finds and returns an element reference using following logic:\r\n * * If we pass in an element instance, we just return it back.\r\n * * If we pass in a string, the function looks for an element with such id.\r\n * * If no element with such id is found, we grab the first element with a tag name like this.\r\n *\r\n * @ignore Exclude from docs\r\n * @param el  Element definition (reference, or id, or tag name)\r\n * @return Element reference\r\n * @todo Review this function as it seems pretty fuzzy and hacky\r\n */\n\nexport function getElement(el) {\n  if ($type.isString(el)) {\n    var e = document.getElementById(el);\n\n    if (e == null) {\n      e = document.getElementsByClassName(el)[0];\n    }\n\n    if (e instanceof HTMLElement) {\n      return e;\n    }\n  } else if (el instanceof HTMLElement) {\n    return el;\n  }\n}\n/**\r\n * Adds a class name to an HTML or SVG element.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element    Element\r\n * @param className  Class name to add\r\n */\n\nexport function addClass(element, className) {\n  if (!element) {\n    return;\n  }\n\n  if (element.classList) {\n    var classes = className.split(\" \");\n    $array.each(classes, function (name) {\n      element.classList.add(name);\n    });\n  } else {\n    var currentClassName = element.getAttribute(\"class\");\n\n    if (currentClassName) {\n      element.setAttribute(\"class\", currentClassName.split(\" \").filter(function (item) {\n        return item !== className;\n      }).join(\" \") + \" \" + className);\n    } else {\n      element.setAttribute(\"class\", className);\n    } //element.className = element.className.replace(new RegExp(\"^\" + className + \"| \" + className), \"\") + \" \" + className;\n\n  }\n}\n/**\r\n * Removes a class name from an HTML or SVG element.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element    Element\r\n * @param className  Class name to add\r\n */\n\nexport function removeClass(element, className) {\n  if (!element) {\n    return;\n  }\n\n  if (element.classList) {\n    element.classList.remove(className);\n  } else {\n    var currentClassName = element.getAttribute(\"class\");\n\n    if (currentClassName) {\n      element.setAttribute(\"class\", currentClassName.split(\" \").filter(function (item) {\n        return item !== className;\n      }).join(\" \"));\n    } //element.className = element.className.replace(new RegExp(\"^\" + className + \"| \" + className), \"\");\n\n  }\n}\n/**\r\n * Sets style property on DOM element.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Still needed?\r\n */\n\nexport function setStyle(element, property, value) {\n  element.style[property] = value;\n}\n/**\r\n * Gets the computed style value for an element.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport function getComputedStyle(element, property) {\n  if (element.currentStyle) {\n    return element.currentStyle[property];\n  }\n\n  return document.defaultView.getComputedStyle(element, null).getPropertyValue(property);\n}\n/**\r\n * Removes focus from any element by shifting focus to body.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nexport function blur() {\n  if (document.activeElement && document.activeElement != document.body) {\n    if (document.activeElement.blur) {\n      document.activeElement.blur();\n    } else {\n      var input = document.createElement(\"button\");\n      input.style.position = \"fixed\";\n      input.style.top = \"0px\";\n      input.style.left = \"-10000px\";\n      document.body.appendChild(input);\n      input.focus();\n      input.blur();\n      document.body.removeChild(input);\n    }\n  }\n}\n/**\r\n * Tries to focus the element.\r\n *\r\n * @ignore Exlude from docs\r\n * @param element  Element to focus\r\n */\n\nexport function focus(element) {\n  if (element instanceof HTMLElement) {\n    element.focus();\n  } else {\n    var input = document.createElement(\"input\");\n    var fo = document.createElementNS(SVGNS, \"foreignObject\");\n    fo.appendChild(input);\n    element.appendChild(fo);\n    input.focus();\n    input.disabled = true;\n    fo.remove();\n  }\n  /*if ((<any>element).focus != undefined) {\r\n      (<any>element).focus();\r\n  }\r\n  else if (element instanceof SVGSVGElement) {\r\n      // Not implemented\r\n      // @todo implement focus fallback\r\n  }*/\n\n}\n/**\r\n * Returns markup for the element including the element tag itself.\r\n * SVG elements do not support `outerHTML` so this functions applies of\r\n * a workaround which creates a new temporary wrapper, clones element and uses\r\n * wrapper's `innerHTML`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element to get full markup for\r\n * @return Markup\r\n * @deprecated Not in use anywhere\r\n */\n\nexport function outerHTML(element) {\n  if (element.outerHTML) {\n    return element.outerHTML;\n  } else {\n    var twrap = document.createElement(\"div\");\n    var tnode = element.cloneNode(true);\n    twrap.appendChild(tnode);\n    var content = twrap.innerHTML;\n    return content;\n  }\n}\n/**\r\n * Checks if element is a valid DOM node.\r\n *\r\n * @ignore Exclude from docs\r\n * @param el  Element\r\n * @return `true` if element is a valid DOM node\r\n */\n\nexport function isElement(el) {\n  return el instanceof Object && el && el.nodeType === 1;\n}\n/**\r\n * Checks of element `a` contains element `b`.\r\n *\r\n * @param a  Aleged ascendant\r\n * @param b  Aleged descendant\r\n * @return Contains?\r\n */\n\nexport function contains(a, b) {\n  var cursor = b;\n\n  while (true) {\n    if (a === cursor) {\n      return true;\n    } else if (cursor.parentNode == null) {\n      // TODO better ShadowRoot detection\n      if (cursor.host == null) {\n        return false;\n      } else {\n        cursor = cursor.host;\n      }\n    } else {\n      cursor = cursor.parentNode;\n    }\n  }\n}\n/**\r\n * Returns the shadow root of the element or null\r\n *\r\n * @param a  Node\r\n * @return Root\r\n */\n\nexport function getShadowRoot(a) {\n  var cursor = a;\n\n  while (true) {\n    if (cursor.parentNode == null) {\n      // TODO better ShadowRoot detection\n      if (cursor.host != null) {\n        return cursor;\n      } else {\n        return null;\n      }\n    } else {\n      cursor = cursor.parentNode;\n    }\n  }\n}\n/**\r\n * Returns the root of the element (either the Document or the ShadowRoot)\r\n *\r\n * @param a  Node\r\n * @return Root\r\n */\n\nexport function getRoot(a) {\n  // TODO replace with Node.prototype.getRootNode\n  var owner = a.ownerDocument;\n  var cursor = a;\n\n  while (true) {\n    if (cursor.parentNode == null) {\n      // If the cursor is the document, or it is a ShadowRoot\n      // TODO better ShadowRoot detection\n      if (cursor === owner || cursor.host != null) {\n        return cursor;\n      } else {\n        return null;\n      }\n    } else {\n      cursor = cursor.parentNode;\n    }\n  }\n}\n/**\r\n * Gets the true target of the Event.\r\n *\r\n * This is needed to make events work with the shadow DOM.\r\n *\r\n * @param event  Event\r\n * @return EventTarget\r\n */\n\nexport function eventTarget(event) {\n  if (typeof event.composedPath === \"function\") {\n    return event.composedPath()[0];\n  } else {\n    return event.target;\n  }\n}\n/**\r\n * Copies attributes from one element to another.\r\n *\r\n * @ignore Exclude from docs\r\n * @param source  Element to copy attributes from\r\n * @param target  Element to copy attributes to\r\n */\n\nexport function copyAttributes(source, target) {\n  $array.each(source.attributes, function (attr) {\n    // TODO what if it's null ?\n    if (attr.value != null) {\n      target.setAttribute(attr.name, attr.value);\n    }\n  });\n}\n/**\r\n * [fixPixelPerfect description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param el  Element\r\n */\n\nexport function fixPixelPerfect(el) {\n  readFrame(function () {\n    // sometimes IE doesn't like this\n    // TODO figure out a way to remove this\n    try {\n      var rect = el.getBoundingClientRect();\n      var left_1 = rect.left - Math.round(rect.left);\n      var top_1 = rect.top - Math.round(rect.top);\n\n      if (left_1 !== 0) {\n        writeFrame(function () {\n          el.style.left = left_1 + \"px\";\n        });\n      }\n\n      if (top_1 !== 0) {\n        writeFrame(function () {\n          el.style.top = top_1 + \"px\";\n        });\n      }\n    } catch (e) {}\n  });\n}\n/**\r\n * [rootStylesheet description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nvar rootStylesheet;\n/**\r\n * [getStylesheet description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @return [description]\r\n */\n\nfunction getStylesheet(element) {\n  if (element == null) {\n    if (!$type.hasValue(rootStylesheet)) {\n      // TODO use createElementNS ?\n      var e = document.createElement(\"style\");\n      e.type = \"text/css\";\n\n      if (options.nonce != \"\") {\n        e.setAttribute(\"nonce\", options.nonce);\n      }\n\n      document.head.appendChild(e);\n      rootStylesheet = e.sheet;\n    }\n\n    return rootStylesheet;\n  } else {\n    // TODO use createElementNS ?\n    var e = document.createElement(\"style\");\n    e.type = \"text/css\";\n\n    if (options.nonce != \"\") {\n      e.setAttribute(\"nonce\", options.nonce);\n    }\n\n    element.appendChild(e);\n    return e.sheet;\n  }\n}\n/**\r\n * [makeStylesheet description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param selector  [description]\r\n * @return [description]\r\n */\n\n\nfunction appendStylesheet(root, selector) {\n  var index = root.cssRules.length;\n  root.insertRule(selector + \"{}\", index);\n  return root.cssRules[index];\n}\n/**\r\n * Defines a class for a CSS rule.\r\n *\r\n * Can be used to dynamically add CSS to the document.\r\n */\n\n\nvar StyleRule = function (_super) {\n  __extends(StyleRule, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param selector  CSS selector\r\n   * @param styles    An object of style attribute - value pairs\r\n   */\n\n\n  function StyleRule(element, selector, styles) {\n    var _this = this;\n\n    var root = getStylesheet(element); // TODO test this\n\n    _this = _super.call(this, function () {\n      // TODO a bit hacky\n      var index = $array.indexOf(root.cssRules, _this._rule);\n\n      if (index === -1) {\n        throw new Error(\"Could not dispose StyleRule\");\n      } else {\n        // TODO if it's empty remove it from the DOM ?\n        root.deleteRule(index);\n      }\n    }) || this;\n    _this._rule = appendStylesheet(root, selector);\n    $object.each(styles, function (key, value) {\n      _this.setStyle(key, value);\n    });\n    return _this;\n  }\n\n  Object.defineProperty(StyleRule.prototype, \"selector\", {\n    /**\r\n     * @return CSS selector\r\n     */\n    get: function () {\n      return this._rule.selectorText;\n    },\n\n    /**\r\n     * A CSS selector text.\r\n     *\r\n     * E.g.: `.myClass p`\r\n     *\r\n     * @param selector  CSS selector\r\n     */\n    set: function (selector) {\n      this._rule.selectorText = selector;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Sets the same style properties with browser-specific prefixes.\r\n   *\r\n   * @param name   Attribute name\r\n   * @param value  Attribute value\r\n   */\n\n  StyleRule.prototype._setVendorPrefixName = function (name, value) {\n    var style = this._rule.style;\n    style.setProperty(\"-webkit-\" + name, value, \"\");\n    style.setProperty(\"-moz-\" + name, value, \"\");\n    style.setProperty(\"-ms-\" + name, value, \"\");\n    style.setProperty(\"-o-\" + name, value, \"\");\n    style.setProperty(name, value, \"\");\n  };\n  /**\r\n   * Sets a value for specific style attribute.\r\n   *\r\n   * @param name   Attribute\r\n   * @param value  Value\r\n   */\n\n\n  StyleRule.prototype.setStyle = function (name, value) {\n    if (name === \"transition\") {\n      this._setVendorPrefixName(name, value);\n    } else {\n      this._rule.style.setProperty(name, value, \"\");\n    }\n  };\n\n  return StyleRule;\n}(Disposer);\n\nexport { StyleRule };\n/**\r\n * An internal counter for unique style ids.\r\n *\r\n * @ignore Exclude from docs\r\n */\n\nvar styleId = 0;\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\n\nvar StyleClass = function (_super) {\n  __extends(StyleClass, _super);\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param styles  An object of style attribute - value pairs\r\n   * @param name    Class name\r\n   */\n\n\n  function StyleClass(element, styles, name) {\n    var _this = this;\n\n    var className = !$type.hasValue(name) // TODO generate the classname randomly\n    ? \"__style_\" + ++styleId + \"__\" : name;\n    _this = _super.call(this, element, \".\" + className, styles) || this;\n    _this._className = className;\n    return _this;\n  }\n\n  Object.defineProperty(StyleClass.prototype, \"className\", {\n    /**\r\n     * @return Class name\r\n     */\n    get: function () {\n      return this._className;\n    },\n\n    /**\r\n     * Class name.\r\n     *\r\n     * @param name  Class name\r\n     */\n    set: function (name) {\n      this._className = name;\n      this.selector = \".\" + name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts the whole class to\r\n   * @ignore Exclude from docs\r\n   */\n\n  StyleClass.prototype.toString = function () {\n    return this._className;\n  };\n\n  return StyleClass;\n}(StyleRule);\n\nexport { StyleClass };\nexport function ready(f) {\n  if (document.readyState !== \"loading\") {\n    f();\n  } else {\n    var listener_1 = function () {\n      if (document.readyState !== \"loading\") {\n        document.removeEventListener(\"readystatechange\", listener_1);\n        f();\n      }\n    };\n\n    document.addEventListener(\"readystatechange\", listener_1);\n  }\n}\n/**\r\n * Returns a font fmaily name for the element (directly set or\r\n * computed/inherited).\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element\r\n * @return Font family\r\n */\n\nexport function findFont(element) {\n  // Check if element has styles set\n  var font = getComputedStyle(element, \"font-family\");\n\n  if (!font) {\n    // Completely transparent. Look for a parent\n    var parent_1 = element.parentElement || element.parentNode;\n\n    if (parent_1) {\n      return findFont(parent_1);\n    } else {\n      return undefined;\n    }\n  } else {\n    return font;\n  }\n}\n/**\r\n * Returns a font fmaily name for the element (directly set or\r\n * computed/inherited).\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element\r\n * @return Font family\r\n */\n\nexport function findFontSize(element) {\n  // Check if element has styles set\n  var font = getComputedStyle(element, \"font-size\");\n\n  if (!font) {\n    // Completely transparent. Look for a parent\n    var parent_2 = element.parentElement || element.parentNode;\n\n    if (parent_2) {\n      return findFontSize(parent_2);\n    } else {\n      return undefined;\n    }\n  } else {\n    return font;\n  }\n}\n/**\r\n * Checks whether element is not visible, whether directly or via its\r\n * ascendants.\r\n *\r\n * @param   element  Target element\r\n * @return           Hidden?\r\n */\n\nexport function isHidden(element) {\n  return element.offsetParent === null;\n}\n/**\r\n * Checks wthether element is in the current viewport.\r\n *\r\n * @since 2.5.5\r\n * @param   el Element\r\n * @return     Within viewport?\r\n */\n\nexport function isElementInViewport(el, viewportTarget) {\n  // Get position data of the element\n  var rect = el.getBoundingClientRect(); // Convert to array\n\n  var targets = $type.isArray(viewportTarget) ? viewportTarget : viewportTarget ? [viewportTarget] : []; // Should we measure against specific viewport element?\n\n  if (targets.length) {\n    for (var i = 0; i < targets.length; i++) {\n      var target = targets[i]; // Check if viewport itself is visible\n\n      if (!isElementInViewport(target)) {\n        return false;\n      } // Check if element is visible within the viewport\n\n\n      var viewportRect = target.getBoundingClientRect();\n\n      if (rect.top >= 0 && rect.left >= 0 && rect.top <= viewportRect.top + viewportRect.height && rect.left <= viewportRect.left + viewportRect.width) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return rect.top >= 0 && rect.left >= 0 && rect.top <= (window.innerHeight || document.documentElement.clientHeight) && rect.left <= (window.innerWidth || document.documentElement.clientWidth);\n} //# sourceMappingURL=DOM.js.map","map":null,"metadata":{},"sourceType":"module"}