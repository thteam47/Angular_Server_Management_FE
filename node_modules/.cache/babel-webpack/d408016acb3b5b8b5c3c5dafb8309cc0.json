{"ast":null,"code":"/**\r\n * Zoom out button functionality.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Button } from \"./Button\";\nimport { Sprite } from \"../Sprite\";\nimport { registry } from \"../Registry\";\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\nimport * as $path from \"../rendering/Path\";\nimport * as $type from \"../../core/utils/Type\";\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Creates a zoom out button.\r\n *\r\n * @see {@link ICloseButtonEvents} for a list of available events\r\n * @see {@link ICloseButtonAdapters} for a list of available Adapters\r\n */\n\nvar CloseButton = function (_super) {\n  __extends(CloseButton, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function CloseButton() {\n    var _this = // Init\n    _super.call(this) || this;\n\n    _this.className = \"CloseButton\";\n\n    _this.padding(8, 8, 8, 8);\n\n    _this.showSystemTooltip = true;\n    _this.width = 30;\n    _this.height = 30;\n    var interfaceColors = new InterfaceColorSet();\n    _this.cursorOverStyle = MouseCursorStyle.pointer;\n    var background = _this.background;\n    background.cornerRadius(20, 20, 20, 20);\n    var bgc = interfaceColors.getFor(\"background\");\n    background.fill = bgc;\n    background.stroke = interfaceColors.getFor(\"primaryButton\");\n    background.strokeOpacity = 1;\n    background.strokeWidth = 1;\n    var downColor = interfaceColors.getFor(\"primaryButtonActive\");\n    var bhs = background.states.getKey(\"hover\");\n    bhs.properties.strokeWidth = 3;\n    bhs.properties.fill = bgc;\n    var bds = background.states.getKey(\"down\");\n    bds.properties.stroke = downColor;\n    bds.properties.fill = bgc; // Create an icon\n\n    var icon = new Sprite();\n    icon.element = _this.paper.add(\"path\");\n    icon.stroke = background.stroke;\n    _this.icon = icon; // Apply theme\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  CloseButton.prototype.validate = function () {\n    _super.prototype.validate.call(this);\n\n    var w = this.pixelWidth / 3;\n    var h = this.pixelHeight / 3;\n    var path = $path.moveTo({\n      x: -w / 2,\n      y: -h / 2\n    });\n    path += $path.lineTo({\n      x: w / 2,\n      y: h / 2\n    });\n    path += $path.moveTo({\n      x: w / 2,\n      y: -h / 2\n    });\n    path += $path.lineTo({\n      x: -w / 2,\n      y: h / 2\n    });\n    this.icon.path = path;\n    this.invalidateLayout();\n  };\n  /**\r\n   * Sets defaults that instantiate some objects that rely on parent, so they\r\n   * cannot be set in constructor.\r\n   */\n\n\n  CloseButton.prototype.applyInternalDefaults = function () {\n    _super.prototype.applyInternalDefaults.call(this);\n\n    if (!$type.hasValue(this.readerTitle)) {\n      this.readerTitle = this.language.translate(\"Close\");\n    }\n  };\n\n  return CloseButton;\n}(Button);\n\nexport { CloseButton };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"CloseButton\"] = CloseButton; //# sourceMappingURL=CloseButton.js.map","map":null,"metadata":{},"sourceType":"module"}