{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { dataLoader } from \"./DataLoader\";\nimport { JSONParser } from \"./JSONParser\";\nimport { CSVParser } from \"./CSVParser\";\nimport { BaseObjectEvents } from \"../Base\";\nimport { Adapter } from \"../utils/Adapter\";\nimport { Language } from \"../utils/Language\";\nimport { DateFormatter } from \"../formatters/DateFormatter\";\nimport { registry } from \"../Registry\";\nimport * as $type from \"../utils/Type\";\nimport * as $object from \"../utils/Object\";\n;\n;\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Represents a single data source - external file with all of its settings,\r\n * such as format, data parsing, etc.\r\n *\r\n * ```TypeScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JavaScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"dataSource\": {\r\n *     \"url\": \"http://www.myweb.com/data.json\",\r\n *     \"parser\": \"JSONParser\"\r\n *   },\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @see {@link IDataSourceEvents} for a list of available events\r\n * @see {@link IDataSourceAdapters} for a list of available Adapters\r\n */\n\nvar DataSource =\n/** @class */\nfunction (_super) {\n  __extends(DataSource, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function DataSource(url, parser) {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Adapter.\r\n     */\n\n\n    _this.adapter = new Adapter(_this);\n    /**\r\n     * Custom options for HTTP(S) request.\r\n     */\n\n    _this._requestOptions = {};\n    /**\r\n     * If set to `true`, any subsequent data loads will be considered incremental\r\n     * (containing only new data points that are supposed to be added to existing\r\n     * data).\r\n     *\r\n     * NOTE: this setting works only with element's `data` property. It won't\r\n     * work with any other externally-loadable data property.\r\n     *\r\n     * @default false\r\n     */\n\n    _this._incremental = false;\n    /**\r\n     * A collection of key/value pairs to attach to a data source URL when making\r\n     * an incremental request.\r\n     */\n\n    _this._incrementalParams = {};\n    /**\r\n     * This setting is used only when `incremental = true`. If set to `true`,\r\n     * it will try to retain the same number of data items across each load.\r\n     *\r\n     * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n     * beginning of data will be removed so that we end up with the same number\r\n     * of data items.\r\n     *\r\n     * @default false\r\n     */\n\n    _this._keepCount = false;\n    /**\r\n     * If set to `true`, each subsequent load will be treated as an update to\r\n     * currently loaded data, meaning that it will try to update values on\r\n     * existing data items, not overwrite the whole data.\r\n     *\r\n     * This will work faster than complete update, and also will animate the\r\n     * values to their new positions.\r\n     *\r\n     * Data sources across loads must contain the same number of data items.\r\n     *\r\n     * Loader will not truncate the data set if loaded data has fewer data items,\r\n     * and if it is longer, the excess data items will be ignored.\r\n     *\r\n     * @default false\r\n     * @since 4.5.5\r\n     */\n\n    _this._updateCurrentData = false;\n    /**\r\n     * Will show loading indicator when loading files.\r\n     */\n\n    _this.showPreloader = true;\n    _this.className = \"DataSource\"; // Set defaults\n\n    if (url) {\n      _this.url = url;\n    } // Set parser\n\n\n    if (parser) {\n      if (typeof parser == \"string\") {\n        _this.parser = dataLoader.getParserByType(parser);\n      } else {\n        _this.parser = parser;\n      }\n    }\n\n    return _this;\n  }\n  /**\r\n   * Processes the loaded data.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param data         Raw (unparsed) data\r\n   * @param contentType  Content type of the loaded data (optional)\r\n   */\n\n\n  DataSource.prototype.processData = function (data, contentType) {\n    // Parsing started\n    this.dispatchImmediately(\"parsestarted\"); // Check if parser is set\n\n    if (!this.parser) {\n      // Try to resolve from data\n      this.parser = dataLoader.getParserByData(data, contentType);\n\n      if (!this.parser) {\n        // We have a problem - nobody knows what to do with the data\n        // Raise error\n        if (this.events.isEnabled(\"parseerror\")) {\n          var event_1 = {\n            type: \"parseerror\",\n            message: this.language.translate(\"No parser available for file: %1\", null, this.url),\n            target: this\n          };\n          this.events.dispatchImmediately(\"parseerror\", event_1);\n        }\n\n        this.dispatchImmediately(\"parseended\");\n        return;\n      }\n    } // Apply options adapters\n\n\n    this.parser.options = this.adapter.apply(\"parserOptions\", this.parser.options);\n    this.parser.options.dateFields = this.adapter.apply(\"dateFields\", this.parser.options.dateFields || []);\n    this.parser.options.numberFields = this.adapter.apply(\"numberFields\", this.parser.options.numberFields || []); // Check if we need to pass in date formatter\n\n    if (this.parser.options.dateFields && !this.parser.options.dateFormatter) {\n      this.parser.options.dateFormatter = this.dateFormatter;\n    } // Parse\n\n\n    this.data = this.adapter.apply(\"parsedData\", this.parser.parse(this.adapter.apply(\"unparsedData\", data))); // Check for parsing errors\n\n    if (!$type.hasValue(this.data) && this.events.isEnabled(\"parseerror\")) {\n      var event_2 = {\n        type: \"parseerror\",\n        message: this.language.translate(\"Error parsing file: %1\", null, this.url),\n        target: this\n      };\n      this.events.dispatchImmediately(\"parseerror\", event_2);\n    } // Wrap up\n\n\n    this.dispatchImmediately(\"parseended\");\n\n    if ($type.hasValue(this.data)) {\n      this.dispatchImmediately(\"done\", {\n        \"data\": this.data\n      });\n    } // The component is responsible for updating its own data vtriggered via\n    // events.\n    // Update last data load\n\n\n    this.lastLoad = new Date();\n  };\n\n  Object.defineProperty(DataSource.prototype, \"url\", {\n    /**\r\n     * @return URL\r\n     */\n    get: function () {\n      // Get URL\n      var url = this.disableCache ? this.timestampUrl(this._url) : this._url; // Add incremental params\n\n      if (this.incremental && this.component.data.length) {\n        url = this.addUrlParams(url, this.incrementalParams);\n      }\n\n      return this.adapter.apply(\"url\", url);\n    },\n\n    /**\r\n     * URL of the data source.\r\n     *\r\n     * @param value  URL\r\n     */\n    set: function (value) {\n      this._url = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"requestOptions\", {\n    /**\r\n     * @return Options\r\n     */\n    get: function () {\n      return this.adapter.apply(\"requestOptions\", this._requestOptions);\n    },\n\n    /**\r\n     * Custom options for HTTP(S) request.\r\n     *\r\n     * At this moment the only option supported is: `requestHeaders`, which holds\r\n     * an array of objects for custom request headers, e.g.:\r\n     *\r\n     * ```TypeScript\r\n     * chart.dataSource.requestOptions.requestHeaders = [{\r\n     *   \"key\": \"x-access-token\",\r\n     *   \"value\": \"123456789\"\r\n     * }];\r\n     * ``````JavaScript\r\n     * chart.dataSource.requestOptions.requestHeaders = [{\r\n     *   \"key\": \"x-access-token\",\r\n     *   \"value\": \"123456789\"\r\n     * }];\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"dataSource\": {\r\n     *     // ...\r\n     *     \"requestOptions\": {\r\n     *       \"requestHeaders\": [{\r\n     *         \"key\": \"x-access-token\",\r\n     *         \"value\": \"123456789\"\r\n     *       }]\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * NOTE: setting this options on an-already loaded DataSource will not\r\n     * trigger a reload.\r\n     *\r\n     * @param value  Options\r\n     */\n    set: function (value) {\n      this._requestOptions = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"parser\", {\n    /**\r\n     * @return Data parser\r\n     */\n    get: function () {\n      if (!this._parser) {\n        this._parser = new JSONParser();\n      }\n\n      return this.adapter.apply(\"parser\", this._parser);\n    },\n\n    /**\r\n     * A parser to be used to parse data.\r\n     *\r\n     * ```TypeScript\r\n     * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n     * chart.dataSource.parser = am4core.JSONParser;\r\n     * ```\r\n     * ```JavaScript\r\n     * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n     * chart.dataSource.parser = am4core.JSONParser;\r\n     * ```\r\n     * ```JSON\r\n     * {\r\n     *   // ...\r\n     *   \"dataSource\": {\r\n     *     \"url\": \"http://www.myweb.com/data.json\",\r\n     *     \"parser\": {\r\n     *       \"type\": \"JSONParser\"\r\n     *     }\r\n     *   },\r\n     *   // ...\r\n     * }\r\n     * ```\r\n     *\r\n     * @default JSONParser\r\n     * @param value  Data parser\r\n     */\n    set: function (value) {\n      this._parser = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"reloadFrequency\", {\n    /**\r\n     * @return Reload frequency (ms)\r\n     */\n    get: function () {\n      return this.adapter.apply(\"reloadTimeout\", this._reloadFrequency);\n    },\n\n    /**\r\n     * Data source reload frequency.\r\n     *\r\n     * If set, it will reload the same URL every X milliseconds.\r\n     *\r\n     * @param value Reload frequency (ms)\r\n     */\n    set: function (value) {\n      var _this = this;\n\n      if (this._reloadFrequency != value) {\n        this._reloadFrequency = value; // Should we schedule a reload?\n\n        if (value) {\n          if (!$type.hasValue(this._reloadDisposer)) {\n            this._reloadDisposer = this.events.on(\"ended\", function (ev) {\n              _this._reloadTimeout = setTimeout(function () {\n                _this.load();\n              }, _this.reloadFrequency);\n            });\n          }\n        } else if ($type.hasValue(this._reloadDisposer)) {\n          this._reloadDisposer.dispose();\n\n          this._reloadDisposer = undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"incremental\", {\n    /**\r\n     * @return Incremental load?\r\n     */\n    get: function () {\n      return this.adapter.apply(\"incremental\", this._incremental);\n    },\n\n    /**\r\n     * Should subsequent reloads be treated as incremental?\r\n     *\r\n     * Incremental loads will assume that they contain only new data items\r\n     * since the last load.\r\n     *\r\n     * If `incremental = false` the loader will replace all of the target's\r\n     * data with each load.\r\n     *\r\n     * This setting does not have any effect trhe first time data is loaded.\r\n     *\r\n     * NOTE: this setting works only with element's `data` property. It won't\r\n     * work with any other externally-loadable data property.\r\n     *\r\n     * @default false\r\n     * @param Incremental load?\r\n     */\n    set: function (value) {\n      this._incremental = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"incrementalParams\", {\n    /**\r\n     * @return Incremental request parameters\r\n     */\n    get: function () {\n      return this.adapter.apply(\"incrementalParams\", this._incrementalParams);\n    },\n\n    /**\r\n     * An object consisting of key/value pairs to apply to an URL when data\r\n     * source is making an incremental request.\r\n     *\r\n     * @param value  Incremental request parameters\r\n     */\n    set: function (value) {\n      this._incrementalParams = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"keepCount\", {\n    /**\r\n     * @return keepCount load?\r\n     */\n    get: function () {\n      return this.adapter.apply(\"keepCount\", this._keepCount);\n    },\n\n    /**\r\n     * This setting is used only when `incremental = true`. If set to `true`,\r\n     * it will try to retain the same number of data items across each load.\r\n     *\r\n     * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n     * beginning of data will be removed so that we end up with the same number\r\n     * of data items.\r\n     *\r\n     * @default false\r\n     * @param Keep record count?\r\n     */\n    set: function (value) {\n      this._keepCount = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"updateCurrentData\", {\n    /**\r\n     * @return Update current data?\r\n     */\n    get: function () {\n      return this.adapter.apply(\"updateCurrentData\", this._updateCurrentData);\n    },\n\n    /**\r\n     * If set to `true`, each subsequent load will be treated as an update to\r\n     * currently loaded data, meaning that it will try to update values on\r\n     * existing data items, not overwrite the whole data.\r\n     *\r\n     * This will work faster than complete update, and also will animate the\r\n     * values to their new positions.\r\n     *\r\n     * Data sources across loads must contain the same number of data items.\r\n     *\r\n     * Loader will not truncate the data set if loaded data has fewer data items,\r\n     * and if it is longer, the excess data items will be ignored.\r\n     *\r\n     * NOTE: this setting is ignored if `incremental = true`.\r\n     *\r\n     * @default false\r\n     * @since 2.5.5\r\n     * @param Update current data?\r\n     */\n    set: function (value) {\n      this._updateCurrentData = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"language\", {\n    /**\r\n     * @return A [[Language]] instance to be used\r\n     */\n    get: function () {\n      if (this._language) {\n        return this._language;\n      } else if (this.component) {\n        this._language = this.component.language;\n        return this._language;\n      }\n\n      this.language = new Language();\n      return this.language;\n    },\n\n    /**\r\n     * Language instance to use.\r\n     *\r\n     * Will inherit and use chart's language, if not set.\r\n     *\r\n     * @param value An instance of Language\r\n     */\n    set: function (value) {\n      this._language = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DataSource.prototype, \"dateFormatter\", {\n    /**\r\n     * @return A [[DateFormatter]] instance to be used\r\n     */\n    get: function () {\n      if (this._dateFormatter) {\n        return this._dateFormatter;\n      } else if (this.component) {\n        this._dateFormatter = this.component.dateFormatter;\n        return this._dateFormatter;\n      }\n\n      this.dateFormatter = new DateFormatter();\n      return this.dateFormatter;\n    },\n\n    /**\r\n     * A [[DateFormatter]] to use when parsing dates from string formats.\r\n     *\r\n     * Will inherit and use chart's DateFormatter if not ser.\r\n     *\r\n     * @param value An instance of [[DateFormatter]]\r\n     */\n    set: function (value) {\n      this._dateFormatter = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Adds current timestamp to the URL.\r\n   *\r\n   * @param url  Source URL\r\n   * @return Timestamped URL\r\n   */\n\n  DataSource.prototype.timestampUrl = function (url) {\n    var tstamp = new Date().getTime().toString();\n    var params = {};\n    params[tstamp] = \"\";\n    return this.addUrlParams(url, params);\n  };\n  /**\r\n   * Disposes of this object.\r\n   */\n\n\n  DataSource.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this._reloadTimeout) {\n      clearTimeout(this._reloadTimeout);\n    }\n\n    if ($type.hasValue(this._reloadDisposer)) {\n      this._reloadDisposer.dispose();\n\n      this._reloadDisposer = undefined;\n    }\n  };\n  /**\r\n   * Initiate the load.\r\n   *\r\n   * All loading in JavaScript is asynchronous. This function will trigger the\r\n   * load and will exit immediately.\r\n   *\r\n   * Use DataSource's events to watch for loaded data and errors.\r\n   */\n\n\n  DataSource.prototype.load = function () {\n    if (this.url) {\n      if (this._reloadTimeout) {\n        clearTimeout(this._reloadTimeout);\n      }\n\n      dataLoader.load(this);\n    }\n  };\n  /**\r\n   * Adds parameters to `url` as query strings. Will take care of proper\r\n   * separators.\r\n   *\r\n   * @param url     Source URL\r\n   * @param params  Parameters\r\n   * @return New URL\r\n   */\n\n\n  DataSource.prototype.addUrlParams = function (url, params) {\n    var join = url.match(/\\?/) ? \"&\" : \"?\";\n    var add = [];\n    $object.each(params, function (key, value) {\n      if (value != \"\") {\n        add.push(key + \"=\" + encodeURIComponent(value));\n      } else {\n        add.push(key);\n      }\n    });\n\n    if (add.length) {\n      return url + join + add.join(\"&\");\n    }\n\n    return url;\n  };\n  /**\r\n   * Processes JSON-based config before it is applied to the object.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param config  Config\r\n   */\n\n\n  DataSource.prototype.processConfig = function (config) {\n    registry.registeredClasses[\"json\"] = JSONParser;\n    registry.registeredClasses[\"JSONParser\"] = JSONParser;\n    registry.registeredClasses[\"csv\"] = CSVParser;\n    registry.registeredClasses[\"CSVParser\"] = CSVParser;\n\n    _super.prototype.processConfig.call(this, config);\n  };\n\n  return DataSource;\n}(BaseObjectEvents);\n\nexport { DataSource };","map":{"version":3,"names":["__extends","dataLoader","JSONParser","CSVParser","BaseObjectEvents","Adapter","Language","DateFormatter","registry","$type","$object","DataSource","_super","url","parser","_this","call","adapter","_requestOptions","_incremental","_incrementalParams","_keepCount","_updateCurrentData","showPreloader","className","getParserByType","prototype","processData","data","contentType","dispatchImmediately","getParserByData","events","isEnabled","event_1","type","message","language","translate","target","options","apply","dateFields","numberFields","dateFormatter","parse","hasValue","event_2","lastLoad","Date","Object","defineProperty","get","disableCache","timestampUrl","_url","incremental","component","length","addUrlParams","incrementalParams","set","value","enumerable","configurable","_parser","_reloadFrequency","_reloadDisposer","on","ev","_reloadTimeout","setTimeout","load","reloadFrequency","dispose","undefined","_language","_dateFormatter","tstamp","getTime","toString","params","clearTimeout","join","match","add","each","key","push","encodeURIComponent","processConfig","config","registeredClasses"],"sources":["/home/unutu/go/src/github.com/thteam47/admin-portal/node_modules/@amcharts/amcharts4/.internal/core/data/DataSource.js"],"sourcesContent":["import { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { dataLoader } from \"./DataLoader\";\r\nimport { JSONParser } from \"./JSONParser\";\r\nimport { CSVParser } from \"./CSVParser\";\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { Adapter } from \"../utils/Adapter\";\r\nimport { Language } from \"../utils/Language\";\r\nimport { DateFormatter } from \"../formatters/DateFormatter\";\r\nimport { registry } from \"../Registry\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $object from \"../utils/Object\";\r\n;\r\n;\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a single data source - external file with all of its settings,\r\n * such as format, data parsing, etc.\r\n *\r\n * ```TypeScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JavaScript\r\n * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n * chart.dataSource.parser = am4core.JSONParser;\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"dataSource\": {\r\n *     \"url\": \"http://www.myweb.com/data.json\",\r\n *     \"parser\": \"JSONParser\"\r\n *   },\r\n *   // ...\r\n * }\r\n * ```\r\n *\r\n * @see {@link IDataSourceEvents} for a list of available events\r\n * @see {@link IDataSourceAdapters} for a list of available Adapters\r\n */\r\nvar DataSource = /** @class */ (function (_super) {\r\n    __extends(DataSource, _super);\r\n    /**\r\n     * Constructor\r\n     */\r\n    function DataSource(url, parser) {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Adapter.\r\n         */\r\n        _this.adapter = new Adapter(_this);\r\n        /**\r\n         * Custom options for HTTP(S) request.\r\n         */\r\n        _this._requestOptions = {};\r\n        /**\r\n         * If set to `true`, any subsequent data loads will be considered incremental\r\n         * (containing only new data points that are supposed to be added to existing\r\n         * data).\r\n         *\r\n         * NOTE: this setting works only with element's `data` property. It won't\r\n         * work with any other externally-loadable data property.\r\n         *\r\n         * @default false\r\n         */\r\n        _this._incremental = false;\r\n        /**\r\n         * A collection of key/value pairs to attach to a data source URL when making\r\n         * an incremental request.\r\n         */\r\n        _this._incrementalParams = {};\r\n        /**\r\n         * This setting is used only when `incremental = true`. If set to `true`,\r\n         * it will try to retain the same number of data items across each load.\r\n         *\r\n         * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n         * beginning of data will be removed so that we end up with the same number\r\n         * of data items.\r\n         *\r\n         * @default false\r\n         */\r\n        _this._keepCount = false;\r\n        /**\r\n         * If set to `true`, each subsequent load will be treated as an update to\r\n         * currently loaded data, meaning that it will try to update values on\r\n         * existing data items, not overwrite the whole data.\r\n         *\r\n         * This will work faster than complete update, and also will animate the\r\n         * values to their new positions.\r\n         *\r\n         * Data sources across loads must contain the same number of data items.\r\n         *\r\n         * Loader will not truncate the data set if loaded data has fewer data items,\r\n         * and if it is longer, the excess data items will be ignored.\r\n         *\r\n         * @default false\r\n         * @since 4.5.5\r\n         */\r\n        _this._updateCurrentData = false;\r\n        /**\r\n         * Will show loading indicator when loading files.\r\n         */\r\n        _this.showPreloader = true;\r\n        _this.className = \"DataSource\";\r\n        // Set defaults\r\n        if (url) {\r\n            _this.url = url;\r\n        }\r\n        // Set parser\r\n        if (parser) {\r\n            if (typeof parser == \"string\") {\r\n                _this.parser = dataLoader.getParserByType(parser);\r\n            }\r\n            else {\r\n                _this.parser = parser;\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Processes the loaded data.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param data         Raw (unparsed) data\r\n     * @param contentType  Content type of the loaded data (optional)\r\n     */\r\n    DataSource.prototype.processData = function (data, contentType) {\r\n        // Parsing started\r\n        this.dispatchImmediately(\"parsestarted\");\r\n        // Check if parser is set\r\n        if (!this.parser) {\r\n            // Try to resolve from data\r\n            this.parser = dataLoader.getParserByData(data, contentType);\r\n            if (!this.parser) {\r\n                // We have a problem - nobody knows what to do with the data\r\n                // Raise error\r\n                if (this.events.isEnabled(\"parseerror\")) {\r\n                    var event_1 = {\r\n                        type: \"parseerror\",\r\n                        message: this.language.translate(\"No parser available for file: %1\", null, this.url),\r\n                        target: this\r\n                    };\r\n                    this.events.dispatchImmediately(\"parseerror\", event_1);\r\n                }\r\n                this.dispatchImmediately(\"parseended\");\r\n                return;\r\n            }\r\n        }\r\n        // Apply options adapters\r\n        this.parser.options = this.adapter.apply(\"parserOptions\", this.parser.options);\r\n        this.parser.options.dateFields = this.adapter.apply(\"dateFields\", this.parser.options.dateFields || []);\r\n        this.parser.options.numberFields = this.adapter.apply(\"numberFields\", this.parser.options.numberFields || []);\r\n        // Check if we need to pass in date formatter\r\n        if (this.parser.options.dateFields && !this.parser.options.dateFormatter) {\r\n            this.parser.options.dateFormatter = this.dateFormatter;\r\n        }\r\n        // Parse\r\n        this.data = this.adapter.apply(\"parsedData\", this.parser.parse(this.adapter.apply(\"unparsedData\", data)));\r\n        // Check for parsing errors\r\n        if (!$type.hasValue(this.data) && this.events.isEnabled(\"parseerror\")) {\r\n            var event_2 = {\r\n                type: \"parseerror\",\r\n                message: this.language.translate(\"Error parsing file: %1\", null, this.url),\r\n                target: this\r\n            };\r\n            this.events.dispatchImmediately(\"parseerror\", event_2);\r\n        }\r\n        // Wrap up\r\n        this.dispatchImmediately(\"parseended\");\r\n        if ($type.hasValue(this.data)) {\r\n            this.dispatchImmediately(\"done\", {\r\n                \"data\": this.data\r\n            });\r\n        }\r\n        // The component is responsible for updating its own data vtriggered via\r\n        // events.\r\n        // Update last data load\r\n        this.lastLoad = new Date();\r\n    };\r\n    Object.defineProperty(DataSource.prototype, \"url\", {\r\n        /**\r\n         * @return URL\r\n         */\r\n        get: function () {\r\n            // Get URL\r\n            var url = this.disableCache\r\n                ? this.timestampUrl(this._url)\r\n                : this._url;\r\n            // Add incremental params\r\n            if (this.incremental && this.component.data.length) {\r\n                url = this.addUrlParams(url, this.incrementalParams);\r\n            }\r\n            return this.adapter.apply(\"url\", url);\r\n        },\r\n        /**\r\n         * URL of the data source.\r\n         *\r\n         * @param value  URL\r\n         */\r\n        set: function (value) {\r\n            this._url = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"requestOptions\", {\r\n        /**\r\n         * @return Options\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"requestOptions\", this._requestOptions);\r\n        },\r\n        /**\r\n         * Custom options for HTTP(S) request.\r\n         *\r\n         * At this moment the only option supported is: `requestHeaders`, which holds\r\n         * an array of objects for custom request headers, e.g.:\r\n         *\r\n         * ```TypeScript\r\n         * chart.dataSource.requestOptions.requestHeaders = [{\r\n         *   \"key\": \"x-access-token\",\r\n         *   \"value\": \"123456789\"\r\n         * }];\r\n         * ``````JavaScript\r\n         * chart.dataSource.requestOptions.requestHeaders = [{\r\n         *   \"key\": \"x-access-token\",\r\n         *   \"value\": \"123456789\"\r\n         * }];\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"dataSource\": {\r\n         *     // ...\r\n         *     \"requestOptions\": {\r\n         *       \"requestHeaders\": [{\r\n         *         \"key\": \"x-access-token\",\r\n         *         \"value\": \"123456789\"\r\n         *       }]\r\n         *     }\r\n         *   }\r\n         * }\r\n         * ```\r\n         *\r\n         * NOTE: setting this options on an-already loaded DataSource will not\r\n         * trigger a reload.\r\n         *\r\n         * @param value  Options\r\n         */\r\n        set: function (value) {\r\n            this._requestOptions = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"parser\", {\r\n        /**\r\n         * @return Data parser\r\n         */\r\n        get: function () {\r\n            if (!this._parser) {\r\n                this._parser = new JSONParser();\r\n            }\r\n            return this.adapter.apply(\"parser\", this._parser);\r\n        },\r\n        /**\r\n         * A parser to be used to parse data.\r\n         *\r\n         * ```TypeScript\r\n         * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n         * chart.dataSource.parser = am4core.JSONParser;\r\n         * ```\r\n         * ```JavaScript\r\n         * chart.dataSource.url = \"http://www.myweb.com/data.json\";\r\n         * chart.dataSource.parser = am4core.JSONParser;\r\n         * ```\r\n         * ```JSON\r\n         * {\r\n         *   // ...\r\n         *   \"dataSource\": {\r\n         *     \"url\": \"http://www.myweb.com/data.json\",\r\n         *     \"parser\": {\r\n         *       \"type\": \"JSONParser\"\r\n         *     }\r\n         *   },\r\n         *   // ...\r\n         * }\r\n         * ```\r\n         *\r\n         * @default JSONParser\r\n         * @param value  Data parser\r\n         */\r\n        set: function (value) {\r\n            this._parser = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"reloadFrequency\", {\r\n        /**\r\n         * @return Reload frequency (ms)\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"reloadTimeout\", this._reloadFrequency);\r\n        },\r\n        /**\r\n         * Data source reload frequency.\r\n         *\r\n         * If set, it will reload the same URL every X milliseconds.\r\n         *\r\n         * @param value Reload frequency (ms)\r\n         */\r\n        set: function (value) {\r\n            var _this = this;\r\n            if (this._reloadFrequency != value) {\r\n                this._reloadFrequency = value;\r\n                // Should we schedule a reload?\r\n                if (value) {\r\n                    if (!$type.hasValue(this._reloadDisposer)) {\r\n                        this._reloadDisposer = this.events.on(\"ended\", function (ev) {\r\n                            _this._reloadTimeout = setTimeout(function () {\r\n                                _this.load();\r\n                            }, _this.reloadFrequency);\r\n                        });\r\n                    }\r\n                }\r\n                else if ($type.hasValue(this._reloadDisposer)) {\r\n                    this._reloadDisposer.dispose();\r\n                    this._reloadDisposer = undefined;\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"incremental\", {\r\n        /**\r\n         * @return Incremental load?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"incremental\", this._incremental);\r\n        },\r\n        /**\r\n         * Should subsequent reloads be treated as incremental?\r\n         *\r\n         * Incremental loads will assume that they contain only new data items\r\n         * since the last load.\r\n         *\r\n         * If `incremental = false` the loader will replace all of the target's\r\n         * data with each load.\r\n         *\r\n         * This setting does not have any effect trhe first time data is loaded.\r\n         *\r\n         * NOTE: this setting works only with element's `data` property. It won't\r\n         * work with any other externally-loadable data property.\r\n         *\r\n         * @default false\r\n         * @param Incremental load?\r\n         */\r\n        set: function (value) {\r\n            this._incremental = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"incrementalParams\", {\r\n        /**\r\n         * @return Incremental request parameters\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"incrementalParams\", this._incrementalParams);\r\n        },\r\n        /**\r\n         * An object consisting of key/value pairs to apply to an URL when data\r\n         * source is making an incremental request.\r\n         *\r\n         * @param value  Incremental request parameters\r\n         */\r\n        set: function (value) {\r\n            this._incrementalParams = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"keepCount\", {\r\n        /**\r\n         * @return keepCount load?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"keepCount\", this._keepCount);\r\n        },\r\n        /**\r\n         * This setting is used only when `incremental = true`. If set to `true`,\r\n         * it will try to retain the same number of data items across each load.\r\n         *\r\n         * E.g. if incremental load yeilded 5 new records, then 5 items from the\r\n         * beginning of data will be removed so that we end up with the same number\r\n         * of data items.\r\n         *\r\n         * @default false\r\n         * @param Keep record count?\r\n         */\r\n        set: function (value) {\r\n            this._keepCount = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"updateCurrentData\", {\r\n        /**\r\n         * @return Update current data?\r\n         */\r\n        get: function () {\r\n            return this.adapter.apply(\"updateCurrentData\", this._updateCurrentData);\r\n        },\r\n        /**\r\n         * If set to `true`, each subsequent load will be treated as an update to\r\n         * currently loaded data, meaning that it will try to update values on\r\n         * existing data items, not overwrite the whole data.\r\n         *\r\n         * This will work faster than complete update, and also will animate the\r\n         * values to their new positions.\r\n         *\r\n         * Data sources across loads must contain the same number of data items.\r\n         *\r\n         * Loader will not truncate the data set if loaded data has fewer data items,\r\n         * and if it is longer, the excess data items will be ignored.\r\n         *\r\n         * NOTE: this setting is ignored if `incremental = true`.\r\n         *\r\n         * @default false\r\n         * @since 2.5.5\r\n         * @param Update current data?\r\n         */\r\n        set: function (value) {\r\n            this._updateCurrentData = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"language\", {\r\n        /**\r\n         * @return A [[Language]] instance to be used\r\n         */\r\n        get: function () {\r\n            if (this._language) {\r\n                return this._language;\r\n            }\r\n            else if (this.component) {\r\n                this._language = this.component.language;\r\n                return this._language;\r\n            }\r\n            this.language = new Language();\r\n            return this.language;\r\n        },\r\n        /**\r\n         * Language instance to use.\r\n         *\r\n         * Will inherit and use chart's language, if not set.\r\n         *\r\n         * @param value An instance of Language\r\n         */\r\n        set: function (value) {\r\n            this._language = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataSource.prototype, \"dateFormatter\", {\r\n        /**\r\n         * @return A [[DateFormatter]] instance to be used\r\n         */\r\n        get: function () {\r\n            if (this._dateFormatter) {\r\n                return this._dateFormatter;\r\n            }\r\n            else if (this.component) {\r\n                this._dateFormatter = this.component.dateFormatter;\r\n                return this._dateFormatter;\r\n            }\r\n            this.dateFormatter = new DateFormatter();\r\n            return this.dateFormatter;\r\n        },\r\n        /**\r\n         * A [[DateFormatter]] to use when parsing dates from string formats.\r\n         *\r\n         * Will inherit and use chart's DateFormatter if not ser.\r\n         *\r\n         * @param value An instance of [[DateFormatter]]\r\n         */\r\n        set: function (value) {\r\n            this._dateFormatter = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Adds current timestamp to the URL.\r\n     *\r\n     * @param url  Source URL\r\n     * @return Timestamped URL\r\n     */\r\n    DataSource.prototype.timestampUrl = function (url) {\r\n        var tstamp = new Date().getTime().toString();\r\n        var params = {};\r\n        params[tstamp] = \"\";\r\n        return this.addUrlParams(url, params);\r\n    };\r\n    /**\r\n     * Disposes of this object.\r\n     */\r\n    DataSource.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this._reloadTimeout) {\r\n            clearTimeout(this._reloadTimeout);\r\n        }\r\n        if ($type.hasValue(this._reloadDisposer)) {\r\n            this._reloadDisposer.dispose();\r\n            this._reloadDisposer = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * Initiate the load.\r\n     *\r\n     * All loading in JavaScript is asynchronous. This function will trigger the\r\n     * load and will exit immediately.\r\n     *\r\n     * Use DataSource's events to watch for loaded data and errors.\r\n     */\r\n    DataSource.prototype.load = function () {\r\n        if (this.url) {\r\n            if (this._reloadTimeout) {\r\n                clearTimeout(this._reloadTimeout);\r\n            }\r\n            dataLoader.load(this);\r\n        }\r\n    };\r\n    /**\r\n     * Adds parameters to `url` as query strings. Will take care of proper\r\n     * separators.\r\n     *\r\n     * @param url     Source URL\r\n     * @param params  Parameters\r\n     * @return New URL\r\n     */\r\n    DataSource.prototype.addUrlParams = function (url, params) {\r\n        var join = url.match(/\\?/) ? \"&\" : \"?\";\r\n        var add = [];\r\n        $object.each(params, function (key, value) {\r\n            if (value != \"\") {\r\n                add.push(key + \"=\" + encodeURIComponent(value));\r\n            }\r\n            else {\r\n                add.push(key);\r\n            }\r\n        });\r\n        if (add.length) {\r\n            return url + join + add.join(\"&\");\r\n        }\r\n        return url;\r\n    };\r\n    /**\r\n     * Processes JSON-based config before it is applied to the object.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @param config  Config\r\n     */\r\n    DataSource.prototype.processConfig = function (config) {\r\n        registry.registeredClasses[\"json\"] = JSONParser;\r\n        registry.registeredClasses[\"JSONParser\"] = JSONParser;\r\n        registry.registeredClasses[\"csv\"] = CSVParser;\r\n        registry.registeredClasses[\"CSVParser\"] = CSVParser;\r\n        _super.prototype.processConfig.call(this, config);\r\n    };\r\n    return DataSource;\r\n}(BaseObjectEvents));\r\nexport { DataSource };\r\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,eAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAC9CZ,SAAS,CAACW,UAAD,EAAaC,MAAb,CAAT;EACA;AACJ;AACA;;;EACI,SAASD,UAAT,CAAoBE,GAApB,EAAyBC,MAAzB,EAAiC;IAC7B,IAAIC,KAAK,GACT;IACAH,MAAM,CAACI,IAAP,CAAY,IAAZ,KAAqB,IAFrB;IAGA;AACR;AACA;;;IACQD,KAAK,CAACE,OAAN,GAAgB,IAAIZ,OAAJ,CAAYU,KAAZ,CAAhB;IACA;AACR;AACA;;IACQA,KAAK,CAACG,eAAN,GAAwB,EAAxB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQH,KAAK,CAACI,YAAN,GAAqB,KAArB;IACA;AACR;AACA;AACA;;IACQJ,KAAK,CAACK,kBAAN,GAA2B,EAA3B;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQL,KAAK,CAACM,UAAN,GAAmB,KAAnB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQN,KAAK,CAACO,kBAAN,GAA2B,KA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"},"metadata":{},"sourceType":"module"}