{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common'; // amCharts imports\n\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4charts from '@amcharts/amcharts4/charts';\nimport am4themes_animated from '@amcharts/amcharts4/themes/animated';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction ChartstatusComponent_h4_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\", 2);\n    i0.ɵɵelementStart(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", item_r1.time, \" - \", item_r1.statusDt, \"\");\n  }\n}\n\nexport let ChartstatusComponent = /*#__PURE__*/(() => {\n  class ChartstatusComponent {\n    constructor(platformId, zone) {\n      this.platformId = platformId;\n      this.zone = zone;\n      this.listStatus = [];\n      this.hide = true;\n    }\n\n    ngOnInit() {\n      this.setChart();\n    }\n\n    browserOnly(f) {\n      if (isPlatformBrowser(this.platformId)) {\n        this.zone.runOutsideAngular(() => {\n          f();\n        });\n      }\n    }\n\n    ngOnChanges() {\n      this.setChart();\n    }\n\n    setChart() {\n      // Chart code goes in here\n      this.browserOnly(() => {\n        am4core.useTheme(am4themes_animated);\n        let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n        chart.paddingRight = 20;\n        let data = [];\n        let visits = 10;\n        var x = 1;\n\n        for (let i = 0; i < this.listStatus.length; i++) {\n          if (this.listStatus[i].statusDt == \"On\") {\n            visits = 1;\n          } else if (this.listStatus[i].statusDt == \"Off\") {\n            visits = 0;\n          } else {\n            visits = -1;\n          }\n\n          if (i > 0) {\n            var date = new Date(this.listStatus[i].time);\n            var dd = date.setSeconds(date.getSeconds() - 5);\n            var vi = 1;\n\n            if (i != this.listStatus.length - 1) {\n              if (visits == 1) {\n                vi = 0;\n              } else {\n                vi = 1;\n              }\n            } else {\n              vi = visits;\n            }\n\n            data.push({\n              date: new Date(dd),\n              name: \"name\" + x,\n              value: vi\n            });\n            x++;\n          }\n\n          data.push({\n            date: new Date(this.listStatus[i].time),\n            name: \"name\" + x,\n            value: visits\n          });\n\n          if (i < this.listStatus.length - 1) {\n            var date = new Date(this.listStatus[i].time);\n            var dd = date.setSeconds(date.getSeconds() + 5);\n            var vi = 1;\n\n            if (visits == 1) {\n              vi = 0;\n            } else {\n              vi = 1;\n            }\n\n            data.push({\n              date: new Date(dd),\n              name: \"name\" + x,\n              value: visits\n            });\n            x++;\n          } // if (i < this.listStatus.length - 1) {\n          //   var date = new Date(this.listStatus[i+1].time)\n          //   var dd = date.setMinutes(date.getMinutes() - 1);\n          //   var vi=1;\n          //   if(visits==1) {\n          //     vi=0;\n          //   }else {\n          //     vi=1;\n          //   }\n          //   data.push({ date: new Date(dd), name: \"name\" + x, value: vi });\n          //   x++;\n          // }\n\n\n          x++; // if (i < this.listStatus.length - 1) {\n          //   // var start:Date = new Date(this.listStatus[i].time);\n          //   // var end:Date = new Date(this.listStatus[i+1].time);\n          //   // var diffMs = (end.getTime() - start.getTime());\n          //   // var diffMins = Math.round(diffMs / 60000);\n          //   // for (let j=1;j<diffMins;j++){\n          //   //   x++;\n          //   //   var date= new Date(this.listStatus[i].time)\n          //   //   var dd = date.setMinutes(date.getMinutes() + 1);\n          //   //   data.push({ date: dd, name: \"name\" + x, value: visits });\n          //   // }\n          //   var date = new Date(this.listStatus[i+1].time)\n          //   var dd = date.setMinutes(date.getMinutes() + 1);\n          //   if(visits==1){\n          //   }\n          //   data.push({ date: new Date(dd), name: \"name\" + x, value: visits });\n          // }\n        }\n\n        chart.data = data;\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n        dateAxis.renderer.grid.template.location = 0;\n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis()); //valueAxis.tooltip.disabled = true;\n\n        valueAxis.renderer.minWidth = 35;\n        let series = chart.series.push(new am4charts.LineSeries());\n        series.dataFields.dateX = \"date\";\n        series.dataFields.valueY = \"value\";\n        series.tooltipText = \"{valueY.value}\";\n        chart.cursor = new am4charts.XYCursor();\n        let scrollbarX = new am4charts.XYChartScrollbar();\n        scrollbarX.series.push(series);\n        chart.scrollbarX = scrollbarX;\n        this.chart = chart;\n      });\n    }\n\n    ngOnDestroy() {\n      // Clean up chart when the component is removed\n      this.browserOnly(() => {\n        if (this.chart) {\n          this.chart.dispose();\n        }\n      });\n    }\n\n  }\n\n  ChartstatusComponent.ɵfac = function ChartstatusComponent_Factory(t) {\n    return new (t || ChartstatusComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  ChartstatusComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChartstatusComponent,\n    selectors: [[\"app-chartstatus\"]],\n    inputs: {\n      listStatus: \"listStatus\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 1,\n    consts: [[\"id\", \"chartdiv\", 2, \"width\", \"100%\", \"height\", \"500px\"], [\"class\", \"center\", 4, \"ngFor\", \"ngForOf\"], [1, \"center\"]],\n    template: function ChartstatusComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n        i0.ɵɵtemplate(1, ChartstatusComponent_h4_1_Template, 3, 2, \"h4\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.listStatus);\n      }\n    },\n    directives: [i1.NgForOf],\n    styles: [\"\"]\n  });\n  return ChartstatusComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}