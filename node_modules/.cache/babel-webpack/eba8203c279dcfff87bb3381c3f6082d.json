{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { Breakpoints } from '@angular/cdk/layout';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@angular/material/grid-list\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/menu\";\nimport * as i7 from \"@angular/material/icon\";\n\nfunction DashboardsComponent_mat_grid_tile_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-grid-tile\", 4);\n    i0.ɵɵelementStart(1, \"mat-card\", 5);\n    i0.ɵɵelementStart(2, \"mat-card-header\");\n    i0.ɵɵelementStart(3, \"mat-card-title\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementStart(5, \"button\", 6);\n    i0.ɵɵelementStart(6, \"mat-icon\");\n    i0.ɵɵtext(7, \"more_vert\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"mat-menu\", 7, 8);\n    i0.ɵɵelementStart(10, \"button\", 9);\n    i0.ɵɵtext(11, \"Expand\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 9);\n    i0.ɵɵtext(13, \"Remove\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"mat-card-content\", 10);\n    i0.ɵɵelementStart(15, \"div\");\n    i0.ɵɵtext(16, \"Card Content Here\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const card_r1 = ctx.$implicit;\n\n    const _r2 = i0.ɵɵreference(9);\n\n    i0.ɵɵproperty(\"colspan\", card_r1.cols)(\"rowspan\", card_r1.rows);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", card_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"matMenuTriggerFor\", _r2);\n  }\n}\n\nexport class DashboardsComponent {\n  constructor(breakpointObserver) {\n    this.breakpointObserver = breakpointObserver;\n    /** Based on the screen size, switch from standard to one column per row */\n\n    this.cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(({\n      matches\n    }) => {\n      if (matches) {\n        return [{\n          title: 'Card 1',\n          cols: 1,\n          rows: 1\n        }, {\n          title: 'Card 2',\n          cols: 1,\n          rows: 1\n        }, {\n          title: 'Card 3',\n          cols: 1,\n          rows: 1\n        }, {\n          title: 'Card 4',\n          cols: 1,\n          rows: 1\n        }];\n      }\n\n      return [{\n        title: 'Card 1',\n        cols: 2,\n        rows: 1\n      }, {\n        title: 'Card 2',\n        cols: 1,\n        rows: 1\n      }, {\n        title: 'Card 3',\n        cols: 1,\n        rows: 2\n      }, {\n        title: 'Card 4',\n        cols: 1,\n        rows: 1\n      }];\n    }));\n  }\n\n}\n\nDashboardsComponent.ɵfac = function DashboardsComponent_Factory(t) {\n  return new (t || DashboardsComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n};\n\nDashboardsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DashboardsComponent,\n  selectors: [[\"app-dashboards\"]],\n  decls: 6,\n  vars: 3,\n  consts: [[1, \"grid-container\"], [1, \"mat-h1\"], [\"cols\", \"2\", \"rowHeight\", \"350px\"], [3, \"colspan\", \"rowspan\", 4, \"ngFor\", \"ngForOf\"], [3, \"colspan\", \"rowspan\"], [1, \"dashboard-card\"], [\"mat-icon-button\", \"\", \"aria-label\", \"Toggle menu\", 1, \"more-button\", 3, \"matMenuTriggerFor\"], [\"xPosition\", \"before\"], [\"menu\", \"matMenu\"], [\"mat-menu-item\", \"\"], [1, \"dashboard-card-content\"]],\n  template: function DashboardsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"h1\", 1);\n      i0.ɵɵtext(2, \"Dashboard\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"mat-grid-list\", 2);\n      i0.ɵɵtemplate(4, DashboardsComponent_mat_grid_tile_4_Template, 17, 4, \"mat-grid-tile\", 3);\n      i0.ɵɵpipe(5, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(5, 1, ctx.cards));\n    }\n  },\n  directives: [i2.MatGridList, i3.NgForOf, i2.MatGridTile, i4.MatCard, i4.MatCardHeader, i4.MatCardTitle, i5.MatButton, i6.MatMenuTrigger, i7.MatIcon, i6.MatMenu, i6.MatMenuItem, i4.MatCardContent],\n  pipes: [i3.AsyncPipe],\n  styles: [\".grid-container[_ngcontent-%COMP%] {\\n  margin: 20px;\\n}\\n\\n.dashboard-card[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 15px;\\n  left: 15px;\\n  right: 15px;\\n  bottom: 15px;\\n}\\n\\n.more-button[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 5px;\\n  right: 10px;\\n}\\n\\n.dashboard-card-content[_ngcontent-%COMP%] {\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhc2hib2FyZHMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixTQUFTO0VBQ1QsVUFBVTtFQUNWLFdBQVc7RUFDWCxZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQiIsImZpbGUiOiJkYXNoYm9hcmRzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZ3JpZC1jb250YWluZXIge1xuICBtYXJnaW46IDIwcHg7XG59XG5cbi5kYXNoYm9hcmQtY2FyZCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAxNXB4O1xuICBsZWZ0OiAxNXB4O1xuICByaWdodDogMTVweDtcbiAgYm90dG9tOiAxNXB4O1xufVxuXG4ubW9yZS1idXR0b24ge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNXB4O1xuICByaWdodDogMTBweDtcbn1cblxuLmRhc2hib2FyZC1jYXJkLWNvbnRlbnQge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG4iXX0= */\"]\n});","map":{"version":3,"sources":["/home/unutu/fontend/Angular/Angular_Server_Management_FE/src/app/components/dashboards/dashboards.component.ts","/home/unutu/fontend/Angular/Angular_Server_Management_FE/src/app/components/dashboards/dashboards.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n@Component({\n  selector: 'app-dashboards',\n  templateUrl: './dashboards.component.html',\n  styleUrls: ['./dashboards.component.css']\n})\nexport class DashboardsComponent {\n  /** Based on the screen size, switch from standard to one column per row */\n  cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(\n    map(({ matches }) => {\n      if (matches) {\n        return [\n          { title: 'Card 1', cols: 1, rows: 1 },\n          { title: 'Card 2', cols: 1, rows: 1 },\n          { title: 'Card 3', cols: 1, rows: 1 },\n          { title: 'Card 4', cols: 1, rows: 1 }\n        ];\n      }\n\n      return [\n        { title: 'Card 1', cols: 2, rows: 1 },\n        { title: 'Card 2', cols: 1, rows: 1 },\n        { title: 'Card 3', cols: 1, rows: 2 },\n        { title: 'Card 4', cols: 1, rows: 1 }\n      ];\n    })\n  );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n}\n","<div class=\"grid-container\">\n  <h1 class=\"mat-h1\">Dashboard</h1>\n  <mat-grid-list cols=\"2\" rowHeight=\"350px\">\n    <mat-grid-tile *ngFor=\"let card of cards | async\" [colspan]=\"card.cols\" [rowspan]=\"card.rows\">\n      <mat-card class=\"dashboard-card\">\n        <mat-card-header>\n          <mat-card-title>\n            {{card.title}}\n            <button mat-icon-button class=\"more-button\" [matMenuTriggerFor]=\"menu\" aria-label=\"Toggle menu\">\n              <mat-icon>more_vert</mat-icon>\n            </button>\n            <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n              <button mat-menu-item>Expand</button>\n              <button mat-menu-item>Remove</button>\n            </mat-menu>\n          </mat-card-title>\n        </mat-card-header>\n        <mat-card-content class=\"dashboard-card-content\">\n          <div>Card Content Here</div>\n        </mat-card-content>\n      </mat-card>\n    </mat-grid-tile>\n  </mat-grid-list>\n</div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}