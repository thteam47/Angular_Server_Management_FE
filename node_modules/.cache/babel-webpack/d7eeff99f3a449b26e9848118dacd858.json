{"ast":null,"code":"/**\r\n * Radar column series module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { ColumnSeries, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\nimport { visualProperties } from \"../../core/Sprite\";\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\nimport { RadarColumn } from \"../elements/RadarColumn\";\nimport { registry } from \"../../core/Registry\";\nimport * as $path from \"../../core/rendering/Path\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $object from \"../../core/utils/Object\";\nimport { Percent } from \"../../core/utils/Percent\";\nimport * as $iter from \"../../core/utils/Iterator\";\nimport * as $array from \"../../core/utils/Array\";\nimport * as $type from \"../../core/utils/Type\";\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\n\nvar RadarColumnSeriesDataItem = function (_super) {\n  __extends(RadarColumnSeriesDataItem, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RadarColumnSeriesDataItem() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"ColumnSeriesDataItem\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n\n  return RadarColumnSeriesDataItem;\n}(ColumnSeriesDataItem);\n\nexport { RadarColumnSeriesDataItem };\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\n\nvar RadarColumnSeries = function (_super) {\n  __extends(RadarColumnSeries, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function RadarColumnSeries() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"RadarColumnSeries\";\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creates and returns a RadarColumn element to use as column in radar chart.\r\n   *\r\n   * @return RadarColumn.\r\n   */\n\n\n  RadarColumnSeries.prototype.createColumnTemplate = function () {\n    return new RadarColumn();\n  };\n  /**\r\n   * (Re)validates the whole series, effectively causing it to redraw.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  RadarColumnSeries.prototype.validate = function () {\n    // so that radius would be updated\n    if (this.chart.invalid) {\n      this.chart.validate();\n    }\n\n    _super.prototype.validate.call(this);\n  };\n  /**\r\n   * @ignore\r\n   */\n\n\n  RadarColumnSeries.prototype.disableUnusedColumns = function (dataItem) {\n    if (dataItem) {\n      if (dataItem.column) {\n        dataItem.column.__disabled = true;\n      }\n\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n\n        if (rangeColumn) {\n          rangeColumn.__disabled = true;\n        }\n      });\n    }\n  };\n  /**\r\n   * Validates data item's element, effectively redrawing it.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @param dataItem  Data item\r\n   */\n\n\n  RadarColumnSeries.prototype.validateDataElementReal = function (dataItem) {\n    var _this = this;\n\n    var startAngle = this.chart.startAngle;\n    var endAngle = this.chart.endAngle;\n    var yField = this.yField;\n    var yOpenField = this.yOpenField;\n    var xField = this.xField;\n    var xOpenField = this.xOpenField;\n    var lAngle;\n    var rAngle;\n    var tRadius;\n    var bRadius;\n    var startLocation = this.getStartLocation(dataItem);\n    var endLocation = this.getEndLocation(dataItem);\n    var cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\n    var radarColumn = dataItem.column;\n\n    if (!radarColumn) {\n      radarColumn = this.columns.create();\n      dataItem.column = radarColumn;\n      $object.copyProperties(this, radarColumn, visualProperties); // need this \n\n      $object.copyProperties(this.columns.template, radarColumn, visualProperties); // second time, no force, so that columns.template would override series properties\t\t\t\n\n      dataItem.addSprite(radarColumn);\n      radarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\n\n      this.setColumnStates(radarColumn);\n    }\n\n    var width = radarColumn.width;\n    var percentWidth = 100;\n\n    if (width instanceof Percent) {\n      percentWidth = width.percent;\n    }\n\n    var offset = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\n    startLocation += offset;\n    endLocation -= offset; // two category axes\n\n    if (this.xAxis instanceof CategoryAxis && this.yAxis instanceof CategoryAxis) {\n      tRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yField, 0, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yField, 0, \"valueY\")\n      });\n      bRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yOpenField, 1, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yOpenField, 1, \"valueY\")\n      });\n      lAngle = this.xAxis.getAngle(dataItem, xOpenField, 0, \"valueX\");\n      rAngle = this.xAxis.getAngle(dataItem, xField, 1, \"valueX\");\n      startAngle = startAngle + startLocation * cellAngle;\n      endAngle = endAngle - (1 - endLocation) * cellAngle;\n    } else if (this.baseAxis == this.xAxis) {\n      tRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"),\n        y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\")\n      });\n      bRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"),\n        y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\")\n      });\n      lAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\n      rAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\n      startAngle = startAngle + startLocation * cellAngle;\n      endAngle = endAngle - (1 - endLocation) * cellAngle;\n    } else {\n      tRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\")\n      });\n      bRadius = $math.getDistance({\n        x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"),\n        y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\")\n      });\n\n      if ($type.isNumber(width)) {\n        var abs = Math.abs(tRadius - bRadius);\n\n        if (abs > width) {\n          var d = (abs - width) / 2;\n          tRadius += d;\n          bRadius -= d;\n        }\n      }\n\n      lAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\n      rAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\n    }\n\n    if (rAngle < lAngle) {\n      var temp = rAngle;\n      rAngle = lAngle;\n      lAngle = temp;\n    }\n\n    lAngle = $math.fitToRange(lAngle, startAngle, endAngle);\n    rAngle = $math.fitToRange(rAngle, startAngle, endAngle);\n    var slice = radarColumn.radarColumn;\n    slice.startAngle = lAngle;\n    var arc = rAngle - lAngle;\n\n    if (arc > 0) {\n      slice.arc = arc;\n      slice.radius = tRadius;\n      slice.innerRadius = bRadius;\n      radarColumn.__disabled = false;\n      radarColumn.parent = this.columnsContainer;\n      $iter.each(this.axisRanges.iterator(), function (axisRange) {\n        var rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\n\n        if (!rangeColumn) {\n          rangeColumn = _this.columns.create();\n          $object.forceCopyProperties(_this.columns.template, rangeColumn, visualProperties);\n          $object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\n\n          if (rangeColumn.dataItem) {\n            $array.remove(rangeColumn.dataItem.sprites, rangeColumn);\n          }\n\n          dataItem.addSprite(rangeColumn);\n          rangeColumn.paper = _this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\n\n          _this.setColumnStates(rangeColumn);\n\n          dataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\n        }\n\n        var slice = rangeColumn.radarColumn;\n        slice.startAngle = lAngle;\n        slice.arc = arc;\n        slice.radius = tRadius;\n        slice.innerRadius = bRadius;\n\n        if (slice.invalid) {\n          slice.paper = _this.paper;\n          slice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\n        }\n\n        rangeColumn.__disabled = false;\n        rangeColumn.parent = axisRange.contents;\n      });\n    } else {\n      this.disableUnusedColumns(dataItem);\n    }\n  };\n  /**\r\n   * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n   *\r\n   * @param    dataItem   Data item\r\n   * @param    xKey       Name of X data field\r\n   * @param    yKey       Name of Y data field\r\n   * @param    locationX  X location\r\n   * @param    locationY  Y location\r\n   * @param    stackKeyX  ?\r\n   * @param    stackKeyY  ?\r\n   * @returns             Coordinates\r\n   */\n\n\n  RadarColumnSeries.prototype.getPoint = function (dataItem, xKey, yKey, locationX, locationY, stackKeyX, stackKeyY) {\n    if (!stackKeyX) {\n      stackKeyX = \"valueX\";\n    }\n\n    if (!stackKeyY) {\n      stackKeyY = \"valueY\";\n    }\n\n    var x = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\n    var y = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\n    var radius = $math.getDistance({\n      x: x,\n      y: y\n    }); // hack to be able to determine angle later\n\n    if (radius == 0) {\n      radius = 0.00001;\n    }\n\n    var angle = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\n    return {\n      x: radius * $math.cos(angle),\n      y: radius * $math.sin(angle)\n    };\n  };\n  /**\r\n   * Returns an SVG path to be used as a mask for the series.\r\n   *\r\n   * @return SVG path\r\n   */\n\n\n  RadarColumnSeries.prototype.getMaskPath = function () {\n    var renderer = this.yAxis.renderer;\n    return $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\n  };\n\n  RadarColumnSeries.prototype.positionBulletReal = function (bullet, positionX, positionY) {\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (positionX < xAxis.start || positionX > xAxis.end || positionY < yAxis.start || positionY > yAxis.end) {\n      bullet.visible = false;\n    }\n\n    bullet.moveTo(this.xAxis.renderer.positionToPoint(positionX, positionY));\n  };\n\n  RadarColumnSeries.prototype.setXAxis = function (axis) {\n    _super.prototype.setXAxis.call(this, axis);\n\n    this.updateRendererRefs();\n  };\n\n  RadarColumnSeries.prototype.setYAxis = function (axis) {\n    _super.prototype.setYAxis.call(this, axis);\n\n    this.updateRendererRefs();\n  };\n\n  RadarColumnSeries.prototype.updateRendererRefs = function () {\n    var rendererX = this.xAxis.renderer;\n    var rendererY = this.yAxis.renderer;\n    rendererX.axisRendererY = rendererY;\n  };\n\n  return RadarColumnSeries;\n}(ColumnSeries);\n\nexport { RadarColumnSeries };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem; //# sourceMappingURL=RadarColumnSeries.js.map","map":null,"metadata":{},"sourceType":"module"}