{"ast":null,"code":"/**\r\n * A collection of network-related functions\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $type from \"./Type\";\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\n\nexport function load(url, target, options) {\n  return new Promise(function (success, error) {\n    // Is return type Blob?\n    var isBlob = $type.hasValue(options) && options.responseType == \"blob\"; // Create request and set up handlers\n\n    var xhr = new XMLHttpRequest();\n\n    xhr.onload = function () {\n      if (xhr.status === 200) {\n        var response = void 0;\n        var blob_1;\n\n        if (isBlob) {\n          blob_1 = xhr.response;\n          readBlob(blob_1).then(function (response) {\n            var output = {\n              xhr: xhr,\n              error: false,\n              response: response,\n              blob: blob_1,\n              type: xhr.getResponseHeader(\"Content-Type\"),\n              target: target\n            };\n            success(output);\n          });\n          return;\n        } else {\n          response = xhr.responseText || xhr.response;\n        }\n\n        var output = {\n          xhr: xhr,\n          error: false,\n          response: response,\n          blob: blob_1,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        };\n        success(output);\n      } else {\n        error({\n          xhr: xhr,\n          error: true,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        });\n      }\n    };\n\n    xhr.onerror = function () {\n      error({\n        xhr: xhr,\n        error: true,\n        type: xhr.getResponseHeader(\"Content-Type\"),\n        target: target\n      });\n    }; // Open request\n\n\n    xhr.open(\"GET\", url, true);\n\n    if (options && options.withCredentials) {\n      xhr.withCredentials = true;\n    } // Process options\n\n\n    if ($type.hasValue(options)) {\n      if ($type.hasValue(options.requestHeaders)) {\n        for (var i = 0; i < options.requestHeaders.length; i++) {\n          var header = options.requestHeaders[i];\n          xhr.setRequestHeader(header.key, header.value);\n        }\n      }\n\n      if ($type.hasValue(options.responseType)) {\n        xhr.responseType = options.responseType;\n      }\n    } // Send request\n\n\n    xhr.send();\n  });\n}\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\n\nexport function readBlob(blob) {\n  return new Promise(function (success, error) {\n    var reader = new FileReader();\n\n    reader.onload = function (event) {\n      success(reader.result);\n    };\n\n    reader.onerror = function (e) {\n      error(e);\n    };\n\n    reader.readAsText(blob);\n  });\n} //# sourceMappingURL=Net.js.map","map":null,"metadata":{},"sourceType":"module"}