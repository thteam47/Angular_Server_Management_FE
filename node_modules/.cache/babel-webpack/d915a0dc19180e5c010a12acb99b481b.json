{"ast":null,"code":"/**\r\n * Animation module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { BaseObjectEvents } from \"../Base\";\nimport { SVGDefaults } from \"../defs/SVGDefaults\";\nimport { Disposer } from \"../utils/Disposer\";\nimport { Color } from \"../utils/Color\";\nimport { Percent, percent } from \"../utils/Percent\";\nimport * as $async from \"../utils/AsyncPending\";\nimport * as $ease from \"../utils/Ease\";\nimport * as $colors from \"../utils/Colors\";\nimport * as $math from \"../utils/Math\";\nimport * as $array from \"../utils/Array\";\nimport * as $type from \"../utils/Type\";\nimport { system } from \"../System\";\nimport { options } from \"../Options\";\n/**\r\n * Calls a `callback` function for the `duration` of milliseconds.\r\n *\r\n * @todo Needed?\r\n * @deprecated Not used anywhere\r\n * @ignore Exclude from docs\r\n * @param duration  Duration (ms)\r\n * @param callback  Callback function\r\n * @return Disposer\r\n */\n\nexport function animate(duration, callback) {\n  var disposed = false; // TODO use performance.now() ?\n\n  var startTime = Date.now();\n\n  function loop(now) {\n    if (!disposed) {\n      var diff = now - startTime;\n\n      if (diff >= duration) {\n        callback(1);\n      } else {\n        $async.nextFrame(loop);\n        callback(diff / duration);\n      }\n    }\n  }\n\n  $async.nextFrame(loop);\n  return new Disposer(function () {\n    disposed = true;\n  });\n}\n/**\r\n * Returns numeric value accoring to progress between start and end values.\r\n *\r\n * @param progress  Progress (0-1)\r\n * @param from\r\n * @param to\r\n * @return Value according to progress\r\n */\n\nfunction getProgressNumber(progress, from, to) {\n  return from + (to - from) * progress;\n}\n/**\r\n * Returns [[Percent]] value accoring to progress between start and end\r\n * values.\r\n *\r\n * @param progress  Progress (0-1)\r\n * @param from\r\n * @param to\r\n * @return Value according to progress\r\n */\n\n\nfunction getProgressPercent(progress, from, to) {\n  return new Percent(getProgressNumber(progress, from.percent, to.percent));\n}\n/**\r\n * Returns color value accoring to progress between start and end values.\r\n *\r\n * @param progress  Progress (0-1)\r\n * @param from\r\n * @param to\r\n * @return Color according to progress\r\n */\n\n\nfunction getProgressColor(progress, from, to) {\n  var color = new Color($colors.interpolate(from.rgb, to.rgb, progress));\n\n  if (from.alpha != to.alpha) {\n    color.alpha = from.alpha + (to.alpha - from.alpha) * progress;\n  }\n\n  return color;\n}\n/**\r\n * [getHybridProperty description]\r\n *\r\n * @todo Description\r\n * @param property [description]\r\n * @param type [description]\r\n * @return [description]\r\n */\n\n\nfunction getHybridProperty(property, type) {\n  return type + property.charAt(0).toUpperCase() + property.substr(1);\n}\n\nvar AnimationDisposer = function () {\n  function AnimationDisposer(array) {\n    this._disposer = new Disposer(function () {\n      while (array.length !== 0) {\n        array[0].dispose();\n      }\n    });\n  }\n\n  AnimationDisposer.prototype.isDisposed = function () {\n    return this._disposer.isDisposed();\n  };\n\n  AnimationDisposer.prototype.dispose = function () {\n    this._disposer.dispose();\n  };\n\n  return AnimationDisposer;\n}();\n\nexport { AnimationDisposer };\n/**\r\n * Animation can be used to transition certain properties on an object that\r\n * implements [[IAnimatable]] interface.\r\n *\r\n * @see {@link IAnimationEvents} for a list of available events\r\n */\n\nvar Animation = function (_super) {\n  __extends(Animation, _super);\n  /**\r\n   * Constructor\r\n   *\r\n   * @param object            An object animation should run on\r\n   * @param animationOptions  One or several (array) of animation options\r\n   * @param duration          Duration (ms)\r\n   * @param easing            Easing function\r\n   */\n\n\n  function Animation(object, animationOptions, duration, easing) {\n    var _this = // Init\n    _super.call(this) || this;\n    /**\r\n     * Duration of the animation in milliseconds.\r\n     */\n\n\n    _this.duration = 0;\n    /**\r\n     * Easing function to use.\r\n     *\r\n     * @see {@link Ease}\r\n     */\n\n    _this.easing = $ease.linear;\n    /**\r\n     * Contains progress of the current animation: 0 (start) to 1 (end).\r\n     */\n\n    _this.progress = 0;\n    /**\r\n     * Indicated how many times animation should loop.\r\n     */\n\n    _this._loop = 0;\n    /**\r\n     * Animation is paused.\r\n     */\n\n    _this._pause = false;\n    /**\r\n     * Holds reference to timeout for delayed play.\r\n     */\n\n    _this._delayTimeout = null;\n    /**\r\n     * Elapsed time in currently playing animation.\r\n     */\n\n    _this._time = 0;\n    _this._isFinished = false;\n    _this.className = \"Animation\"; // Override duration if animations disabled system-wide\n\n    if (options.animationsEnabled === false) {\n      duration = 0;\n    } // Set parameters\n\n\n    _this.object = object;\n    _this.animationOptions = $array.toArray(animationOptions);\n    _this.duration = duration;\n\n    if (easing) {\n      _this.easing = easing;\n    } // Run check if there are already animations playing on the same properties\n    // and stop them - the last animation takes precedence\n    //this.stopSameAnimations();\n\n    /*if ($type.hasValue(callback)) {\r\n        // TODO don't use .call\r\n        this.events.on(\"animationended\", callback, object);\r\n    }*/\n    // Apply theme\n\n\n    _this.applyTheme();\n\n    return _this;\n  } // TODO verify that this is correct\n\n\n  Animation.prototype.debug = function () {};\n  /**\r\n   * Disposes this object, clears up after itself.\r\n   */\n\n\n  Animation.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.pause();\n  };\n  /**\r\n   * Delays animation start by X milliseconds.\r\n   *\r\n   * @param delay  Delay (ms)\r\n   * @return Animation\r\n   */\n\n\n  Animation.prototype.delay = function (delay) {\n    var _this = this; //@todo Maybe not use `bind()`\n\n\n    if (delay > 0) {\n      this.pause(); // This is so that it will get disposed if `this.object` is disposed\n      // TODO hacky, figure out a better way\n\n      $array.move(this.object.animations, this);\n      var id_1 = setTimeout(function () {\n        _this._delayTimeout = null;\n\n        _this.start();\n      }, delay);\n      this._delayTimeout = new Disposer(function () {\n        clearTimeout(id_1);\n      });\n    }\n\n    return this;\n  };\n\n  Animation.prototype._start = function () {\n    this._isFinished = false; // Clear delay timeout if there was one\n\n    if (this._delayTimeout) {\n      this.removeDispose(this._delayTimeout);\n      this._delayTimeout = null;\n    } // Run check if there are already animations playing on the same properties\n    // and stop them - the last animation takes precedence\n\n\n    this.stopSameAnimations(); // Reset counters\n\n    this._pause = false; // Register animation\n\n    $array.move(system.animations, this); // Register this animation in object's `animations` list\n\n    $array.move(this.object.animations, this);\n    system.requestFrame();\n  };\n  /**\r\n   * Starts animation.\r\n   *\r\n   * @return Animation\r\n   */\n\n\n  Animation.prototype.start = function () {\n    this._start();\n\n    this._startTime = Date.now();\n    this._time = 0;\n    this.staticOptions = []; // Process initial property values\n\n    for (var i = this.animationOptions.length - 1; i >= 0; i--) {\n      var options_1 = this.animationOptions[i];\n\n      if (!$type.hasValue(options_1.from)) {\n        if (options_1.childObject) {\n          options_1.from = options_1.childObject[options_1.property];\n        } else {\n          options_1.from = this.object[options_1.property];\n\n          if (!$type.hasValue(options_1.from)) {\n            options_1.from = SVGDefaults[options_1.property];\n          }\n        }\n        /*if (!$type.hasValue(options.from)) {\r\n            throw Error(\"Could not get initial transition value.\");\r\n        }*/\n\n      }\n\n      if (options_1.from == options_1.to) {\n        // || options.to == (<any>this.object)[options.property]){ this is not good, as dataItem.value is set to final at once, and we animate workingValue\n        $array.remove(this.animationOptions, options_1);\n      } else if (!$type.hasValue(options_1.from) || !(options_1.from instanceof Percent) && options_1.to instanceof Percent || options_1.from instanceof Percent && !(options_1.to instanceof Percent)) {\n        // Initial value is undefined, treat it as static\n        this.staticOptions.push(options_1);\n        $array.remove(this.animationOptions, options_1);\n      } else {\n        // Use different update methods for different value types\n        if ($type.isNumber(options_1.to)) {\n          // Numeric value\n          options_1.updateMethod = getProgressNumber; // Check if initial value is not Percent\n\n          if (options_1.from instanceof Percent) {\n            // It is. Let's convert it to pixel value\n            // @todo Check if we can do this in a less hacky way\n            var convertedFrom = this.object[getHybridProperty(options_1.property, \"pixel\")];\n\n            if (!isNaN(convertedFrom)) {\n              options_1.from = convertedFrom;\n            } else {\n              this.staticOptions.push(options_1);\n              $array.remove(this.animationOptions, options_1);\n            }\n          } else if (isNaN(options_1.from)) {\n            // Static value\n            this.staticOptions.push(options_1);\n            $array.remove(this.animationOptions, options_1);\n          }\n        } else {\n          // Check if maybe we have a color or percent value\n          if (options_1.to instanceof Color) {\n            // Yup - set resolved named color\n            //options.from = $colors.stringToColor(<string>options.from);\n            if (options_1.from) {\n              options_1.updateMethod = getProgressColor;\n            } else {\n              // Static value\n              this.staticOptions.push(options_1);\n              $array.remove(this.animationOptions, options_1);\n            }\n          } else if (options_1.to instanceof Percent) {\n            // Percent\n            options_1.updateMethod = getProgressPercent; // Check if the initial value is maybe in pixels\n\n            if (!isNaN(options_1.from)) {\n              // It is. Let's convert it\n              // @todo Check if we can do this in a less hacky way\n              var convertedFrom = this.object[getHybridProperty(options_1.property, \"relative\")];\n\n              if (!isNaN(convertedFrom)) {\n                options_1.from = percent(convertedFrom * 100);\n              }\n            }\n          } else {\n            // Static value\n            this.staticOptions.push(options_1);\n            $array.remove(this.animationOptions, options_1);\n          }\n        }\n      }\n    } // Apply static options (just in case they were reset by previous\n    // animation loop)\n\n\n    this.applyStaticOptions();\n\n    if (this.events.isEnabled(\"animationstarted\")) {\n      var event_1 = {\n        type: \"animationstarted\",\n        target: this,\n        progress: this.progress\n      };\n      this.events.dispatchImmediately(\"animationstarted\", event_1);\n    }\n\n    this.update(); // If duration is 0, just end animation\n\n    if (this.duration === 0) {\n      this.end();\n    }\n\n    return this;\n  };\n  /**\r\n   * Sets loop count for the animation. If parameter is not a valid number the\r\n   * animation will keep on looping indefinitely.\r\n   *\r\n   * @param count  Number of times to loop animation\r\n   * @return Animation\r\n   */\n\n\n  Animation.prototype.loop = function (count) {\n    if (!$type.isNumber(count)) {\n      count = Infinity;\n    }\n\n    this._loop = count;\n    return this;\n  };\n  /**\r\n   * Pauses animation.\r\n   *\r\n   * @return Animation\r\n   */\n\n\n  Animation.prototype.pause = function () {\n    this._pause = true;\n\n    if (this._delayTimeout) {\n      this.removeDispose(this._delayTimeout);\n      this._delayTimeout = null;\n    }\n\n    $array.remove(system.animations, this);\n    $array.remove(this.object.animations, this);\n    return this;\n  };\n  /**\r\n   * Resumes paused animation.\r\n   *\r\n   * @return Animation\r\n   */\n\n\n  Animation.prototype.resume = function () {\n    this._start();\n\n    this._startTime = Date.now() - this._time;\n    return this;\n  };\n  /**\r\n   * Jumps to animation end. If animation is set to loop, this will start\r\n   * another round of animation from start.\r\n   *\r\n   * @return Animation\r\n   */\n\n\n  Animation.prototype.end = function () {\n    // Pause and complete the progress\n    if (this._loop == 0) {\n      this.pause();\n    }\n\n    this.setProgress(1); // Apply static options\n\n    this.applyStaticOptions();\n\n    if (this.events.isEnabled(\"animationended\")) {\n      var event_2 = {\n        type: \"animationended\",\n        target: this,\n        progress: this.progress\n      };\n      this.events.dispatchImmediately(\"animationended\", event_2);\n    } // Check if we should loop\n\n\n    if (this._loop > 0) {\n      this._loop--;\n      this.start();\n    } else {\n      this.stop();\n      this._isFinished = true;\n    }\n\n    return this;\n  };\n  /**\r\n   * Stops animation immediately leaving properties in their current values.\r\n   */\n\n\n  Animation.prototype.kill = function () {\n    this.pause();\n    this._isFinished = true;\n  };\n  /**\r\n   * Returns indicator if this animation is finished or not\r\n   *\r\n   * @return Is finished?\r\n   */\n\n\n  Animation.prototype.isFinished = function () {\n    return this._isFinished;\n  };\n  /**\r\n   * Applies static options that can't be animated.\r\n   */\n\n\n  Animation.prototype.applyStaticOptions = function () {\n    var _this = this;\n\n    $array.each(this.staticOptions, function (options) {\n      if (options.childObject) {\n        options.childObject[options.property] = _this.progress == 1 ? options.to : options.from;\n      } else {\n        _this.object[options.property] = _this.progress == 1 ? options.to : options.from;\n      }\n    });\n  };\n  /**\r\n   * Stops animation.\r\n   *\r\n   * When animation is stopped, the properties of the target object will remain\r\n   * where they were at the moment when `stop()` was called.\r\n   *\r\n   * @param skipEvent  Do not trigger `animationstopped` event\r\n   * @return Animation\r\n   */\n\n\n  Animation.prototype.stop = function (skipEvent) {\n    this.pause();\n\n    if (!skipEvent) {\n      if (this.events.isEnabled(\"animationstopped\")) {\n        var event_3 = {\n          type: \"animationstopped\",\n          target: this,\n          progress: this.progress\n        };\n        this.events.dispatchImmediately(\"animationstopped\", event_3);\n      }\n    }\n\n    return this;\n  };\n  /**\r\n   * Sets current progress and updates object's numeric and color values.\r\n   *\r\n   * @param progress Progress (0-1)\r\n   */\n\n\n  Animation.prototype.setProgress = function (progress) {\n    var _this = this;\n\n    this._time = this.duration * progress; // just in case we call this from outside\n\n    $array.each(this.animationOptions, function (options) {\n      if (options.updateMethod && $type.hasValue(options.from)) {\n        var value = options.updateMethod(progress, options.from, options.to);\n\n        if (options.childObject) {\n          options.childObject[options.property] = value;\n        } else {\n          _this.object[options.property] = value;\n        }\n      }\n    });\n    this.progress = progress;\n\n    if (this.events.isEnabled(\"animationprogress\")) {\n      var event_4 = {\n        type: \"animationprogress\",\n        target: this,\n        progress: this.progress\n      };\n      this.events.dispatchImmediately(\"animationprogress\", event_4);\n    }\n\n    system.requestFrame();\n  };\n  /**\r\n   * Tracks and sets progress according to time or frames.\r\n   *\r\n   * @ignore Exclude from docs\r\n   * @return Animation\r\n   */\n\n\n  Animation.prototype.update = function () {\n    if (!this._pause) {\n      var progress = void 0;\n      this._time = $math.fitToRange(Date.now() - this._startTime, 0, this.duration);\n      var timeProgress = this._time / this.duration;\n      progress = this.easing(timeProgress);\n\n      if (this.duration == 0 || !$type.isNumber(progress) || timeProgress >= 1) {\n        progress = 1;\n      }\n\n      this.setProgress(progress);\n\n      if ($math.round(this._time / this.duration, 6) == 1) {\n        this.end();\n      }\n    }\n\n    return this;\n  };\n\n  Object.defineProperty(Animation.prototype, \"delayed\", {\n    /**\r\n     * Returns `true` if this animation is delayed.\r\n     *\r\n     * @readonly\r\n     * @return [description]\r\n     */\n    get: function () {\n      return this._delayTimeout ? true : false;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Checks other animations currently running on the same object and removes\r\n   * overlapping options from those other animations that are contained in\r\n   * this animation.\r\n   *\r\n   * This is needed to ensure that no two confurent animations step on each\r\n   * other's toes by trying to animate the same property.\r\n   */\n\n  Animation.prototype.stopSameAnimations = function () {\n    var _this = this; // stop animation of the same property\n    // TODO make this more efficient\n    // TODO don't copy the array\n\n\n    $array.each($array.copy(this.object.animations), function (animation) {\n      if (animation !== _this && !animation.delayed) {\n        var killed_1 = [];\n        $array.each(_this.animationOptions, function (newOptions) {\n          $array.each(animation.animationOptions, function (oldOptions) {\n            if (newOptions.property == oldOptions.property && newOptions.childObject == oldOptions.childObject) {\n              killed_1.push(oldOptions);\n\n              if (animation.animationOptions.length == 0) {\n                animation.kill();\n              }\n            }\n          });\n        });\n        $array.each(killed_1, function (oldOptions) {\n          $array.remove(animation.animationOptions, oldOptions);\n        });\n      }\n    });\n  };\n  /**\r\n   * Adds easing functions to \"function\" fields.\r\n   *\r\n   * @param field  Field name\r\n   * @return Assign as function?\r\n   */\n\n\n  Animation.prototype.asFunction = function (field) {\n    return field == \"easing\" || _super.prototype.asIs.call(this, field);\n  };\n\n  return Animation;\n}(BaseObjectEvents);\n\nexport { Animation };","map":{"version":3,"sources":["/home/unutu/fontend/Angular/Angular_Server_Management_FE/node_modules/@amcharts/amcharts4/.internal/core/utils/Animation.js"],"names":["__extends","BaseObjectEvents","SVGDefaults","Disposer","Color","Percent","percent","$async","$ease","$colors","$math","$array","$type","system","options","animate","duration","callback","disposed","startTime","Date","now","loop","diff","nextFrame","getProgressNumber","progress","from","to","getProgressPercent","getProgressColor","color","interpolate","rgb","alpha","getHybridProperty","property","type","charAt","toUpperCase","substr","AnimationDisposer","array","_disposer","length","dispose","prototype","isDisposed","Animation","_super","object","animationOptions","easing","_this","call","linear","_loop","_pause","_delayTimeout","_time","_isFinished","className","animationsEnabled","toArray","applyTheme","debug","pause","delay","move","animations","id_1","setTimeout","start","clearTimeout","_start","removeDispose","stopSameAnimations","requestFrame","_startTime","staticOptions","i","options_1","hasValue","childObject","remove","push","isNumber","updateMethod","convertedFrom","isNaN","applyStaticOptions","events","isEnabled","event_1","target","dispatchImmediately","update","end","count","Infinity","resume","setProgress","event_2","stop","kill","isFinished","each","skipEvent","event_3","value","event_4","fitToRange","timeProgress","round","Object","defineProperty","get","enumerable","configurable","copy","animation","delayed","killed_1","newOptions","oldOptions","asFunction","field","asIs"],"mappings":"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","sourcesContent":["/**\r\n * Animation module.\r\n */\r\nimport { __extends } from \"tslib\";\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { BaseObjectEvents } from \"../Base\";\r\nimport { SVGDefaults } from \"../defs/SVGDefaults\";\r\nimport { Disposer } from \"../utils/Disposer\";\r\nimport { Color } from \"../utils/Color\";\r\nimport { Percent, percent } from \"../utils/Percent\";\r\nimport * as $async from \"../utils/AsyncPending\";\r\nimport * as $ease from \"../utils/Ease\";\r\nimport * as $colors from \"../utils/Colors\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $array from \"../utils/Array\";\r\nimport * as $type from \"../utils/Type\";\r\nimport { system } from \"../System\";\r\nimport { options } from \"../Options\";\r\n/**\r\n * Calls a `callback` function for the `duration` of milliseconds.\r\n *\r\n * @todo Needed?\r\n * @deprecated Not used anywhere\r\n * @ignore Exclude from docs\r\n * @param duration  Duration (ms)\r\n * @param callback  Callback function\r\n * @return Disposer\r\n */\r\nexport function animate(duration, callback) {\r\n    var disposed = false;\r\n    // TODO use performance.now() ?\r\n    var startTime = Date.now();\r\n    function loop(now) {\r\n        if (!disposed) {\r\n            var diff = now - startTime;\r\n            if (diff >= duration) {\r\n                callback(1);\r\n            }\r\n            else {\r\n                $async.nextFrame(loop);\r\n                callback(diff / duration);\r\n            }\r\n        }\r\n    }\r\n    $async.nextFrame(loop);\r\n    return new Disposer(function () {\r\n        disposed = true;\r\n    });\r\n}\r\n/**\r\n * Returns numeric value accoring to progress between start and end values.\r\n *\r\n * @param progress  Progress (0-1)\r\n * @param from\r\n * @param to\r\n * @return Value according to progress\r\n */\r\nfunction getProgressNumber(progress, from, to) {\r\n    return from + ((to - from) * progress);\r\n}\r\n/**\r\n * Returns [[Percent]] value accoring to progress between start and end\r\n * values.\r\n *\r\n * @param progress  Progress (0-1)\r\n * @param from\r\n * @param to\r\n * @return Value according to progress\r\n */\r\nfunction getProgressPercent(progress, from, to) {\r\n    return new Percent(getProgressNumber(progress, from.percent, to.percent));\r\n}\r\n/**\r\n * Returns color value accoring to progress between start and end values.\r\n *\r\n * @param progress  Progress (0-1)\r\n * @param from\r\n * @param to\r\n * @return Color according to progress\r\n */\r\nfunction getProgressColor(progress, from, to) {\r\n    var color = new Color($colors.interpolate(from.rgb, to.rgb, progress));\r\n    if (from.alpha != to.alpha) {\r\n        color.alpha = from.alpha + (to.alpha - from.alpha) * progress;\r\n    }\r\n    return color;\r\n}\r\n/**\r\n * [getHybridProperty description]\r\n *\r\n * @todo Description\r\n * @param property [description]\r\n * @param type [description]\r\n * @return [description]\r\n */\r\nfunction getHybridProperty(property, type) {\r\n    return type + property.charAt(0).toUpperCase() + property.substr(1);\r\n}\r\nvar AnimationDisposer = /** @class */ (function () {\r\n    function AnimationDisposer(array) {\r\n        this._disposer = new Disposer(function () {\r\n            while (array.length !== 0) {\r\n                array[0].dispose();\r\n            }\r\n        });\r\n    }\r\n    AnimationDisposer.prototype.isDisposed = function () {\r\n        return this._disposer.isDisposed();\r\n    };\r\n    AnimationDisposer.prototype.dispose = function () {\r\n        this._disposer.dispose();\r\n    };\r\n    return AnimationDisposer;\r\n}());\r\nexport { AnimationDisposer };\r\n/**\r\n * Animation can be used to transition certain properties on an object that\r\n * implements [[IAnimatable]] interface.\r\n *\r\n * @see {@link IAnimationEvents} for a list of available events\r\n */\r\nvar Animation = /** @class */ (function (_super) {\r\n    __extends(Animation, _super);\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param object            An object animation should run on\r\n     * @param animationOptions  One or several (array) of animation options\r\n     * @param duration          Duration (ms)\r\n     * @param easing            Easing function\r\n     */\r\n    function Animation(object, animationOptions, duration, easing) {\r\n        var _this = \r\n        // Init\r\n        _super.call(this) || this;\r\n        /**\r\n         * Duration of the animation in milliseconds.\r\n         */\r\n        _this.duration = 0;\r\n        /**\r\n         * Easing function to use.\r\n         *\r\n         * @see {@link Ease}\r\n         */\r\n        _this.easing = $ease.linear;\r\n        /**\r\n         * Contains progress of the current animation: 0 (start) to 1 (end).\r\n         */\r\n        _this.progress = 0;\r\n        /**\r\n         * Indicated how many times animation should loop.\r\n         */\r\n        _this._loop = 0;\r\n        /**\r\n         * Animation is paused.\r\n         */\r\n        _this._pause = false;\r\n        /**\r\n         * Holds reference to timeout for delayed play.\r\n         */\r\n        _this._delayTimeout = null;\r\n        /**\r\n         * Elapsed time in currently playing animation.\r\n         */\r\n        _this._time = 0;\r\n        _this._isFinished = false;\r\n        _this.className = \"Animation\";\r\n        // Override duration if animations disabled system-wide\r\n        if (options.animationsEnabled === false) {\r\n            duration = 0;\r\n        }\r\n        // Set parameters\r\n        _this.object = object;\r\n        _this.animationOptions = $array.toArray(animationOptions);\r\n        _this.duration = duration;\r\n        if (easing) {\r\n            _this.easing = easing;\r\n        }\r\n        // Run check if there are already animations playing on the same properties\r\n        // and stop them - the last animation takes precedence\r\n        //this.stopSameAnimations();\r\n        /*if ($type.hasValue(callback)) {\r\n            // TODO don't use .call\r\n            this.events.on(\"animationended\", callback, object);\r\n        }*/\r\n        // Apply theme\r\n        _this.applyTheme();\r\n        return _this;\r\n    }\r\n    // TODO verify that this is correct\r\n    Animation.prototype.debug = function () { };\r\n    /**\r\n     * Disposes this object, clears up after itself.\r\n     */\r\n    Animation.prototype.dispose = function () {\r\n        _super.prototype.dispose.call(this);\r\n        this.pause();\r\n    };\r\n    /**\r\n     * Delays animation start by X milliseconds.\r\n     *\r\n     * @param delay  Delay (ms)\r\n     * @return Animation\r\n     */\r\n    Animation.prototype.delay = function (delay) {\r\n        var _this = this;\r\n        //@todo Maybe not use `bind()`\r\n        if (delay > 0) {\r\n            this.pause();\r\n            // This is so that it will get disposed if `this.object` is disposed\r\n            // TODO hacky, figure out a better way\r\n            $array.move(this.object.animations, this);\r\n            var id_1 = setTimeout(function () {\r\n                _this._delayTimeout = null;\r\n                _this.start();\r\n            }, delay);\r\n            this._delayTimeout = new Disposer(function () {\r\n                clearTimeout(id_1);\r\n            });\r\n        }\r\n        return this;\r\n    };\r\n    Animation.prototype._start = function () {\r\n        this._isFinished = false;\r\n        // Clear delay timeout if there was one\r\n        if (this._delayTimeout) {\r\n            this.removeDispose(this._delayTimeout);\r\n            this._delayTimeout = null;\r\n        }\r\n        // Run check if there are already animations playing on the same properties\r\n        // and stop them - the last animation takes precedence\r\n        this.stopSameAnimations();\r\n        // Reset counters\r\n        this._pause = false;\r\n        // Register animation\r\n        $array.move(system.animations, this);\r\n        // Register this animation in object's `animations` list\r\n        $array.move(this.object.animations, this);\r\n        system.requestFrame();\r\n    };\r\n    /**\r\n     * Starts animation.\r\n     *\r\n     * @return Animation\r\n     */\r\n    Animation.prototype.start = function () {\r\n        this._start();\r\n        this._startTime = Date.now();\r\n        this._time = 0;\r\n        this.staticOptions = [];\r\n        // Process initial property values\r\n        for (var i = this.animationOptions.length - 1; i >= 0; i--) {\r\n            var options_1 = this.animationOptions[i];\r\n            if (!$type.hasValue(options_1.from)) {\r\n                if (options_1.childObject) {\r\n                    options_1.from = options_1.childObject[options_1.property];\r\n                }\r\n                else {\r\n                    options_1.from = this.object[options_1.property];\r\n                    if (!$type.hasValue(options_1.from)) {\r\n                        options_1.from = SVGDefaults[options_1.property];\r\n                    }\r\n                }\r\n                /*if (!$type.hasValue(options.from)) {\r\n                    throw Error(\"Could not get initial transition value.\");\r\n                }*/\r\n            }\r\n            if (options_1.from == options_1.to) { // || options.to == (<any>this.object)[options.property]){ this is not good, as dataItem.value is set to final at once, and we animate workingValue\r\n                $array.remove(this.animationOptions, options_1);\r\n            }\r\n            else if (!$type.hasValue(options_1.from) || (!(options_1.from instanceof Percent) && (options_1.to instanceof Percent)) || ((options_1.from instanceof Percent) && !(options_1.to instanceof Percent))) {\r\n                // Initial value is undefined, treat it as static\r\n                this.staticOptions.push(options_1);\r\n                $array.remove(this.animationOptions, options_1);\r\n            }\r\n            else {\r\n                // Use different update methods for different value types\r\n                if ($type.isNumber(options_1.to)) {\r\n                    // Numeric value\r\n                    options_1.updateMethod = getProgressNumber;\r\n                    // Check if initial value is not Percent\r\n                    if (options_1.from instanceof Percent) {\r\n                        // It is. Let's convert it to pixel value\r\n                        // @todo Check if we can do this in a less hacky way\r\n                        var convertedFrom = this.object[getHybridProperty(options_1.property, \"pixel\")];\r\n                        if (!isNaN(convertedFrom)) {\r\n                            options_1.from = convertedFrom;\r\n                        }\r\n                        else {\r\n                            this.staticOptions.push(options_1);\r\n                            $array.remove(this.animationOptions, options_1);\r\n                        }\r\n                    }\r\n                    else if (isNaN(options_1.from)) {\r\n                        // Static value\r\n                        this.staticOptions.push(options_1);\r\n                        $array.remove(this.animationOptions, options_1);\r\n                    }\r\n                }\r\n                else {\r\n                    // Check if maybe we have a color or percent value\r\n                    if (options_1.to instanceof Color) {\r\n                        // Yup - set resolved named color\r\n                        //options.from = $colors.stringToColor(<string>options.from);\r\n                        if (options_1.from) {\r\n                            options_1.updateMethod = getProgressColor;\r\n                        }\r\n                        else {\r\n                            // Static value\r\n                            this.staticOptions.push(options_1);\r\n                            $array.remove(this.animationOptions, options_1);\r\n                        }\r\n                    }\r\n                    else if (options_1.to instanceof Percent) {\r\n                        // Percent\r\n                        options_1.updateMethod = getProgressPercent;\r\n                        // Check if the initial value is maybe in pixels\r\n                        if (!isNaN(options_1.from)) {\r\n                            // It is. Let's convert it\r\n                            // @todo Check if we can do this in a less hacky way\r\n                            var convertedFrom = this.object[getHybridProperty(options_1.property, \"relative\")];\r\n                            if (!isNaN(convertedFrom)) {\r\n                                options_1.from = percent(convertedFrom * 100);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Static value\r\n                        this.staticOptions.push(options_1);\r\n                        $array.remove(this.animationOptions, options_1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Apply static options (just in case they were reset by previous\r\n        // animation loop)\r\n        this.applyStaticOptions();\r\n        if (this.events.isEnabled(\"animationstarted\")) {\r\n            var event_1 = {\r\n                type: \"animationstarted\",\r\n                target: this,\r\n                progress: this.progress\r\n            };\r\n            this.events.dispatchImmediately(\"animationstarted\", event_1);\r\n        }\r\n        this.update();\r\n        // If duration is 0, just end animation\r\n        if (this.duration === 0) {\r\n            this.end();\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets loop count for the animation. If parameter is not a valid number the\r\n     * animation will keep on looping indefinitely.\r\n     *\r\n     * @param count  Number of times to loop animation\r\n     * @return Animation\r\n     */\r\n    Animation.prototype.loop = function (count) {\r\n        if (!$type.isNumber(count)) {\r\n            count = Infinity;\r\n        }\r\n        this._loop = count;\r\n        return this;\r\n    };\r\n    /**\r\n     * Pauses animation.\r\n     *\r\n     * @return Animation\r\n     */\r\n    Animation.prototype.pause = function () {\r\n        this._pause = true;\r\n        if (this._delayTimeout) {\r\n            this.removeDispose(this._delayTimeout);\r\n            this._delayTimeout = null;\r\n        }\r\n        $array.remove(system.animations, this);\r\n        $array.remove(this.object.animations, this);\r\n        return this;\r\n    };\r\n    /**\r\n     * Resumes paused animation.\r\n     *\r\n     * @return Animation\r\n     */\r\n    Animation.prototype.resume = function () {\r\n        this._start();\r\n        this._startTime = Date.now() - this._time;\r\n        return this;\r\n    };\r\n    /**\r\n     * Jumps to animation end. If animation is set to loop, this will start\r\n     * another round of animation from start.\r\n     *\r\n     * @return Animation\r\n     */\r\n    Animation.prototype.end = function () {\r\n        // Pause and complete the progress\r\n        if (this._loop == 0) {\r\n            this.pause();\r\n        }\r\n        this.setProgress(1);\r\n        // Apply static options\r\n        this.applyStaticOptions();\r\n        if (this.events.isEnabled(\"animationended\")) {\r\n            var event_2 = {\r\n                type: \"animationended\",\r\n                target: this,\r\n                progress: this.progress\r\n            };\r\n            this.events.dispatchImmediately(\"animationended\", event_2);\r\n        }\r\n        // Check if we should loop\r\n        if (this._loop > 0) {\r\n            this._loop--;\r\n            this.start();\r\n        }\r\n        else {\r\n            this.stop();\r\n            this._isFinished = true;\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Stops animation immediately leaving properties in their current values.\r\n     */\r\n    Animation.prototype.kill = function () {\r\n        this.pause();\r\n        this._isFinished = true;\r\n    };\r\n    /**\r\n     * Returns indicator if this animation is finished or not\r\n     *\r\n     * @return Is finished?\r\n     */\r\n    Animation.prototype.isFinished = function () {\r\n        return this._isFinished;\r\n    };\r\n    /**\r\n     * Applies static options that can't be animated.\r\n     */\r\n    Animation.prototype.applyStaticOptions = function () {\r\n        var _this = this;\r\n        $array.each(this.staticOptions, function (options) {\r\n            if (options.childObject) {\r\n                options.childObject[options.property] = _this.progress == 1 ? options.to : options.from;\r\n            }\r\n            else {\r\n                _this.object[options.property] = _this.progress == 1 ? options.to : options.from;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Stops animation.\r\n     *\r\n     * When animation is stopped, the properties of the target object will remain\r\n     * where they were at the moment when `stop()` was called.\r\n     *\r\n     * @param skipEvent  Do not trigger `animationstopped` event\r\n     * @return Animation\r\n     */\r\n    Animation.prototype.stop = function (skipEvent) {\r\n        this.pause();\r\n        if (!skipEvent) {\r\n            if (this.events.isEnabled(\"animationstopped\")) {\r\n                var event_3 = {\r\n                    type: \"animationstopped\",\r\n                    target: this,\r\n                    progress: this.progress\r\n                };\r\n                this.events.dispatchImmediately(\"animationstopped\", event_3);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets current progress and updates object's numeric and color values.\r\n     *\r\n     * @param progress Progress (0-1)\r\n     */\r\n    Animation.prototype.setProgress = function (progress) {\r\n        var _this = this;\r\n        this._time = this.duration * progress; // just in case we call this from outside\r\n        $array.each(this.animationOptions, function (options) {\r\n            if (options.updateMethod && $type.hasValue(options.from)) {\r\n                var value = options.updateMethod(progress, options.from, options.to);\r\n                if (options.childObject) {\r\n                    options.childObject[options.property] = value;\r\n                }\r\n                else {\r\n                    _this.object[options.property] = value;\r\n                }\r\n            }\r\n        });\r\n        this.progress = progress;\r\n        if (this.events.isEnabled(\"animationprogress\")) {\r\n            var event_4 = {\r\n                type: \"animationprogress\",\r\n                target: this,\r\n                progress: this.progress\r\n            };\r\n            this.events.dispatchImmediately(\"animationprogress\", event_4);\r\n        }\r\n        system.requestFrame();\r\n    };\r\n    /**\r\n     * Tracks and sets progress according to time or frames.\r\n     *\r\n     * @ignore Exclude from docs\r\n     * @return Animation\r\n     */\r\n    Animation.prototype.update = function () {\r\n        if (!this._pause) {\r\n            var progress = void 0;\r\n            this._time = $math.fitToRange(Date.now() - this._startTime, 0, this.duration);\r\n            var timeProgress = this._time / this.duration;\r\n            progress = this.easing(timeProgress);\r\n            if (this.duration == 0 || !$type.isNumber(progress) || timeProgress >= 1) {\r\n                progress = 1;\r\n            }\r\n            this.setProgress(progress);\r\n            if ($math.round(this._time / this.duration, 6) == 1) {\r\n                this.end();\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Object.defineProperty(Animation.prototype, \"delayed\", {\r\n        /**\r\n         * Returns `true` if this animation is delayed.\r\n         *\r\n         * @readonly\r\n         * @return [description]\r\n         */\r\n        get: function () {\r\n            return this._delayTimeout ? true : false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Checks other animations currently running on the same object and removes\r\n     * overlapping options from those other animations that are contained in\r\n     * this animation.\r\n     *\r\n     * This is needed to ensure that no two confurent animations step on each\r\n     * other's toes by trying to animate the same property.\r\n     */\r\n    Animation.prototype.stopSameAnimations = function () {\r\n        var _this = this;\r\n        // stop animation of the same property\r\n        // TODO make this more efficient\r\n        // TODO don't copy the array\r\n        $array.each($array.copy(this.object.animations), function (animation) {\r\n            if (animation !== _this && !animation.delayed) {\r\n                var killed_1 = [];\r\n                $array.each(_this.animationOptions, function (newOptions) {\r\n                    $array.each(animation.animationOptions, function (oldOptions) {\r\n                        if (newOptions.property == oldOptions.property && newOptions.childObject == oldOptions.childObject) {\r\n                            killed_1.push(oldOptions);\r\n                            if (animation.animationOptions.length == 0) {\r\n                                animation.kill();\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n                $array.each(killed_1, function (oldOptions) {\r\n                    $array.remove(animation.animationOptions, oldOptions);\r\n                });\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Adds easing functions to \"function\" fields.\r\n     *\r\n     * @param field  Field name\r\n     * @return Assign as function?\r\n     */\r\n    Animation.prototype.asFunction = function (field) {\r\n        return field == \"easing\" || _super.prototype.asIs.call(this, field);\r\n    };\r\n    return Animation;\r\n}(BaseObjectEvents));\r\nexport { Animation };\r\n"]},"metadata":{},"sourceType":"module"}