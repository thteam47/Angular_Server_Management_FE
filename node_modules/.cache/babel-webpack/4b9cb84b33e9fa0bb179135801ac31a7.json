{"ast":null,"code":"import * as $array from \"./Array\";\nimport * as $log from \"./Log\";\n\nvar Native = function () {\n  function Native() {\n    var _this = this;\n\n    this._targets = [];\n    this._observer = new ResizeObserver(function (entries) {\n      $array.each(entries, function (entry) {\n        $array.each(_this._targets, function (x) {\n          if (x.target === entry.target) {\n            x.callback();\n          }\n        });\n      });\n    });\n  }\n\n  Native.prototype.addTarget = function (target, callback) {\n    this._observer.observe(target, {\n      box: \"content-box\"\n    });\n\n    this._targets.push({\n      target: target,\n      callback: callback\n    });\n  };\n\n  Native.prototype.removeTarget = function (target) {\n    this._observer.unobserve(target);\n\n    $array.keepIf(this._targets, function (x) {\n      return x.target !== target;\n    });\n  };\n\n  return Native;\n}();\n\nvar Raf = function () {\n  function Raf() {\n    this._targets = [];\n  }\n\n  Raf.prototype.addTarget = function (target, callback) {\n    var _this = this;\n\n    if (this._targets.length === 0) {\n      var lastTime_1 = null;\n\n      var loop_1 = function () {\n        var currentTime = Date.now();\n\n        if (lastTime_1 === null || currentTime > lastTime_1 + Raf.delay) {\n          lastTime_1 = currentTime;\n          $array.each(_this._targets, function (x) {\n            var newSize = x.target.getBoundingClientRect();\n\n            if (newSize.width !== x.size.width || newSize.height !== x.size.height) {\n              x.size = newSize;\n              x.callback();\n            }\n          });\n        }\n\n        _this._timer = requestAnimationFrame(loop_1);\n      };\n\n      this._timer = requestAnimationFrame(loop_1);\n    }\n\n    var size = target.getBoundingClientRect();\n\n    this._targets.push({\n      target: target,\n      callback: callback,\n      size: size\n    });\n  };\n\n  Raf.prototype.removeTarget = function (target) {\n    $array.keepIf(this._targets, function (x) {\n      return x.target !== target;\n    });\n\n    if (this._targets.length === 0) {\n      cancelAnimationFrame(this._timer);\n    }\n  };\n\n  Raf.delay = 200;\n  return Raf;\n}();\n\nvar observer = null;\n\nfunction makeSensor() {\n  if (observer === null) {\n    if (typeof ResizeObserver !== \"undefined\") {\n      observer = new Native();\n    } else {\n      observer = new Raf();\n    }\n  }\n\n  return observer;\n}\n\nvar ResizeSensor = function () {\n  function ResizeSensor(element, callback) {\n    this._disposed = false;\n    this._sensor = makeSensor();\n    this._element = element;\n\n    this._sensor.addTarget(element, callback);\n  }\n\n  ResizeSensor.prototype.isDisposed = function () {\n    return this._disposed;\n  };\n\n  ResizeSensor.prototype.dispose = function () {\n    if (!this._disposed) {\n      this._disposed = true;\n\n      this._sensor.removeTarget(this._element);\n    }\n  };\n\n  Object.defineProperty(ResizeSensor.prototype, \"sensor\", {\n    get: function () {\n      return this._sensor;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Deprecated: do not use.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n  ResizeSensor.prototype.reset = function () {\n    $log.warn(\"resizeSensor.reset() is no longer needed and can be removed\");\n  };\n\n  return ResizeSensor;\n}();\n\nexport { ResizeSensor }; //# sourceMappingURL=ResizeSensor.js.map","map":null,"metadata":{},"sourceType":"module"}