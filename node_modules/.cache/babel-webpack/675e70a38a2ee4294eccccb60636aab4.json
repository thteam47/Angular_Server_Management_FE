{"ast":null,"code":"import { Breakpoints } from '@angular/cdk/layout';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { AccountComponent } from '../account/account.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-toastr\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"src/app/services/sibling.service\";\nimport * as i4 from \"src/app/services/error-toastr.service\";\nimport * as i5 from \"src/app/services/user.service\";\nimport * as i6 from \"@angular/cdk/layout\";\nimport * as i7 from \"./../../../services/menu.service\";\nimport * as i8 from \"@angular/router\";\nimport * as i9 from \"@angular/material/sidenav\";\nimport * as i10 from \"@angular/material/toolbar\";\nimport * as i11 from \"@angular/material/list\";\nimport * as i12 from \"@angular/common\";\nimport * as i13 from \"@angular/material/button\";\nimport * as i14 from \"@angular/material/icon\";\n\nfunction NavigationComponent_div_9_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 10, 11);\n    i0.ɵɵelementStart(2, \"mat-icon\", 12);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r5 = i0.ɵɵreference(1);\n\n    const item_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵclassProp(\"list-item-active\", _r5.isActive);\n    i0.ɵɵproperty(\"routerLink\", item_r3.redirect);\n    i0.ɵɵattribute(\"tabindex\", _r5.isActive ? 0 : -1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(item_r3.icon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r3.nameMenu, \"\");\n  }\n}\n\nfunction NavigationComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NavigationComponent_div_9_a_1_Template, 5, 6, \"a\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r3.show);\n  }\n}\n\nfunction NavigationComponent_button_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function NavigationComponent_button_12_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      i0.ɵɵnextContext();\n\n      const _r0 = i0.ɵɵreference(2);\n\n      return _r0.toggle();\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\", 14);\n    i0.ɵɵtext(2, \"menu\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function () {\n  return [\"/login\"];\n};\n\nexport class NavigationComponent {\n  constructor(toastr, dialog, sibling, errToastr, user, breakpointObserver, _menuServices, sibServices, router) {\n    this.toastr = toastr;\n    this.dialog = dialog;\n    this.sibling = sibling;\n    this.errToastr = errToastr;\n    this.user = user;\n    this.breakpointObserver = breakpointObserver;\n    this._menuServices = _menuServices;\n    this.sibServices = sibServices;\n    this.router = router;\n    this.menu = [];\n    this.show = true;\n    this.role = \"\";\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay());\n  }\n\n  ngOnInit() {\n    this.listMenu();\n    let roleD = localStorage.getItem('role');\n\n    if (roleD != null) {\n      this.role = roleD;\n    } // if (this.role != \"admin\") {\n    //   this.menu[2].show = false;\n    // }\n\n  }\n\n  ngAfterViewInit() {\n    if (this.role != \"admin\") {// this.menu[2].show = false;\n    }\n  }\n\n  accounts() {\n    const dialogRef = this.dialog.open(AccountComponent, {\n      width: '700px',\n      height: '550px'\n    });\n    dialogRef.afterClosed().subscribe(() => {});\n  }\n\n  listMenu() {\n    this._menuServices.getMenu().subscribe(data => {\n      this.menu = data;\n\n      if (this.role != \"admin\") {\n        this.menu[2].show = false;\n      }\n    });\n  }\n\n  logout() {\n    this.user.logoutUser().subscribe(res => {\n      if (res.mess == \"Done\") {\n        this.toastr.success('Logout Successful', 'Done');\n      }\n    }), err => {\n      this.errToastr.errToastr(err);\n    };\n  }\n\n}\n\nNavigationComponent.ɵfac = function NavigationComponent_Factory(t) {\n  return new (t || NavigationComponent)(i0.ɵɵdirectiveInject(i1.ToastrService), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.SiblingService), i0.ɵɵdirectiveInject(i4.ErrorToastrService), i0.ɵɵdirectiveInject(i5.UserService), i0.ɵɵdirectiveInject(i6.BreakpointObserver), i0.ɵɵdirectiveInject(i7.MenuService), i0.ɵɵdirectiveInject(i3.SiblingService), i0.ɵɵdirectiveInject(i8.Router));\n};\n\nNavigationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NavigationComponent,\n  selectors: [[\"app-navigation\"]],\n  decls: 27,\n  vars: 13,\n  consts: [[1, \"sidenav-container\"], [\"fixedInViewport\", \"\", 1, \"sidenav\", 3, \"mode\", \"opened\"], [\"drawer\", \"\"], [4, \"ngFor\", \"ngForOf\"], [\"color\", \"primary\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\", 4, \"ngIf\"], [1, \"example-spacer\"], [\"mat-icon-button\", \"\", 1, \"example-icon\", \"favorite-icon\", \"account\", 3, \"click\"], [\"routerLinkActive\", \"router-link-active\", \"mat-icon-button\", \"\", 1, \"example-icon\", \"logout\", 3, \"routerLink\", \"click\"], [\"mat-list-item\", \"\", \"routerLinkActive\", \"\", 3, \"routerLink\", \"list-item-active\", 4, \"ngIf\"], [\"mat-list-item\", \"\", \"routerLinkActive\", \"\", 3, \"routerLink\"], [\"routerLinkActiveInstance\", \"routerLinkActive\"], [\"matListIcon\", \"\", 1, \"nav-list-icon\"], [\"type\", \"button\", \"aria-label\", \"Toggle sidenav\", \"mat-icon-button\", \"\", 3, \"click\"], [\"aria-label\", \"Side nav toggle icon\"]],\n  template: function NavigationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-sidenav-container\", 0);\n      i0.ɵɵelementStart(1, \"mat-sidenav\", 1, 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵpipe(4, \"async\");\n      i0.ɵɵpipe(5, \"async\");\n      i0.ɵɵelementStart(6, \"mat-toolbar\");\n      i0.ɵɵtext(7, \"Menu\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"mat-nav-list\");\n      i0.ɵɵtemplate(9, NavigationComponent_div_9_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"mat-sidenav-content\");\n      i0.ɵɵelementStart(11, \"mat-toolbar\", 4);\n      i0.ɵɵtemplate(12, NavigationComponent_button_12_Template, 3, 0, \"button\", 5);\n      i0.ɵɵelementStart(13, \"span\");\n      i0.ɵɵtext(14, \"Admin\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"span\", 6);\n      i0.ɵɵelementStart(16, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function NavigationComponent_Template_button_click_16_listener() {\n        return ctx.accounts();\n      });\n      i0.ɵɵelementStart(17, \"mat-icon\");\n      i0.ɵɵtext(18, \"manage_accounts\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"span\");\n      i0.ɵɵtext(20, \"Account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function NavigationComponent_Template_button_click_21_listener() {\n        return ctx.logout();\n      });\n      i0.ɵɵelementStart(22, \"mat-icon\");\n      i0.ɵɵtext(23, \"logout\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"span\");\n      i0.ɵɵtext(25, \"Logout\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(26, \"router-outlet\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"mode\", i0.ɵɵpipeBind1(4, 8, ctx.isHandset$) ? \"over\" : \"side\")(\"opened\", i0.ɵɵpipeBind1(5, 10, ctx.isHandset$) === false);\n      i0.ɵɵattribute(\"role\", i0.ɵɵpipeBind1(3, 6, ctx.isHandset$) ? \"dialog\" : \"navigation\");\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngForOf\", ctx.menu);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.isHandset$);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(12, _c0));\n    }\n  },\n  directives: [i9.MatSidenavContainer, i9.MatSidenav, i10.MatToolbar, i11.MatNavList, i12.NgForOf, i9.MatSidenavContent, i12.NgIf, i13.MatButton, i14.MatIcon, i8.RouterLinkActive, i8.RouterLink, i8.RouterOutlet, i11.MatListItem, i8.RouterLinkWithHref, i11.MatListIconCssMatStyler],\n  pipes: [i12.AsyncPipe],\n  styles: [\".sidenav-container[_ngcontent-%COMP%] {\\n  height: 100%;\\n}\\n\\n.sidenav[_ngcontent-%COMP%] {\\n  width: 20%;\\n}\\n\\n.sidenav[_ngcontent-%COMP%]   .mat-toolbar[_ngcontent-%COMP%] {\\n  background: inherit;\\n}\\n\\n.mat-toolbar.mat-primary[_ngcontent-%COMP%] {\\n  position: sticky;\\n  top: 0;\\n  z-index: 1;\\n}\\n\\n.example-spacer[_ngcontent-%COMP%] {\\n  flex: 1 1 auto;\\n}\\n\\n.account[_ngcontent-%COMP%] {\\n  margin-right: 50px;\\n}\\n\\n.logout[_ngcontent-%COMP%] {\\n  margin-right: 30px;\\n}\\n\\n.mat-list-item.active[_ngcontent-%COMP%] {\\n  color: red;\\n}\\n\\nmat-sidenav[_ngcontent-%COMP%] {\\n  background-image: url('background.png');\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmlnYXRpb24uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQVk7QUFDZDs7QUFFQTtFQUNFLFVBQVU7QUFDWjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixNQUFNO0VBQ04sVUFBVTtBQUNaOztBQUNBO0VBQ0UsY0FBYztBQUNoQjs7QUFDQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFDQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFVBQVU7QUFDWjs7QUFDQTtFQUNFLHVDQUE4RDtBQUNoRTs7QUFDQTs7OztHQUlHIiwiZmlsZSI6Im5hdmlnYXRpb24uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5zaWRlbmF2LWNvbnRhaW5lciB7XG4gIGhlaWdodDogMTAwJTtcbn1cblxuLnNpZGVuYXYge1xuICB3aWR0aDogMjAlO1xufVxuXG4uc2lkZW5hdiAubWF0LXRvb2xiYXIge1xuICBiYWNrZ3JvdW5kOiBpbmhlcml0O1xufVxuXG4ubWF0LXRvb2xiYXIubWF0LXByaW1hcnkge1xuICBwb3NpdGlvbjogc3RpY2t5O1xuICB0b3A6IDA7XG4gIHotaW5kZXg6IDE7XG59XG4uZXhhbXBsZS1zcGFjZXIge1xuICBmbGV4OiAxIDEgYXV0bztcbn1cbi5hY2NvdW50IHtcbiAgbWFyZ2luLXJpZ2h0OiA1MHB4O1xufVxuLmxvZ291dCB7XG4gIG1hcmdpbi1yaWdodDogMzBweDtcbn1cblxuLm1hdC1saXN0LWl0ZW0uYWN0aXZlIHtcbiAgY29sb3I6IHJlZDtcbn1cbm1hdC1zaWRlbmF2IHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4vLi4vLi4vLi4vLi4vYXNzZXRzL2ltZy9iYWNrZ3JvdW5kLnBuZyk7XG59XG4vKiAubWF0LXRvb2xiYXIubWF0LXByaW1hcnkge1xufVxuLm1hdC1kcmF3ZXItY29udGFpbmVyIHtcbiAgXG59ICovXG4iXX0= */\", \".mat-badge-content[_ngcontent-%COMP%] {\\n  font-weight: 600;\\n  font-size: 12px;\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-badge-small[_ngcontent-%COMP%]   .mat-badge-content[_ngcontent-%COMP%] {\\n  font-size: 9px;\\n}\\n\\n.mat-badge-large[_ngcontent-%COMP%]   .mat-badge-content[_ngcontent-%COMP%] {\\n  font-size: 24px;\\n}\\n\\n.mat-h1[_ngcontent-%COMP%], .mat-headline[_ngcontent-%COMP%], .mat-typography[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%] {\\n  font: 400 24px / 32px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n  margin: 0 0 16px;\\n}\\n\\n.mat-h2[_ngcontent-%COMP%], .mat-title[_ngcontent-%COMP%], .mat-typography[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n  font: 500 20px / 32px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n  margin: 0 0 16px;\\n}\\n\\n.mat-h3[_ngcontent-%COMP%], .mat-subheading-2[_ngcontent-%COMP%], .mat-typography[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%] {\\n  font: 400 16px / 28px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n  margin: 0 0 16px;\\n}\\n\\n.mat-h4[_ngcontent-%COMP%], .mat-subheading-1[_ngcontent-%COMP%], .mat-typography[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%] {\\n  font: 400 15px / 24px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n  margin: 0 0 16px;\\n}\\n\\n.mat-h5[_ngcontent-%COMP%], .mat-typography[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%] {\\n  font: 400 calc(14px * 0.83) / 20px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  margin: 0 0 12px;\\n}\\n\\n.mat-h6[_ngcontent-%COMP%], .mat-typography[_ngcontent-%COMP%]   h6[_ngcontent-%COMP%] {\\n  font: 400 calc(14px * 0.67) / 20px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  margin: 0 0 12px;\\n}\\n\\n.mat-body-strong[_ngcontent-%COMP%], .mat-body-2[_ngcontent-%COMP%] {\\n  font: 500 14px / 24px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n}\\n\\n.mat-body[_ngcontent-%COMP%], .mat-body-1[_ngcontent-%COMP%], .mat-typography[_ngcontent-%COMP%] {\\n  font: 400 14px / 20px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n}\\n\\n.mat-body[_ngcontent-%COMP%]   p[_ngcontent-%COMP%], .mat-body-1[_ngcontent-%COMP%]   p[_ngcontent-%COMP%], .mat-typography[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  margin: 0 0 12px;\\n}\\n\\n.mat-small[_ngcontent-%COMP%], .mat-caption[_ngcontent-%COMP%] {\\n  font: 400 12px / 20px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n}\\n\\n.mat-display-4[_ngcontent-%COMP%], .mat-typography[_ngcontent-%COMP%]   .mat-display-4[_ngcontent-%COMP%] {\\n  font: 300 112px / 112px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: -0.05em;\\n  margin: 0 0 56px;\\n}\\n\\n.mat-display-3[_ngcontent-%COMP%], .mat-typography[_ngcontent-%COMP%]   .mat-display-3[_ngcontent-%COMP%] {\\n  font: 400 56px / 56px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: -0.02em;\\n  margin: 0 0 64px;\\n}\\n\\n.mat-display-2[_ngcontent-%COMP%], .mat-typography[_ngcontent-%COMP%]   .mat-display-2[_ngcontent-%COMP%] {\\n  font: 400 45px / 48px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: -0.005em;\\n  margin: 0 0 64px;\\n}\\n\\n.mat-display-1[_ngcontent-%COMP%], .mat-typography[_ngcontent-%COMP%]   .mat-display-1[_ngcontent-%COMP%] {\\n  font: 400 34px / 40px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n  margin: 0 0 64px;\\n}\\n\\n.mat-bottom-sheet-container[_ngcontent-%COMP%] {\\n  font: 400 14px / 20px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n}\\n\\n.mat-button[_ngcontent-%COMP%], .mat-raised-button[_ngcontent-%COMP%], .mat-icon-button[_ngcontent-%COMP%], .mat-stroked-button[_ngcontent-%COMP%], .mat-flat-button[_ngcontent-%COMP%], .mat-fab[_ngcontent-%COMP%], .mat-mini-fab[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 14px;\\n  font-weight: 500;\\n}\\n\\n.mat-button-toggle[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-card[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-card-title[_ngcontent-%COMP%] {\\n  font-size: 24px;\\n  font-weight: 500;\\n}\\n\\n.mat-card-header[_ngcontent-%COMP%]   .mat-card-title[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n}\\n\\n.mat-card-subtitle[_ngcontent-%COMP%], .mat-card-content[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n}\\n\\n.mat-checkbox[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-checkbox-layout[_ngcontent-%COMP%]   .mat-checkbox-label[_ngcontent-%COMP%] {\\n  line-height: 24px;\\n}\\n\\n.mat-chip[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  font-weight: 500;\\n}\\n\\n.mat-chip[_ngcontent-%COMP%]   .mat-chip-trailing-icon.mat-icon[_ngcontent-%COMP%], .mat-chip[_ngcontent-%COMP%]   .mat-chip-remove.mat-icon[_ngcontent-%COMP%] {\\n  font-size: 18px;\\n}\\n\\n.mat-table[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-header-cell[_ngcontent-%COMP%] {\\n  font-size: 12px;\\n  font-weight: 500;\\n}\\n\\n.mat-cell[_ngcontent-%COMP%], .mat-footer-cell[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n}\\n\\n.mat-calendar[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-calendar-body[_ngcontent-%COMP%] {\\n  font-size: 13px;\\n}\\n\\n.mat-calendar-body-label[_ngcontent-%COMP%], .mat-calendar-period-button[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  font-weight: 500;\\n}\\n\\n.mat-calendar-table-header[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n  font-size: 11px;\\n  font-weight: 400;\\n}\\n\\n.mat-dialog-title[_ngcontent-%COMP%] {\\n  font: 500 20px / 32px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n}\\n\\n.mat-expansion-panel-header[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 15px;\\n  font-weight: 400;\\n}\\n\\n.mat-expansion-panel-content[_ngcontent-%COMP%] {\\n  font: 400 14px / 20px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n}\\n\\n.mat-form-field[_ngcontent-%COMP%] {\\n  font-size: inherit;\\n  font-weight: 400;\\n  line-height: 1.125;\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n}\\n\\n.mat-form-field-wrapper[_ngcontent-%COMP%] {\\n  padding-bottom: 1.34375em;\\n}\\n\\n.mat-form-field-prefix[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%], .mat-form-field-suffix[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\\n  font-size: 150%;\\n  line-height: 1.125;\\n}\\n\\n.mat-form-field-prefix[_ngcontent-%COMP%]   .mat-icon-button[_ngcontent-%COMP%], .mat-form-field-suffix[_ngcontent-%COMP%]   .mat-icon-button[_ngcontent-%COMP%] {\\n  height: 1.5em;\\n  width: 1.5em;\\n}\\n\\n.mat-form-field-prefix[_ngcontent-%COMP%]   .mat-icon-button[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%], .mat-form-field-suffix[_ngcontent-%COMP%]   .mat-icon-button[_ngcontent-%COMP%]   .mat-icon[_ngcontent-%COMP%] {\\n  height: 1.125em;\\n  line-height: 1.125;\\n}\\n\\n.mat-form-field-infix[_ngcontent-%COMP%] {\\n  padding: 0.5em 0;\\n  border-top: 0.84375em solid transparent;\\n}\\n\\n.mat-form-field-can-float.mat-form-field-should-float[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%], .mat-form-field-can-float[_ngcontent-%COMP%]   .mat-input-server[_ngcontent-%COMP%]:focus    + .mat-form-field-label-wrapper[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n  transform: translateY(-1.34375em) scale(0.75);\\n  width: 133.3333333333%;\\n}\\n\\n.mat-form-field-can-float[_ngcontent-%COMP%]   .mat-input-server[label][_ngcontent-%COMP%]:not(:label-shown)    + .mat-form-field-label-wrapper[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n  transform: translateY(-1.34374em) scale(0.75);\\n  width: 133.3333433333%;\\n}\\n\\n.mat-form-field-label-wrapper[_ngcontent-%COMP%] {\\n  top: -0.84375em;\\n  padding-top: 0.84375em;\\n}\\n\\n.mat-form-field-label[_ngcontent-%COMP%] {\\n  top: 1.34375em;\\n}\\n\\n.mat-form-field-underline[_ngcontent-%COMP%] {\\n  bottom: 1.34375em;\\n}\\n\\n.mat-form-field-subscript-wrapper[_ngcontent-%COMP%] {\\n  font-size: 75%;\\n  margin-top: 0.6666666667em;\\n  top: calc(100% - 1.7916666667em);\\n}\\n\\n.mat-form-field-appearance-legacy[_ngcontent-%COMP%]   .mat-form-field-wrapper[_ngcontent-%COMP%] {\\n  padding-bottom: 1.25em;\\n}\\n\\n.mat-form-field-appearance-legacy[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\\n  padding: 0.4375em 0;\\n}\\n\\n.mat-form-field-appearance-legacy.mat-form-field-can-float.mat-form-field-should-float[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%], .mat-form-field-appearance-legacy.mat-form-field-can-float[_ngcontent-%COMP%]   .mat-input-server[_ngcontent-%COMP%]:focus    + .mat-form-field-label-wrapper[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n  transform: translateY(-1.28125em) scale(0.75) perspective(100px) translateZ(0.001px);\\n  -ms-transform: translateY(-1.28125em) scale(0.75);\\n  width: 133.3333333333%;\\n}\\n\\n.mat-form-field-appearance-legacy.mat-form-field-can-float[_ngcontent-%COMP%]   .mat-form-field-autofill-control[_ngcontent-%COMP%]:-webkit-autofill    + .mat-form-field-label-wrapper[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n  transform: translateY(-1.28125em) scale(0.75) perspective(100px) translateZ(0.00101px);\\n  -ms-transform: translateY(-1.28124em) scale(0.75);\\n  width: 133.3333433333%;\\n}\\n\\n.mat-form-field-appearance-legacy.mat-form-field-can-float[_ngcontent-%COMP%]   .mat-input-server[label][_ngcontent-%COMP%]:not(:label-shown)    + .mat-form-field-label-wrapper[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n  transform: translateY(-1.28125em) scale(0.75) perspective(100px) translateZ(0.00102px);\\n  -ms-transform: translateY(-1.28123em) scale(0.75);\\n  width: 133.3333533333%;\\n}\\n\\n.mat-form-field-appearance-legacy[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n  top: 1.28125em;\\n}\\n\\n.mat-form-field-appearance-legacy[_ngcontent-%COMP%]   .mat-form-field-underline[_ngcontent-%COMP%] {\\n  bottom: 1.25em;\\n}\\n\\n.mat-form-field-appearance-legacy[_ngcontent-%COMP%]   .mat-form-field-subscript-wrapper[_ngcontent-%COMP%] {\\n  margin-top: 0.5416666667em;\\n  top: calc(100% - 1.6666666667em);\\n}\\n\\n@media print {\\n  .mat-form-field-appearance-legacy.mat-form-field-can-float.mat-form-field-should-float[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%], .mat-form-field-appearance-legacy.mat-form-field-can-float[_ngcontent-%COMP%]   .mat-input-server[_ngcontent-%COMP%]:focus    + .mat-form-field-label-wrapper[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n    transform: translateY(-1.28122em) scale(0.75);\\n  }\\n  .mat-form-field-appearance-legacy.mat-form-field-can-float[_ngcontent-%COMP%]   .mat-form-field-autofill-control[_ngcontent-%COMP%]:-webkit-autofill    + .mat-form-field-label-wrapper[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n    transform: translateY(-1.28121em) scale(0.75);\\n  }\\n  .mat-form-field-appearance-legacy.mat-form-field-can-float[_ngcontent-%COMP%]   .mat-input-server[label][_ngcontent-%COMP%]:not(:label-shown)    + .mat-form-field-label-wrapper[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n    transform: translateY(-1.2812em) scale(0.75);\\n  }\\n}\\n\\n.mat-form-field-appearance-fill[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\\n  padding: 0.25em 0 0.75em 0;\\n}\\n\\n.mat-form-field-appearance-fill[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n  top: 1.09375em;\\n  margin-top: -0.5em;\\n}\\n\\n.mat-form-field-appearance-fill.mat-form-field-can-float.mat-form-field-should-float[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%], .mat-form-field-appearance-fill.mat-form-field-can-float[_ngcontent-%COMP%]   .mat-input-server[_ngcontent-%COMP%]:focus    + .mat-form-field-label-wrapper[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n  transform: translateY(-0.59375em) scale(0.75);\\n  width: 133.3333333333%;\\n}\\n\\n.mat-form-field-appearance-fill.mat-form-field-can-float[_ngcontent-%COMP%]   .mat-input-server[label][_ngcontent-%COMP%]:not(:label-shown)    + .mat-form-field-label-wrapper[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n  transform: translateY(-0.59374em) scale(0.75);\\n  width: 133.3333433333%;\\n}\\n\\n.mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-infix[_ngcontent-%COMP%] {\\n  padding: 1em 0 1em 0;\\n}\\n\\n.mat-form-field-appearance-outline[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n  top: 1.84375em;\\n  margin-top: -0.25em;\\n}\\n\\n.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%], .mat-form-field-appearance-outline.mat-form-field-can-float[_ngcontent-%COMP%]   .mat-input-server[_ngcontent-%COMP%]:focus    + .mat-form-field-label-wrapper[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n  transform: translateY(-1.59375em) scale(0.75);\\n  width: 133.3333333333%;\\n}\\n\\n.mat-form-field-appearance-outline.mat-form-field-can-float[_ngcontent-%COMP%]   .mat-input-server[label][_ngcontent-%COMP%]:not(:label-shown)    + .mat-form-field-label-wrapper[_ngcontent-%COMP%]   .mat-form-field-label[_ngcontent-%COMP%] {\\n  transform: translateY(-1.59374em) scale(0.75);\\n  width: 133.3333433333%;\\n}\\n\\n.mat-grid-tile-header[_ngcontent-%COMP%], .mat-grid-tile-footer[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n}\\n\\n.mat-grid-tile-header[_ngcontent-%COMP%]   .mat-line[_ngcontent-%COMP%], .mat-grid-tile-footer[_ngcontent-%COMP%]   .mat-line[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  display: block;\\n  box-sizing: border-box;\\n}\\n\\n.mat-grid-tile-header[_ngcontent-%COMP%]   .mat-line[_ngcontent-%COMP%]:nth-child(n+2), .mat-grid-tile-footer[_ngcontent-%COMP%]   .mat-line[_ngcontent-%COMP%]:nth-child(n+2) {\\n  font-size: 12px;\\n}\\n\\ninput.mat-input-element[_ngcontent-%COMP%] {\\n  margin-top: -0.0625em;\\n}\\n\\n.mat-menu-item[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 14px;\\n  font-weight: 400;\\n}\\n\\n.mat-paginator[_ngcontent-%COMP%], .mat-paginator-page-size[_ngcontent-%COMP%]   .mat-select-trigger[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 12px;\\n}\\n\\n.mat-radio-button[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-select[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-select-trigger[_ngcontent-%COMP%] {\\n  height: 1.125em;\\n}\\n\\n.mat-slide-toggle-content[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-slider-thumb-label-text[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 12px;\\n  font-weight: 500;\\n}\\n\\n.mat-stepper-vertical[_ngcontent-%COMP%], .mat-stepper-horizontal[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-step-label[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  font-weight: 400;\\n}\\n\\n.mat-step-sub-label-error[_ngcontent-%COMP%] {\\n  font-weight: normal;\\n}\\n\\n.mat-step-label-error[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n}\\n\\n.mat-step-label-selected[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  font-weight: 500;\\n}\\n\\n.mat-tab-group[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-tab-label[_ngcontent-%COMP%], .mat-tab-link[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 14px;\\n  font-weight: 500;\\n}\\n\\n.mat-toolbar[_ngcontent-%COMP%], .mat-toolbar[_ngcontent-%COMP%]   h1[_ngcontent-%COMP%], .mat-toolbar[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%], .mat-toolbar[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%], .mat-toolbar[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%], .mat-toolbar[_ngcontent-%COMP%]   h5[_ngcontent-%COMP%], .mat-toolbar[_ngcontent-%COMP%]   h6[_ngcontent-%COMP%] {\\n  font: 500 20px / 32px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n  margin: 0;\\n}\\n\\n.mat-tooltip[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 10px;\\n  padding-top: 6px;\\n  padding-bottom: 6px;\\n}\\n\\n.mat-tooltip-handset[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n  padding-top: 8px;\\n  padding-bottom: 8px;\\n}\\n\\n.mat-list-item[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-list-option[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-list-base[_ngcontent-%COMP%]   .mat-list-item[_ngcontent-%COMP%] {\\n  font-size: 16px;\\n}\\n\\n.mat-list-base[_ngcontent-%COMP%]   .mat-list-item[_ngcontent-%COMP%]   .mat-line[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  display: block;\\n  box-sizing: border-box;\\n}\\n\\n.mat-list-base[_ngcontent-%COMP%]   .mat-list-item[_ngcontent-%COMP%]   .mat-line[_ngcontent-%COMP%]:nth-child(n+2) {\\n  font-size: 14px;\\n}\\n\\n.mat-list-base[_ngcontent-%COMP%]   .mat-list-option[_ngcontent-%COMP%] {\\n  font-size: 16px;\\n}\\n\\n.mat-list-base[_ngcontent-%COMP%]   .mat-list-option[_ngcontent-%COMP%]   .mat-line[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  display: block;\\n  box-sizing: border-box;\\n}\\n\\n.mat-list-base[_ngcontent-%COMP%]   .mat-list-option[_ngcontent-%COMP%]   .mat-line[_ngcontent-%COMP%]:nth-child(n+2) {\\n  font-size: 14px;\\n}\\n\\n.mat-list-base[_ngcontent-%COMP%]   .mat-subheader[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 14px;\\n  font-weight: 500;\\n}\\n\\n.mat-list-base[dense][_ngcontent-%COMP%]   .mat-list-item[_ngcontent-%COMP%] {\\n  font-size: 12px;\\n}\\n\\n.mat-list-base[dense][_ngcontent-%COMP%]   .mat-list-item[_ngcontent-%COMP%]   .mat-line[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  display: block;\\n  box-sizing: border-box;\\n}\\n\\n.mat-list-base[dense][_ngcontent-%COMP%]   .mat-list-item[_ngcontent-%COMP%]   .mat-line[_ngcontent-%COMP%]:nth-child(n+2) {\\n  font-size: 12px;\\n}\\n\\n.mat-list-base[dense][_ngcontent-%COMP%]   .mat-list-option[_ngcontent-%COMP%] {\\n  font-size: 12px;\\n}\\n\\n.mat-list-base[dense][_ngcontent-%COMP%]   .mat-list-option[_ngcontent-%COMP%]   .mat-line[_ngcontent-%COMP%] {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  display: block;\\n  box-sizing: border-box;\\n}\\n\\n.mat-list-base[dense][_ngcontent-%COMP%]   .mat-list-option[_ngcontent-%COMP%]   .mat-line[_ngcontent-%COMP%]:nth-child(n+2) {\\n  font-size: 12px;\\n}\\n\\n.mat-list-base[dense][_ngcontent-%COMP%]   .mat-subheader[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 12px;\\n  font-weight: 500;\\n}\\n\\n.mat-option[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 16px;\\n}\\n\\n.mat-optgroup-label[_ngcontent-%COMP%] {\\n  font: 500 14px / 24px Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  letter-spacing: normal;\\n}\\n\\n.mat-simple-snackbar[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n  font-size: 14px;\\n}\\n\\n.mat-simple-snackbar-action[_ngcontent-%COMP%] {\\n  line-height: 1;\\n  font-family: inherit;\\n  font-size: inherit;\\n  font-weight: 500;\\n}\\n\\n.mat-tree[_ngcontent-%COMP%] {\\n  font-family: Roboto, \\\"Helvetica Neue\\\", sans-serif;\\n}\\n\\n.mat-tree-node[_ngcontent-%COMP%], .mat-nested-tree-node[_ngcontent-%COMP%] {\\n  font-weight: 400;\\n  font-size: 14px;\\n}\\n\\n.mat-ripple[_ngcontent-%COMP%] {\\n  overflow: hidden;\\n  position: relative;\\n}\\n\\n.mat-ripple[_ngcontent-%COMP%]:not(:empty) {\\n  transform: translateZ(0);\\n}\\n\\n.mat-ripple.mat-ripple-unbounded[_ngcontent-%COMP%] {\\n  overflow: visible;\\n}\\n\\n.mat-ripple-element[_ngcontent-%COMP%] {\\n  position: absolute;\\n  border-radius: 50%;\\n  pointer-events: none;\\n  transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\\n  transform: scale(0);\\n}\\n\\n.cdk-high-contrast-active[_ngcontent-%COMP%]   .mat-ripple-element[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.cdk-visually-hidden[_ngcontent-%COMP%] {\\n  border: 0;\\n  clip: rect(0 0 0 0);\\n  height: 1px;\\n  margin: -1px;\\n  overflow: hidden;\\n  padding: 0;\\n  position: absolute;\\n  width: 1px;\\n  white-space: nowrap;\\n  outline: 0;\\n  -webkit-appearance: none;\\n  -moz-appearance: none;\\n}\\n\\n.cdk-overlay-container[_ngcontent-%COMP%], .cdk-global-overlay-wrapper[_ngcontent-%COMP%] {\\n  pointer-events: none;\\n  top: 0;\\n  left: 0;\\n  height: 100%;\\n  width: 100%;\\n}\\n\\n.cdk-overlay-container[_ngcontent-%COMP%] {\\n  position: fixed;\\n  z-index: 1000;\\n}\\n\\n.cdk-overlay-container[_ngcontent-%COMP%]:empty {\\n  display: none;\\n}\\n\\n.cdk-global-overlay-wrapper[_ngcontent-%COMP%] {\\n  display: flex;\\n  position: absolute;\\n  z-index: 1000;\\n}\\n\\n.cdk-overlay-pane[_ngcontent-%COMP%] {\\n  position: absolute;\\n  pointer-events: auto;\\n  box-sizing: border-box;\\n  z-index: 1000;\\n  display: flex;\\n  max-width: 100%;\\n  max-height: 100%;\\n}\\n\\n.cdk-overlay-backdrop[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n  z-index: 1000;\\n  pointer-events: auto;\\n  -webkit-tap-highlight-color: transparent;\\n  transition: opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1);\\n  opacity: 0;\\n}\\n\\n.cdk-overlay-backdrop.cdk-overlay-backdrop-showing[_ngcontent-%COMP%] {\\n  opacity: 1;\\n}\\n\\n.cdk-high-contrast-active[_ngcontent-%COMP%]   .cdk-overlay-backdrop.cdk-overlay-backdrop-showing[_ngcontent-%COMP%] {\\n  opacity: 0.6;\\n}\\n\\n.cdk-overlay-dark-backdrop[_ngcontent-%COMP%] {\\n  background: rgba(0, 0, 0, 0.32);\\n}\\n\\n.cdk-overlay-transparent-backdrop[_ngcontent-%COMP%], .cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing[_ngcontent-%COMP%] {\\n  opacity: 0;\\n}\\n\\n.cdk-overlay-connected-position-bounding-box[_ngcontent-%COMP%] {\\n  position: absolute;\\n  z-index: 1000;\\n  display: flex;\\n  flex-direction: column;\\n  min-width: 1px;\\n  min-height: 1px;\\n}\\n\\n.cdk-global-scrollblock[_ngcontent-%COMP%] {\\n  position: fixed;\\n  width: 100%;\\n  overflow-y: scroll;\\n}\\n\\ntextarea.cdk-textarea-autosize[_ngcontent-%COMP%] {\\n  resize: none;\\n}\\n\\ntextarea.cdk-textarea-autosize-measuring[_ngcontent-%COMP%] {\\n  padding: 2px 0 !important;\\n  box-sizing: content-box !important;\\n  height: auto !important;\\n  overflow: hidden !important;\\n}\\n\\ntextarea.cdk-textarea-autosize-measuring-firefox[_ngcontent-%COMP%] {\\n  padding: 2px 0 !important;\\n  box-sizing: content-box !important;\\n  height: 0 !important;\\n}\\n\\n@keyframes cdk-text-field-autofill-start {\\n  \\n}\\n\\n@keyframes cdk-text-field-autofill-end {\\n  \\n}\\n\\n.cdk-text-field-autofill-monitored[_ngcontent-%COMP%]:-webkit-autofill {\\n  animation: cdk-text-field-autofill-start 0s 1ms;\\n}\\n\\n.cdk-text-field-autofill-monitored[_ngcontent-%COMP%]:not(:-webkit-autofill) {\\n  animation: cdk-text-field-autofill-end 0s 1ms;\\n}\\n\\n.mat-focus-indicator[_ngcontent-%COMP%] {\\n  position: relative;\\n}\\n\\n.mat-mdc-focus-indicator[_ngcontent-%COMP%] {\\n  position: relative;\\n}\\n\\n.list-item-active[_ngcontent-%COMP%] {\\n  font-weight: bold;\\n  color: #ff3d00 !important;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\"]\n});","map":{"version":3,"sources":["/home/unutu/go/src/github.com/thteam47/admin-portal/src/app/components/dashboard/navigation/navigation.component.ts","/home/unutu/go/src/github.com/thteam47/admin-portal/src/app/components/dashboard/navigation/navigation.component.html"],"names":[],"mappings":"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","sourcesContent":["import { UserService } from 'src/app/services/user.service';\nimport { Router } from '@angular/router';\nimport { MenuService } from './../../../services/menu.service';\nimport { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { Menu } from 'src/app/interface/menu';\nimport { SiblingService } from 'src/app/services/sibling.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { ErrorToastrService } from 'src/app/services/error-toastr.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AccountComponent } from '../account/account.component';\n\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.css', './navigation.component.scss']\n})\nexport class NavigationComponent {\n\n  menu: Menu[] = [];\n  show = true;\n  role = \"\"\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n  ngOnInit(): void {\n    this.listMenu();\n    let roleD = localStorage.getItem('role')\n    if (roleD != null){\n      this.role = roleD\n    }\n    // if (this.role != \"admin\") {\n    //   this.menu[2].show = false;\n    // }\n  }\n  constructor(private toastr: ToastrService,public dialog: MatDialog, private sibling: SiblingService, private errToastr: ErrorToastrService, private user: UserService, private breakpointObserver: BreakpointObserver, private _menuServices: MenuService, private sibServices: SiblingService, private router: Router) { }\n  ngAfterViewInit(){\n    if (this.role != \"admin\") {\n      // this.menu[2].show = false;\n    }\n  }\n  accounts(){\n    const dialogRef = this.dialog.open(AccountComponent, {\n      width: '700px',\n      height: '550px',\n    });\n    dialogRef.afterClosed().subscribe(() => {\n      \n    });\n  }\n  listMenu() {\n    this._menuServices.getMenu().subscribe(data => {\n      this.menu = data;\n      if (this.role != \"admin\") {\n        this.menu[2].show = false;\n      }\n    },\n    )\n  }\n  logout() {\n    this.user.logoutUser().subscribe((res: any) => {\n      if (res.mess == \"Done\") {\n        this.toastr.success('Logout Successful', 'Done');\n      }\n    }),\n      (err: any) => {\n        this.errToastr.errToastr(err);\n      }\n  }\n\n\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav\n    #drawer\n    class=\"sidenav\"\n    fixedInViewport\n    [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n    [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n    [opened]=\"(isHandset$ | async) === false\"\n  >\n    <mat-toolbar>Menu</mat-toolbar>\n    <mat-nav-list>\n      <!-- <mat-list-item *ngFor=\"let item of menu\" [routerLink]=\"item.redirect\" [routerLinkActive]=\"['active']\">\n        <mat-icon  matListIcon class=\"nav-list-icon\">{{ item.icon }}</mat-icon>\n        <a matLine>{{ item.nameMenu }}</a>\n      </mat-list-item> -->\n      <div *ngFor=\"let item of menu\">\n        <a\n          *ngIf=\"item.show\"\n          mat-list-item\n          [routerLink]=\"item.redirect\"\n          routerLinkActive\n          #routerLinkActiveInstance=\"routerLinkActive\"\n          [attr.tabindex]=\"routerLinkActiveInstance.isActive ? 0 : -1\"\n          [class.list-item-active]=\"routerLinkActiveInstance.isActive\"\n        >\n          <mat-icon matListIcon class=\"nav-list-icon\">{{\n            item.icon\n          }}</mat-icon>\n          {{ item.nameMenu }}</a\n        >\n      </div>\n      <!-- <a\n        *ngIf=\"show\"\n        mat-list-item\n        [routerLink]=\"/dashboard/newserver\"\n        routerLinkActive\n        #routerLinkActiveInstance=\"routerLinkActive\"\n        [attr.tabindex]=\"routerLinkActiveInstance.isActive ? 0 : -1\"\n        [class.list-item-active]=\"routerLinkActiveInstance.isActive\"\n      >\n        <mat-icon matListIcon class=\"nav-list-icon\">supervisor_account</mat-icon>\n        User</a\n      > -->\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n      <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$\"\n      >\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span>Admin</span>\n      <span class=\"example-spacer\"></span>\n      <button mat-icon-button class=\"example-icon favorite-icon account\" (click) = \"accounts()\">\n        <mat-icon>manage_accounts</mat-icon>\n        <span>Account</span>\n      </button>\n      <button\n        [routerLink]=\"['/login']\"\n        routerLinkActive=\"router-link-active\"\n        mat-icon-button\n        class=\"example-icon logout\"\n        (click)=\"logout()\"\n      >\n        <mat-icon>logout</mat-icon>\n        <span>Logout</span>\n      </button>\n    </mat-toolbar>\n    <!-- Add Content Here -->\n    <router-outlet></router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}