{"ast":null,"code":"import { Ajax, extend, getValue, isNullOrUndefined, merge, setValue } from '@syncfusion/ej2-base';\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\n\nclass Query {\n  /**\n   * Constructor for Query class.\n   * @param  {string|string[]} from?\n   * @hidden\n   */\n  constructor(from) {\n    /** @hidden */\n    this.subQuery = null;\n    /** @hidden */\n\n    this.isChild = false;\n    /** @hidden */\n\n    this.distincts = [];\n    this.queries = [];\n    this.key = '';\n    this.fKey = '';\n\n    if (typeof from === 'string') {\n      this.fromTable = from;\n    } else if (from && from instanceof Array) {\n      this.lookups = from;\n    }\n\n    this.expands = [];\n    this.sortedColumns = [];\n    this.groupedColumns = [];\n    this.subQuery = null;\n    this.isChild = false;\n    this.params = [];\n    this.lazyLoad = [];\n    return this;\n  }\n  /**\n   * Sets the primary key.\n   * @param  {string} field - Defines the column field.\n   */\n\n\n  setKey(field) {\n    this.key = field;\n    return this;\n  }\n  /**\n   * Sets default DataManager to execute query.\n   * @param  {DataManager} dataManager - Defines the DataManager.\n   */\n\n\n  using(dataManager) {\n    this.dataManager = dataManager;\n    return this;\n  }\n  /**\n   * Executes query with the given DataManager.\n   * @param  {DataManager} dataManager - Defines the DataManager.\n   * @param  {Function} done - Defines the success callback.\n   * @param  {Function} fail - Defines the failure callback.\n   * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n   *\n   * <pre>\n   * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n   * let query: Query = new Query();\n   * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n   * let promise: Promise< Object > = query.execute(dataManager);\n   * promise.then((e: { result: Object }) => { });\n   * </pre>\n   */\n\n\n  execute(dataManager, done, fail, always) {\n    dataManager = dataManager || this.dataManager;\n\n    if (dataManager) {\n      return dataManager.executeQuery(this, done, fail, always);\n    }\n\n    return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n  }\n  /**\n   * Executes query with the local datasource.\n   * @param  {DataManager} dataManager - Defines the DataManager.\n   */\n\n\n  executeLocal(dataManager) {\n    dataManager = dataManager || this.dataManager;\n\n    if (dataManager) {\n      return dataManager.executeLocal(this);\n    }\n\n    return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n  }\n  /**\n   * Creates deep copy of the Query object.\n   */\n\n\n  clone() {\n    let cloned = new Query();\n    cloned.queries = this.queries.slice(0);\n    cloned.key = this.key;\n    cloned.isChild = this.isChild;\n    cloned.dataManager = this.dataManager;\n    cloned.fromTable = this.fromTable;\n    cloned.params = this.params.slice(0);\n    cloned.expands = this.expands.slice(0);\n    cloned.sortedColumns = this.sortedColumns.slice(0);\n    cloned.groupedColumns = this.groupedColumns.slice(0);\n    cloned.subQuerySelector = this.subQuerySelector;\n    cloned.subQuery = this.subQuery;\n    cloned.fKey = this.fKey;\n    cloned.isCountRequired = this.isCountRequired;\n    cloned.distincts = this.distincts.slice(0);\n    cloned.lazyLoad = this.lazyLoad.slice(0);\n    return cloned;\n  }\n  /**\n   * Specifies the name of table to retrieve data in query execution.\n   * @param  {string} tableName - Defines the table name.\n   */\n\n\n  from(tableName) {\n    this.fromTable = tableName;\n    return this;\n  }\n  /**\n   * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n   * @param  {string} key - Defines the key of additional parameter.\n   * @param  {Function|string} value - Defines the value for the key.\n   */\n\n\n  addParams(key, value) {\n    if (typeof value === 'function') {\n      this.params.push({\n        key: key,\n        fn: value\n      });\n    } else {\n      this.params.push({\n        key: key,\n        value: value\n      });\n    }\n\n    return this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  distinct(fields) {\n    if (typeof fields === 'string') {\n      this.distincts = [].slice.call([fields], 0);\n    } else {\n      this.distincts = fields.slice(0);\n    }\n\n    return this;\n  }\n  /**\n   * Expands the related table.\n   * @param  {string|Object[]} tables\n   */\n\n\n  expand(tables) {\n    if (typeof tables === 'string') {\n      this.expands = [].slice.call([tables], 0);\n    } else {\n      this.expands = tables.slice(0);\n    }\n\n    return this;\n  }\n  /**\n   * Filter data with given filter criteria.\n   * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n   * @param  {string} operator - Defines the operator how to filter data.\n   * @param  {string|number|boolean} value - Defines the values to match with data.\n   * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   */\n\n\n  where(fieldName, operator, value, ignoreCase, ignoreAccent) {\n    operator = operator ? operator.toLowerCase() : null;\n    let predicate = null;\n\n    if (typeof fieldName === 'string') {\n      predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n    } else if (fieldName instanceof Predicate) {\n      predicate = fieldName;\n    }\n\n    this.queries.push({\n      fn: 'onWhere',\n      e: predicate\n    });\n    return this;\n  }\n  /**\n   * Search data with given search criteria.\n   * @param  {string|number|boolean} searchKey - Defines the search key.\n   * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n   * @param  {string} operator - Defines the operator how to search data.\n   * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   */\n\n\n  search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n    if (typeof fieldNames === 'string') {\n      fieldNames = [fieldNames];\n    }\n\n    if (!operator || operator === 'none') {\n      operator = 'contains';\n    }\n\n    let comparer = DataUtil.fnOperators[operator];\n    this.queries.push({\n      fn: 'onSearch',\n      e: {\n        fieldNames: fieldNames,\n        operator: operator,\n        searchKey: searchKey,\n        ignoreCase: ignoreCase,\n        ignoreAccent: ignoreAccent,\n        comparer: comparer\n      }\n    });\n    return this;\n  }\n  /**\n   * Sort the data with given sort criteria.\n   * By default, sort direction is ascending.\n   * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n   * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n   */\n\n\n  sortBy(fieldName, comparer, isFromGroup) {\n    return this.sortByForeignKey(fieldName, comparer, isFromGroup);\n  }\n  /**\n   * Sort the data with given sort criteria.\n   * By default, sort direction is ascending.\n   * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n   * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n   * @param  {string} direction - Defines the sort direction .\n   */\n\n\n  sortByForeignKey(fieldName, comparer, isFromGroup, direction) {\n    let order = !isNullOrUndefined(direction) ? direction : 'ascending';\n    let sorts;\n    let temp;\n\n    if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n      fieldName = fieldName.replace(/ desc$/i, '');\n      comparer = 'descending';\n    }\n\n    if (!comparer || typeof comparer === 'string') {\n      order = comparer ? comparer.toLowerCase() : 'ascending';\n      comparer = DataUtil.fnSort(comparer);\n    }\n\n    if (isFromGroup) {\n      sorts = Query.filterQueries(this.queries, 'onSortBy');\n\n      for (let i = 0; i < sorts.length; i++) {\n        temp = sorts[i].e.fieldName;\n\n        if (typeof temp === 'string') {\n          if (temp === fieldName) {\n            return this;\n          }\n        } else if (temp instanceof Array) {\n          for (let j = 0; j < temp.length; j++) {\n            if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n              return this;\n            }\n          }\n        }\n      }\n    }\n\n    this.queries.push({\n      fn: 'onSortBy',\n      e: {\n        fieldName: fieldName,\n        comparer: comparer,\n        direction: order\n      }\n    });\n    return this;\n  }\n  /**\n   * Sorts data in descending order.\n   * @param  {string} fieldName - Defines the column field.\n   */\n\n\n  sortByDesc(fieldName) {\n    return this.sortBy(fieldName, 'descending');\n  }\n  /**\n   * Groups data with the given field name.\n   * @param  {string} fieldName - Defines the column field.\n   */\n\n\n  group(fieldName, fn, format) {\n    this.sortBy(fieldName, null, true);\n    this.queries.push({\n      fn: 'onGroup',\n      e: {\n        fieldName: fieldName,\n        comparer: fn ? fn : null,\n        format: format ? format : null\n      }\n    });\n    return this;\n  }\n  /**\n   * Gets data based on the given page index and size.\n   * @param  {number} pageIndex - Defines the current page index.\n   * @param  {number} pageSize - Defines the no of records per page.\n   */\n\n\n  page(pageIndex, pageSize) {\n    this.queries.push({\n      fn: 'onPage',\n      e: {\n        pageIndex: pageIndex,\n        pageSize: pageSize\n      }\n    });\n    return this;\n  }\n  /**\n   * Gets data based on the given start and end index.\n   * @param  {number} start - Defines the start index of the datasource.\n   * @param  {number} end - Defines the end index of the datasource.\n   */\n\n\n  range(start, end) {\n    this.queries.push({\n      fn: 'onRange',\n      e: {\n        start: start,\n        end: end\n      }\n    });\n    return this;\n  }\n  /**\n   * Gets data from the top of the data source based on given number of records count.\n   * @param  {number} nos - Defines the no of records to retrieve from datasource.\n   */\n\n\n  take(nos) {\n    this.queries.push({\n      fn: 'onTake',\n      e: {\n        nos: nos\n      }\n    });\n    return this;\n  }\n  /**\n   * Skips data with given number of records count from the top of the data source.\n   * @param  {number} nos - Defines the no of records skip in the datasource.\n   */\n\n\n  skip(nos) {\n    this.queries.push({\n      fn: 'onSkip',\n      e: {\n        nos: nos\n      }\n    });\n    return this;\n  }\n  /**\n   * Selects specified columns from the data source.\n   * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n   */\n\n\n  select(fieldNames) {\n    if (typeof fieldNames === 'string') {\n      fieldNames = [].slice.call([fieldNames], 0);\n    }\n\n    this.queries.push({\n      fn: 'onSelect',\n      e: {\n        fieldNames: fieldNames\n      }\n    });\n    return this;\n  }\n  /**\n   * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n   * @param  {Query} query - Defines the query to relate two tables.\n   * @param  {Function} selectorFn - Defines the custom function to select records.\n   */\n\n\n  hierarchy(query, selectorFn) {\n    this.subQuerySelector = selectorFn;\n    this.subQuery = query;\n    return this;\n  }\n  /**\n   * Sets the foreign key which is used to get data from the related table.\n   * @param  {string} key - Defines the foreign key.\n   */\n\n\n  foreignKey(key) {\n    this.fKey = key;\n    return this;\n  }\n  /**\n   * It is used to get total number of records in the DataManager execution result.\n   */\n\n\n  requiresCount() {\n    this.isCountRequired = true;\n    return this;\n  } //type - sum, avg, min, max\n\n  /**\n   * Aggregate the data with given type and field name.\n   * @param  {string} type - Defines the aggregate type.\n   * @param  {string} field - Defines the column field to aggregate.\n   */\n\n\n  aggregate(type, field) {\n    this.queries.push({\n      fn: 'onAggregates',\n      e: {\n        field: field,\n        type: type\n      }\n    });\n    return this;\n  }\n  /**\n   * Pass array of filterColumn query for performing filter operation.\n   * @param  {QueryOptions[]} queries\n   * @param  {string} name\n   * @hidden\n   */\n\n\n  static filterQueries(queries, name) {\n    return queries.filter(q => {\n      return q.fn === name;\n    });\n  }\n  /**\n   * To get the list of queries which is already filtered in current data source.\n   * @param  {Object[]} queries\n   * @param  {string[]} singles\n   * @hidden\n   */\n\n\n  static filterQueryLists(queries, singles) {\n    let filtered = queries.filter(q => {\n      return singles.indexOf(q.fn) !== -1;\n    });\n    let res = {};\n\n    for (let i = 0; i < filtered.length; i++) {\n      if (!res[filtered[i].fn]) {\n        res[filtered[i].fn] = filtered[i].e;\n      }\n    }\n\n    return res;\n  }\n\n}\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\n\n\nclass Predicate {\n  /**\n   * Constructor for Predicate class.\n   * @param  {string|Predicate} field\n   * @param  {string} operator\n   * @param  {string|number|boolean|Predicate|Predicate[]} value\n   * @param  {boolean=false} ignoreCase\n   * @hidden\n   */\n  constructor(field, operator, value, ignoreCase = false, ignoreAccent) {\n    /** @hidden */\n    this.ignoreAccent = false;\n    /** @hidden */\n\n    this.isComplex = false;\n\n    if (typeof field === 'string') {\n      this.field = field;\n      this.operator = operator.toLowerCase();\n      this.value = value;\n      this.ignoreCase = ignoreCase;\n      this.ignoreAccent = ignoreAccent;\n      this.isComplex = false;\n      this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n    } else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n      this.isComplex = true;\n      this.condition = operator.toLowerCase();\n      this.predicates = [field];\n\n      if (value instanceof Array) {\n        [].push.apply(this.predicates, value);\n      } else {\n        this.predicates.push(value);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Adds n-number of new predicates on existing predicate with “and” condition.\n   * @param  {Object[]} args - Defines the collection of predicates.\n   */\n\n\n  static and(...args) {\n    return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n  }\n  /**\n   * Adds new predicate on existing predicate with “and” condition.\n   * @param  {string} field - Defines the column field.\n   * @param  {string} operator - Defines the operator how to filter data.\n   * @param  {string} value - Defines the values to match with data.\n   * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   */\n\n\n  and(field, operator, value, ignoreCase, ignoreAccent) {\n    return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n  }\n  /**\n   * Adds n-number of new predicates on existing predicate with “or” condition.\n   * @param  {Object[]} args - Defines the collection of predicates.\n   */\n\n\n  static or(...args) {\n    return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n  }\n  /**\n   * Adds new predicate on existing predicate with “or” condition.\n   * @param  {string} field - Defines the column field.\n   * @param  {string} operator - Defines the operator how to filter data.\n   * @param  {string} value - Defines the values to match with data.\n   * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   */\n\n\n  or(field, operator, value, ignoreCase, ignoreAccent) {\n    return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n  }\n  /**\n   * Converts plain JavaScript object to Predicate object.\n   * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n   */\n\n\n  static fromJson(json) {\n    if (json instanceof Array) {\n      let res = [];\n\n      for (let i = 0, len = json.length; i < len; i++) {\n        res.push(this.fromJSONData(json[i]));\n      }\n\n      return res;\n    }\n\n    let pred = json;\n    return this.fromJSONData(pred);\n  }\n  /**\n   * Validate the record based on the predicates.\n   * @param  {Object} record - Defines the datasource record.\n   */\n\n\n  validate(record) {\n    let predicate = this.predicates ? this.predicates : [];\n    let isAnd;\n    let ret;\n\n    if (!this.isComplex && this.comparer) {\n      return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n    }\n\n    isAnd = this.condition === 'and';\n\n    for (let i = 0; i < predicate.length; i++) {\n      ret = predicate[i].validate(record);\n\n      if (isAnd) {\n        if (!ret) {\n          return false;\n        }\n      } else {\n        if (ret) {\n          return true;\n        }\n      }\n    }\n\n    return isAnd;\n  }\n  /**\n   * Converts predicates to plain JavaScript.\n   * This method is uses Json stringify when serializing Predicate object.\n   */\n\n\n  toJson() {\n    let predicates;\n    let p;\n\n    if (this.isComplex) {\n      predicates = [];\n      p = this.predicates;\n\n      for (let i = 0; i < p.length; i++) {\n        predicates.push(p[i].toJson());\n      }\n    }\n\n    return {\n      isComplex: this.isComplex,\n      field: this.field,\n      operator: this.operator,\n      value: this.value,\n      ignoreCase: this.ignoreCase,\n      ignoreAccent: this.ignoreAccent,\n      condition: this.condition,\n      predicates: predicates\n    };\n  }\n\n  static combinePredicates(predicates, operator) {\n    if (predicates.length === 1) {\n      if (!(predicates[0] instanceof Array)) {\n        return predicates[0];\n      }\n\n      predicates = predicates[0];\n    }\n\n    return new Predicate(predicates[0], operator, predicates.slice(1));\n  }\n\n  static combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n    if (field instanceof Predicate) {\n      return Predicate[condition](pred, field);\n    }\n\n    if (typeof field === 'string') {\n      return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n    }\n\n    return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n  }\n\n  static fromJSONData(json) {\n    let preds = json.predicates || [];\n    let len = preds.length;\n    let predicates = [];\n    let result;\n\n    for (let i = 0; i < len; i++) {\n      predicates.push(this.fromJSONData(preds[i]));\n    }\n\n    if (!json.isComplex) {\n      result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n    } else {\n      result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n    }\n\n    return result;\n  }\n\n}\n\nconst consts = {\n  GroupGuid: '{271bbba0-1ee7}'\n};\n/**\n * Data manager common utility methods.\n * @hidden\n */\n\nclass DataUtil {\n  /**\n   * Returns the value by invoking the provided parameter function.\n   * If the paramater is not of type function then it will be returned as it is.\n   * @param  {Function|string|string[]|number} value\n   * @param  {Object} inst?\n   * @hidden\n   */\n  static getValue(value, inst) {\n    if (typeof value === 'function') {\n      return value.call(inst || {});\n    }\n\n    return value;\n  }\n  /**\n   * Returns true if the input string ends with given string.\n   * @param  {string} input\n   * @param  {string} substr\n   */\n\n\n  static endsWith(input, substr) {\n    return input.slice && input.slice(-substr.length) === substr;\n  }\n  /**\n   * Returns true if the input string starts with given string.\n   * @param  {string} str\n   * @param  {string} startstr\n   */\n\n\n  static startsWith(input, start) {\n    return input.slice(0, start.length) === start;\n  }\n  /**\n   * To return the sorting function based on the string.\n   * @param  {string} order\n   * @hidden\n   */\n\n\n  static fnSort(order) {\n    order = order ? DataUtil.toLowerCase(order) : 'ascending';\n\n    if (order === 'ascending') {\n      return this.fnAscending;\n    }\n\n    return this.fnDescending;\n  }\n  /**\n   * Comparer function which is used to sort the data in ascending order.\n   * @param  {string|number} x\n   * @param  {string|number} y\n   * @returns number\n   */\n\n\n  static fnAscending(x, y) {\n    if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n      return -1;\n    }\n\n    if (y === null || y === undefined) {\n      return -1;\n    }\n\n    if (typeof x === 'string') {\n      return x.localeCompare(y);\n    }\n\n    if (x === null || x === undefined) {\n      return 1;\n    }\n\n    return x - y;\n  }\n  /**\n   * Comparer function which is used to sort the data in descending order.\n   * @param  {string|number} x\n   * @param  {string|number} y\n   * @returns number\n   */\n\n\n  static fnDescending(x, y) {\n    if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n      return -1;\n    }\n\n    if (y === null || y === undefined) {\n      return 1;\n    }\n\n    if (typeof x === 'string') {\n      return x.localeCompare(y) * -1;\n    }\n\n    if (x === null || x === undefined) {\n      return -1;\n    }\n\n    return y - x;\n  }\n\n  static extractFields(obj, fields) {\n    let newObj = {};\n\n    for (let i = 0; i < fields.length; i++) {\n      newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);\n    }\n\n    return newObj;\n  }\n  /**\n   * Select objects by given fields from jsonArray.\n   * @param  {Object[]} jsonArray\n   * @param  {string[]} fields\n   */\n\n\n  static select(jsonArray, fields) {\n    let newData = [];\n\n    for (let i = 0; i < jsonArray.length; i++) {\n      newData.push(this.extractFields(jsonArray[i], fields));\n    }\n\n    return newData;\n  }\n  /**\n   * Group the input data based on the field name.\n   * It also performs aggregation of the grouped records based on the aggregates paramater.\n   * @param  {Object[]} jsonArray\n   * @param  {string} field?\n   * @param  {Object[]} agg?\n   * @param  {number} level?\n   * @param  {Object[]} groupDs?\n   */\n\n\n  static group(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {\n    level = level || 1;\n    let jsonData = jsonArray;\n    let guid = 'GroupGuid';\n\n    if (jsonData.GroupGuid === consts[guid]) {\n      for (let j = 0; j < jsonData.length; j++) {\n        if (!isNullOrUndefined(groupDs)) {\n          let indx = -1;\n          let temp = groupDs.filter(e => {\n            return e.key === jsonData[j].key;\n          });\n          indx = groupDs.indexOf(temp[0]);\n          jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);\n          jsonData[j].count = groupDs[indx].count;\n        } else {\n          jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);\n          jsonData[j].count = jsonData[j].items.length;\n        }\n      }\n\n      jsonData.childLevels += 1;\n      return jsonData;\n    }\n\n    let grouped = {};\n    let groupedArray = [];\n    groupedArray.GroupGuid = consts[guid];\n    groupedArray.level = level;\n    groupedArray.childLevels = 0;\n    groupedArray.records = jsonData;\n\n    for (let i = 0; i < jsonData.length; i++) {\n      let val = this.getVal(jsonData, i, field);\n\n      if (!isNullOrUndefined(format)) {\n        val = format(val, field);\n      }\n\n      if (!grouped[val]) {\n        grouped[val] = {\n          key: val,\n          count: 0,\n          items: [],\n          aggregates: {},\n          field: field\n        };\n        groupedArray.push(grouped[val]);\n\n        if (!isNullOrUndefined(groupDs)) {\n          let tempObj = groupDs.filter(e => {\n            return e.key === grouped[val].key;\n          });\n          grouped[val].count = tempObj[0].count;\n        }\n      }\n\n      grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n\n      if (!isLazyLoad || isLazyLoad && aggregates.length) {\n        grouped[val].items.push(jsonData[i]);\n      }\n    }\n\n    if (aggregates && aggregates.length) {\n      for (let i = 0; i < groupedArray.length; i++) {\n        let res = {};\n        let fn;\n        let aggs = aggregates;\n\n        for (let j = 0; j < aggregates.length; j++) {\n          fn = DataUtil.aggregates[aggregates[j].type];\n\n          if (!isNullOrUndefined(groupDs)) {\n            let temp = groupDs.filter(e => {\n              return e.key === groupedArray[i].key;\n            });\n\n            if (fn) {\n              res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);\n            }\n          } else {\n            if (fn) {\n              res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);\n            }\n          }\n        }\n\n        groupedArray[i].aggregates = res;\n      }\n    }\n\n    if (isLazyLoad && groupedArray.length && aggregates.length) {\n      for (let i = 0; i < groupedArray.length; i++) {\n        groupedArray[i].items = [];\n      }\n    }\n\n    return jsonData.length && groupedArray || jsonData;\n  }\n  /**\n   * It is used to categorize the multiple items based on a specific field in jsonArray.\n   * The hierarchical queries are commonly required when you use foreign key binding.\n   * @param  {string} fKey\n   * @param  {string} from\n   * @param  {Object[]} source\n   * @param  {Group} lookup?\n   * @param  {string} pKey?\n   * @hidden\n   */\n\n\n  static buildHierarchy(fKey, from, source, lookup, pKey) {\n    let i;\n    let grp = {};\n    let temp;\n\n    if (lookup.result) {\n      lookup = lookup.result;\n    }\n\n    if (lookup.GroupGuid) {\n      this.throwError('DataManager: Do not have support Grouping in hierarchy');\n    }\n\n    for (i = 0; i < lookup.length; i++) {\n      let fKeyData = this.getObject(fKey, lookup[i]);\n      temp = grp[fKeyData] || (grp[fKeyData] = []);\n      temp.push(lookup[i]);\n    }\n\n    for (i = 0; i < source.length; i++) {\n      let fKeyData = this.getObject(pKey || fKey, source[i]);\n      source[i][from] = grp[fKeyData];\n    }\n  }\n  /**\n   * The method used to get the field names which started with specified characters.\n   * @param  {Object} obj\n   * @param  {string[]} fields?\n   * @param  {string} prefix?\n   * @hidden\n   */\n\n\n  static getFieldList(obj, fields, prefix) {\n    if (prefix === undefined) {\n      prefix = '';\n    }\n\n    if (fields === undefined || fields === null) {\n      return this.getFieldList(obj, [], prefix);\n    }\n\n    let copyObj = obj;\n    let keys = Object.keys(obj);\n\n    for (let prop of keys) {\n      if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n        this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n      } else {\n        fields.push(prefix + prop);\n      }\n    }\n\n    return fields;\n  }\n  /**\n   * Gets the value of the property in the given object.\n   * The complex object can be accessed by providing the field names concatenated with dot(.).\n   * @param  {string} nameSpace - The name of the property to be accessed.\n   * @param  {Object} from - Defines the source object.\n   */\n\n\n  static getObject(nameSpace, from) {\n    if (!nameSpace) {\n      return from;\n    }\n\n    if (!from) {\n      return undefined;\n    }\n\n    if (nameSpace.indexOf('.') === -1) {\n      return from[nameSpace];\n    }\n\n    let value = from;\n    let splits = nameSpace.split('.');\n\n    for (let i = 0; i < splits.length; i++) {\n      if (value == null) {\n        break;\n      }\n\n      value = value[splits[i]];\n    }\n\n    return value;\n  }\n  /**\n   * To set value for the nameSpace in desired object.\n   * @param {string} nameSpace - String value to the get the inner object.\n   * @param {Object} value - Value that you need to set.\n   * @param {Object} obj - Object to get the inner object value.\n   * @return { [key: string]: Object; } | Object\n   * @hidden\n   */\n\n\n  static setValue(nameSpace, value, obj) {\n    let keys = nameSpace.toString().split('.');\n    let start = obj || {};\n    let fromObj = start;\n    let i;\n    let length = keys.length;\n    let key;\n\n    for (i = 0; i < length; i++) {\n      key = keys[i];\n\n      if (i + 1 === length) {\n        fromObj[key] = value === undefined ? undefined : value;\n      } else if (isNullOrUndefined(fromObj[key])) {\n        fromObj[key] = {};\n      }\n\n      fromObj = fromObj[key];\n    }\n\n    return start;\n  }\n  /**\n   * Sort the given data based on the field and comparer.\n   * @param  {Object[]} ds - Defines the input data.\n   * @param  {string} field - Defines the field to be sorted.\n   * @param  {Function} comparer - Defines the comparer function used to sort the records.\n   */\n\n\n  static sort(ds, field, comparer) {\n    if (ds.length <= 1) {\n      return ds;\n    }\n\n    let middle = parseInt((ds.length / 2).toString(), 10);\n    let left = ds.slice(0, middle);\n    let right = ds.slice(middle);\n    left = this.sort(left, field, comparer);\n    right = this.sort(right, field, comparer);\n    return this.merge(left, right, field, comparer);\n  }\n\n  static ignoreDiacritics(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    let result = value.split('');\n    let newValue = result.map(temp => temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp);\n    return newValue.join('');\n  }\n\n  static merge(left, right, fieldName, comparer) {\n    let result = [];\n    let current;\n\n    while (left.length > 0 || right.length > 0) {\n      if (left.length > 0 && right.length > 0) {\n        if (comparer) {\n          current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;\n        } else {\n          current = left[0][fieldName] < left[0][fieldName] ? left : right;\n        }\n      } else {\n        current = left.length > 0 ? left : right;\n      }\n\n      result.push(current.shift());\n    }\n\n    return result;\n  }\n\n  static getVal(array, index, field) {\n    return field ? this.getObject(field, array[index]) : array[index];\n  }\n\n  static toLowerCase(val) {\n    return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : val === 0 || val === false ? val.toString() : '';\n  }\n  /**\n   * To perform the filter operation with specified adaptor and returns the result.\n   * @param  {Object} adaptor\n   * @param  {string} fnName\n   * @param  {Object} param1?\n   * @param  {Object} param2?\n   * @hidden\n   */\n\n\n  static callAdaptorFunction(adaptor, fnName, param1, param2) {\n    if (fnName in adaptor) {\n      let res = adaptor[fnName](param1, param2);\n\n      if (!isNullOrUndefined(res)) {\n        param1 = res;\n      }\n    }\n\n    return param1;\n  }\n\n  static getAddParams(adp, dm, query) {\n    let req = {};\n    DataUtil.callAdaptorFunction(adp, 'addParams', {\n      dm: dm,\n      query: query,\n      params: query.params,\n      reqParams: req\n    });\n    return req;\n  }\n  /**\n   * Checks wheather the given input is a plain object or not.\n   * @param  {Object|Object[]} obj\n   */\n\n\n  static isPlainObject(obj) {\n    return !!obj && obj.constructor === Object;\n  }\n  /**\n   * Returns true when the browser cross origin request.\n   */\n\n\n  static isCors() {\n    let xhr = null;\n    let request = 'XMLHttpRequest';\n\n    try {\n      xhr = new window[request]();\n    } catch (e) {// No exception handling\n    }\n\n    return !!xhr && 'withCredentials' in xhr;\n  }\n  /**\n   * Generate random GUID value which will be prefixed with the given value.\n   * @param  {string} prefix\n   */\n\n\n  static getGuid(prefix) {\n    let hexs = '0123456789abcdef';\n    let rand;\n    return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, (val, i) => {\n      if ('crypto' in window && 'getRandomValues' in crypto) {\n        let arr = new Uint8Array(1);\n        window.crypto.getRandomValues(arr);\n        rand = arr[0] % 16 | 0;\n      } else {\n        rand = Math.random() * 16 | 0;\n      }\n\n      return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n    });\n  }\n  /**\n   * Checks wheather the given value is null or not.\n   * @param  {string|Object} val\n   * @returns boolean\n   */\n\n\n  static isNull(val) {\n    return val === undefined || val === null;\n  }\n  /**\n   * To get the required items from collection of objects.\n   * @param  {Object[]} array\n   * @param  {string} field\n   * @param  {Function} comparer\n   * @returns Object\n   * @hidden\n   */\n\n\n  static getItemFromComparer(array, field, comparer) {\n    let keyVal;\n    let current;\n    let key;\n    let i = 0;\n    let castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n\n    if (array.length) {\n      while (isNullOrUndefined(keyVal) && i < array.length) {\n        keyVal = DataUtil.getVal(array, i, field);\n        key = array[i++];\n      }\n    }\n\n    for (; i < array.length; i++) {\n      current = DataUtil.getVal(array, i, field);\n\n      if (isNullOrUndefined(current)) {\n        continue;\n      }\n\n      if (castRequired) {\n        keyVal = +keyVal;\n        current = +current;\n      }\n\n      if (comparer(keyVal, current) > 0) {\n        keyVal = current;\n        key = array[i];\n      }\n    }\n\n    return key;\n  }\n  /**\n   * To get distinct values of Array or Array of Objects.\n   * @param  {Object[]} json\n   * @param  {string} field\n   * @param  {boolean} requiresCompleteRecord\n   * @returns Object[]\n   * * distinct array of objects is return when requiresCompleteRecord set as true.\n   * @hidden\n   */\n\n\n  static distinct(json, fieldName, requiresCompleteRecord) {\n    requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n    let result = [];\n    let val;\n    let tmp = {};\n    json.forEach((data, index) => {\n      val = typeof json[index] === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];\n\n      if (!(val in tmp)) {\n        result.push(!requiresCompleteRecord ? val : json[index]);\n        tmp[val] = 1;\n      }\n    });\n    return result;\n  }\n  /**\n   * Process the given records based on the datamanager string.\n   * @param  {string} datamanager\n   * @param  {Object[]} records\n   */\n\n\n  static processData(dm, records) {\n    let query = this.prepareQuery(dm);\n    let sampledata = new DataManager(records);\n\n    if (dm.requiresCounts) {\n      query.requiresCount();\n    }\n\n    let result = sampledata.executeLocal(query);\n    let returnValue = {\n      result: dm.requiresCounts ? result.result : result,\n      count: result.count,\n      aggregates: JSON.stringify(result.aggregates)\n    };\n    return dm.requiresCounts ? returnValue : result;\n  }\n\n  static prepareQuery(dm) {\n    let query = new Query();\n\n    if (dm.select) {\n      query.select(dm.select);\n    }\n\n    if (dm.where) {\n      let where = DataUtil.parse.parseJson(dm.where);\n      where.filter(pred => {\n        if (isNullOrUndefined(pred.condition)) {\n          query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);\n        } else {\n          let predicateList = [];\n\n          if (pred.field) {\n            predicateList.push(new Predicate(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));\n          } else {\n            predicateList = predicateList.concat(this.getPredicate(pred.predicates));\n          }\n\n          if (pred.condition == 'or') {\n            query.where(Predicate.or(predicateList));\n          } else if (pred.condition == 'and') {\n            query.where(Predicate.and(predicateList));\n          }\n        }\n      });\n    }\n\n    if (dm.search) {\n      let search = DataUtil.parse.parseJson(dm.search);\n      search.filter(e => query.search(e.key, e.fields, e['operator'], e['ignoreCase'], e['ignoreAccent']));\n    }\n\n    if (dm.aggregates) {\n      dm.aggregates.filter(e => query.aggregate(e.type, e.field));\n    }\n\n    if (dm.sorted) {\n      dm.sorted.filter(e => query.sortBy(e.name, e.direction));\n    }\n\n    if (dm.skip) {\n      query.skip(dm.skip);\n    }\n\n    if (dm.take) {\n      query.take(dm.take);\n    }\n\n    if (dm.group) {\n      dm.group.filter(grp => query.group(grp));\n    }\n\n    return query;\n  }\n\n  static getPredicate(pred) {\n    let mainPred = [];\n\n    for (let i = 0; i < pred.length; i++) {\n      let e = pred[i];\n\n      if (e.field) {\n        mainPred.push(new Predicate(e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));\n      } else {\n        let childPred = [];\n        let cpre = this.getPredicate(e.predicates);\n\n        for (const prop of Object.keys(cpre)) {\n          childPred.push(cpre[prop]);\n        }\n\n        mainPred.push(e.condition == 'or' ? Predicate.or(childPred) : Predicate.and(childPred));\n      }\n    }\n\n    return mainPred;\n  }\n\n}\n/**\n * Specifies the value which will be used to adjust the date value to server timezone.\n * @default null\n */\n\n\nDataUtil.serverTimezoneOffset = null;\n/**\n * Species whether are not to be parsed with serverTimezoneOffset value.\n * @hidden\n */\n\nDataUtil.timeZoneHandling = true;\n/**\n * Throw error with the given string as message.\n * @param  {string} er\n */\n\nDataUtil.throwError = error => {\n  try {\n    throw new Error(error);\n  } catch (e) {\n    throw e.message + '\\n' + e.stack;\n  }\n};\n\nDataUtil.aggregates = {\n  /**\n   * Calculate sum of the given field in the data.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  sum: (ds, field) => {\n    let result = 0;\n    let val;\n    let castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n\n    for (let i = 0; i < ds.length; i++) {\n      val = DataUtil.getVal(ds, i, field);\n\n      if (!isNaN(val) && val !== null) {\n        if (castRequired) {\n          val = +val;\n        }\n\n        result += val;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Calculate average value of the given field in the data.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  average: (ds, field) => {\n    return DataUtil.aggregates.sum(ds, field) / ds.length;\n  },\n\n  /**\n   * Returns the min value of the data based on the field.\n   * @param  {Object[]} ds\n   * @param  {string|Function} field\n   */\n  min: (ds, field) => {\n    let comparer;\n\n    if (typeof field === 'function') {\n      comparer = field;\n      field = null;\n    }\n\n    return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n  },\n\n  /**\n   * Returns the max value of the data based on the field.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   * @returns number\n   */\n  max: (ds, field) => {\n    let comparer;\n\n    if (typeof field === 'function') {\n      comparer = field;\n      field = null;\n    }\n\n    return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n  },\n\n  /**\n   * Returns the total number of true value present in the data based on the given boolean field name.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  truecount: (ds, field) => {\n    return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n  },\n\n  /**\n   * Returns the total number of false value present in the data based on the given boolean field name.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  falsecount: (ds, field) => {\n    return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n  },\n\n  /**\n   * Returns the length of the given data.\n   * @param  {Object[]} ds\n   * @param  {string} field?\n   * @returns number\n   */\n  count: (ds, field) => {\n    return ds.length;\n  }\n};\n/**\n * Specifies the Object with filter operators.\n */\n\nDataUtil.operatorSymbols = {\n  '<': 'lessthan',\n  '>': 'greaterthan',\n  '<=': 'lessthanorequal',\n  '>=': 'greaterthanorequal',\n  '==': 'equal',\n  '!=': 'notequal',\n  '*=': 'contains',\n  '$=': 'endswith',\n  '^=': 'startswith'\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * * It will be used for date/number type filter query.\n */\n\nDataUtil.odBiOperator = {\n  '<': ' lt ',\n  '>': ' gt ',\n  '<=': ' le ',\n  '>=': ' ge ',\n  '==': ' eq ',\n  '!=': ' ne ',\n  'lessthan': ' lt ',\n  'lessthanorequal': ' le ',\n  'greaterthan': ' gt ',\n  'greaterthanorequal': ' ge ',\n  'equal': ' eq ',\n  'notequal': ' ne '\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * It will be used for string type filter query.\n */\n\nDataUtil.odUniOperator = {\n  '$=': 'endswith',\n  '^=': 'startswith',\n  '*=': 'substringof',\n  'endswith': 'endswith',\n  'startswith': 'startswith',\n  'contains': 'substringof'\n};\n/**\n * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n * It will be used for string type filter query.\n */\n\nDataUtil.odv4UniOperator = {\n  '$=': 'endswith',\n  '^=': 'startswith',\n  '*=': 'contains',\n  'endswith': 'endswith',\n  'startswith': 'startswith',\n  'contains': 'contains'\n};\nDataUtil.diacritics = {\n  '\\u24B6': 'A',\n  '\\uFF21': 'A',\n  '\\u00C0': 'A',\n  '\\u00C1': 'A',\n  '\\u00C2': 'A',\n  '\\u1EA6': 'A',\n  '\\u1EA4': 'A',\n  '\\u1EAA': 'A',\n  '\\u1EA8': 'A',\n  '\\u00C3': 'A',\n  '\\u0100': 'A',\n  '\\u0102': 'A',\n  '\\u1EB0': 'A',\n  '\\u1EAE': 'A',\n  '\\u1EB4': 'A',\n  '\\u1EB2': 'A',\n  '\\u0226': 'A',\n  '\\u01E0': 'A',\n  '\\u00C4': 'A',\n  '\\u01DE': 'A',\n  '\\u1EA2': 'A',\n  '\\u00C5': 'A',\n  '\\u01FA': 'A',\n  '\\u01CD': 'A',\n  '\\u0200': 'A',\n  '\\u0202': 'A',\n  '\\u1EA0': 'A',\n  '\\u1EAC': 'A',\n  '\\u1EB6': 'A',\n  '\\u1E00': 'A',\n  '\\u0104': 'A',\n  '\\u023A': 'A',\n  '\\u2C6F': 'A',\n  '\\uA732': 'AA',\n  '\\u00C6': 'AE',\n  '\\u01FC': 'AE',\n  '\\u01E2': 'AE',\n  '\\uA734': 'AO',\n  '\\uA736': 'AU',\n  '\\uA738': 'AV',\n  '\\uA73A': 'AV',\n  '\\uA73C': 'AY',\n  '\\u24B7': 'B',\n  '\\uFF22': 'B',\n  '\\u1E02': 'B',\n  '\\u1E04': 'B',\n  '\\u1E06': 'B',\n  '\\u0243': 'B',\n  '\\u0182': 'B',\n  '\\u0181': 'B',\n  '\\u24B8': 'C',\n  '\\uFF23': 'C',\n  '\\u0106': 'C',\n  '\\u0108': 'C',\n  '\\u010A': 'C',\n  '\\u010C': 'C',\n  '\\u00C7': 'C',\n  '\\u1E08': 'C',\n  '\\u0187': 'C',\n  '\\u023B': 'C',\n  '\\uA73E': 'C',\n  '\\u24B9': 'D',\n  '\\uFF24': 'D',\n  '\\u1E0A': 'D',\n  '\\u010E': 'D',\n  '\\u1E0C': 'D',\n  '\\u1E10': 'D',\n  '\\u1E12': 'D',\n  '\\u1E0E': 'D',\n  '\\u0110': 'D',\n  '\\u018B': 'D',\n  '\\u018A': 'D',\n  '\\u0189': 'D',\n  '\\uA779': 'D',\n  '\\u01F1': 'DZ',\n  '\\u01C4': 'DZ',\n  '\\u01F2': 'Dz',\n  '\\u01C5': 'Dz',\n  '\\u24BA': 'E',\n  '\\uFF25': 'E',\n  '\\u00C8': 'E',\n  '\\u00C9': 'E',\n  '\\u00CA': 'E',\n  '\\u1EC0': 'E',\n  '\\u1EBE': 'E',\n  '\\u1EC4': 'E',\n  '\\u1EC2': 'E',\n  '\\u1EBC': 'E',\n  '\\u0112': 'E',\n  '\\u1E14': 'E',\n  '\\u1E16': 'E',\n  '\\u0114': 'E',\n  '\\u0116': 'E',\n  '\\u00CB': 'E',\n  '\\u1EBA': 'E',\n  '\\u011A': 'E',\n  '\\u0204': 'E',\n  '\\u0206': 'E',\n  '\\u1EB8': 'E',\n  '\\u1EC6': 'E',\n  '\\u0228': 'E',\n  '\\u1E1C': 'E',\n  '\\u0118': 'E',\n  '\\u1E18': 'E',\n  '\\u1E1A': 'E',\n  '\\u0190': 'E',\n  '\\u018E': 'E',\n  '\\u24BB': 'F',\n  '\\uFF26': 'F',\n  '\\u1E1E': 'F',\n  '\\u0191': 'F',\n  '\\uA77B': 'F',\n  '\\u24BC': 'G',\n  '\\uFF27': 'G',\n  '\\u01F4': 'G',\n  '\\u011C': 'G',\n  '\\u1E20': 'G',\n  '\\u011E': 'G',\n  '\\u0120': 'G',\n  '\\u01E6': 'G',\n  '\\u0122': 'G',\n  '\\u01E4': 'G',\n  '\\u0193': 'G',\n  '\\uA7A0': 'G',\n  '\\uA77D': 'G',\n  '\\uA77E': 'G',\n  '\\u24BD': 'H',\n  '\\uFF28': 'H',\n  '\\u0124': 'H',\n  '\\u1E22': 'H',\n  '\\u1E26': 'H',\n  '\\u021E': 'H',\n  '\\u1E24': 'H',\n  '\\u1E28': 'H',\n  '\\u1E2A': 'H',\n  '\\u0126': 'H',\n  '\\u2C67': 'H',\n  '\\u2C75': 'H',\n  '\\uA78D': 'H',\n  '\\u24BE': 'I',\n  '\\uFF29': 'I',\n  '\\u00CC': 'I',\n  '\\u00CD': 'I',\n  '\\u00CE': 'I',\n  '\\u0128': 'I',\n  '\\u012A': 'I',\n  '\\u012C': 'I',\n  '\\u0130': 'I',\n  '\\u00CF': 'I',\n  '\\u1E2E': 'I',\n  '\\u1EC8': 'I',\n  '\\u01CF': 'I',\n  '\\u0208': 'I',\n  '\\u020A': 'I',\n  '\\u1ECA': 'I',\n  '\\u012E': 'I',\n  '\\u1E2C': 'I',\n  '\\u0197': 'I',\n  '\\u24BF': 'J',\n  '\\uFF2A': 'J',\n  '\\u0134': 'J',\n  '\\u0248': 'J',\n  '\\u24C0': 'K',\n  '\\uFF2B': 'K',\n  '\\u1E30': 'K',\n  '\\u01E8': 'K',\n  '\\u1E32': 'K',\n  '\\u0136': 'K',\n  '\\u1E34': 'K',\n  '\\u0198': 'K',\n  '\\u2C69': 'K',\n  '\\uA740': 'K',\n  '\\uA742': 'K',\n  '\\uA744': 'K',\n  '\\uA7A2': 'K',\n  '\\u24C1': 'L',\n  '\\uFF2C': 'L',\n  '\\u013F': 'L',\n  '\\u0139': 'L',\n  '\\u013D': 'L',\n  '\\u1E36': 'L',\n  '\\u1E38': 'L',\n  '\\u013B': 'L',\n  '\\u1E3C': 'L',\n  '\\u1E3A': 'L',\n  '\\u0141': 'L',\n  '\\u023D': 'L',\n  '\\u2C62': 'L',\n  '\\u2C60': 'L',\n  '\\uA748': 'L',\n  '\\uA746': 'L',\n  '\\uA780': 'L',\n  '\\u01C7': 'LJ',\n  '\\u01C8': 'Lj',\n  '\\u24C2': 'M',\n  '\\uFF2D': 'M',\n  '\\u1E3E': 'M',\n  '\\u1E40': 'M',\n  '\\u1E42': 'M',\n  '\\u2C6E': 'M',\n  '\\u019C': 'M',\n  '\\u24C3': 'N',\n  '\\uFF2E': 'N',\n  '\\u01F8': 'N',\n  '\\u0143': 'N',\n  '\\u00D1': 'N',\n  '\\u1E44': 'N',\n  '\\u0147': 'N',\n  '\\u1E46': 'N',\n  '\\u0145': 'N',\n  '\\u1E4A': 'N',\n  '\\u1E48': 'N',\n  '\\u0220': 'N',\n  '\\u019D': 'N',\n  '\\uA790': 'N',\n  '\\uA7A4': 'N',\n  '\\u01CA': 'NJ',\n  '\\u01CB': 'Nj',\n  '\\u24C4': 'O',\n  '\\uFF2F': 'O',\n  '\\u00D2': 'O',\n  '\\u00D3': 'O',\n  '\\u00D4': 'O',\n  '\\u1ED2': 'O',\n  '\\u1ED0': 'O',\n  '\\u1ED6': 'O',\n  '\\u1ED4': 'O',\n  '\\u00D5': 'O',\n  '\\u1E4C': 'O',\n  '\\u022C': 'O',\n  '\\u1E4E': 'O',\n  '\\u014C': 'O',\n  '\\u1E50': 'O',\n  '\\u1E52': 'O',\n  '\\u014E': 'O',\n  '\\u022E': 'O',\n  '\\u0230': 'O',\n  '\\u00D6': 'O',\n  '\\u022A': 'O',\n  '\\u1ECE': 'O',\n  '\\u0150': 'O',\n  '\\u01D1': 'O',\n  '\\u020C': 'O',\n  '\\u020E': 'O',\n  '\\u01A0': 'O',\n  '\\u1EDC': 'O',\n  '\\u1EDA': 'O',\n  '\\u1EE0': 'O',\n  '\\u1EDE': 'O',\n  '\\u1EE2': 'O',\n  '\\u1ECC': 'O',\n  '\\u1ED8': 'O',\n  '\\u01EA': 'O',\n  '\\u01EC': 'O',\n  '\\u00D8': 'O',\n  '\\u01FE': 'O',\n  '\\u0186': 'O',\n  '\\u019F': 'O',\n  '\\uA74A': 'O',\n  '\\uA74C': 'O',\n  '\\u01A2': 'OI',\n  '\\uA74E': 'OO',\n  '\\u0222': 'OU',\n  '\\u24C5': 'P',\n  '\\uFF30': 'P',\n  '\\u1E54': 'P',\n  '\\u1E56': 'P',\n  '\\u01A4': 'P',\n  '\\u2C63': 'P',\n  '\\uA750': 'P',\n  '\\uA752': 'P',\n  '\\uA754': 'P',\n  '\\u24C6': 'Q',\n  '\\uFF31': 'Q',\n  '\\uA756': 'Q',\n  '\\uA758': 'Q',\n  '\\u024A': 'Q',\n  '\\u24C7': 'R',\n  '\\uFF32': 'R',\n  '\\u0154': 'R',\n  '\\u1E58': 'R',\n  '\\u0158': 'R',\n  '\\u0210': 'R',\n  '\\u0212': 'R',\n  '\\u1E5A': 'R',\n  '\\u1E5C': 'R',\n  '\\u0156': 'R',\n  '\\u1E5E': 'R',\n  '\\u024C': 'R',\n  '\\u2C64': 'R',\n  '\\uA75A': 'R',\n  '\\uA7A6': 'R',\n  '\\uA782': 'R',\n  '\\u24C8': 'S',\n  '\\uFF33': 'S',\n  '\\u1E9E': 'S',\n  '\\u015A': 'S',\n  '\\u1E64': 'S',\n  '\\u015C': 'S',\n  '\\u1E60': 'S',\n  '\\u0160': 'S',\n  '\\u1E66': 'S',\n  '\\u1E62': 'S',\n  '\\u1E68': 'S',\n  '\\u0218': 'S',\n  '\\u015E': 'S',\n  '\\u2C7E': 'S',\n  '\\uA7A8': 'S',\n  '\\uA784': 'S',\n  '\\u24C9': 'T',\n  '\\uFF34': 'T',\n  '\\u1E6A': 'T',\n  '\\u0164': 'T',\n  '\\u1E6C': 'T',\n  '\\u021A': 'T',\n  '\\u0162': 'T',\n  '\\u1E70': 'T',\n  '\\u1E6E': 'T',\n  '\\u0166': 'T',\n  '\\u01AC': 'T',\n  '\\u01AE': 'T',\n  '\\u023E': 'T',\n  '\\uA786': 'T',\n  '\\uA728': 'TZ',\n  '\\u24CA': 'U',\n  '\\uFF35': 'U',\n  '\\u00D9': 'U',\n  '\\u00DA': 'U',\n  '\\u00DB': 'U',\n  '\\u0168': 'U',\n  '\\u1E78': 'U',\n  '\\u016A': 'U',\n  '\\u1E7A': 'U',\n  '\\u016C': 'U',\n  '\\u00DC': 'U',\n  '\\u01DB': 'U',\n  '\\u01D7': 'U',\n  '\\u01D5': 'U',\n  '\\u01D9': 'U',\n  '\\u1EE6': 'U',\n  '\\u016E': 'U',\n  '\\u0170': 'U',\n  '\\u01D3': 'U',\n  '\\u0214': 'U',\n  '\\u0216': 'U',\n  '\\u01AF': 'U',\n  '\\u1EEA': 'U',\n  '\\u1EE8': 'U',\n  '\\u1EEE': 'U',\n  '\\u1EEC': 'U',\n  '\\u1EF0': 'U',\n  '\\u1EE4': 'U',\n  '\\u1E72': 'U',\n  '\\u0172': 'U',\n  '\\u1E76': 'U',\n  '\\u1E74': 'U',\n  '\\u0244': 'U',\n  '\\u24CB': 'V',\n  '\\uFF36': 'V',\n  '\\u1E7C': 'V',\n  '\\u1E7E': 'V',\n  '\\u01B2': 'V',\n  '\\uA75E': 'V',\n  '\\u0245': 'V',\n  '\\uA760': 'VY',\n  '\\u24CC': 'W',\n  '\\uFF37': 'W',\n  '\\u1E80': 'W',\n  '\\u1E82': 'W',\n  '\\u0174': 'W',\n  '\\u1E86': 'W',\n  '\\u1E84': 'W',\n  '\\u1E88': 'W',\n  '\\u2C72': 'W',\n  '\\u24CD': 'X',\n  '\\uFF38': 'X',\n  '\\u1E8A': 'X',\n  '\\u1E8C': 'X',\n  '\\u24CE': 'Y',\n  '\\uFF39': 'Y',\n  '\\u1EF2': 'Y',\n  '\\u00DD': 'Y',\n  '\\u0176': 'Y',\n  '\\u1EF8': 'Y',\n  '\\u0232': 'Y',\n  '\\u1E8E': 'Y',\n  '\\u0178': 'Y',\n  '\\u1EF6': 'Y',\n  '\\u1EF4': 'Y',\n  '\\u01B3': 'Y',\n  '\\u024E': 'Y',\n  '\\u1EFE': 'Y',\n  '\\u24CF': 'Z',\n  '\\uFF3A': 'Z',\n  '\\u0179': 'Z',\n  '\\u1E90': 'Z',\n  '\\u017B': 'Z',\n  '\\u017D': 'Z',\n  '\\u1E92': 'Z',\n  '\\u1E94': 'Z',\n  '\\u01B5': 'Z',\n  '\\u0224': 'Z',\n  '\\u2C7F': 'Z',\n  '\\u2C6B': 'Z',\n  '\\uA762': 'Z',\n  '\\u24D0': 'a',\n  '\\uFF41': 'a',\n  '\\u1E9A': 'a',\n  '\\u00E0': 'a',\n  '\\u00E1': 'a',\n  '\\u00E2': 'a',\n  '\\u1EA7': 'a',\n  '\\u1EA5': 'a',\n  '\\u1EAB': 'a',\n  '\\u1EA9': 'a',\n  '\\u00E3': 'a',\n  '\\u0101': 'a',\n  '\\u0103': 'a',\n  '\\u1EB1': 'a',\n  '\\u1EAF': 'a',\n  '\\u1EB5': 'a',\n  '\\u1EB3': 'a',\n  '\\u0227': 'a',\n  '\\u01E1': 'a',\n  '\\u00E4': 'a',\n  '\\u01DF': 'a',\n  '\\u1EA3': 'a',\n  '\\u00E5': 'a',\n  '\\u01FB': 'a',\n  '\\u01CE': 'a',\n  '\\u0201': 'a',\n  '\\u0203': 'a',\n  '\\u1EA1': 'a',\n  '\\u1EAD': 'a',\n  '\\u1EB7': 'a',\n  '\\u1E01': 'a',\n  '\\u0105': 'a',\n  '\\u2C65': 'a',\n  '\\u0250': 'a',\n  '\\uA733': 'aa',\n  '\\u00E6': 'ae',\n  '\\u01FD': 'ae',\n  '\\u01E3': 'ae',\n  '\\uA735': 'ao',\n  '\\uA737': 'au',\n  '\\uA739': 'av',\n  '\\uA73B': 'av',\n  '\\uA73D': 'ay',\n  '\\u24D1': 'b',\n  '\\uFF42': 'b',\n  '\\u1E03': 'b',\n  '\\u1E05': 'b',\n  '\\u1E07': 'b',\n  '\\u0180': 'b',\n  '\\u0183': 'b',\n  '\\u0253': 'b',\n  '\\u24D2': 'c',\n  '\\uFF43': 'c',\n  '\\u0107': 'c',\n  '\\u0109': 'c',\n  '\\u010B': 'c',\n  '\\u010D': 'c',\n  '\\u00E7': 'c',\n  '\\u1E09': 'c',\n  '\\u0188': 'c',\n  '\\u023C': 'c',\n  '\\uA73F': 'c',\n  '\\u2184': 'c',\n  '\\u24D3': 'd',\n  '\\uFF44': 'd',\n  '\\u1E0B': 'd',\n  '\\u010F': 'd',\n  '\\u1E0D': 'd',\n  '\\u1E11': 'd',\n  '\\u1E13': 'd',\n  '\\u1E0F': 'd',\n  '\\u0111': 'd',\n  '\\u018C': 'd',\n  '\\u0256': 'd',\n  '\\u0257': 'd',\n  '\\uA77A': 'd',\n  '\\u01F3': 'dz',\n  '\\u01C6': 'dz',\n  '\\u24D4': 'e',\n  '\\uFF45': 'e',\n  '\\u00E8': 'e',\n  '\\u00E9': 'e',\n  '\\u00EA': 'e',\n  '\\u1EC1': 'e',\n  '\\u1EBF': 'e',\n  '\\u1EC5': 'e',\n  '\\u1EC3': 'e',\n  '\\u1EBD': 'e',\n  '\\u0113': 'e',\n  '\\u1E15': 'e',\n  '\\u1E17': 'e',\n  '\\u0115': 'e',\n  '\\u0117': 'e',\n  '\\u00EB': 'e',\n  '\\u1EBB': 'e',\n  '\\u011B': 'e',\n  '\\u0205': 'e',\n  '\\u0207': 'e',\n  '\\u1EB9': 'e',\n  '\\u1EC7': 'e',\n  '\\u0229': 'e',\n  '\\u1E1D': 'e',\n  '\\u0119': 'e',\n  '\\u1E19': 'e',\n  '\\u1E1B': 'e',\n  '\\u0247': 'e',\n  '\\u025B': 'e',\n  '\\u01DD': 'e',\n  '\\u24D5': 'f',\n  '\\uFF46': 'f',\n  '\\u1E1F': 'f',\n  '\\u0192': 'f',\n  '\\uA77C': 'f',\n  '\\u24D6': 'g',\n  '\\uFF47': 'g',\n  '\\u01F5': 'g',\n  '\\u011D': 'g',\n  '\\u1E21': 'g',\n  '\\u011F': 'g',\n  '\\u0121': 'g',\n  '\\u01E7': 'g',\n  '\\u0123': 'g',\n  '\\u01E5': 'g',\n  '\\u0260': 'g',\n  '\\uA7A1': 'g',\n  '\\u1D79': 'g',\n  '\\uA77F': 'g',\n  '\\u24D7': 'h',\n  '\\uFF48': 'h',\n  '\\u0125': 'h',\n  '\\u1E23': 'h',\n  '\\u1E27': 'h',\n  '\\u021F': 'h',\n  '\\u1E25': 'h',\n  '\\u1E29': 'h',\n  '\\u1E2B': 'h',\n  '\\u1E96': 'h',\n  '\\u0127': 'h',\n  '\\u2C68': 'h',\n  '\\u2C76': 'h',\n  '\\u0265': 'h',\n  '\\u0195': 'hv',\n  '\\u24D8': 'i',\n  '\\uFF49': 'i',\n  '\\u00EC': 'i',\n  '\\u00ED': 'i',\n  '\\u00EE': 'i',\n  '\\u0129': 'i',\n  '\\u012B': 'i',\n  '\\u012D': 'i',\n  '\\u00EF': 'i',\n  '\\u1E2F': 'i',\n  '\\u1EC9': 'i',\n  '\\u01D0': 'i',\n  '\\u0209': 'i',\n  '\\u020B': 'i',\n  '\\u1ECB': 'i',\n  '\\u012F': 'i',\n  '\\u1E2D': 'i',\n  '\\u0268': 'i',\n  '\\u0131': 'i',\n  '\\u24D9': 'j',\n  '\\uFF4A': 'j',\n  '\\u0135': 'j',\n  '\\u01F0': 'j',\n  '\\u0249': 'j',\n  '\\u24DA': 'k',\n  '\\uFF4B': 'k',\n  '\\u1E31': 'k',\n  '\\u01E9': 'k',\n  '\\u1E33': 'k',\n  '\\u0137': 'k',\n  '\\u1E35': 'k',\n  '\\u0199': 'k',\n  '\\u2C6A': 'k',\n  '\\uA741': 'k',\n  '\\uA743': 'k',\n  '\\uA745': 'k',\n  '\\uA7A3': 'k',\n  '\\u24DB': 'l',\n  '\\uFF4C': 'l',\n  '\\u0140': 'l',\n  '\\u013A': 'l',\n  '\\u013E': 'l',\n  '\\u1E37': 'l',\n  '\\u1E39': 'l',\n  '\\u013C': 'l',\n  '\\u1E3D': 'l',\n  '\\u1E3B': 'l',\n  '\\u017F': 'l',\n  '\\u0142': 'l',\n  '\\u019A': 'l',\n  '\\u026B': 'l',\n  '\\u2C61': 'l',\n  '\\uA749': 'l',\n  '\\uA781': 'l',\n  '\\uA747': 'l',\n  '\\u01C9': 'lj',\n  '\\u24DC': 'm',\n  '\\uFF4D': 'm',\n  '\\u1E3F': 'm',\n  '\\u1E41': 'm',\n  '\\u1E43': 'm',\n  '\\u0271': 'm',\n  '\\u026F': 'm',\n  '\\u24DD': 'n',\n  '\\uFF4E': 'n',\n  '\\u01F9': 'n',\n  '\\u0144': 'n',\n  '\\u00F1': 'n',\n  '\\u1E45': 'n',\n  '\\u0148': 'n',\n  '\\u1E47': 'n',\n  '\\u0146': 'n',\n  '\\u1E4B': 'n',\n  '\\u1E49': 'n',\n  '\\u019E': 'n',\n  '\\u0272': 'n',\n  '\\u0149': 'n',\n  '\\uA791': 'n',\n  '\\uA7A5': 'n',\n  '\\u01CC': 'nj',\n  '\\u24DE': 'o',\n  '\\uFF4F': 'o',\n  '\\u00F2': 'o',\n  '\\u00F3': 'o',\n  '\\u00F4': 'o',\n  '\\u1ED3': 'o',\n  '\\u1ED1': 'o',\n  '\\u1ED7': 'o',\n  '\\u1ED5': 'o',\n  '\\u00F5': 'o',\n  '\\u1E4D': 'o',\n  '\\u022D': 'o',\n  '\\u1E4F': 'o',\n  '\\u014D': 'o',\n  '\\u1E51': 'o',\n  '\\u1E53': 'o',\n  '\\u014F': 'o',\n  '\\u022F': 'o',\n  '\\u0231': 'o',\n  '\\u00F6': 'o',\n  '\\u022B': 'o',\n  '\\u1ECF': 'o',\n  '\\u0151': 'o',\n  '\\u01D2': 'o',\n  '\\u020D': 'o',\n  '\\u020F': 'o',\n  '\\u01A1': 'o',\n  '\\u1EDD': 'o',\n  '\\u1EDB': 'o',\n  '\\u1EE1': 'o',\n  '\\u1EDF': 'o',\n  '\\u1EE3': 'o',\n  '\\u1ECD': 'o',\n  '\\u1ED9': 'o',\n  '\\u01EB': 'o',\n  '\\u01ED': 'o',\n  '\\u00F8': 'o',\n  '\\u01FF': 'o',\n  '\\u0254': 'o',\n  '\\uA74B': 'o',\n  '\\uA74D': 'o',\n  '\\u0275': 'o',\n  '\\u01A3': 'oi',\n  '\\u0223': 'ou',\n  '\\uA74F': 'oo',\n  '\\u24DF': 'p',\n  '\\uFF50': 'p',\n  '\\u1E55': 'p',\n  '\\u1E57': 'p',\n  '\\u01A5': 'p',\n  '\\u1D7D': 'p',\n  '\\uA751': 'p',\n  '\\uA753': 'p',\n  '\\uA755': 'p',\n  '\\u24E0': 'q',\n  '\\uFF51': 'q',\n  '\\u024B': 'q',\n  '\\uA757': 'q',\n  '\\uA759': 'q',\n  '\\u24E1': 'r',\n  '\\uFF52': 'r',\n  '\\u0155': 'r',\n  '\\u1E59': 'r',\n  '\\u0159': 'r',\n  '\\u0211': 'r',\n  '\\u0213': 'r',\n  '\\u1E5B': 'r',\n  '\\u1E5D': 'r',\n  '\\u0157': 'r',\n  '\\u1E5F': 'r',\n  '\\u024D': 'r',\n  '\\u027D': 'r',\n  '\\uA75B': 'r',\n  '\\uA7A7': 'r',\n  '\\uA783': 'r',\n  '\\u24E2': 's',\n  '\\uFF53': 's',\n  '\\u00DF': 's',\n  '\\u015B': 's',\n  '\\u1E65': 's',\n  '\\u015D': 's',\n  '\\u1E61': 's',\n  '\\u0161': 's',\n  '\\u1E67': 's',\n  '\\u1E63': 's',\n  '\\u1E69': 's',\n  '\\u0219': 's',\n  '\\u015F': 's',\n  '\\u023F': 's',\n  '\\uA7A9': 's',\n  '\\uA785': 's',\n  '\\u1E9B': 's',\n  '\\u24E3': 't',\n  '\\uFF54': 't',\n  '\\u1E6B': 't',\n  '\\u1E97': 't',\n  '\\u0165': 't',\n  '\\u1E6D': 't',\n  '\\u021B': 't',\n  '\\u0163': 't',\n  '\\u1E71': 't',\n  '\\u1E6F': 't',\n  '\\u0167': 't',\n  '\\u01AD': 't',\n  '\\u0288': 't',\n  '\\u2C66': 't',\n  '\\uA787': 't',\n  '\\uA729': 'tz',\n  '\\u24E4': 'u',\n  '\\uFF55': 'u',\n  '\\u00F9': 'u',\n  '\\u00FA': 'u',\n  '\\u00FB': 'u',\n  '\\u0169': 'u',\n  '\\u1E79': 'u',\n  '\\u016B': 'u',\n  '\\u1E7B': 'u',\n  '\\u016D': 'u',\n  '\\u00FC': 'u',\n  '\\u01DC': 'u',\n  '\\u01D8': 'u',\n  '\\u01D6': 'u',\n  '\\u01DA': 'u',\n  '\\u1EE7': 'u',\n  '\\u016F': 'u',\n  '\\u0171': 'u',\n  '\\u01D4': 'u',\n  '\\u0215': 'u',\n  '\\u0217': 'u',\n  '\\u01B0': 'u',\n  '\\u1EEB': 'u',\n  '\\u1EE9': 'u',\n  '\\u1EEF': 'u',\n  '\\u1EED': 'u',\n  '\\u1EF1': 'u',\n  '\\u1EE5': 'u',\n  '\\u1E73': 'u',\n  '\\u0173': 'u',\n  '\\u1E77': 'u',\n  '\\u1E75': 'u',\n  '\\u0289': 'u',\n  '\\u24E5': 'v',\n  '\\uFF56': 'v',\n  '\\u1E7D': 'v',\n  '\\u1E7F': 'v',\n  '\\u028B': 'v',\n  '\\uA75F': 'v',\n  '\\u028C': 'v',\n  '\\uA761': 'vy',\n  '\\u24E6': 'w',\n  '\\uFF57': 'w',\n  '\\u1E81': 'w',\n  '\\u1E83': 'w',\n  '\\u0175': 'w',\n  '\\u1E87': 'w',\n  '\\u1E85': 'w',\n  '\\u1E98': 'w',\n  '\\u1E89': 'w',\n  '\\u2C73': 'w',\n  '\\u24E7': 'x',\n  '\\uFF58': 'x',\n  '\\u1E8B': 'x',\n  '\\u1E8D': 'x',\n  '\\u24E8': 'y',\n  '\\uFF59': 'y',\n  '\\u1EF3': 'y',\n  '\\u00FD': 'y',\n  '\\u0177': 'y',\n  '\\u1EF9': 'y',\n  '\\u0233': 'y',\n  '\\u1E8F': 'y',\n  '\\u00FF': 'y',\n  '\\u1EF7': 'y',\n  '\\u1E99': 'y',\n  '\\u1EF5': 'y',\n  '\\u01B4': 'y',\n  '\\u024F': 'y',\n  '\\u1EFF': 'y',\n  '\\u24E9': 'z',\n  '\\uFF5A': 'z',\n  '\\u017A': 'z',\n  '\\u1E91': 'z',\n  '\\u017C': 'z',\n  '\\u017E': 'z',\n  '\\u1E93': 'z',\n  '\\u1E95': 'z',\n  '\\u01B6': 'z',\n  '\\u0225': 'z',\n  '\\u0240': 'z',\n  '\\u2C6C': 'z',\n  '\\uA763': 'z',\n  '\\u0386': '\\u0391',\n  '\\u0388': '\\u0395',\n  '\\u0389': '\\u0397',\n  '\\u038A': '\\u0399',\n  '\\u03AA': '\\u0399',\n  '\\u038C': '\\u039F',\n  '\\u038E': '\\u03A5',\n  '\\u03AB': '\\u03A5',\n  '\\u038F': '\\u03A9',\n  '\\u03AC': '\\u03B1',\n  '\\u03AD': '\\u03B5',\n  '\\u03AE': '\\u03B7',\n  '\\u03AF': '\\u03B9',\n  '\\u03CA': '\\u03B9',\n  '\\u0390': '\\u03B9',\n  '\\u03CC': '\\u03BF',\n  '\\u03CD': '\\u03C5',\n  '\\u03CB': '\\u03C5',\n  '\\u03B0': '\\u03C5',\n  '\\u03C9': '\\u03C9',\n  '\\u03C2': '\\u03C3'\n};\nDataUtil.fnOperators = {\n  /**\n   * Returns true when the actual input is equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   * @param  {boolean} ignoreAccent?\n   */\n  equal: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n    }\n\n    return actual === expected;\n  },\n\n  /**\n   * Returns true when the actual input is not equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  notequal: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n  },\n\n  /**\n   * Returns true when the actual input is less than to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  lessthan: (actual, expected, ignoreCase) => {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n    }\n\n    if (isNullOrUndefined(actual)) {\n      actual = undefined;\n    }\n\n    return actual < expected;\n  },\n\n  /**\n   * Returns true when the actual input is greater than to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  greaterthan: (actual, expected, ignoreCase) => {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n    }\n\n    return actual > expected;\n  },\n\n  /**\n   * Returns true when the actual input is less than or equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  lessthanorequal: (actual, expected, ignoreCase) => {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n    }\n\n    return actual <= expected;\n  },\n\n  /**\n   * Returns true when the actual input is greater than or equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  greaterthanorequal: (actual, expected, ignoreCase) => {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n    }\n\n    return actual >= expected;\n  },\n\n  /**\n   * Returns true when the actual input contains the given string.\n   * @param  {string|number} actual\n   * @param  {string|number} expected\n   * @param  {boolean} ignoreCase?\n   */\n  contains: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    if (ignoreCase) {\n      return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n    }\n\n    return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && actual.toString().indexOf(expected) !== -1;\n  },\n\n  /**\n   * Returns true when the given input value is not null.\n   * @param  {string|number} actual\n   * @returns boolean\n   */\n  notnull: actual => {\n    return actual !== null;\n  },\n\n  /**\n   * Returns true when the given input value is null.\n   * @param  {string|number} actual\n   * @returns boolean\n   */\n  isnull: actual => {\n    return actual === null;\n  },\n\n  /**\n   * Returns true when the actual input starts with the given string\n   * @param  {string} actual\n   * @param  {string} expected\n   * @param  {boolean} ignoreCase?\n   */\n  startswith: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    if (ignoreCase) {\n      return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n    }\n\n    return actual && expected && DataUtil.startsWith(actual, expected);\n  },\n\n  /**\n   * Returns true when the actual input ends with the given string.\n   * @param  {string} actual\n   * @param  {string} expected\n   * @param  {boolean} ignoreCase?\n   */\n  endswith: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    if (ignoreCase) {\n      return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n    }\n\n    return actual && expected && DataUtil.endsWith(actual, expected);\n  },\n\n  /**\n   * It will return the filter operator based on the filter symbol.\n   * @param  {string} operator\n   * @hidden\n   */\n  processSymbols: operator => {\n    let fnName = DataUtil.operatorSymbols[operator];\n\n    if (fnName) {\n      let fn = DataUtil.fnOperators[fnName];\n      return fn;\n    }\n\n    return DataUtil.throwError('Query - Process Operator : Invalid operator');\n  },\n\n  /**\n   * It will return the valid filter operator based on the specified operators.\n   * @param  {string} operator\n   * @hidden\n   */\n  processOperator: operator => {\n    let fn = DataUtil.fnOperators[operator];\n\n    if (fn) {\n      return fn;\n    }\n\n    return DataUtil.fnOperators.processSymbols(operator);\n  }\n};\n/**\n * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n */\n\nDataUtil.parse = {\n  /**\n   * Parse the given string to the plain JavaScript object.\n   * @param  {string|Object|Object[]} jsonText\n   */\n  parseJson: jsonText => {\n    if (typeof jsonText === 'string') {\n      jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n    } else if (jsonText instanceof Array) {\n      DataUtil.parse.iterateAndReviveArray(jsonText);\n    } else if (typeof jsonText === 'object' && jsonText !== null) {\n      DataUtil.parse.iterateAndReviveJson(jsonText);\n    }\n\n    return jsonText;\n  },\n\n  /**\n   * It will perform on array of values.\n   * @param  {string[]|Object[]} array\n   * @hidden\n   */\n  iterateAndReviveArray: array => {\n    for (let i = 0; i < array.length; i++) {\n      if (typeof array[i] === 'object' && array[i] !== null) {\n        DataUtil.parse.iterateAndReviveJson(array[i]);\n      } else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{(.)+:|\\\"/g.test(array[i])) {\n        array[i] = DataUtil.parse.jsonReviver('', array[i]);\n      } else {\n        array[i] = DataUtil.parse.parseJson(array[i]);\n      }\n    }\n  },\n\n  /**\n   * It will perform on JSON values\n   * @param  {JSON} json\n   * @hidden\n   */\n  iterateAndReviveJson: json => {\n    let value;\n    let keys = Object.keys(json);\n\n    for (let prop of keys) {\n      if (DataUtil.startsWith(prop, '__')) {\n        continue;\n      }\n\n      value = json[prop];\n\n      if (typeof value === 'object') {\n        if (value instanceof Array) {\n          DataUtil.parse.iterateAndReviveArray(value);\n        } else if (value) {\n          DataUtil.parse.iterateAndReviveJson(value);\n        }\n      } else {\n        json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n      }\n    }\n  },\n\n  /**\n   * It will perform on JSON values\n   * @param  {string} field\n   * @param  {string|Date} value\n   * @hidden\n   */\n  jsonReviver: (field, value) => {\n    if (typeof value === 'string') {\n      let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n      let offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;\n\n      if (ms) {\n        return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);\n      } else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n        let isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;\n        let arr = value.split(/[^0-9.]/);\n\n        if (isUTC) {\n          value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);\n        } else {\n          let utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));\n          let hrs = parseInt(arr[6], 10);\n          let mins = parseInt(arr[7], 10);\n\n          if (isNaN(hrs) && isNaN(mins)) {\n            return utcFormat;\n          }\n\n          if (value.indexOf('+') > -1) {\n            utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);\n          } else {\n            utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);\n          }\n\n          value = DataUtil.dateParse.toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);\n        }\n\n        if (DataUtil.serverTimezoneOffset == null) {\n          value = DataUtil.dateParse.addSelfOffset(value);\n        }\n      }\n    }\n\n    return value;\n  },\n\n  /**\n   * Check wheather the given value is JSON or not.\n   * @param  {Object[]} jsonData\n   */\n  isJson: jsonData => {\n    if (typeof jsonData[0] === 'string') {\n      return jsonData;\n    }\n\n    return DataUtil.parse.parseJson(jsonData);\n  },\n\n  /**\n   * Checks wheather the given value is GUID or not.\n   * @param  {string} value\n   */\n  isGuid: value => {\n    let regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n    let match = regex.exec(value);\n    return match != null;\n  },\n\n  /**\n   * The method used to replace the value based on the type.\n   * @param  {Object} value\n   * @param  {boolean} stringify\n   * @hidden\n   */\n  replacer: (value, stringify) => {\n    if (DataUtil.isPlainObject(value)) {\n      return DataUtil.parse.jsonReplacer(value, stringify);\n    }\n\n    if (value instanceof Array) {\n      return DataUtil.parse.arrayReplacer(value);\n    }\n\n    if (value instanceof Date) {\n      return DataUtil.parse.jsonReplacer({\n        val: value\n      }, stringify).val;\n    }\n\n    return value;\n  },\n\n  /**\n   * It will replace the JSON value.\n   * @param  {string} key\n   * @param  {Object} val\n   * @hidden\n   */\n  jsonReplacer: (val, stringify) => {\n    let value;\n    let keys = Object.keys(val);\n\n    for (let prop of keys) {\n      value = val[prop];\n\n      if (!(value instanceof Date)) {\n        continue;\n      }\n\n      let d = value;\n\n      if (DataUtil.serverTimezoneOffset == null) {\n        val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();\n      } else {\n        d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);\n        val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();\n      }\n    }\n\n    return val;\n  },\n\n  /**\n   * It will replace the Array of value.\n   * @param  {string} key\n   * @param  {Object[]} val\n   * @hidden\n   */\n  arrayReplacer: val => {\n    for (let i = 0; i < val.length; i++) {\n      if (DataUtil.isPlainObject(val[i])) {\n        val[i] = DataUtil.parse.jsonReplacer(val[i]);\n      } else if (val[i] instanceof Date) {\n        val[i] = DataUtil.parse.jsonReplacer({\n          date: val[i]\n        }).date;\n      }\n    }\n\n    return val;\n  },\n\n  /**\n   * It will replace the Date object with respective to UTC format value.\n   * @param  {string} key\n   * @param  {any} value\n   * @hidden\n   */\n\n  /* tslint:disable-next-line:no-any */\n  jsonDateReplacer: (key, value) => {\n    if (key === 'value' && value) {\n      if (typeof value === 'string') {\n        let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n\n        if (ms) {\n          value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);\n        } else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n          let arr = value.split(/[^0-9]/);\n          value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);\n        }\n      }\n\n      if (value instanceof Date) {\n        value = DataUtil.dateParse.addSelfOffset(value);\n\n        if (DataUtil.serverTimezoneOffset === null) {\n          return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();\n        } else {\n          value = DataUtil.dateParse.toTimeZone(value, value.getTimezoneOffset() / 60 * 2 - DataUtil.serverTimezoneOffset, false);\n          return value.toJSON();\n        }\n      }\n    }\n\n    return value;\n  }\n};\n/**\n * @hidden\n */\n\nDataUtil.dateParse = {\n  addSelfOffset: input => {\n    return new Date(+input - input.getTimezoneOffset() * 60000);\n  },\n  toUTC: input => {\n    return new Date(+input + input.getTimezoneOffset() * 60000);\n  },\n  toTimeZone: (input, offset, utc) => {\n    if (offset === null) {\n      return input;\n    }\n\n    let unix = utc ? DataUtil.dateParse.toUTC(input) : input;\n    return new Date(+unix - offset * 3600000);\n  },\n  toLocalTime: input => {\n    let datefn = input;\n    let timeZone = -datefn.getTimezoneOffset();\n    let differenceString = timeZone >= 0 ? '+' : '-';\n\n    let localtimefn = num => {\n      let norm = Math.floor(Math.abs(num));\n      return (norm < 10 ? '0' : '') + norm;\n    };\n\n    let val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) + 'T' + localtimefn(datefn.getHours()) + ':' + localtimefn(datefn.getMinutes()) + ':' + localtimefn(datefn.getSeconds()) + differenceString + localtimefn(timeZone / 60) + ':' + localtimefn(timeZone % 60);\n    return val;\n  }\n};\nconst consts$1 = {\n  GroupGuid: '{271bbba0-1ee7}'\n};\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\n\nclass Adaptor {\n  /**\n   * Constructor for Adaptor class\n   * @param  {DataOptions} ds?\n   * @hidden\n   * @returns aggregates\n   */\n  constructor(ds) {\n    // common options for all the adaptors \n    this.options = {\n      from: 'table',\n      requestType: 'json',\n      sortBy: 'sorted',\n      select: 'select',\n      skip: 'skip',\n      group: 'group',\n      take: 'take',\n      search: 'search',\n      count: 'requiresCounts',\n      where: 'where',\n      aggregates: 'aggregates',\n      expand: 'expand'\n    };\n    /**\n     * Specifies the type of adaptor.\n     * @default Adaptor\n     */\n\n    this.type = Adaptor;\n    this.dataSource = ds;\n    this.pvt = {};\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {Object} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @returns Object\n   */\n\n\n  processResponse(data, ds, query, xhr) {\n    return data;\n  }\n\n}\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\n\n\nclass JsonAdaptor extends Adaptor {\n  /**\n   * Process the JSON data based on the provided queries.\n   * @param  {DataManager} dataManager\n   * @param  {Query} query\n   * @returns Object\n   */\n  processQuery(dataManager, query) {\n    let result = dataManager.dataSource.json.slice(0);\n    let count = result.length;\n    let countFlg = true;\n    let ret;\n    let key;\n    let lazyLoad = {};\n    let keyCount = 0;\n    let group = [];\n    let page;\n\n    for (let i = 0; i < query.lazyLoad.length; i++) {\n      keyCount++;\n      lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n    }\n\n    let agg = {};\n\n    for (let i = 0; i < query.queries.length; i++) {\n      key = query.queries[i];\n\n      if ((key.fn === 'onPage' || key.fn === 'onGroup') && query.lazyLoad.length) {\n        if (key.fn === 'onGroup') {\n          group.push(key.e);\n        }\n\n        if (key.fn === 'onPage') {\n          page = key.e;\n        }\n\n        continue;\n      }\n\n      ret = this[key.fn].call(this, result, key.e, query);\n\n      if (key.fn === 'onAggregates') {\n        agg[key.e.field + ' - ' + key.e.type] = ret;\n      } else {\n        result = ret !== undefined ? ret : result;\n      }\n\n      if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n        countFlg = false;\n      }\n\n      if (countFlg) {\n        count = result.length;\n      }\n    }\n\n    if (keyCount) {\n      let args = {\n        query: query,\n        lazyLoad: lazyLoad,\n        result: result,\n        group: group,\n        page: page\n      };\n      let lazyLoadData = this.lazyLoadGroup(args);\n      result = lazyLoadData.result;\n      count = lazyLoadData.count;\n    }\n\n    if (query.isCountRequired) {\n      result = {\n        result: result,\n        count: count,\n        aggregates: agg\n      };\n    }\n\n    return result;\n  }\n  /**\n   * Perform lazy load grouping in JSON array based on the given query and lazy load details.\n   * @param  {LazyLoadGroupArgs} args\n   */\n\n\n  lazyLoadGroup(args) {\n    let count = 0;\n    let agg = this.getAggregate(args.query);\n    let result = args.result;\n\n    if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {\n      let req = args.lazyLoad.onDemandGroupInfo;\n\n      for (let i = req.where.length - 1; i >= 0; i--) {\n        result = this.onWhere(result, req.where[i]);\n      }\n\n      if (args.group.length !== req.level) {\n        let field = args.group[req.level].fieldName;\n        result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n      }\n\n      count = result.length;\n      let data = result;\n      result = result.slice(req.skip);\n      result = result.slice(0, req.take);\n\n      if (args.group.length !== req.level) {\n        this.formGroupResult(result, data);\n      }\n    } else {\n      let field = args.group[0].fieldName;\n      result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n      count = result.length;\n      let data = result;\n\n      if (args.page) {\n        result = this.onPage(result, args.page, args.query);\n      }\n\n      this.formGroupResult(result, data);\n    }\n\n    return {\n      result: result,\n      count: count\n    };\n  }\n\n  formGroupResult(result, data) {\n    if (result.length && data.length) {\n      let uid = 'GroupGuid';\n      let childLevel = 'childLevels';\n      let level = 'level';\n      let records = 'records';\n      result[uid] = data[uid];\n      result[childLevel] = data[childLevel];\n      result[level] = data[level];\n      result[records] = data[records];\n    }\n\n    return result;\n  }\n  /**\n   * Separate the aggregate query from the given queries\n   * @param  {Query} query\n   */\n\n\n  getAggregate(query) {\n    let aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n    let agg = [];\n\n    if (aggQuery.length) {\n      let tmp;\n\n      for (let i = 0; i < aggQuery.length; i++) {\n        tmp = aggQuery[i].e;\n        agg.push({\n          type: tmp.type,\n          field: DataUtil.getValue(tmp.field, query)\n        });\n      }\n    }\n\n    return agg;\n  }\n  /**\n   * Performs batch update in the JSON array which add, remove and update records.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {RemoteArgs} e\n   */\n\n\n  batchRequest(dm, changes, e) {\n    let i;\n    let deletedRecordsLen = changes.deletedRecords.length;\n\n    for (i = 0; i < changes.addedRecords.length; i++) {\n      this.insert(dm, changes.addedRecords[i]);\n    }\n\n    for (i = 0; i < changes.changedRecords.length; i++) {\n      this.update(dm, e.key, changes.changedRecords[i]);\n    }\n\n    for (i = 0; i < deletedRecordsLen; i++) {\n      this.remove(dm, e.key, changes.deletedRecords[i]);\n    }\n\n    return changes;\n  }\n  /**\n   * Performs filter operation with the given data and where query.\n   * @param  {Object[]} ds\n   * @param  {{validate:Function}} e\n   */\n\n\n  onWhere(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    return ds.filter(obj => {\n      if (e) {\n        return e.validate(obj);\n      }\n    });\n  }\n  /**\n   * Returns aggregate function based on the aggregate type.\n   * @param  {Object[]} ds\n   * @param  {{field:string} e\n   * @param  {string}} type\n   */\n\n\n  onAggregates(ds, e) {\n    let fn = DataUtil.aggregates[e.type];\n\n    if (!ds || !fn || ds.length === 0) {\n      return null;\n    }\n\n    return fn(ds, e.field);\n  }\n  /**\n   * Performs search operation based on the given query.\n   * @param  {Object[]} ds\n   * @param  {QueryOptions} e\n   */\n\n\n  onSearch(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    if (e.fieldNames.length === 0) {\n      DataUtil.getFieldList(ds[0], e.fieldNames);\n    }\n\n    return ds.filter(obj => {\n      for (let j = 0; j < e.fieldNames.length; j++) {\n        if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n  }\n  /**\n   * Sort the data with given direction and field.\n   * @param  {Object[]} ds\n   * @param  {{comparer:(a:Object} e\n   * @param  {Object} b\n   */\n\n\n  onSortBy(ds, e, query) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    let fnCompare;\n    let field = DataUtil.getValue(e.fieldName, query);\n\n    if (!field) {\n      return ds.sort(e.comparer);\n    }\n\n    if (field instanceof Array) {\n      field = field.slice(0);\n\n      for (let i = field.length - 1; i >= 0; i--) {\n        if (!field[i]) {\n          continue;\n        }\n\n        fnCompare = e.comparer;\n\n        if (DataUtil.endsWith(field[i], ' desc')) {\n          fnCompare = DataUtil.fnSort('descending');\n          field[i] = field[i].replace(' desc', '');\n        }\n\n        ds = DataUtil.sort(ds, field[i], fnCompare);\n      }\n\n      return ds;\n    }\n\n    return DataUtil.sort(ds, field, e.comparer);\n  }\n  /**\n   * Group the data based on the given query.\n   * @param  {Object[]} ds\n   * @param  {QueryOptions} e\n   * @param  {Query} query\n   */\n\n\n  onGroup(ds, e, query) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    let agg = this.getAggregate(query);\n    return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n  }\n  /**\n   * Retrieves records based on the given page index and size.\n   * @param  {Object[]} ds\n   * @param  {{pageSize:number} e\n   * @param  {number}} pageIndex\n   * @param  {Query} query\n   */\n\n\n  onPage(ds, e, query) {\n    let size = DataUtil.getValue(e.pageSize, query);\n    let start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n    let end = start + size;\n\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    return ds.slice(start, end);\n  }\n  /**\n   * Retrieves records based on the given start and end index from query.\n   * @param  {Object[]} ds\n   * @param  {{start:number} e\n   * @param  {number}} end\n   */\n\n\n  onRange(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n  }\n  /**\n   * Picks the given count of records from the top of the datasource.\n   * @param  {Object[]} ds\n   * @param  {{nos:number}} e\n   */\n\n\n  onTake(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    return ds.slice(0, DataUtil.getValue(e.nos));\n  }\n  /**\n   * Skips the given count of records from the data source.\n   * @param  {Object[]} ds\n   * @param  {{nos:number}} e\n   */\n\n\n  onSkip(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    return ds.slice(DataUtil.getValue(e.nos));\n  }\n  /**\n   * Selects specified columns from the data source.\n   * @param  {Object[]} ds\n   * @param  {{fieldNames:string}} e\n   */\n\n\n  onSelect(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n  }\n  /**\n   * Inserts new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {number} position\n   */\n\n\n  insert(dm, data, tableName, query, position) {\n    if (isNullOrUndefined(position)) {\n      return dm.dataSource.json.push(data);\n    } else {\n      return dm.dataSource.json.splice(position, 0, data);\n    }\n  }\n  /**\n   * Remove the data from the dataSource based on the key field value.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   * @returns null\n   */\n\n\n  remove(dm, keyField, value, tableName) {\n    let ds = dm.dataSource.json;\n    let i;\n\n    if (typeof value === 'object' && !(value instanceof Date)) {\n      value = DataUtil.getObject(keyField, value);\n    }\n\n    for (i = 0; i < ds.length; i++) {\n      if (DataUtil.getObject(keyField, ds[i]) === value) {\n        break;\n      }\n    }\n\n    return i !== ds.length ? ds.splice(i, 1) : null;\n  }\n  /**\n   * Updates existing record and saves the changes to the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   * @returns null\n   */\n\n\n  update(dm, keyField, value, tableName) {\n    let ds = dm.dataSource.json;\n    let i;\n    let key;\n\n    if (!isNullOrUndefined(keyField)) {\n      key = getValue(keyField, value);\n    }\n\n    for (i = 0; i < ds.length; i++) {\n      if (!isNullOrUndefined(keyField) && getValue(keyField, ds[i]) === key) {\n        break;\n      }\n    }\n\n    return i < ds.length ? merge(ds[i], value) : null;\n  }\n\n}\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\n\n\nclass UrlAdaptor extends Adaptor {\n  /**\n   * Process the query to generate request body.\n   * @param  {DataManager} dm\n   * @param  {Query} query\n   * @param  {Object[]} hierarchyFilters?\n   * @returns p\n   */\n  // tslint:disable-next-line:max-func-body-length\n  processQuery(dm, query, hierarchyFilters) {\n    let queries = this.getQueryRequest(query);\n    let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n    let params = query.params;\n    let url = dm.dataSource.url;\n    let temp;\n    let skip;\n    let take = null;\n    let options = this.options;\n    let request = {\n      sorts: [],\n      groups: [],\n      filters: [],\n      searches: [],\n      aggregates: []\n    }; // calc Paging & Range\n\n    if ('onPage' in singles) {\n      temp = singles.onPage;\n      skip = DataUtil.getValue(temp.pageIndex, query);\n      take = DataUtil.getValue(temp.pageSize, query);\n      skip = (skip - 1) * take;\n    } else if ('onRange' in singles) {\n      temp = singles.onRange;\n      skip = temp.start;\n      take = temp.end - temp.start;\n    } // Sorting\n\n\n    for (let i = 0; i < queries.sorts.length; i++) {\n      temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n      request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', {\n        name: temp,\n        direction: queries.sorts[i].e.direction\n      }, query));\n    } // hierarchy\n\n\n    if (hierarchyFilters) {\n      temp = this.getFiltersFrom(hierarchyFilters, query);\n\n      if (temp) {\n        request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n      }\n    } // Filters\n\n\n    for (let i = 0; i < queries.filters.length; i++) {\n      let res = DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query);\n\n      if (this.getModuleName && this.getModuleName() === 'ODataV4Adaptor' && !isNullOrUndefined(queries.filters[i].e.key) && queries.filters.length > 1) {\n        res = \"(\" + res + \")\";\n      }\n\n      request.filters.push(res);\n      let keys = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];\n\n      for (let prop of keys) {\n        if (DataUtil.isNull(request[prop])) {\n          delete request[prop];\n        }\n      }\n    } // Searches\n\n\n    for (let i = 0; i < queries.searches.length; i++) {\n      temp = queries.searches[i].e;\n      request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n        fields: temp.fieldNames,\n        operator: temp.operator,\n        key: temp.searchKey,\n        ignoreCase: temp.ignoreCase\n      }, query));\n    } // Grouping\n\n\n    for (let i = 0; i < queries.groups.length; i++) {\n      request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));\n    } // aggregates\n\n\n    for (let i = 0; i < queries.aggregates.length; i++) {\n      temp = queries.aggregates[i].e;\n      request.aggregates.push({\n        type: temp.type,\n        field: DataUtil.getValue(temp.field, query)\n      });\n    }\n\n    let req = {};\n    this.getRequestQuery(options, query, singles, request, req); // Params\n\n    DataUtil.callAdaptorFunction(this, 'addParams', {\n      dm: dm,\n      query: query,\n      params: params,\n      reqParams: req\n    });\n\n    if (query.lazyLoad.length) {\n      for (let i = 0; i < query.lazyLoad.length; i++) {\n        req[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n      }\n    } // cleanup\n\n\n    let keys = Object.keys(req);\n\n    for (let prop of keys) {\n      if (DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {\n        delete req[prop];\n      }\n    }\n\n    if (!(options.skip in req && options.take in req) && take !== null) {\n      req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n      req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n    }\n\n    let p = this.pvt;\n    this.pvt = {};\n\n    if (this.options.requestType === 'json') {\n      return {\n        data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),\n        url: url,\n        pvtData: p,\n        type: 'POST',\n        contentType: 'application/json; charset=utf-8'\n      };\n    }\n\n    temp = this.convertToQueryString(req, query, dm);\n    temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n    return {\n      type: 'GET',\n      url: temp.length ? url.replace(/\\/*$/, temp) : url,\n      pvtData: p\n    };\n  }\n\n  getRequestQuery(options, query, singles, request, request1) {\n    let param = 'param';\n    let req = request1;\n    req[options.from] = query.fromTable;\n\n    if (options.apply && query.distincts.length) {\n      req[options.apply] = 'onDistinct' in this ? DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';\n    }\n\n    if (!query.distincts.length && options.expand) {\n      req[options.expand] = 'onExpand' in this && 'onSelect' in singles ? DataUtil.callAdaptorFunction(this, 'onExpand', {\n        selects: DataUtil.getValue(singles.onSelect.fieldNames, query),\n        expands: query.expands\n      }, query) : query.expands;\n    }\n\n    req[options.select] = 'onSelect' in singles && !query.distincts.length ? DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n    req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n    req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n    req[options.skip] = 'onSkip' in singles ? DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n    req[options.take] = 'onTake' in singles ? DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n    req[options.where] = request.filters.length || request.searches.length ? DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n    req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n    req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n    req[options.aggregates] = request.aggregates.length ? DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n    req[param] = [];\n  }\n  /**\n   * Convert the object from processQuery to string which can be added query string.\n   * @param  {Object} req\n   * @param  {Query} query\n   * @param  {DataManager} dm\n   */\n\n\n  convertToQueryString(request, query, dm) {\n    return ''; // this needs to be overridden\n  }\n  /**\n   * Return the data from the data manager processing.\n   * @param  {DataResult} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Object} request?\n   * @param  {CrudOptions} changes?\n   */\n\n\n  processResponse(data, ds, query, xhr, request, changes) {\n    if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {\n      let handleTimeZone = DataUtil.timeZoneHandling;\n\n      if (ds && !ds.timeZoneHandling) {\n        DataUtil.timeZoneHandling = false;\n      }\n\n      data = DataUtil.parse.parseJson(data);\n      DataUtil.timeZoneHandling = handleTimeZone;\n    }\n\n    let requests = request;\n    let pvt = requests.pvtData || {};\n    let groupDs = data ? data.groupDs : [];\n\n    if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n      return query.isCountRequired ? {\n        result: [],\n        count: 0\n      } : [];\n    }\n\n    let d = JSON.parse(requests.data);\n\n    if (d && d.action === 'batch' && data && data.addedRecords) {\n      changes.addedRecords = data.addedRecords;\n      return changes;\n    }\n\n    if (data && data.d) {\n      data = data.d;\n    }\n\n    let args = {};\n\n    if (data && 'count' in data) {\n      args.count = data.count;\n    }\n\n    args.result = data && data.result ? data.result : data;\n    let isExpand = false;\n\n    if (Array.isArray(data.result) && data.result.length) {\n      let key = 'key';\n      let val = 'value';\n      let level = 'level';\n\n      if (!isNullOrUndefined(data.result[0][key])) {\n        args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);\n      }\n\n      if (query && query.lazyLoad.length && pvt.groups.length) {\n        for (let i = 0; i < query.lazyLoad.length; i++) {\n          if (query.lazyLoad[i][key] === 'onDemandGroupInfo') {\n            let value = query.lazyLoad[i][val][level];\n\n            if (pvt.groups.length === value) {\n              isExpand = true;\n            }\n          }\n        }\n      }\n    }\n\n    if (!isExpand) {\n      this.getAggregateResult(pvt, data, args, groupDs, query);\n    }\n\n    return DataUtil.isNull(args.count) ? args.result : {\n      result: args.result,\n      count: args.count,\n      aggregates: args.aggregates\n    };\n  }\n\n  formRemoteGroupedData(data, level, childLevel) {\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].items.length && Object.keys(data[i].items[0]).indexOf('key') > -1) {\n        this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);\n      }\n    }\n\n    let uid = 'GroupGuid';\n    let childLvl = 'childLevels';\n    let lvl = 'level';\n    let records = 'records';\n    data[uid] = consts$1[uid];\n    data[lvl] = level;\n    data[childLvl] = childLevel;\n    data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];\n    return data;\n  }\n\n  getGroupedRecords(data, hasRecords) {\n    let childGroupedRecords = [];\n    let records = 'records';\n\n    for (let i = 0; i < data.length; i++) {\n      if (!hasRecords) {\n        for (let j = 0; j < data[i].items.length; j++) {\n          childGroupedRecords.push(data[i].items[j]);\n        }\n      } else {\n        childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);\n      }\n    }\n\n    return childGroupedRecords;\n  }\n  /**\n   * Add the group query to the adaptor`s option.\n   * @param  {Object[]} e\n   * @returns void\n   */\n\n\n  onGroup(e) {\n    this.pvt.groups = e;\n    return e;\n  }\n  /**\n   * Add the aggregate query to the adaptor`s option.\n   * @param  {Aggregates[]} e\n   * @returns void\n   */\n\n\n  onAggregates(e) {\n    this.pvt.aggregates = e;\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {Object} e\n   */\n\n\n  batchRequest(dm, changes, e, query, original) {\n    let url;\n    let key;\n    return {\n      type: 'POST',\n      url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n      contentType: 'application/json; charset=utf-8',\n      dataType: 'json',\n      data: JSON.stringify(extend({}, {\n        changed: changes.changedRecords,\n        added: changes.addedRecords,\n        deleted: changes.deletedRecords,\n        action: 'batch',\n        table: e[url],\n        key: e[key]\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  /**\n   * Method will trigger before send the request to server side.\n   * Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @returns void\n   */\n\n\n  beforeSend(dm, request) {// need to extend this method\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {string} tableName\n   */\n\n\n  insert(dm, data, tableName, query) {\n    return {\n      url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        value: data,\n        table: tableName,\n        action: 'insert'\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  /**\n   * Prepare and return request body which is used to remove record from the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {number|string} value\n   * @param  {string} tableName\n   */\n\n\n  remove(dm, keyField, value, tableName, query) {\n    return {\n      type: 'POST',\n      url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        key: value,\n        keyColumn: keyField,\n        table: tableName,\n        action: 'remove'\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  /**\n   * Prepare and return request body which is used to update record.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName\n   */\n\n\n  update(dm, keyField, value, tableName, query) {\n    return {\n      type: 'POST',\n      url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        value: value,\n        action: 'update',\n        keyColumn: keyField,\n        key: DataUtil.getObject(keyField, value),\n        table: tableName\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  /**\n   * To generate the predicate based on the filtered query.\n   * @param  {Object[]|string[]|number[]} data\n   * @param  {Query} query\n   * @hidden\n   */\n\n\n  getFiltersFrom(data, query) {\n    let key = query.fKey;\n    let value;\n    let prop = key;\n    let pKey = query.key;\n    let predicats = [];\n\n    if (typeof data[0] !== 'object') {\n      prop = null;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      if (typeof data[0] === 'object') {\n        value = DataUtil.getObject(pKey || prop, data[i]);\n      } else {\n        value = data[i];\n      }\n\n      predicats.push(new Predicate(key, 'equal', value));\n    }\n\n    return Predicate.or(predicats);\n  }\n\n  getAggregateResult(pvt, data, args, groupDs, query) {\n    let pData = data;\n\n    if (data && data.result) {\n      pData = data.result;\n    }\n\n    if (pvt && pvt.aggregates && pvt.aggregates.length) {\n      let agg = pvt.aggregates;\n      let fn;\n      let aggregateData = pData;\n      let res = {};\n\n      if (data.aggregate) {\n        aggregateData = data.aggregate;\n      }\n\n      for (let i = 0; i < agg.length; i++) {\n        fn = DataUtil.aggregates[agg[i].type];\n\n        if (fn) {\n          res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n        }\n      }\n\n      args.aggregates = res;\n    }\n\n    let key = 'key';\n    let isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);\n\n    if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {\n      let groups = pvt.groups;\n\n      for (let i = 0; i < groups.length; i++) {\n        let level = null;\n\n        if (!isNullOrUndefined(groupDs)) {\n          groupDs = DataUtil.group(groupDs, groups[i]);\n        }\n\n        let groupQuery = Query.filterQueries(query.queries, 'onGroup')[i].e;\n        pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);\n      }\n\n      args.result = pData;\n    }\n\n    return args;\n  }\n\n  getQueryRequest(query) {\n    let req = {\n      sorts: [],\n      groups: [],\n      filters: [],\n      searches: [],\n      aggregates: []\n    };\n    req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n    req.groups = Query.filterQueries(query.queries, 'onGroup');\n    req.filters = Query.filterQueries(query.queries, 'onWhere');\n    req.searches = Query.filterQueries(query.queries, 'onSearch');\n    req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n    return req;\n  }\n\n  addParams(options) {\n    let req = options.reqParams;\n\n    if (options.params.length) {\n      req.params = {};\n    }\n\n    for (let tmp of options.params) {\n      if (req[tmp.key]) {\n        throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n      }\n\n      req[tmp.key] = tmp.value;\n\n      if (tmp.fn) {\n        req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n      }\n\n      req.params[tmp.key] = req[tmp.key];\n    }\n  }\n\n}\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\n\n\nclass ODataAdaptor extends UrlAdaptor {\n  constructor(props) {\n    super(); // options replaced the default adaptor options\n\n    this.options = extend({}, this.options, {\n      requestType: 'get',\n      accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n      multipartAccept: 'multipart/mixed',\n      sortBy: '$orderby',\n      select: '$select',\n      skip: '$skip',\n      take: '$top',\n      count: '$inlinecount',\n      where: '$filter',\n      expand: '$expand',\n      batch: '$batch',\n      changeSet: '--changeset_',\n      batchPre: 'batch_',\n      contentId: 'Content-Id: ',\n      batchContent: 'Content-Type: multipart/mixed; boundary=',\n      changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n      batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n      updateType: 'PUT'\n    });\n    extend(this.options, props || {});\n  }\n\n  getModuleName() {\n    return 'ODataAdaptor';\n  }\n  /**\n   * Generate request string based on the filter criteria from query.\n   * @param  {Predicate} pred\n   * @param  {boolean} requiresCast?\n   */\n\n\n  onPredicate(predicate, query, requiresCast) {\n    let returnValue = '';\n    let operator;\n    let guid;\n    let val = predicate.value;\n    let type = typeof val;\n    let field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n\n    if (val instanceof Date) {\n      val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n    }\n\n    if (type === 'string') {\n      val = encodeURIComponent(val);\n      val = '\\'' + val + '\\'';\n\n      if (requiresCast) {\n        field = 'cast(' + field + ', \\'Edm.String\\')';\n      }\n\n      if (DataUtil.parse.isGuid(val)) {\n        guid = 'guid';\n      }\n\n      if (predicate.ignoreCase) {\n        if (!guid) {\n          field = 'tolower(' + field + ')';\n        }\n\n        val = val.toLowerCase();\n      }\n    }\n\n    operator = DataUtil.odBiOperator[predicate.operator];\n\n    if (operator) {\n      returnValue += field;\n      returnValue += operator;\n\n      if (guid) {\n        returnValue += guid;\n      }\n\n      return returnValue + val;\n    }\n\n    if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {\n      operator = DataUtil.odv4UniOperator[predicate.operator];\n    } else {\n      operator = DataUtil.odUniOperator[predicate.operator];\n    }\n\n    if (operator === 'substringof') {\n      let temp = val;\n      val = field;\n      field = temp;\n    }\n\n    returnValue += operator + '(';\n    returnValue += field + ',';\n\n    if (guid) {\n      returnValue += guid;\n    }\n\n    returnValue += val + ')';\n    return returnValue;\n  }\n\n  addParams(options) {\n    super.addParams(options);\n    delete options.reqParams.params;\n  }\n  /**\n   * Generate request string based on the multiple filter criteria from query.\n   * @param  {Predicate} pred\n   * @param  {boolean} requiresCast?\n   */\n\n\n  onComplexPredicate(predicate, query, requiresCast) {\n    let res = [];\n\n    for (let i = 0; i < predicate.predicates.length; i++) {\n      res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n    }\n\n    return res.join(' ' + predicate.condition + ' ');\n  }\n  /**\n   * Generate query string based on the multiple filter criteria from query.\n   * @param  {Predicate} filter\n   * @param  {boolean} requiresCast?\n   */\n\n\n  onEachWhere(filter, query, requiresCast) {\n    return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n  }\n  /**\n   * Generate query string based on the multiple filter criteria from query.\n   * @param  {string[]} filters\n   */\n\n\n  onWhere(filters) {\n    if (this.pvt.search) {\n      filters.push(this.onEachWhere(this.pvt.search, null, true));\n    }\n\n    return filters.join(' and ');\n  }\n  /**\n   * Generate query string based on the multiple search criteria from query.\n   * @param  {{fields:string[]} e\n   * @param  {string} operator\n   * @param  {string} key\n   * @param  {boolean}} ignoreCase\n   */\n\n\n  onEachSearch(e) {\n    if (e.fields && e.fields.length === 0) {\n      DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n    }\n\n    let filter = this.pvt.search || [];\n\n    for (let i = 0; i < e.fields.length; i++) {\n      filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n    }\n\n    this.pvt.search = filter;\n  }\n  /**\n   * Generate query string based on the search criteria from query.\n   * @param  {Object} e\n   */\n\n\n  onSearch(e) {\n    this.pvt.search = Predicate.or(this.pvt.search);\n    return '';\n  }\n  /**\n   * Generate query string based on multiple sort criteria from query.\n   * @param  {QueryOptions} e\n   */\n\n\n  onEachSort(e) {\n    let res = [];\n\n    if (e.name instanceof Array) {\n      for (let i = 0; i < e.name.length; i++) {\n        res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n      }\n    } else {\n      res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n    }\n\n    return res.join(',');\n  }\n  /**\n   * Returns sort query string.\n   * @param  {string[]} e\n   */\n\n\n  onSortBy(e) {\n    return e.reverse().join(',');\n  }\n  /**\n   * Adds the group query to the adaptor option.\n   * @param  {Object[]} e\n   * @returns string\n   */\n\n\n  onGroup(e) {\n    this.pvt.groups = e;\n    return [];\n  }\n  /**\n   * Returns the select query string.\n   * @param  {string[]} e\n   */\n\n\n  onSelect(e) {\n    for (let i = 0; i < e.length; i++) {\n      e[i] = ODataAdaptor.getField(e[i]);\n    }\n\n    return e.join(',');\n  }\n  /**\n   * Add the aggregate query to the adaptor option.\n   * @param  {Object[]} e\n   * @returns string\n   */\n\n\n  onAggregates(e) {\n    this.pvt.aggregates = e;\n    return '';\n  }\n  /**\n   * Returns the query string which requests total count from the data source.\n   * @param  {boolean} e\n   * @returns string\n   */\n\n\n  onCount(e) {\n    return e === true ? 'allpages' : '';\n  }\n  /**\n   * Method will trigger before send the request to server side.\n   * Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @param  {Ajax} settings?\n   */\n\n\n  beforeSend(dm, request, settings) {\n    if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n      request.setRequestHeader('Accept', this.options.multipartAccept);\n      request.setRequestHeader('DataServiceVersion', '2.0');\n      request.overrideMimeType('text/plain; charset=x-user-defined');\n    } else {\n      request.setRequestHeader('Accept', this.options.accept);\n    }\n\n    request.setRequestHeader('DataServiceVersion', '2.0');\n    request.setRequestHeader('MaxDataServiceVersion', '2.0');\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {DataResult} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Ajax} request?\n   * @param  {CrudOptions} changes?\n   * @returns aggregateResult\n   */\n\n\n  processResponse(data, ds, query, xhr, request, changes) {\n    let metaCheck = 'odata.metadata';\n\n    if (request && request.type === 'GET' && !this.rootUrl && data[metaCheck]) {\n      let dataUrls = data[metaCheck].split('/$metadata#');\n      this.rootUrl = dataUrls[0];\n      this.resourceTableName = dataUrls[1];\n    }\n\n    let pvtData = 'pvtData';\n\n    if (!isNullOrUndefined(data.d)) {\n      let dataCopy = query && query.isCountRequired ? data.d.results : data.d;\n      let metaData = '__metadata';\n\n      if (!isNullOrUndefined(dataCopy)) {\n        for (let i = 0; i < dataCopy.length; i++) {\n          if (!isNullOrUndefined(dataCopy[i][metaData])) {\n            delete dataCopy[i][metaData];\n          }\n        }\n      }\n    }\n\n    let pvt = request && request[pvtData];\n    let emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n\n    if (emptyAndBatch) {\n      return emptyAndBatch;\n    }\n\n    let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n    let count = null;\n    let version = versionCheck && parseInt(versionCheck, 10) || 2;\n\n    if (query && query.isCountRequired) {\n      let oDataCount = '__count';\n\n      if (data[oDataCount] || data['odata.count']) {\n        count = data[oDataCount] || data['odata.count'];\n      }\n\n      if (data.d) {\n        data = data.d;\n      }\n\n      if (data[oDataCount] || data['odata.count']) {\n        count = data[oDataCount] || data['odata.count'];\n      }\n    }\n\n    if (version === 3 && data.value) {\n      data = data.value;\n    }\n\n    if (data.d) {\n      data = data.d;\n    }\n\n    if (version < 3 && data.results) {\n      data = data.results;\n    }\n\n    let args = {};\n    args.count = count;\n    args.result = data;\n    this.getAggregateResult(pvt, data, args, null, query);\n    return DataUtil.isNull(count) ? args.result : {\n      result: args.result,\n      count: args.count,\n      aggregates: args.aggregates\n    };\n  }\n  /**\n   * Converts the request object to query string.\n   * @param  {Object} req\n   * @param  {Query} query\n   * @param  {DataManager} dm\n   * @returns tableName\n   */\n\n\n  convertToQueryString(request, query, dm) {\n    let res = [];\n    let table = 'table';\n    let tableName = request[table] || '';\n    let format = '$format';\n    delete request[table];\n\n    if (dm.dataSource.requiresFormat) {\n      request[format] = 'json';\n    }\n\n    let keys = Object.keys(request);\n\n    for (let prop of keys) {\n      res.push(prop + '=' + request[prop]);\n    }\n\n    res = res.join('&');\n\n    if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n      return res;\n    }\n\n    return res.length ? tableName + '?' + res : tableName || '';\n  }\n\n  localTimeReplacer(key, convertObj) {\n    for (let prop of !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []) {\n      if (convertObj[prop] instanceof Date) {\n        convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);\n      }\n    }\n\n    return convertObj;\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {string} tableName?\n   */\n\n\n  insert(dm, data, tableName) {\n    return {\n      url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : ''),\n      data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)\n    };\n  }\n  /**\n   * Prepare and return request body which is used to remove record from the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {number} value\n   * @param  {string} tableName?\n   */\n\n\n  remove(dm, keyField, value, tableName) {\n    let url;\n\n    if (typeof value === 'string' && !DataUtil.parse.isGuid(value)) {\n      url = `('${value}')`;\n    } else {\n      url = `(${value})`;\n    }\n\n    return {\n      type: 'DELETE',\n      url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url\n    };\n  }\n  /**\n   * Updates existing record and saves the changes to the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   * @returns this\n   */\n\n\n  update(dm, keyField, value, tableName, query, original) {\n    if (this.options.updateType === 'PATCH' && !isNullOrUndefined(original)) {\n      value = this.compareAndRemove(value, original, keyField);\n    }\n\n    let url;\n\n    if (typeof value[keyField] === 'string' && !DataUtil.parse.isGuid(value[keyField])) {\n      url = `('${value[keyField]}')`;\n    } else {\n      url = `(${value[keyField]})`;\n    }\n\n    return {\n      type: this.options.updateType,\n      url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url,\n      data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),\n      accept: this.options.accept\n    };\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {RemoteArgs} e\n   * @returns {Object}\n   */\n\n\n  batchRequest(dm, changes, e, query, original) {\n    let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n    let url = this.rootUrl ? this.rootUrl + '/' + this.options.batch : dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n    e.url = this.resourceTableName ? this.resourceTableName : e.url;\n    let args = {\n      url: e.url,\n      key: e.key,\n      cid: 1,\n      cSet: DataUtil.getGuid(this.options.changeSet)\n    };\n    let req = '--' + initialGuid + '\\n';\n    req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n    this.pvt.changeSet = 0;\n    req += this.generateInsertRequest(changes.addedRecords, args, dm);\n    req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);\n    req += this.generateDeleteRequest(changes.deletedRecords, args, dm);\n    req += args.cSet + '--\\n';\n    req += '--' + initialGuid + '--';\n    return {\n      type: 'POST',\n      url: url,\n      dataType: 'json',\n      contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n      data: req\n    };\n  }\n  /**\n   * Generate the string content from the removed records.\n   * The result will be send during batch update.\n   * @param  {Object[]} arr\n   * @param  {RemoteArgs} e\n   * @returns this\n   */\n\n\n  generateDeleteRequest(arr, e, dm) {\n    if (!arr) {\n      return '';\n    }\n\n    let req = '';\n    let stat = {\n      'method': 'DELETE ',\n      'url': (data, i, key) => {\n        let url = DataUtil.getObject(key, data[i]);\n\n        if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n          return '(' + url + ')';\n        } else if (url instanceof Date) {\n          let dateTime = data[i][key];\n          return '(' + dateTime.toJSON() + ')';\n        } else {\n          return `('${url}')`;\n        }\n      },\n      'data': (data, i) => ''\n    };\n    req = this.generateBodyContent(arr, e, stat, dm);\n    return req + '\\n';\n  }\n  /**\n   * Generate the string content from the inserted records.\n   * The result will be send during batch update.\n   * @param  {Object[]} arr\n   * @param  {RemoteArgs} e\n   */\n\n\n  generateInsertRequest(arr, e, dm) {\n    if (!arr) {\n      return '';\n    }\n\n    let req = '';\n    let stat = {\n      'method': 'POST ',\n      'url': (data, i, key) => '',\n      'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n    };\n    req = this.generateBodyContent(arr, e, stat, dm);\n    return req;\n  }\n  /**\n   * Generate the string content from the updated records.\n   * The result will be send during batch update.\n   * @param  {Object[]} arr\n   * @param  {RemoteArgs} e\n   */\n\n\n  generateUpdateRequest(arr, e, dm, org) {\n    if (!arr) {\n      return '';\n    }\n\n    let req = '';\n    arr.forEach(change => change = this.compareAndRemove(change, org.filter(o => DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change))[0], e.key));\n    let stat = {\n      'method': this.options.updateType + ' ',\n      'url': (data, i, key) => {\n        if (typeof data[i][key] === 'number' || DataUtil.parse.isGuid(data[i][key])) {\n          return '(' + data[i][key] + ')';\n        } else if (data[i][key] instanceof Date) {\n          let date = data[i][key];\n          return '(' + date.toJSON() + ')';\n        } else {\n          return `('${data[i][key]}')`;\n        }\n      },\n      'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n    };\n    req = this.generateBodyContent(arr, e, stat, dm);\n    return req;\n  }\n\n  static getField(prop) {\n    return prop.replace(/\\./g, '/');\n  }\n\n  generateBodyContent(arr, e, stat, dm) {\n    let req = '';\n\n    for (let i = 0; i < arr.length; i++) {\n      req += '\\n' + e.cSet + '\\n';\n      req += this.options.changeSetContent + '\\n\\n';\n      req += stat.method;\n\n      if (stat.method === 'POST ') {\n        req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n      } else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {\n        req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n      } else if (stat.method === 'DELETE ') {\n        req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n      }\n\n      req += 'Accept: ' + this.options.accept + '\\n';\n      req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n      req += this.options.batchChangeSetContentType + '\\n';\n\n      if (!isNullOrUndefined(arr[i]['@odata.etag'])) {\n        req += 'If-Match: ' + arr[i]['@odata.etag'] + '\\n\\n';\n        delete arr[i]['@odata.etag'];\n      } else {\n        req += '\\n';\n      }\n\n      req += stat.data(arr, i);\n    }\n\n    return req;\n  }\n\n  processBatchResponse(data, query, xhr, request, changes) {\n    if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n      return query.isCountRequired ? {\n        result: [],\n        count: 0\n      } : [];\n    }\n\n    if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n      let guid = xhr.getResponseHeader('Content-Type');\n      let cIdx;\n      let jsonObj;\n      let d = data + '';\n      guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n      d = d.split(guid);\n\n      if (d.length < 2) {\n        return {};\n      }\n\n      d = d[1];\n      let exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n\n      if (exVal) {\n        d.replace(exVal[0], '');\n      }\n\n      let changeGuid = exVal ? exVal[1] : '';\n      d = d.split(changeGuid);\n\n      for (let i = d.length; i > -1; i--) {\n        if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n          continue;\n        }\n\n        cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n\n        if (changes.addedRecords[cIdx]) {\n          jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n          extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n        }\n      }\n\n      return changes;\n    }\n\n    return null;\n  }\n\n  compareAndRemove(data, original, key) {\n    if (isNullOrUndefined(original)) {\n      return data;\n    }\n\n    Object.keys(data).forEach(prop => {\n      if (prop !== key && prop !== '@odata.etag') {\n        if (DataUtil.isPlainObject(data[prop])) {\n          this.compareAndRemove(data[prop], original[prop]);\n          let final = Object.keys(data[prop]).filter(data => data !== '@odata.etag');\n\n          if (final.length === 0) {\n            delete data[prop];\n          }\n        } else if (data[prop] === original[prop]) {\n          delete data[prop];\n        } else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {\n          delete data[prop];\n        }\n      }\n    });\n    return data;\n  }\n\n}\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\n\n\nclass ODataV4Adaptor extends ODataAdaptor {\n  constructor(props) {\n    super(props); // options replaced the default adaptor options\n\n    this.options = extend({}, this.options, {\n      requestType: 'get',\n      accept: 'application/json, text/javascript, */*; q=0.01',\n      multipartAccept: 'multipart/mixed',\n      sortBy: '$orderby',\n      select: '$select',\n      skip: '$skip',\n      take: '$top',\n      count: '$count',\n      search: '$search',\n      where: '$filter',\n      expand: '$expand',\n      batch: '$batch',\n      changeSet: '--changeset_',\n      batchPre: 'batch_',\n      contentId: 'Content-Id: ',\n      batchContent: 'Content-Type: multipart/mixed; boundary=',\n      changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n      batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n      updateType: 'PATCH',\n      localTime: false,\n      apply: '$apply'\n    });\n    extend(this.options, props || {});\n  }\n  /**\n   * @hidden\n   */\n\n\n  getModuleName() {\n    return 'ODataV4Adaptor';\n  }\n  /**\n   * Returns the query string which requests total count from the data source.\n   * @param  {boolean} e\n   * @returns string\n   */\n\n\n  onCount(e) {\n    return e === true ? 'true' : '';\n  }\n  /**\n   * Generate request string based on the filter criteria from query.\n   * @param  {Predicate} pred\n   * @param  {boolean} requiresCast?\n   */\n\n\n  onPredicate(predicate, query, requiresCast) {\n    let returnValue = '';\n    let val = predicate.value;\n    let isDate = val instanceof Date;\n\n    if (query instanceof Query) {\n      let queries = this.getQueryRequest(query);\n\n      for (let i = 0; i < queries.filters.length; i++) {\n        if (queries.filters[i].e.key === predicate.value) {\n          requiresCast = true;\n        }\n      }\n    }\n\n    returnValue = super.onPredicate.call(this, predicate, query, requiresCast);\n\n    if (isDate) {\n      returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n    }\n\n    if (DataUtil.parse.isGuid(val)) {\n      returnValue = returnValue.replace('guid', '').replace(/'/g, '');\n    }\n\n    return returnValue;\n  }\n  /**\n   *  Generate query string based on the multiple search criteria from query.\n   * @param  {{fields:string[]} e\n   * @param  {string} operator\n   * @param  {string} key\n   * @param  {boolean}} ignoreCase\n   */\n\n\n  onEachSearch(e) {\n    let search = this.pvt.searches || [];\n    search.push(e.key);\n    this.pvt.searches = search;\n  }\n  /**\n   *  Generate query string based on the search criteria from query.\n   * @param  {Object} e\n   */\n\n\n  onSearch(e) {\n    return this.pvt.searches.join(' OR ');\n  }\n  /**\n   * Returns the expand query string.\n   * @param  {string} e\n   */\n\n\n  onExpand(e) {\n    let selected = {};\n    let expanded = {};\n    let expands = e.expands.slice();\n    let exArr = [];\n    let selects = e.selects.filter(item => item.indexOf('.') > -1);\n    selects.forEach(select => {\n      let splits = select.split('.');\n\n      if (!(splits[0] in selected)) {\n        selected[splits[0]] = [];\n      }\n\n      selected[splits[0]].push(splits[1]);\n    }); //Auto expand from select query\n\n    Object.keys(selected).forEach(expand => {\n      if (expands.indexOf(expand) === -1) {\n        expands.push(expand);\n      }\n    });\n    expands.forEach(expand => {\n      expanded[expand] = expand in selected ? `${expand}(${this.options.select}=${selected[expand].join(',')})` : expand;\n    });\n    Object.keys(expanded).forEach(ex => exArr.push(expanded[ex]));\n    return exArr.join(',');\n  }\n  /**\n   * Returns the groupby query string.\n   * @param  {string} e\n   */\n\n\n  onDistinct(distinctFields) {\n    let fields = distinctFields.map(field => ODataAdaptor.getField(field)).join(',');\n    return `groupby((${fields}))`;\n  }\n  /**\n   * Returns the select query string.\n   * @param  {string[]} e\n   */\n\n\n  onSelect(e) {\n    return super.onSelect(e.filter(item => item.indexOf('.') === -1));\n  }\n  /**\n   * Method will trigger before send the request to server side.\n   * Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @param  {Ajax} settings\n   * @returns void\n   */\n\n\n  beforeSend(dm, request, settings) {\n    if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {\n      request.setRequestHeader('Prefer', 'return=representation');\n    }\n\n    request.setRequestHeader('Accept', this.options.accept);\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {DataResult} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Ajax} request?\n   * @param  {CrudOptions} changes?\n   * @returns aggregateResult\n   */\n\n\n  processResponse(data, ds, query, xhr, request, changes) {\n    let metaName = '@odata.context';\n\n    if (request && request.type === 'GET' && !this.rootUrl && data[metaName]) {\n      let dataUrl = data[metaName].split('/$metadata#');\n      this.rootUrl = dataUrl[0];\n      this.resourceTableName = dataUrl[1];\n    }\n\n    let pvtData = 'pvtData';\n    let pvt = request && request[pvtData];\n    let emptyAndBatch = super.processBatchResponse(data, query, xhr, request, changes);\n\n    if (emptyAndBatch) {\n      return emptyAndBatch;\n    }\n\n    let count = null;\n    let dataCount = '@odata.count';\n\n    if (query && query.isCountRequired) {\n      if (dataCount in data) {\n        count = data[dataCount];\n      }\n    }\n\n    data = !isNullOrUndefined(data.value) ? data.value : data;\n    let args = {};\n    args.count = count;\n    args.result = data;\n    this.getAggregateResult(pvt, data, args, null, query);\n    return DataUtil.isNull(count) ? args.result : {\n      result: args.result,\n      count: count,\n      aggregates: args.aggregates\n    };\n  }\n\n}\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\n\n\nclass WebApiAdaptor extends ODataAdaptor {\n  getModuleName() {\n    return 'WebApiAdaptor';\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {string} tableName?\n   */\n\n\n  insert(dm, data, tableName) {\n    return {\n      type: 'POST',\n      url: dm.dataSource.url,\n      data: JSON.stringify(data)\n    };\n  }\n  /**\n   * Prepare and return request body which is used to remove record from the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {number} value\n   * @param  {string} tableName?\n   */\n\n\n  remove(dm, keyField, value, tableName) {\n    return {\n      type: 'DELETE',\n      url: dm.dataSource.url + '/' + value,\n      data: JSON.stringify(value)\n    };\n  }\n  /**\n   * Prepare and return request body which is used to update record.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   */\n\n\n  update(dm, keyField, value, tableName) {\n    return {\n      type: 'PUT',\n      url: dm.dataSource.url,\n      data: JSON.stringify(value)\n    };\n  }\n\n  batchRequest(dm, changes, e) {\n    let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n    let url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n    e.url = this.resourceTableName ? this.resourceTableName : e.url;\n    let req = []; //insertion\n\n    for (let i = 0, x = changes.addedRecords.length; i < x; i++) {\n      changes.addedRecords.forEach((j, d) => {\n        let stat = {\n          'method': 'POST ',\n          'url': (data, i, key) => '',\n          'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req.push('--' + initialGuid);\n        req.push('Content-Type: application/http; msgtype=request', '');\n        req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');\n        req.push('Content-Type: ' + 'application/json; charset=utf-8');\n        req.push('Host: ' + location.host);\n        req.push('', j ? JSON.stringify(j) : '');\n      });\n    } //updation \n\n\n    for (let i = 0, x = changes.changedRecords.length; i < x; i++) {\n      changes.changedRecords.forEach((j, d) => {\n        let stat = {\n          'method': this.options.updateType + ' ',\n          'url': (data, i, key) => '',\n          'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req.push('--' + initialGuid);\n        req.push('Content-Type: application/http; msgtype=request', '');\n        req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');\n        req.push('Content-Type: ' + 'application/json; charset=utf-8');\n        req.push('Host: ' + location.host);\n        req.push('', j ? JSON.stringify(j) : '');\n      });\n    } //deletion\n\n\n    for (let i = 0, x = changes.deletedRecords.length; i < x; i++) {\n      changes.deletedRecords.forEach((j, d) => {\n        let state = {\n          'mtd': 'DELETE ',\n          'url': (data, i, key) => {\n            let url = DataUtil.getObject(key, data[i]);\n\n            if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n              return '/' + url;\n            } else if (url instanceof Date) {\n              let datTime = data[i][key];\n              return '/' + datTime.toJSON();\n            } else {\n              return `/'${url}'`;\n            }\n          },\n          'data': (data, i) => ''\n        };\n        req.push('--' + initialGuid);\n        req.push('Content-Type: application/http; msgtype=request', '');\n        req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + state.url(changes.deletedRecords, i, e.key) + ' HTTP/1.1');\n        req.push('Content-Type: ' + 'application/json; charset=utf-8');\n        req.push('Host: ' + location.host);\n        req.push('', j ? JSON.stringify(j) : '');\n      });\n    }\n\n    req.push('--' + initialGuid + '--', '');\n    return {\n      type: 'POST',\n      url: url,\n      contentType: 'multipart/mixed; boundary=' + initialGuid,\n      data: req.join('\\r\\n')\n    };\n  }\n  /**\n   * Method will trigger before send the request to server side.\n   * Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @param  {Ajax} settings\n   * @returns void\n   */\n\n\n  beforeSend(dm, request, settings) {\n    request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {DataResult} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Ajax} request?\n   * @param  {CrudOptions} changes?\n   * @returns aggregateResult\n   */\n\n\n  processResponse(data, ds, query, xhr, request, changes) {\n    let pvtData = 'pvtData';\n    let pvt = request && request[pvtData];\n    let count = null;\n    let args = {};\n\n    if (request && request.type.toLowerCase() !== 'post') {\n      let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n      let version = versionCheck && parseInt(versionCheck, 10) || 2;\n\n      if (query && query.isCountRequired) {\n        if (!DataUtil.isNull(data.Count)) {\n          count = data.Count;\n        }\n      }\n\n      if (version < 3 && data.Items) {\n        data = data.Items;\n      }\n\n      args.count = count;\n      args.result = data;\n      this.getAggregateResult(pvt, data, args, null, query);\n    }\n\n    args.result = args.result || data;\n    return DataUtil.isNull(count) ? args.result : {\n      result: args.result,\n      count: args.count,\n      aggregates: args.aggregates\n    };\n  }\n\n}\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\n\n\nclass WebMethodAdaptor extends UrlAdaptor {\n  /**\n   * Prepare the request body based on the query.\n   * The query information can be accessed at the WebMethod using variable named `value`.\n   * @param  {DataManager} dm\n   * @param  {Query} query\n   * @param  {Object[]} hierarchyFilters?\n   * @returns application\n   */\n  processQuery(dm, query, hierarchyFilters) {\n    let obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n    let getData = 'data';\n    let data = DataUtil.parse.parseJson(obj[getData]);\n    let result = {};\n    let value = 'value';\n\n    if (data.param) {\n      for (let i = 0; i < data.param.length; i++) {\n        let param = data.param[i];\n        let key = Object.keys(param)[0];\n        result[key] = param[key];\n      }\n    }\n\n    result[value] = data;\n    let pvtData = 'pvtData';\n    let url = 'url';\n    return {\n      data: JSON.stringify(result),\n      url: obj[url],\n      pvtData: obj[pvtData],\n      type: 'POST',\n      contentType: 'application/json; charset=utf-8'\n    };\n  }\n\n}\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\n\n\nclass RemoteSaveAdaptor extends JsonAdaptor {\n  /**\n   * @hidden\n   */\n  constructor() {\n    super();\n    setValue('beforeSend', UrlAdaptor.prototype.beforeSend, this);\n  }\n\n  insert(dm, data, tableName, query, position) {\n    this.pvt.position = position;\n    this.updateType = 'add';\n    return {\n      url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        value: data,\n        table: tableName,\n        action: 'insert'\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n\n  remove(dm, keyField, val, tableName, query) {\n    super.remove(dm, keyField, val);\n    return {\n      type: 'POST',\n      url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        key: val,\n        keyColumn: keyField,\n        table: tableName,\n        action: 'remove'\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n\n  update(dm, keyField, val, tableName, query) {\n    this.updateType = 'update';\n    this.updateKey = keyField;\n    return {\n      type: 'POST',\n      url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        value: val,\n        action: 'update',\n        keyColumn: keyField,\n        key: val[keyField],\n        table: tableName\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n\n  processResponse(data, ds, query, xhr, request, changes, e) {\n    let i;\n    let newData = request ? JSON.parse(request.data) : data;\n    data = newData.action === 'batch' ? DataUtil.parse.parseJson(data) : data;\n\n    if (this.updateType === 'add') {\n      super.insert(ds, data, null, null, this.pvt.position);\n    }\n\n    if (this.updateType === 'update') {\n      super.update(ds, this.updateKey, data);\n    }\n\n    this.updateType = undefined;\n\n    if (data.added) {\n      for (i = 0; i < data.added.length; i++) {\n        super.insert(ds, data.added[i]);\n      }\n    }\n\n    if (data.changed) {\n      for (i = 0; i < data.changed.length; i++) {\n        super.update(ds, e.key, data.changed[i]);\n      }\n    }\n\n    if (data.deleted) {\n      for (i = 0; i < data.deleted.length; i++) {\n        super.remove(ds, e.key, data.deleted[i]);\n      }\n    }\n\n    return data;\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * Also perform the changes in the locally cached data to sync with the remote data.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {RemoteArgs} e\n   */\n\n\n  batchRequest(dm, changes, e, query, original) {\n    return {\n      type: 'POST',\n      url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      contentType: 'application/json; charset=utf-8',\n      dataType: 'json',\n      data: JSON.stringify(extend({}, {\n        changed: changes.changedRecords,\n        added: changes.addedRecords,\n        deleted: changes.deletedRecords,\n        action: 'batch',\n        table: e.url,\n        key: e.key\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n\n  addParams(options) {\n    let urlParams = new UrlAdaptor();\n    urlParams.addParams(options);\n  }\n\n}\n/**\n * Ajax Adaptor that is extended from URL Adaptor, is used for handle data operations with user defined functions.\n * @hidden\n */\n\n\nclass CustomDataAdaptor extends UrlAdaptor {\n  constructor(props) {\n    super(); // options replaced the default adaptor options\n\n    this.options = extend({}, this.options, {\n      getData: new Function(),\n      addRecord: new Function(),\n      updateRecord: new Function(),\n      deleteRecord: new Function(),\n      batchUpdate: new Function()\n    });\n    extend(this.options, props || {});\n  }\n\n  getModuleName() {\n    return 'CustomDataAdaptor';\n  }\n\n}\n/**\n * The GraphqlAdaptor that is extended from URL Adaptor, is used for retrieving data from the Graphql server.\n * It interacts with the Graphql server with all the DataManager Queries and performs CRUD operations.\n * @hidden\n */\n\n\nclass GraphQLAdaptor extends UrlAdaptor {\n  getModuleName() {\n    return 'GraphQLAdaptor';\n  }\n\n  constructor(options) {\n    super();\n    this.opt = options;\n    this.schema = this.opt.response;\n    this.query = this.opt.query;\n    this.getVariables = this.opt.getVariables ? this.opt.getVariables : () => {};\n\n    this.getQuery = () => this.query;\n  }\n  /**\n   * Process the JSON data based on the provided queries.\n   * @param  {DataManager} dm\n   * @param  {Query} query?\n   */\n\n\n  processQuery(datamanager, query) {\n    let urlQuery = super.processQuery.apply(this, arguments);\n    let dm = JSON.parse(urlQuery.data); // constructing GraphQL parameters\n\n    let keys = ['skip', 'take', 'sorted', 'table', 'select', 'where', 'search', 'requiresCounts', 'aggregates', 'params'];\n    let temp = {};\n    let str = 'searchwhereparams';\n    keys.filter(e => {\n      temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];\n    });\n    let vars = this.getVariables() || {};\n    vars['datamanager'] = temp;\n    let data = JSON.stringify({\n      query: this.getQuery(),\n      variables: vars\n    });\n    urlQuery.data = data;\n    return urlQuery;\n  }\n  /**\n   * Returns the data from the query processing.\n   * It will also cache the data for later usage.\n   * @param  {DataResult} data\n   * @param  {DataManager} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Object} request?\n   * @returns DataResult\n   */\n\n\n  processResponse(resData, ds, query, xhr, request) {\n    const res = resData;\n    let count;\n    let aggregates;\n    let result = getValue(this.schema.result, res.data);\n\n    if (this.schema.count) {\n      count = getValue(this.schema.count, res.data);\n    }\n\n    if (this.schema.aggregates) {\n      aggregates = getValue(this.schema.aggregates, res.data);\n      aggregates = !isNullOrUndefined(aggregates) ? DataUtil.parse.parseJson(aggregates) : aggregates;\n    }\n\n    let pvt = request.pvtData || {};\n    let args = {\n      result: result,\n      aggregates: aggregates\n    };\n    let data = args;\n\n    if (pvt && pvt.groups && pvt.groups.length) {\n      this.getAggregateResult(pvt, data, args, null, query);\n    }\n\n    return !isNullOrUndefined(count) ? {\n      result: args.result,\n      count: count,\n      aggregates: aggregates\n    } : args.result;\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   */\n\n\n  insert() {\n    let inserted = super.insert.apply(this, arguments);\n    return this.generateCrudData(inserted, 'insert');\n  }\n  /**\n   * Prepare and returns request body which is used to update a new record in the table.\n   */\n\n\n  update() {\n    let inserted = super.update.apply(this, arguments);\n    return this.generateCrudData(inserted, 'update');\n  }\n  /**\n   * Prepare and returns request body which is used to remove a new record in the table.\n   */\n\n\n  remove() {\n    let inserted = super.remove.apply(this, arguments);\n    return this.generateCrudData(inserted, 'remove');\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {Object} e\n   * @param  {Query} query\n   * @param  {Object} original\n   */\n\n\n  batchRequest(dm, changes, e, query, original) {\n    let batch = super.batchRequest.apply(this, arguments);\n    let bData = JSON.parse(batch.data);\n    bData.key = e.key;\n    batch.data = JSON.stringify(bData);\n    return this.generateCrudData(batch, 'batch');\n  }\n\n  generateCrudData(crudData, action) {\n    let parsed = JSON.parse(crudData.data);\n    crudData.data = JSON.stringify({\n      query: this.opt.getMutation(action),\n      variables: parsed\n    });\n    return crudData;\n  }\n\n}\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\n\n\nclass CacheAdaptor extends UrlAdaptor {\n  /**\n   * Constructor for CacheAdaptor class.\n   * @param  {CacheAdaptor} adaptor?\n   * @param  {number} timeStamp?\n   * @param  {number} pageSize?\n   * @hidden\n   */\n  constructor(adaptor, timeStamp, pageSize) {\n    super();\n    this.isCrudAction = false;\n    this.isInsertAction = false;\n\n    if (!isNullOrUndefined(adaptor)) {\n      this.cacheAdaptor = adaptor;\n    }\n\n    this.pageSize = pageSize;\n    this.guidId = DataUtil.getGuid('cacheAdaptor');\n    let obj = {\n      keys: [],\n      results: []\n    };\n    window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n    let guid = this.guidId;\n\n    if (!isNullOrUndefined(timeStamp)) {\n      setInterval(() => {\n        let data;\n        data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n        let forDel = [];\n\n        for (let i = 0; i < data.results.length; i++) {\n          let currentTime = +new Date();\n          let requestTime = +new Date(data.results[i].timeStamp);\n          data.results[i].timeStamp = currentTime - requestTime;\n\n          if (currentTime - requestTime > timeStamp) {\n            forDel.push(i);\n          }\n        }\n\n        for (let i = 0; i < forDel.length; i++) {\n          data.results.splice(forDel[i], 1);\n          data.keys.splice(forDel[i], 1);\n        }\n\n        window.localStorage.removeItem(guid);\n        window.localStorage.setItem(guid, JSON.stringify(data));\n      }, timeStamp);\n    }\n  }\n  /**\n   * It will generate the key based on the URL when we send a request to server.\n   * @param  {string} url\n   * @param  {Query} query?\n   * @hidden\n   */\n\n\n  generateKey(url, query) {\n    let queries = this.getQueryRequest(query);\n    let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n    let key = url;\n    let page = 'onPage';\n\n    if (page in singles) {\n      key += singles[page].pageIndex;\n    }\n\n    queries.sorts.forEach(obj => {\n      key += obj.e.direction + obj.e.fieldName;\n    });\n    queries.groups.forEach(obj => {\n      key += obj.e.fieldName;\n    });\n    queries.searches.forEach(obj => {\n      key += obj.e.searchKey;\n    });\n\n    for (let filter = 0; filter < queries.filters.length; filter++) {\n      let currentFilter = queries.filters[filter];\n\n      if (currentFilter.e.isComplex) {\n        let newQuery = query.clone();\n        newQuery.queries = [];\n\n        for (let i = 0; i < currentFilter.e.predicates.length; i++) {\n          newQuery.queries.push({\n            fn: 'onWhere',\n            e: currentFilter.e.predicates[i],\n            filter: query.queries.filter\n          });\n        }\n\n        key += currentFilter.e.condition + this.generateKey(url, newQuery);\n      } else {\n        key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n      }\n    }\n\n    return key;\n  }\n  /**\n   * Process the query to generate request body.\n   * If the data is already cached, it will return the cached data.\n   * @param  {DataManager} dm\n   * @param  {Query} query?\n   * @param  {Object[]} hierarchyFilters?\n   */\n\n\n  processQuery(dm, query, hierarchyFilters) {\n    let key = this.generateKey(dm.dataSource.url, query);\n    let cachedItems;\n    cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n    let data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n\n    if (data != null && !this.isCrudAction && !this.isInsertAction) {\n      return data;\n    }\n\n    this.isCrudAction = null;\n    this.isInsertAction = null;\n    return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n  }\n  /**\n   * Returns the data from the query processing.\n   * It will also cache the data for later usage.\n   * @param  {DataResult} data\n   * @param  {DataManager} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Ajax} request?\n   * @param  {CrudOptions} changes?\n   */\n\n\n  processResponse(data, ds, query, xhr, request, changes) {\n    if (this.isInsertAction || request && this.cacheAdaptor.options.batch && DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post') {\n      return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n    }\n\n    data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    let key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n    let obj = {};\n    obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n    let index = obj.keys.indexOf(key);\n\n    if (index !== -1) {\n      obj.results.splice(index, 1);\n      obj.keys.splice(index, 1);\n    }\n\n    obj.results[obj.keys.push(key) - 1] = {\n      keys: key,\n      result: data.result,\n      timeStamp: new Date(),\n      count: data.count\n    };\n\n    while (obj.results.length > this.pageSize) {\n      obj.results.splice(0, 1);\n      obj.keys.splice(0, 1);\n    }\n\n    window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n    return data;\n  }\n  /**\n   * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @param  {Ajax} settings?\n   */\n\n\n  beforeSend(dm, request, settings) {\n    if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === 'post') {\n      request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n    }\n\n    if (!dm.dataSource.crossDomain) {\n      request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n    }\n  }\n  /**\n   * Updates existing record and saves the changes to the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName\n   */\n\n\n  update(dm, keyField, value, tableName) {\n    this.isCrudAction = true;\n    return this.cacheAdaptor.update(dm, keyField, value, tableName);\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {string} tableName?\n   */\n\n\n  insert(dm, data, tableName) {\n    this.isInsertAction = true;\n    return this.cacheAdaptor.insert(dm, data, tableName);\n  }\n  /**\n   * Prepare and return request body which is used to remove record from the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   */\n\n\n  remove(dm, keyField, value, tableName) {\n    this.isCrudAction = true;\n    return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {RemoteArgs} e\n   */\n\n\n  batchRequest(dm, changes, e) {\n    return this.cacheAdaptor.batchRequest(dm, changes, e);\n  }\n\n}\n/**\n * DataManager is used to manage and manipulate relational data.\n */\n\n\nclass DataManager {\n  /**\n   * Constructor for DataManager class\n   * @param  {DataOptions|JSON[]} dataSource?\n   * @param  {Query} query?\n   * @param  {AdaptorOptions|string} adaptor?\n   * @hidden\n   */\n  constructor(dataSource, query, adaptor) {\n    /** @hidden */\n    this.dateParse = true;\n    /** @hidden */\n\n    this.timeZoneHandling = true;\n    this.requests = [];\n\n    if (!dataSource && !this.dataSource) {\n      dataSource = [];\n    }\n\n    adaptor = adaptor || dataSource.adaptor;\n\n    if (dataSource && dataSource.timeZoneHandling === false) {\n      this.timeZoneHandling = dataSource.timeZoneHandling;\n    }\n\n    let data;\n\n    if (dataSource instanceof Array) {\n      data = {\n        json: dataSource,\n        offline: true\n      };\n    } else if (typeof dataSource === 'object') {\n      if (!dataSource.json) {\n        dataSource.json = [];\n      }\n\n      data = {\n        url: dataSource.url,\n        insertUrl: dataSource.insertUrl,\n        removeUrl: dataSource.removeUrl,\n        updateUrl: dataSource.updateUrl,\n        crudUrl: dataSource.crudUrl,\n        batchUrl: dataSource.batchUrl,\n        json: dataSource.json,\n        headers: dataSource.headers,\n        accept: dataSource.accept,\n        data: dataSource.data,\n        timeTillExpiration: dataSource.timeTillExpiration,\n        cachingPageSize: dataSource.cachingPageSize,\n        enableCaching: dataSource.enableCaching,\n        requestType: dataSource.requestType,\n        key: dataSource.key,\n        crossDomain: dataSource.crossDomain,\n        jsonp: dataSource.jsonp,\n        dataType: dataSource.dataType,\n        offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor instanceof RemoteSaveAdaptor || dataSource.adaptor instanceof CustomDataAdaptor ? false : dataSource.url ? false : true,\n        requiresFormat: dataSource.requiresFormat\n      };\n    } else {\n      DataUtil.throwError('DataManager: Invalid arguments');\n    }\n\n    if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n      data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n    }\n\n    if (data.dataType === undefined) {\n      data.dataType = 'json';\n    }\n\n    this.dataSource = data;\n    this.defaultQuery = query;\n\n    if (data.url && data.offline && !data.json.length) {\n      this.isDataAvailable = false;\n      this.adaptor = adaptor || new ODataAdaptor();\n      this.dataSource.offline = false;\n      this.ready = this.executeQuery(query || new Query());\n      this.ready.then(e => {\n        this.dataSource.offline = true;\n        this.isDataAvailable = true;\n        data.json = e.result;\n        this.adaptor = new JsonAdaptor();\n      });\n    } else {\n      this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n    }\n\n    if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n      data.jsonp = 'callback';\n    }\n\n    this.adaptor = adaptor || this.adaptor;\n\n    if (data.enableCaching) {\n      this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n    }\n\n    return this;\n  }\n  /**\n   * Overrides DataManager's default query with given query.\n   * @param  {Query} query - Defines the new default query.\n   */\n\n\n  setDefaultQuery(query) {\n    this.defaultQuery = query;\n    return this;\n  }\n  /**\n   * Executes the given query with local data source.\n   * @param  {Query} query - Defines the query to retrieve data.\n   */\n\n\n  executeLocal(query) {\n    if (!this.defaultQuery && !(query instanceof Query)) {\n      DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n    }\n\n    if (!this.dataSource.json) {\n      DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n    }\n\n    query = query || this.defaultQuery;\n    let result = this.adaptor.processQuery(this, query);\n\n    if (query.subQuery) {\n      let from = query.subQuery.fromTable;\n      let lookup = query.subQuery.lookups;\n      let res = query.isCountRequired ? result.result : result;\n\n      if (lookup && lookup instanceof Array) {\n        DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n      }\n\n      for (let j = 0; j < res.length; j++) {\n        if (res[j][from] instanceof Array) {\n          res[j] = extend({}, {}, res[j]);\n          res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n        }\n      }\n    }\n\n    return this.adaptor.processResponse(result, this, query);\n  }\n  /**\n   * Executes the given query with either local or remote data source.\n   * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n   * @param  {Query|Function} query - Defines the query to retrieve data.\n   * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n   * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n   * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n   */\n\n\n  executeQuery(query, done, fail, always) {\n    let makeRequest = 'makeRequest';\n\n    if (typeof query === 'function') {\n      always = fail;\n      fail = done;\n      done = query;\n      query = null;\n    }\n\n    if (!query) {\n      query = this.defaultQuery;\n    }\n\n    if (!(query instanceof Query)) {\n      DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n    }\n\n    let deffered = new Deferred();\n    let args = {\n      query: query\n    };\n\n    if (!this.dataSource.offline && this.dataSource.url !== undefined && this.dataSource.url !== '' || !isNullOrUndefined(this.adaptor[makeRequest]) || this.isCustomDataAdaptor(this.adaptor)) {\n      let result = this.adaptor.processQuery(this, query);\n\n      if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n        this.adaptor[makeRequest](result, deffered, args, query);\n      } else if (!isNullOrUndefined(result.url) || this.isCustomDataAdaptor(this.adaptor)) {\n        this.makeRequest(result, deffered, args, query);\n      } else {\n        args = DataManager.getDeferedArgs(query, result, args);\n        deffered.resolve(args);\n      }\n    } else {\n      DataManager.nextTick(() => {\n        let res = this.executeLocal(query);\n        args = DataManager.getDeferedArgs(query, res, args);\n        deffered.resolve(args);\n      });\n    }\n\n    if (done || fail) {\n      deffered.promise.then(done, fail);\n    }\n\n    if (always) {\n      deffered.promise.then(always, always);\n    }\n\n    return deffered.promise;\n  }\n\n  static getDeferedArgs(query, result, args) {\n    if (query.isCountRequired) {\n      args.result = result.result;\n      args.count = result.count;\n      args.aggregates = result.aggregates;\n    } else {\n      args.result = result;\n    }\n\n    return args;\n  }\n\n  static nextTick(fn) {\n    (window.setImmediate || window.setTimeout)(fn, 0);\n  }\n\n  extendRequest(url, fnSuccess, fnFail) {\n    return extend({}, {\n      type: 'GET',\n      dataType: this.dataSource.dataType,\n      crossDomain: this.dataSource.crossDomain,\n      jsonp: this.dataSource.jsonp,\n      cache: true,\n      processData: false,\n      onSuccess: fnSuccess,\n      onFailure: fnFail\n    }, url);\n  } // tslint:disable-next-line:max-func-body-length\n\n\n  makeRequest(url, deffered, args, query) {\n    let isSelector = !!query.subQuerySelector;\n\n    let fnFail = e => {\n      args.error = e;\n      deffered.reject(args);\n    };\n\n    let process = (data, count, xhr, request, actual, aggregates, virtualSelectRecords) => {\n      args.xhr = xhr;\n      args.count = count ? parseInt(count.toString(), 10) : 0;\n      args.result = data;\n      args.request = request;\n      args.aggregates = aggregates;\n      args.actual = actual;\n      args.virtualSelectRecords = virtualSelectRecords;\n      deffered.resolve(args);\n    };\n\n    let fnQueryChild = (data, selector) => {\n      let subDeffer = new Deferred();\n      let childArgs = {\n        parent: args\n      };\n      query.subQuery.isChild = true;\n      let subUrl = this.adaptor.processQuery(this, query.subQuery, data ? this.adaptor.processResponse(data) : selector);\n      let childReq = this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n\n      if (!isSelector) {\n        subDeffer.then(subData => {\n          if (data) {\n            DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n            process(data, subData.count, subData.xhr);\n          }\n        }, fnFail);\n      }\n\n      return childReq;\n    };\n\n    let fnSuccess = (data, request) => {\n      if (this.isGraphQLAdaptor(this.adaptor)) {\n        if (!isNullOrUndefined(data['errors'])) {\n          return fnFail(data['errors'], request);\n        }\n      }\n\n      if (this.isCustomDataAdaptor(this.adaptor)) {\n        request = extend({}, this.ajaxReqOption, request);\n      }\n\n      if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && this.dateParse) {\n        data = DataUtil.parse.parseJson(data);\n      }\n\n      let result = this.adaptor.processResponse(data, this, query, request.httpRequest, request);\n      let count = 0;\n      let aggregates = null;\n      let virtualSelectRecords = 'virtualSelectRecords';\n      let virtualRecords = data[virtualSelectRecords];\n\n      if (query.isCountRequired) {\n        count = result.count;\n        aggregates = result.aggregates;\n        result = result.result;\n      }\n\n      if (!query.subQuery) {\n        process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n        return;\n      }\n\n      if (!isSelector) {\n        fnQueryChild(result, request);\n      }\n    };\n\n    let req = this.extendRequest(url, fnSuccess, fnFail);\n\n    if (!this.isCustomDataAdaptor(this.adaptor)) {\n      let ajax = new Ajax(req);\n\n      ajax.beforeSend = () => {\n        this.beforeSend(ajax.httpRequest, ajax);\n      };\n\n      req = ajax.send();\n      req.catch(e => true); // to handle failure remote requests.        \n\n      this.requests.push(ajax);\n    } else {\n      this.ajaxReqOption = req;\n      let request = req;\n      this.adaptor.options.getData({\n        data: request.data,\n        onSuccess: request.onSuccess,\n        onFailure: request.onFailure\n      });\n    }\n\n    if (isSelector) {\n      let promise;\n      let res = query.subQuerySelector.call(this, {\n        query: query.subQuery,\n        parent: query\n      });\n\n      if (res && res.length) {\n        promise = Promise.all([req, fnQueryChild(null, res)]);\n        promise.then((...args) => {\n          let result = args[0];\n          let pResult = this.adaptor.processResponse(result[0], this, query, this.requests[0].httpRequest, this.requests[0]);\n          let count = 0;\n\n          if (query.isCountRequired) {\n            count = pResult.count;\n            pResult = pResult.result;\n          }\n\n          let cResult = this.adaptor.processResponse(result[1], this, query.subQuery, this.requests[1].httpRequest, this.requests[1]);\n          count = 0;\n\n          if (query.subQuery.isCountRequired) {\n            count = cResult.count;\n            cResult = cResult.result;\n          }\n\n          DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n          isSelector = false;\n          process(pResult, count, this.requests[0].httpRequest);\n        });\n      } else {\n        isSelector = false;\n      }\n    }\n\n    return req;\n  }\n\n  beforeSend(request, settings) {\n    this.adaptor.beforeSend(this, request, settings);\n    let headers = this.dataSource.headers;\n    let props;\n\n    for (let i = 0; headers && i < headers.length; i++) {\n      props = [];\n      let keys = Object.keys(headers[i]);\n\n      for (let prop of keys) {\n        props.push(prop);\n        request.setRequestHeader(prop, headers[i][prop]);\n      }\n    }\n  }\n  /**\n   * Save bulk changes to the given table name.\n   * User can add a new record, edit an existing record, and delete a record at the same time.\n   * If the datasource from remote, then updated in a single post.\n   * @param  {Object} changes - Defines the CrudOptions.\n   * @param  {string} key - Defines the column field.\n   * @param  {string|Query} tableName - Defines the table name.\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n\n\n  saveChanges(changes, key, tableName, query, original) {\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n\n    let args = {\n      url: tableName,\n      key: key || this.dataSource.key\n    };\n    let req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n    let doAjaxRequest = 'doAjaxRequest';\n\n    if (this.dataSource.offline) {\n      return req;\n    }\n\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](req);\n    } else if (!this.isCustomDataAdaptor(this.adaptor)) {\n      let deff = new Deferred();\n      let ajax = new Ajax(req);\n\n      ajax.beforeSend = () => {\n        this.beforeSend(ajax.httpRequest, ajax);\n      };\n\n      ajax.onSuccess = (data, request) => {\n        if (this.isGraphQLAdaptor(this.adaptor)) {\n          if (!isNullOrUndefined(data['errors'])) {\n            ajax.onFailure(JSON.stringify(data['errors']));\n          }\n        }\n\n        deff.resolve(this.adaptor.processResponse(data, this, null, request.httpRequest, request, changes, args));\n      };\n\n      ajax.onFailure = e => {\n        deff.reject([{\n          error: e\n        }]);\n      };\n\n      ajax.send().catch(e => true); // to handle the failure requests.        \n\n      return deff.promise;\n    } else {\n      return this.doAjaxRequest(req, this.adaptor.options.batchUpdate);\n    }\n  }\n  /**\n   * Inserts new record in the given table.\n   * @param  {Object} data - Defines the data to insert.\n   * @param  {string|Query} tableName - Defines the table name.\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n\n\n  insert(data, tableName, query, position) {\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n\n    let req = this.adaptor.insert(this, data, tableName, query, position);\n    let doAjaxRequest = 'doAjaxRequest';\n\n    if (this.dataSource.offline) {\n      return req;\n    }\n\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](req);\n    } else {\n      return this.doAjaxRequest(req, this.adaptor.options.addRecord);\n    }\n  }\n  /**\n   * Removes data from the table with the given key.\n   * @param  {string} keyField - Defines the column field.\n   * @param  {Object} value - Defines the value to find the data in the specified column.\n   * @param  {string|Query} tableName - Defines the table name\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n\n\n  remove(keyField, value, tableName, query) {\n    if (typeof value === 'object') {\n      value = DataUtil.getObject(keyField, value);\n    }\n\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n\n    let res = this.adaptor.remove(this, keyField, value, tableName, query);\n    let doAjaxRequest = 'doAjaxRequest';\n\n    if (this.dataSource.offline) {\n      return res;\n    }\n\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](res);\n    } else {\n      let remove = this.adaptor.options.deleteRecord;\n      return this.doAjaxRequest(res, remove);\n    }\n  }\n  /**\n   * Updates existing record in the given table.\n   * @param  {string} keyField - Defines the column field.\n   * @param  {Object} value - Defines the value to find the data in the specified column.\n   * @param  {string|Query} tableName - Defines the table name\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n\n\n  update(keyField, value, tableName, query, original) {\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n\n    let res = this.adaptor.update(this, keyField, value, tableName, query, original);\n    let doAjaxRequest = 'doAjaxRequest';\n\n    if (this.dataSource.offline) {\n      return res;\n    }\n\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](res);\n    } else {\n      let update = this.adaptor.options.updateRecord;\n      return this.doAjaxRequest(res, update);\n    }\n  }\n\n  isCustomDataAdaptor(dataSource) {\n    return this.adaptor.getModuleName && this.adaptor.getModuleName() === 'CustomDataAdaptor';\n  }\n\n  isGraphQLAdaptor(dataSource) {\n    return this.adaptor.getModuleName && this.adaptor.getModuleName() === 'GraphQLAdaptor';\n  }\n\n  successFunc(record, request) {\n    if (this.isGraphQLAdaptor(this.adaptor)) {\n      let data = JSON.parse(record);\n\n      if (!isNullOrUndefined(data['errors'])) {\n        this.failureFunc(JSON.stringify(data['errors']));\n      }\n    }\n\n    if (this.isCustomDataAdaptor(this.adaptor)) {\n      request = extend({}, this.ajaxReqOption, request);\n    }\n\n    try {\n      DataUtil.parse.parseJson(record);\n    } catch (e) {\n      record = [];\n    }\n\n    record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);\n    this.ajaxDeffered.resolve(record);\n  }\n\n  failureFunc(e) {\n    this.ajaxDeffered.reject([{\n      error: e\n    }]);\n  }\n\n  doAjaxRequest(res, ajaxFunc) {\n    res = extend({}, {\n      type: 'POST',\n      contentType: 'application/json; charset=utf-8',\n      processData: false\n    }, res);\n    this.ajaxDeffered = new Deferred();\n\n    if (!this.isCustomDataAdaptor(this.adaptor)) {\n      let ajax = new Ajax(res);\n\n      ajax.beforeSend = () => {\n        this.beforeSend(ajax.httpRequest, ajax);\n      };\n\n      ajax.onSuccess = this.successFunc.bind(this);\n      ajax.onFailure = this.failureFunc.bind(this);\n      ajax.send().catch(e => true); // to handle the failure requests.\n    } else {\n      this.ajaxReqOption = res;\n      ajaxFunc.call(this, {\n        data: res.data,\n        onSuccess: this.successFunc.bind(this),\n        onFailure: this.failureFunc.bind(this)\n      });\n    }\n\n    return this.ajaxDeffered.promise;\n  }\n\n}\n/**\n * Deferred is used to handle asynchronous operation.\n */\n\n\nclass Deferred {\n  constructor() {\n    /**\n     * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n     */\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n    /**\n     * Defines the callback function triggers when the Deferred object is resolved.\n     */\n\n    this.then = this.promise.then.bind(this.promise);\n    /**\n     * Defines the callback function triggers when the Deferred object is rejected.\n     */\n\n    this.catch = this.promise.catch.bind(this.promise);\n  }\n\n}\n/**\n * Data modules\n */\n\n\nexport { DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CustomDataAdaptor, GraphQLAdaptor, CacheAdaptor, DataUtil };","map":{"version":3,"sources":["/home/unutu/fontend/Angular/Angular_Server_Management_FE/node_modules/@syncfusion/ej2-data/dist/es6/ej2-data.es2015.js"],"names":["Ajax","extend","getValue","isNullOrUndefined","merge","setValue","Query","constructor","from","subQuery","isChild","distincts","queries","key","fKey","fromTable","Array","lookups","expands","sortedColumns","groupedColumns","params","lazyLoad","setKey","field","using","dataManager","execute","done","fail","always","executeQuery","DataUtil","throwError","executeLocal","clone","cloned","slice","subQuerySelector","isCountRequired","tableName","addParams","value","push","fn","distinct","fields","call","expand","tables","where","fieldName","operator","ignoreCase","ignoreAccent","toLowerCase","predicate","Predicate","e","search","searchKey","fieldNames","comparer","fnOperators","sortBy","isFromGroup","sortByForeignKey","direction","order","sorts","temp","endsWith","replace","fnSort","filterQueries","i","length","j","sortByDesc","group","format","page","pageIndex","pageSize","range","start","end","take","nos","skip","select","hierarchy","query","selectorFn","foreignKey","requiresCount","aggregate","type","name","filter","q","filterQueryLists","singles","filtered","indexOf","res","isComplex","processOperator","condition","predicates","apply","and","args","combinePredicates","combine","or","fromJson","json","len","fromJSONData","pred","validate","record","isAnd","ret","getObject","toJson","p","preds","result","consts","GroupGuid","inst","input","substr","startsWith","fnAscending","fnDescending","x","y","undefined","localeCompare","extractFields","obj","newObj","jsonArray","newData","aggregates","level","groupDs","isLazyLoad","jsonData","guid","indx","items","count","childLevels","grouped","groupedArray","records","val","getVal","tempObj","aggs","buildHierarchy","source","lookup","pKey","grp","fKeyData","getFieldList","prefix","copyObj","keys","Object","prop","nameSpace","splits","split","toString","fromObj","sort","ds","middle","parseInt","left","right","ignoreDiacritics","newValue","map","diacritics","join","current","shift","array","index","callAdaptorFunction","adaptor","fnName","param1","param2","getAddParams","adp","dm","req","reqParams","isPlainObject","isCors","xhr","request","window","getGuid","hexs","rand","crypto","arr","Uint8Array","getRandomValues","Math","random","isNull","getItemFromComparer","keyVal","castRequired","requiresCompleteRecord","tmp","forEach","data","processData","prepareQuery","sampledata","DataManager","requiresCounts","returnValue","JSON","stringify","parse","parseJson","predicateList","concat","getPredicate","sorted","mainPred","childPred","cpre","serverTimezoneOffset","timeZoneHandling","error","Error","message","stack","sum","isNaN","average","min","max","truecount","falsecount","operatorSymbols","odBiOperator","odUniOperator","odv4UniOperator","equal","actual","expected","notequal","lessthan","greaterthan","lessthanorequal","greaterthanorequal","contains","notnull","isnull","startswith","endswith","processSymbols","jsonText","jsonReviver","iterateAndReviveArray","iterateAndReviveJson","test","ms","exec","offSet","dateParse","toTimeZone","Date","isUTC","utcFormat","hrs","mins","setHours","getHours","getMinutes","addSelfOffset","isJson","isGuid","regex","match","replacer","jsonReplacer","arrayReplacer","d","toJSON","date","jsonDateReplacer","getTimezoneOffset","toUTC","offset","utc","unix","toLocalTime","datefn","timeZone","differenceString","localtimefn","num","norm","floor","abs","getFullYear","getMonth","getDate","getSeconds","consts$1","Adaptor","options","requestType","dataSource","pvt","processResponse","JsonAdaptor","processQuery","countFlg","keyCount","agg","lazyLoadData","lazyLoadGroup","getAggregate","onDemandGroupInfo","onWhere","formGroupResult","onPage","uid","childLevel","aggQuery","batchRequest","changes","deletedRecordsLen","deletedRecords","addedRecords","insert","changedRecords","update","remove","onAggregates","onSearch","onSortBy","fnCompare","onGroup","size","onRange","onTake","onSkip","onSelect","position","splice","keyField","UrlAdaptor","hierarchyFilters","getQueryRequest","url","groups","filters","searches","getFiltersFrom","getModuleName","getRequestQuery","pvtData","contentType","convertToQueryString","request1","param","selects","getResponseHeader","handleTimeZone","requests","action","isExpand","isArray","formRemoteGroupedData","getAggregateResult","childLvl","lvl","getGroupedRecords","hasRecords","childGroupedRecords","original","batchUrl","crudUrl","removeUrl","dataType","changed","added","deleted","table","beforeSend","insertUrl","keyColumn","updateUrl","predicats","pData","aggregateData","isServerGrouping","groupQuery","ODataAdaptor","props","accept","multipartAccept","batch","changeSet","batchPre","contentId","batchContent","changeSetContent","batchChangeSetContentType","updateType","onPredicate","requiresCast","getField","encodeURIComponent","onComplexPredicate","onEachWhere","onEachSearch","onEachSort","reverse","onCount","settings","setRequestHeader","overrideMimeType","metaCheck","rootUrl","dataUrls","resourceTableName","dataCopy","results","metaData","emptyAndBatch","processBatchResponse","versionCheck","version","oDataCount","requiresFormat","localTimeReplacer","convertObj","localTime","compareAndRemove","initialGuid","cid","cSet","generateInsertRequest","generateUpdateRequest","generateDeleteRequest","stat","dateTime","generateBodyContent","org","change","o","method","cIdx","jsonObj","substring","exVal","changeGuid","final","valueOf","ODataV4Adaptor","isDate","onExpand","selected","expanded","exArr","item","ex","onDistinct","distinctFields","metaName","dataUrl","dataCount","WebApiAdaptor","location","host","state","datTime","Count","Items","WebMethodAdaptor","getData","RemoteSaveAdaptor","prototype","updateKey","urlParams","CustomDataAdaptor","Function","addRecord","updateRecord","deleteRecord","batchUpdate","GraphQLAdaptor","opt","schema","response","getVariables","getQuery","datamanager","urlQuery","arguments","str","vars","variables","resData","inserted","generateCrudData","bData","crudData","parsed","getMutation","CacheAdaptor","timeStamp","isCrudAction","isInsertAction","cacheAdaptor","guidId","localStorage","setItem","setInterval","getItem","forDel","currentTime","requestTime","removeItem","generateKey","currentFilter","newQuery","cachedItems","crossDomain","offline","headers","timeTillExpiration","cachingPageSize","enableCaching","jsonp","defaultQuery","isDataAvailable","ready","then","setDefaultQuery","makeRequest","deffered","Deferred","isCustomDataAdaptor","getDeferedArgs","resolve","nextTick","promise","setImmediate","setTimeout","extendRequest","fnSuccess","fnFail","cache","onSuccess","onFailure","isSelector","reject","process","virtualSelectRecords","fnQueryChild","selector","subDeffer","childArgs","parent","subUrl","childReq","subData","isGraphQLAdaptor","ajaxReqOption","httpRequest","virtualRecords","ajax","send","catch","Promise","all","pResult","cResult","saveChanges","doAjaxRequest","deff","successFunc","failureFunc","ajaxDeffered","ajaxFunc","bind"],"mappings":"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","sourcesContent":["import { Ajax, extend, getValue, isNullOrUndefined, merge, setValue } from '@syncfusion/ej2-base';\n\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\nclass Query {\n    /**\n     * Constructor for Query class.\n     * @param  {string|string[]} from?\n     * @hidden\n     */\n    constructor(from) {\n        /** @hidden */\n        this.subQuery = null;\n        /** @hidden */\n        this.isChild = false;\n        /** @hidden */\n        this.distincts = [];\n        this.queries = [];\n        this.key = '';\n        this.fKey = '';\n        if (typeof from === 'string') {\n            this.fromTable = from;\n        }\n        else if (from && from instanceof Array) {\n            this.lookups = from;\n        }\n        this.expands = [];\n        this.sortedColumns = [];\n        this.groupedColumns = [];\n        this.subQuery = null;\n        this.isChild = false;\n        this.params = [];\n        this.lazyLoad = [];\n        return this;\n    }\n    /**\n     * Sets the primary key.\n     * @param  {string} field - Defines the column field.\n     */\n    setKey(field) {\n        this.key = field;\n        return this;\n    }\n    /**\n     * Sets default DataManager to execute query.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    using(dataManager) {\n        this.dataManager = dataManager;\n        return this;\n    }\n    /**\n     * Executes query with the given DataManager.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     * @param  {Function} done - Defines the success callback.\n     * @param  {Function} fail - Defines the failure callback.\n     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n     *\n     * <pre>\n     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n     * let query: Query = new Query();\n     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n     * let promise: Promise< Object > = query.execute(dataManager);\n     * promise.then((e: { result: Object }) => { });\n     * </pre>\n     */\n    execute(dataManager, done, fail, always) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeQuery(this, done, fail, always);\n        }\n        return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Executes query with the local datasource.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    executeLocal(dataManager) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeLocal(this);\n        }\n        return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Creates deep copy of the Query object.\n     */\n    clone() {\n        let cloned = new Query();\n        cloned.queries = this.queries.slice(0);\n        cloned.key = this.key;\n        cloned.isChild = this.isChild;\n        cloned.dataManager = this.dataManager;\n        cloned.fromTable = this.fromTable;\n        cloned.params = this.params.slice(0);\n        cloned.expands = this.expands.slice(0);\n        cloned.sortedColumns = this.sortedColumns.slice(0);\n        cloned.groupedColumns = this.groupedColumns.slice(0);\n        cloned.subQuerySelector = this.subQuerySelector;\n        cloned.subQuery = this.subQuery;\n        cloned.fKey = this.fKey;\n        cloned.isCountRequired = this.isCountRequired;\n        cloned.distincts = this.distincts.slice(0);\n        cloned.lazyLoad = this.lazyLoad.slice(0);\n        return cloned;\n    }\n    /**\n     * Specifies the name of table to retrieve data in query execution.\n     * @param  {string} tableName - Defines the table name.\n     */\n    from(tableName) {\n        this.fromTable = tableName;\n        return this;\n    }\n    /**\n     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n     * @param  {string} key - Defines the key of additional parameter.\n     * @param  {Function|string} value - Defines the value for the key.\n     */\n    addParams(key, value) {\n        if (typeof value === 'function') {\n            this.params.push({ key: key, fn: value });\n        }\n        else {\n            this.params.push({ key: key, value: value });\n        }\n        return this;\n    }\n    /**\n     * @hidden\n     */\n    distinct(fields) {\n        if (typeof fields === 'string') {\n            this.distincts = [].slice.call([fields], 0);\n        }\n        else {\n            this.distincts = fields.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Expands the related table.\n     * @param  {string|Object[]} tables\n     */\n    expand(tables) {\n        if (typeof tables === 'string') {\n            this.expands = [].slice.call([tables], 0);\n        }\n        else {\n            this.expands = tables.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Filter data with given filter criteria.\n     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string|number|boolean} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    where(fieldName, operator, value, ignoreCase, ignoreAccent) {\n        operator = operator ? (operator).toLowerCase() : null;\n        let predicate = null;\n        if (typeof fieldName === 'string') {\n            predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n        }\n        else if (fieldName instanceof Predicate) {\n            predicate = fieldName;\n        }\n        this.queries.push({\n            fn: 'onWhere',\n            e: predicate\n        });\n        return this;\n    }\n    /**\n     * Search data with given search criteria.\n     * @param  {string|number|boolean} searchKey - Defines the search key.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     * @param  {string} operator - Defines the operator how to search data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [fieldNames];\n        }\n        if (!operator || operator === 'none') {\n            operator = 'contains';\n        }\n        let comparer = DataUtil.fnOperators[operator];\n        this.queries.push({\n            fn: 'onSearch',\n            e: {\n                fieldNames: fieldNames,\n                operator: operator,\n                searchKey: searchKey,\n                ignoreCase: ignoreCase,\n                ignoreAccent: ignoreAccent,\n                comparer: comparer\n            }\n        });\n        return this;\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     */\n    sortBy(fieldName, comparer, isFromGroup) {\n        return this.sortByForeignKey(fieldName, comparer, isFromGroup);\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     * @param  {string} direction - Defines the sort direction .\n     */\n    sortByForeignKey(fieldName, comparer, isFromGroup, direction) {\n        let order = !isNullOrUndefined(direction) ? direction : 'ascending';\n        let sorts;\n        let temp;\n        if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n            fieldName = fieldName.replace(/ desc$/i, '');\n            comparer = 'descending';\n        }\n        if (!comparer || typeof comparer === 'string') {\n            order = comparer ? comparer.toLowerCase() : 'ascending';\n            comparer = DataUtil.fnSort(comparer);\n        }\n        if (isFromGroup) {\n            sorts = Query.filterQueries(this.queries, 'onSortBy');\n            for (let i = 0; i < sorts.length; i++) {\n                temp = sorts[i].e.fieldName;\n                if (typeof temp === 'string') {\n                    if (temp === fieldName) {\n                        return this;\n                    }\n                }\n                else if (temp instanceof Array) {\n                    for (let j = 0; j < temp.length; j++) {\n                        if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n                            return this;\n                        }\n                    }\n                }\n            }\n        }\n        this.queries.push({\n            fn: 'onSortBy',\n            e: {\n                fieldName: fieldName,\n                comparer: comparer,\n                direction: order\n            }\n        });\n        return this;\n    }\n    /**\n     * Sorts data in descending order.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    sortByDesc(fieldName) {\n        return this.sortBy(fieldName, 'descending');\n    }\n    /**\n     * Groups data with the given field name.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    group(fieldName, fn, format) {\n        this.sortBy(fieldName, null, true);\n        this.queries.push({\n            fn: 'onGroup',\n            e: {\n                fieldName: fieldName,\n                comparer: fn ? fn : null,\n                format: format ? format : null\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given page index and size.\n     * @param  {number} pageIndex - Defines the current page index.\n     * @param  {number} pageSize - Defines the no of records per page.\n     */\n    page(pageIndex, pageSize) {\n        this.queries.push({\n            fn: 'onPage',\n            e: {\n                pageIndex: pageIndex,\n                pageSize: pageSize\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given start and end index.\n     * @param  {number} start - Defines the start index of the datasource.\n     * @param  {number} end - Defines the end index of the datasource.\n     */\n    range(start, end) {\n        this.queries.push({\n            fn: 'onRange',\n            e: {\n                start: start,\n                end: end\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data from the top of the data source based on given number of records count.\n     * @param  {number} nos - Defines the no of records to retrieve from datasource.\n     */\n    take(nos) {\n        this.queries.push({\n            fn: 'onTake',\n            e: {\n                nos: nos\n            }\n        });\n        return this;\n    }\n    /**\n     * Skips data with given number of records count from the top of the data source.\n     * @param  {number} nos - Defines the no of records skip in the datasource.\n     */\n    skip(nos) {\n        this.queries.push({\n            fn: 'onSkip',\n            e: { nos: nos }\n        });\n        return this;\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     */\n    select(fieldNames) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [].slice.call([fieldNames], 0);\n        }\n        this.queries.push({\n            fn: 'onSelect',\n            e: { fieldNames: fieldNames }\n        });\n        return this;\n    }\n    /**\n     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n     * @param  {Query} query - Defines the query to relate two tables.\n     * @param  {Function} selectorFn - Defines the custom function to select records.\n     */\n    hierarchy(query, selectorFn) {\n        this.subQuerySelector = selectorFn;\n        this.subQuery = query;\n        return this;\n    }\n    /**\n     * Sets the foreign key which is used to get data from the related table.\n     * @param  {string} key - Defines the foreign key.\n     */\n    foreignKey(key) {\n        this.fKey = key;\n        return this;\n    }\n    /**\n     * It is used to get total number of records in the DataManager execution result.\n     */\n    requiresCount() {\n        this.isCountRequired = true;\n        return this;\n    }\n    //type - sum, avg, min, max\n    /**\n     * Aggregate the data with given type and field name.\n     * @param  {string} type - Defines the aggregate type.\n     * @param  {string} field - Defines the column field to aggregate.\n     */\n    aggregate(type, field) {\n        this.queries.push({\n            fn: 'onAggregates',\n            e: { field: field, type: type }\n        });\n        return this;\n    }\n    /**\n     * Pass array of filterColumn query for performing filter operation.\n     * @param  {QueryOptions[]} queries\n     * @param  {string} name\n     * @hidden\n     */\n    static filterQueries(queries, name) {\n        return queries.filter((q) => {\n            return q.fn === name;\n        });\n    }\n    /**\n     * To get the list of queries which is already filtered in current data source.\n     * @param  {Object[]} queries\n     * @param  {string[]} singles\n     * @hidden\n     */\n    static filterQueryLists(queries, singles) {\n        let filtered = queries.filter((q) => {\n            return singles.indexOf(q.fn) !== -1;\n        });\n        let res = {};\n        for (let i = 0; i < filtered.length; i++) {\n            if (!res[filtered[i].fn]) {\n                res[filtered[i].fn] = filtered[i].e;\n            }\n        }\n        return res;\n    }\n}\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\nclass Predicate {\n    /**\n     * Constructor for Predicate class.\n     * @param  {string|Predicate} field\n     * @param  {string} operator\n     * @param  {string|number|boolean|Predicate|Predicate[]} value\n     * @param  {boolean=false} ignoreCase\n     * @hidden\n     */\n    constructor(field, operator, value, ignoreCase = false, ignoreAccent) {\n        /** @hidden */\n        this.ignoreAccent = false;\n        /** @hidden */\n        this.isComplex = false;\n        if (typeof field === 'string') {\n            this.field = field;\n            this.operator = operator.toLowerCase();\n            this.value = value;\n            this.ignoreCase = ignoreCase;\n            this.ignoreAccent = ignoreAccent;\n            this.isComplex = false;\n            this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n        }\n        else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n            this.isComplex = true;\n            this.condition = operator.toLowerCase();\n            this.predicates = [field];\n            if (value instanceof Array) {\n                [].push.apply(this.predicates, value);\n            }\n            else {\n                this.predicates.push(value);\n            }\n        }\n        return this;\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “and” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static and(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n    }\n    /**\n     * Adds new predicate on existing predicate with “and” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    and(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “or” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static or(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n    }\n    /**\n     * Adds new predicate on existing predicate with “or” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    or(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Converts plain JavaScript object to Predicate object.\n     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n     */\n    static fromJson(json) {\n        if (json instanceof Array) {\n            let res = [];\n            for (let i = 0, len = json.length; i < len; i++) {\n                res.push(this.fromJSONData(json[i]));\n            }\n            return res;\n        }\n        let pred = json;\n        return this.fromJSONData(pred);\n    }\n    /**\n     * Validate the record based on the predicates.\n     * @param  {Object} record - Defines the datasource record.\n     */\n    validate(record) {\n        let predicate = this.predicates ? this.predicates : [];\n        let isAnd;\n        let ret;\n        if (!this.isComplex && this.comparer) {\n            return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n        }\n        isAnd = this.condition === 'and';\n        for (let i = 0; i < predicate.length; i++) {\n            ret = predicate[i].validate(record);\n            if (isAnd) {\n                if (!ret) {\n                    return false;\n                }\n            }\n            else {\n                if (ret) {\n                    return true;\n                }\n            }\n        }\n        return isAnd;\n    }\n    /**\n     * Converts predicates to plain JavaScript.\n     * This method is uses Json stringify when serializing Predicate object.\n     */\n    toJson() {\n        let predicates;\n        let p;\n        if (this.isComplex) {\n            predicates = [];\n            p = this.predicates;\n            for (let i = 0; i < p.length; i++) {\n                predicates.push(p[i].toJson());\n            }\n        }\n        return {\n            isComplex: this.isComplex,\n            field: this.field,\n            operator: this.operator,\n            value: this.value,\n            ignoreCase: this.ignoreCase,\n            ignoreAccent: this.ignoreAccent,\n            condition: this.condition,\n            predicates: predicates\n        };\n    }\n    static combinePredicates(predicates, operator) {\n        if (predicates.length === 1) {\n            if (!(predicates[0] instanceof Array)) {\n                return predicates[0];\n            }\n            predicates = predicates[0];\n        }\n        return new Predicate(predicates[0], operator, predicates.slice(1));\n    }\n    static combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n        if (field instanceof Predicate) {\n            return Predicate[condition](pred, field);\n        }\n        if (typeof field === 'string') {\n            return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n        }\n        return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n    }\n    static fromJSONData(json) {\n        let preds = json.predicates || [];\n        let len = preds.length;\n        let predicates = [];\n        let result;\n        for (let i = 0; i < len; i++) {\n            predicates.push(this.fromJSONData(preds[i]));\n        }\n        if (!json.isComplex) {\n            result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n        }\n        else {\n            result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n        }\n        return result;\n    }\n}\n\nconst consts = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Data manager common utility methods.\n * @hidden\n */\nclass DataUtil {\n    /**\n     * Returns the value by invoking the provided parameter function.\n     * If the paramater is not of type function then it will be returned as it is.\n     * @param  {Function|string|string[]|number} value\n     * @param  {Object} inst?\n     * @hidden\n     */\n    static getValue(value, inst) {\n        if (typeof value === 'function') {\n            return value.call(inst || {});\n        }\n        return value;\n    }\n    /**\n     * Returns true if the input string ends with given string.\n     * @param  {string} input\n     * @param  {string} substr\n     */\n    static endsWith(input, substr) {\n        return input.slice && input.slice(-substr.length) === substr;\n    }\n    /**\n     * Returns true if the input string starts with given string.\n     * @param  {string} str\n     * @param  {string} startstr\n     */\n    static startsWith(input, start) {\n        return input.slice(0, start.length) === start;\n    }\n    /**\n     * To return the sorting function based on the string.\n     * @param  {string} order\n     * @hidden\n     */\n    static fnSort(order) {\n        order = order ? DataUtil.toLowerCase(order) : 'ascending';\n        if (order === 'ascending') {\n            return this.fnAscending;\n        }\n        return this.fnDescending;\n    }\n    /**\n     * Comparer function which is used to sort the data in ascending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnAscending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return -1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y);\n        }\n        if (x === null || x === undefined) {\n            return 1;\n        }\n        return x - y;\n    }\n    /**\n     * Comparer function which is used to sort the data in descending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnDescending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return 1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y) * -1;\n        }\n        if (x === null || x === undefined) {\n            return -1;\n        }\n        return y - x;\n    }\n    static extractFields(obj, fields) {\n        let newObj = {};\n        for (let i = 0; i < fields.length; i++) {\n            newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);\n        }\n        return newObj;\n    }\n    /**\n     * Select objects by given fields from jsonArray.\n     * @param  {Object[]} jsonArray\n     * @param  {string[]} fields\n     */\n    static select(jsonArray, fields) {\n        let newData = [];\n        for (let i = 0; i < jsonArray.length; i++) {\n            newData.push(this.extractFields(jsonArray[i], fields));\n        }\n        return newData;\n    }\n    /**\n     * Group the input data based on the field name.\n     * It also performs aggregation of the grouped records based on the aggregates paramater.\n     * @param  {Object[]} jsonArray\n     * @param  {string} field?\n     * @param  {Object[]} agg?\n     * @param  {number} level?\n     * @param  {Object[]} groupDs?\n     */\n    static group(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {\n        level = level || 1;\n        let jsonData = jsonArray;\n        let guid = 'GroupGuid';\n        if (jsonData.GroupGuid === consts[guid]) {\n            for (let j = 0; j < jsonData.length; j++) {\n                if (!isNullOrUndefined(groupDs)) {\n                    let indx = -1;\n                    let temp = groupDs.filter((e) => { return e.key === jsonData[j].key; });\n                    indx = groupDs.indexOf(temp[0]);\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);\n                    jsonData[j].count = groupDs[indx].count;\n                }\n                else {\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);\n                    jsonData[j].count = jsonData[j].items.length;\n                }\n            }\n            jsonData.childLevels += 1;\n            return jsonData;\n        }\n        let grouped = {};\n        let groupedArray = [];\n        groupedArray.GroupGuid = consts[guid];\n        groupedArray.level = level;\n        groupedArray.childLevels = 0;\n        groupedArray.records = jsonData;\n        for (let i = 0; i < jsonData.length; i++) {\n            let val = this.getVal(jsonData, i, field);\n            if (!isNullOrUndefined(format)) {\n                val = format(val, field);\n            }\n            if (!grouped[val]) {\n                grouped[val] = {\n                    key: val,\n                    count: 0,\n                    items: [],\n                    aggregates: {},\n                    field: field\n                };\n                groupedArray.push(grouped[val]);\n                if (!isNullOrUndefined(groupDs)) {\n                    let tempObj = groupDs.filter((e) => { return e.key === grouped[val].key; });\n                    grouped[val].count = tempObj[0].count;\n                }\n            }\n            grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n            if (!isLazyLoad || (isLazyLoad && aggregates.length)) {\n                grouped[val].items.push(jsonData[i]);\n            }\n        }\n        if (aggregates && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                let res = {};\n                let fn;\n                let aggs = aggregates;\n                for (let j = 0; j < aggregates.length; j++) {\n                    fn = DataUtil.aggregates[aggregates[j].type];\n                    if (!isNullOrUndefined(groupDs)) {\n                        let temp = groupDs.filter((e) => { return e.key === groupedArray[i].key; });\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);\n                        }\n                    }\n                    else {\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);\n                        }\n                    }\n                }\n                groupedArray[i].aggregates = res;\n            }\n        }\n        if (isLazyLoad && groupedArray.length && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                groupedArray[i].items = [];\n            }\n        }\n        return jsonData.length && groupedArray || jsonData;\n    }\n    /**\n     * It is used to categorize the multiple items based on a specific field in jsonArray.\n     * The hierarchical queries are commonly required when you use foreign key binding.\n     * @param  {string} fKey\n     * @param  {string} from\n     * @param  {Object[]} source\n     * @param  {Group} lookup?\n     * @param  {string} pKey?\n     * @hidden\n     */\n    static buildHierarchy(fKey, from, source, lookup, pKey) {\n        let i;\n        let grp = {};\n        let temp;\n        if (lookup.result) {\n            lookup = lookup.result;\n        }\n        if (lookup.GroupGuid) {\n            this.throwError('DataManager: Do not have support Grouping in hierarchy');\n        }\n        for (i = 0; i < lookup.length; i++) {\n            let fKeyData = this.getObject(fKey, lookup[i]);\n            temp = grp[fKeyData] || (grp[fKeyData] = []);\n            temp.push(lookup[i]);\n        }\n        for (i = 0; i < source.length; i++) {\n            let fKeyData = this.getObject(pKey || fKey, source[i]);\n            source[i][from] = grp[fKeyData];\n        }\n    }\n    /**\n     * The method used to get the field names which started with specified characters.\n     * @param  {Object} obj\n     * @param  {string[]} fields?\n     * @param  {string} prefix?\n     * @hidden\n     */\n    static getFieldList(obj, fields, prefix) {\n        if (prefix === undefined) {\n            prefix = '';\n        }\n        if (fields === undefined || fields === null) {\n            return this.getFieldList(obj, [], prefix);\n        }\n        let copyObj = obj;\n        let keys = Object.keys(obj);\n        for (let prop of keys) {\n            if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n                this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n            }\n            else {\n                fields.push(prefix + prop);\n            }\n        }\n        return fields;\n    }\n    /**\n     * Gets the value of the property in the given object.\n     * The complex object can be accessed by providing the field names concatenated with dot(.).\n     * @param  {string} nameSpace - The name of the property to be accessed.\n     * @param  {Object} from - Defines the source object.\n     */\n    static getObject(nameSpace, from) {\n        if (!nameSpace) {\n            return from;\n        }\n        if (!from) {\n            return undefined;\n        }\n        if (nameSpace.indexOf('.') === -1) {\n            return from[nameSpace];\n        }\n        let value = from;\n        let splits = nameSpace.split('.');\n        for (let i = 0; i < splits.length; i++) {\n            if (value == null) {\n                break;\n            }\n            value = value[splits[i]];\n        }\n        return value;\n    }\n    /**\n     * To set value for the nameSpace in desired object.\n     * @param {string} nameSpace - String value to the get the inner object.\n     * @param {Object} value - Value that you need to set.\n     * @param {Object} obj - Object to get the inner object value.\n     * @return { [key: string]: Object; } | Object\n     * @hidden\n     */\n    static setValue(nameSpace, value, obj) {\n        let keys = nameSpace.toString().split('.');\n        let start = obj || {};\n        let fromObj = start;\n        let i;\n        let length = keys.length;\n        let key;\n        for (i = 0; i < length; i++) {\n            key = keys[i];\n            if (i + 1 === length) {\n                fromObj[key] = value === undefined ? undefined : value;\n            }\n            else if (isNullOrUndefined(fromObj[key])) {\n                fromObj[key] = {};\n            }\n            fromObj = fromObj[key];\n        }\n        return start;\n    }\n    /**\n     * Sort the given data based on the field and comparer.\n     * @param  {Object[]} ds - Defines the input data.\n     * @param  {string} field - Defines the field to be sorted.\n     * @param  {Function} comparer - Defines the comparer function used to sort the records.\n     */\n    static sort(ds, field, comparer) {\n        if (ds.length <= 1) {\n            return ds;\n        }\n        let middle = parseInt((ds.length / 2).toString(), 10);\n        let left = ds.slice(0, middle);\n        let right = ds.slice(middle);\n        left = this.sort(left, field, comparer);\n        right = this.sort(right, field, comparer);\n        return this.merge(left, right, field, comparer);\n    }\n    static ignoreDiacritics(value) {\n        if (typeof value !== 'string') {\n            return value;\n        }\n        let result = value.split('');\n        let newValue = result.map((temp) => temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp);\n        return newValue.join('');\n    }\n    static merge(left, right, fieldName, comparer) {\n        let result = [];\n        let current;\n        while (left.length > 0 || right.length > 0) {\n            if (left.length > 0 && right.length > 0) {\n                if (comparer) {\n                    current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;\n                }\n                else {\n                    current = left[0][fieldName] < left[0][fieldName] ? left : right;\n                }\n            }\n            else {\n                current = left.length > 0 ? left : right;\n            }\n            result.push(current.shift());\n        }\n        return result;\n    }\n    static getVal(array, index, field) {\n        return field ? this.getObject(field, array[index]) : array[index];\n    }\n    static toLowerCase(val) {\n        return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : (val === 0 || val === false) ? val.toString() : '';\n    }\n    /**\n     * To perform the filter operation with specified adaptor and returns the result.\n     * @param  {Object} adaptor\n     * @param  {string} fnName\n     * @param  {Object} param1?\n     * @param  {Object} param2?\n     * @hidden\n     */\n    static callAdaptorFunction(adaptor, fnName, param1, param2) {\n        if (fnName in adaptor) {\n            let res = adaptor[fnName](param1, param2);\n            if (!isNullOrUndefined(res)) {\n                param1 = res;\n            }\n        }\n        return param1;\n    }\n    static getAddParams(adp, dm, query) {\n        let req = {};\n        DataUtil.callAdaptorFunction(adp, 'addParams', {\n            dm: dm,\n            query: query,\n            params: query.params,\n            reqParams: req\n        });\n        return req;\n    }\n    /**\n     * Checks wheather the given input is a plain object or not.\n     * @param  {Object|Object[]} obj\n     */\n    static isPlainObject(obj) {\n        return (!!obj) && (obj.constructor === Object);\n    }\n    /**\n     * Returns true when the browser cross origin request.\n     */\n    static isCors() {\n        let xhr = null;\n        let request = 'XMLHttpRequest';\n        try {\n            xhr = new window[request]();\n        }\n        catch (e) {\n            // No exception handling\n        }\n        return !!xhr && ('withCredentials' in xhr);\n    }\n    /**\n     * Generate random GUID value which will be prefixed with the given value.\n     * @param  {string} prefix\n     */\n    static getGuid(prefix) {\n        let hexs = '0123456789abcdef';\n        let rand;\n        return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, (val, i) => {\n            if ('crypto' in window && 'getRandomValues' in crypto) {\n                let arr = new Uint8Array(1);\n                window.crypto.getRandomValues(arr);\n                rand = arr[0] % 16 | 0;\n            }\n            else {\n                rand = Math.random() * 16 | 0;\n            }\n            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n        });\n    }\n    /**\n     * Checks wheather the given value is null or not.\n     * @param  {string|Object} val\n     * @returns boolean\n     */\n    static isNull(val) {\n        return val === undefined || val === null;\n    }\n    /**\n     * To get the required items from collection of objects.\n     * @param  {Object[]} array\n     * @param  {string} field\n     * @param  {Function} comparer\n     * @returns Object\n     * @hidden\n     */\n    static getItemFromComparer(array, field, comparer) {\n        let keyVal;\n        let current;\n        let key;\n        let i = 0;\n        let castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n        if (array.length) {\n            while (isNullOrUndefined(keyVal) && i < array.length) {\n                keyVal = DataUtil.getVal(array, i, field);\n                key = array[i++];\n            }\n        }\n        for (; i < array.length; i++) {\n            current = DataUtil.getVal(array, i, field);\n            if (isNullOrUndefined(current)) {\n                continue;\n            }\n            if (castRequired) {\n                keyVal = +keyVal;\n                current = +current;\n            }\n            if (comparer(keyVal, current) > 0) {\n                keyVal = current;\n                key = array[i];\n            }\n        }\n        return key;\n    }\n    /**\n     * To get distinct values of Array or Array of Objects.\n     * @param  {Object[]} json\n     * @param  {string} field\n     * @param  {boolean} requiresCompleteRecord\n     * @returns Object[]\n     * * distinct array of objects is return when requiresCompleteRecord set as true.\n     * @hidden\n     */\n    static distinct(json, fieldName, requiresCompleteRecord) {\n        requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n        let result = [];\n        let val;\n        let tmp = {};\n        json.forEach((data, index) => {\n            val = typeof (json[index]) === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];\n            if (!(val in tmp)) {\n                result.push(!requiresCompleteRecord ? val : json[index]);\n                tmp[val] = 1;\n            }\n        });\n        return result;\n    }\n    /**\n     * Process the given records based on the datamanager string.\n     * @param  {string} datamanager\n     * @param  {Object[]} records\n     */\n    static processData(dm, records) {\n        let query = this.prepareQuery(dm);\n        let sampledata = new DataManager(records);\n        if (dm.requiresCounts) {\n            query.requiresCount();\n        }\n        let result = sampledata.executeLocal(query);\n        let returnValue = {\n            result: dm.requiresCounts ? result.result : result,\n            count: result.count,\n            aggregates: JSON.stringify(result.aggregates)\n        };\n        return dm.requiresCounts ? returnValue : result;\n    }\n    static prepareQuery(dm) {\n        let query = new Query();\n        if (dm.select) {\n            query.select(dm.select);\n        }\n        if (dm.where) {\n            let where = DataUtil.parse.parseJson(dm.where);\n            where.filter((pred) => {\n                if (isNullOrUndefined(pred.condition)) {\n                    query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);\n                }\n                else {\n                    let predicateList = [];\n                    if (pred.field) {\n                        predicateList.push(new Predicate(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));\n                    }\n                    else {\n                        predicateList = predicateList.concat(this.getPredicate(pred.predicates));\n                    }\n                    if (pred.condition == 'or') {\n                        query.where(Predicate.or(predicateList));\n                    }\n                    else if (pred.condition == 'and') {\n                        query.where(Predicate.and(predicateList));\n                    }\n                }\n            });\n        }\n        if (dm.search) {\n            let search = DataUtil.parse.parseJson(dm.search);\n            search.filter((e) => query.search(e.key, e.fields, e['operator'], e['ignoreCase'], e['ignoreAccent']));\n        }\n        if (dm.aggregates) {\n            dm.aggregates.filter((e) => query.aggregate(e.type, e.field));\n        }\n        if (dm.sorted) {\n            dm.sorted.filter((e) => query.sortBy(e.name, e.direction));\n        }\n        if (dm.skip) {\n            query.skip(dm.skip);\n        }\n        if (dm.take) {\n            query.take(dm.take);\n        }\n        if (dm.group) {\n            dm.group.filter((grp) => query.group(grp));\n        }\n        return query;\n    }\n    static getPredicate(pred) {\n        let mainPred = [];\n        for (let i = 0; i < pred.length; i++) {\n            let e = pred[i];\n            if (e.field) {\n                mainPred.push(new Predicate(e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));\n            }\n            else {\n                let childPred = [];\n                let cpre = this.getPredicate(e.predicates);\n                for (const prop of Object.keys(cpre)) {\n                    childPred.push(cpre[prop]);\n                }\n                mainPred.push(e.condition == 'or' ? Predicate.or(childPred) : Predicate.and(childPred));\n            }\n        }\n        return mainPred;\n    }\n}\n/**\n * Specifies the value which will be used to adjust the date value to server timezone.\n * @default null\n */\nDataUtil.serverTimezoneOffset = null;\n/**\n * Species whether are not to be parsed with serverTimezoneOffset value.\n * @hidden\n */\nDataUtil.timeZoneHandling = true;\n/**\n * Throw error with the given string as message.\n * @param  {string} er\n */\nDataUtil.throwError = (error) => {\n    try {\n        throw new Error(error);\n    }\n    catch (e) {\n        throw e.message + '\\n' + e.stack;\n    }\n};\nDataUtil.aggregates = {\n    /**\n     * Calculate sum of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    sum: (ds, field) => {\n        let result = 0;\n        let val;\n        let castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n        for (let i = 0; i < ds.length; i++) {\n            val = DataUtil.getVal(ds, i, field);\n            if (!isNaN(val) && val !== null) {\n                if (castRequired) {\n                    val = +val;\n                }\n                result += val;\n            }\n        }\n        return result;\n    },\n    /**\n     * Calculate average value of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    average: (ds, field) => {\n        return DataUtil.aggregates.sum(ds, field) / ds.length;\n    },\n    /**\n     * Returns the min value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string|Function} field\n     */\n    min: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n    },\n    /**\n     * Returns the max value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     * @returns number\n     */\n    max: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n    },\n    /**\n     * Returns the total number of true value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    truecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n    },\n    /**\n     * Returns the total number of false value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    falsecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n    },\n    /**\n     * Returns the length of the given data.\n     * @param  {Object[]} ds\n     * @param  {string} field?\n     * @returns number\n     */\n    count: (ds, field) => {\n        return ds.length;\n    }\n};\n/**\n * Specifies the Object with filter operators.\n */\nDataUtil.operatorSymbols = {\n    '<': 'lessthan',\n    '>': 'greaterthan',\n    '<=': 'lessthanorequal',\n    '>=': 'greaterthanorequal',\n    '==': 'equal',\n    '!=': 'notequal',\n    '*=': 'contains',\n    '$=': 'endswith',\n    '^=': 'startswith'\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * * It will be used for date/number type filter query.\n */\nDataUtil.odBiOperator = {\n    '<': ' lt ',\n    '>': ' gt ',\n    '<=': ' le ',\n    '>=': ' ge ',\n    '==': ' eq ',\n    '!=': ' ne ',\n    'lessthan': ' lt ',\n    'lessthanorequal': ' le ',\n    'greaterthan': ' gt ',\n    'greaterthanorequal': ' ge ',\n    'equal': ' eq ',\n    'notequal': ' ne '\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odUniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'substringof',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'substringof'\n};\n/**\n * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odv4UniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'contains',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'contains'\n};\nDataUtil.diacritics = {\n    '\\u24B6': 'A',\n    '\\uFF21': 'A',\n    '\\u00C0': 'A',\n    '\\u00C1': 'A',\n    '\\u00C2': 'A',\n    '\\u1EA6': 'A',\n    '\\u1EA4': 'A',\n    '\\u1EAA': 'A',\n    '\\u1EA8': 'A',\n    '\\u00C3': 'A',\n    '\\u0100': 'A',\n    '\\u0102': 'A',\n    '\\u1EB0': 'A',\n    '\\u1EAE': 'A',\n    '\\u1EB4': 'A',\n    '\\u1EB2': 'A',\n    '\\u0226': 'A',\n    '\\u01E0': 'A',\n    '\\u00C4': 'A',\n    '\\u01DE': 'A',\n    '\\u1EA2': 'A',\n    '\\u00C5': 'A',\n    '\\u01FA': 'A',\n    '\\u01CD': 'A',\n    '\\u0200': 'A',\n    '\\u0202': 'A',\n    '\\u1EA0': 'A',\n    '\\u1EAC': 'A',\n    '\\u1EB6': 'A',\n    '\\u1E00': 'A',\n    '\\u0104': 'A',\n    '\\u023A': 'A',\n    '\\u2C6F': 'A',\n    '\\uA732': 'AA',\n    '\\u00C6': 'AE',\n    '\\u01FC': 'AE',\n    '\\u01E2': 'AE',\n    '\\uA734': 'AO',\n    '\\uA736': 'AU',\n    '\\uA738': 'AV',\n    '\\uA73A': 'AV',\n    '\\uA73C': 'AY',\n    '\\u24B7': 'B',\n    '\\uFF22': 'B',\n    '\\u1E02': 'B',\n    '\\u1E04': 'B',\n    '\\u1E06': 'B',\n    '\\u0243': 'B',\n    '\\u0182': 'B',\n    '\\u0181': 'B',\n    '\\u24B8': 'C',\n    '\\uFF23': 'C',\n    '\\u0106': 'C',\n    '\\u0108': 'C',\n    '\\u010A': 'C',\n    '\\u010C': 'C',\n    '\\u00C7': 'C',\n    '\\u1E08': 'C',\n    '\\u0187': 'C',\n    '\\u023B': 'C',\n    '\\uA73E': 'C',\n    '\\u24B9': 'D',\n    '\\uFF24': 'D',\n    '\\u1E0A': 'D',\n    '\\u010E': 'D',\n    '\\u1E0C': 'D',\n    '\\u1E10': 'D',\n    '\\u1E12': 'D',\n    '\\u1E0E': 'D',\n    '\\u0110': 'D',\n    '\\u018B': 'D',\n    '\\u018A': 'D',\n    '\\u0189': 'D',\n    '\\uA779': 'D',\n    '\\u01F1': 'DZ',\n    '\\u01C4': 'DZ',\n    '\\u01F2': 'Dz',\n    '\\u01C5': 'Dz',\n    '\\u24BA': 'E',\n    '\\uFF25': 'E',\n    '\\u00C8': 'E',\n    '\\u00C9': 'E',\n    '\\u00CA': 'E',\n    '\\u1EC0': 'E',\n    '\\u1EBE': 'E',\n    '\\u1EC4': 'E',\n    '\\u1EC2': 'E',\n    '\\u1EBC': 'E',\n    '\\u0112': 'E',\n    '\\u1E14': 'E',\n    '\\u1E16': 'E',\n    '\\u0114': 'E',\n    '\\u0116': 'E',\n    '\\u00CB': 'E',\n    '\\u1EBA': 'E',\n    '\\u011A': 'E',\n    '\\u0204': 'E',\n    '\\u0206': 'E',\n    '\\u1EB8': 'E',\n    '\\u1EC6': 'E',\n    '\\u0228': 'E',\n    '\\u1E1C': 'E',\n    '\\u0118': 'E',\n    '\\u1E18': 'E',\n    '\\u1E1A': 'E',\n    '\\u0190': 'E',\n    '\\u018E': 'E',\n    '\\u24BB': 'F',\n    '\\uFF26': 'F',\n    '\\u1E1E': 'F',\n    '\\u0191': 'F',\n    '\\uA77B': 'F',\n    '\\u24BC': 'G',\n    '\\uFF27': 'G',\n    '\\u01F4': 'G',\n    '\\u011C': 'G',\n    '\\u1E20': 'G',\n    '\\u011E': 'G',\n    '\\u0120': 'G',\n    '\\u01E6': 'G',\n    '\\u0122': 'G',\n    '\\u01E4': 'G',\n    '\\u0193': 'G',\n    '\\uA7A0': 'G',\n    '\\uA77D': 'G',\n    '\\uA77E': 'G',\n    '\\u24BD': 'H',\n    '\\uFF28': 'H',\n    '\\u0124': 'H',\n    '\\u1E22': 'H',\n    '\\u1E26': 'H',\n    '\\u021E': 'H',\n    '\\u1E24': 'H',\n    '\\u1E28': 'H',\n    '\\u1E2A': 'H',\n    '\\u0126': 'H',\n    '\\u2C67': 'H',\n    '\\u2C75': 'H',\n    '\\uA78D': 'H',\n    '\\u24BE': 'I',\n    '\\uFF29': 'I',\n    '\\u00CC': 'I',\n    '\\u00CD': 'I',\n    '\\u00CE': 'I',\n    '\\u0128': 'I',\n    '\\u012A': 'I',\n    '\\u012C': 'I',\n    '\\u0130': 'I',\n    '\\u00CF': 'I',\n    '\\u1E2E': 'I',\n    '\\u1EC8': 'I',\n    '\\u01CF': 'I',\n    '\\u0208': 'I',\n    '\\u020A': 'I',\n    '\\u1ECA': 'I',\n    '\\u012E': 'I',\n    '\\u1E2C': 'I',\n    '\\u0197': 'I',\n    '\\u24BF': 'J',\n    '\\uFF2A': 'J',\n    '\\u0134': 'J',\n    '\\u0248': 'J',\n    '\\u24C0': 'K',\n    '\\uFF2B': 'K',\n    '\\u1E30': 'K',\n    '\\u01E8': 'K',\n    '\\u1E32': 'K',\n    '\\u0136': 'K',\n    '\\u1E34': 'K',\n    '\\u0198': 'K',\n    '\\u2C69': 'K',\n    '\\uA740': 'K',\n    '\\uA742': 'K',\n    '\\uA744': 'K',\n    '\\uA7A2': 'K',\n    '\\u24C1': 'L',\n    '\\uFF2C': 'L',\n    '\\u013F': 'L',\n    '\\u0139': 'L',\n    '\\u013D': 'L',\n    '\\u1E36': 'L',\n    '\\u1E38': 'L',\n    '\\u013B': 'L',\n    '\\u1E3C': 'L',\n    '\\u1E3A': 'L',\n    '\\u0141': 'L',\n    '\\u023D': 'L',\n    '\\u2C62': 'L',\n    '\\u2C60': 'L',\n    '\\uA748': 'L',\n    '\\uA746': 'L',\n    '\\uA780': 'L',\n    '\\u01C7': 'LJ',\n    '\\u01C8': 'Lj',\n    '\\u24C2': 'M',\n    '\\uFF2D': 'M',\n    '\\u1E3E': 'M',\n    '\\u1E40': 'M',\n    '\\u1E42': 'M',\n    '\\u2C6E': 'M',\n    '\\u019C': 'M',\n    '\\u24C3': 'N',\n    '\\uFF2E': 'N',\n    '\\u01F8': 'N',\n    '\\u0143': 'N',\n    '\\u00D1': 'N',\n    '\\u1E44': 'N',\n    '\\u0147': 'N',\n    '\\u1E46': 'N',\n    '\\u0145': 'N',\n    '\\u1E4A': 'N',\n    '\\u1E48': 'N',\n    '\\u0220': 'N',\n    '\\u019D': 'N',\n    '\\uA790': 'N',\n    '\\uA7A4': 'N',\n    '\\u01CA': 'NJ',\n    '\\u01CB': 'Nj',\n    '\\u24C4': 'O',\n    '\\uFF2F': 'O',\n    '\\u00D2': 'O',\n    '\\u00D3': 'O',\n    '\\u00D4': 'O',\n    '\\u1ED2': 'O',\n    '\\u1ED0': 'O',\n    '\\u1ED6': 'O',\n    '\\u1ED4': 'O',\n    '\\u00D5': 'O',\n    '\\u1E4C': 'O',\n    '\\u022C': 'O',\n    '\\u1E4E': 'O',\n    '\\u014C': 'O',\n    '\\u1E50': 'O',\n    '\\u1E52': 'O',\n    '\\u014E': 'O',\n    '\\u022E': 'O',\n    '\\u0230': 'O',\n    '\\u00D6': 'O',\n    '\\u022A': 'O',\n    '\\u1ECE': 'O',\n    '\\u0150': 'O',\n    '\\u01D1': 'O',\n    '\\u020C': 'O',\n    '\\u020E': 'O',\n    '\\u01A0': 'O',\n    '\\u1EDC': 'O',\n    '\\u1EDA': 'O',\n    '\\u1EE0': 'O',\n    '\\u1EDE': 'O',\n    '\\u1EE2': 'O',\n    '\\u1ECC': 'O',\n    '\\u1ED8': 'O',\n    '\\u01EA': 'O',\n    '\\u01EC': 'O',\n    '\\u00D8': 'O',\n    '\\u01FE': 'O',\n    '\\u0186': 'O',\n    '\\u019F': 'O',\n    '\\uA74A': 'O',\n    '\\uA74C': 'O',\n    '\\u01A2': 'OI',\n    '\\uA74E': 'OO',\n    '\\u0222': 'OU',\n    '\\u24C5': 'P',\n    '\\uFF30': 'P',\n    '\\u1E54': 'P',\n    '\\u1E56': 'P',\n    '\\u01A4': 'P',\n    '\\u2C63': 'P',\n    '\\uA750': 'P',\n    '\\uA752': 'P',\n    '\\uA754': 'P',\n    '\\u24C6': 'Q',\n    '\\uFF31': 'Q',\n    '\\uA756': 'Q',\n    '\\uA758': 'Q',\n    '\\u024A': 'Q',\n    '\\u24C7': 'R',\n    '\\uFF32': 'R',\n    '\\u0154': 'R',\n    '\\u1E58': 'R',\n    '\\u0158': 'R',\n    '\\u0210': 'R',\n    '\\u0212': 'R',\n    '\\u1E5A': 'R',\n    '\\u1E5C': 'R',\n    '\\u0156': 'R',\n    '\\u1E5E': 'R',\n    '\\u024C': 'R',\n    '\\u2C64': 'R',\n    '\\uA75A': 'R',\n    '\\uA7A6': 'R',\n    '\\uA782': 'R',\n    '\\u24C8': 'S',\n    '\\uFF33': 'S',\n    '\\u1E9E': 'S',\n    '\\u015A': 'S',\n    '\\u1E64': 'S',\n    '\\u015C': 'S',\n    '\\u1E60': 'S',\n    '\\u0160': 'S',\n    '\\u1E66': 'S',\n    '\\u1E62': 'S',\n    '\\u1E68': 'S',\n    '\\u0218': 'S',\n    '\\u015E': 'S',\n    '\\u2C7E': 'S',\n    '\\uA7A8': 'S',\n    '\\uA784': 'S',\n    '\\u24C9': 'T',\n    '\\uFF34': 'T',\n    '\\u1E6A': 'T',\n    '\\u0164': 'T',\n    '\\u1E6C': 'T',\n    '\\u021A': 'T',\n    '\\u0162': 'T',\n    '\\u1E70': 'T',\n    '\\u1E6E': 'T',\n    '\\u0166': 'T',\n    '\\u01AC': 'T',\n    '\\u01AE': 'T',\n    '\\u023E': 'T',\n    '\\uA786': 'T',\n    '\\uA728': 'TZ',\n    '\\u24CA': 'U',\n    '\\uFF35': 'U',\n    '\\u00D9': 'U',\n    '\\u00DA': 'U',\n    '\\u00DB': 'U',\n    '\\u0168': 'U',\n    '\\u1E78': 'U',\n    '\\u016A': 'U',\n    '\\u1E7A': 'U',\n    '\\u016C': 'U',\n    '\\u00DC': 'U',\n    '\\u01DB': 'U',\n    '\\u01D7': 'U',\n    '\\u01D5': 'U',\n    '\\u01D9': 'U',\n    '\\u1EE6': 'U',\n    '\\u016E': 'U',\n    '\\u0170': 'U',\n    '\\u01D3': 'U',\n    '\\u0214': 'U',\n    '\\u0216': 'U',\n    '\\u01AF': 'U',\n    '\\u1EEA': 'U',\n    '\\u1EE8': 'U',\n    '\\u1EEE': 'U',\n    '\\u1EEC': 'U',\n    '\\u1EF0': 'U',\n    '\\u1EE4': 'U',\n    '\\u1E72': 'U',\n    '\\u0172': 'U',\n    '\\u1E76': 'U',\n    '\\u1E74': 'U',\n    '\\u0244': 'U',\n    '\\u24CB': 'V',\n    '\\uFF36': 'V',\n    '\\u1E7C': 'V',\n    '\\u1E7E': 'V',\n    '\\u01B2': 'V',\n    '\\uA75E': 'V',\n    '\\u0245': 'V',\n    '\\uA760': 'VY',\n    '\\u24CC': 'W',\n    '\\uFF37': 'W',\n    '\\u1E80': 'W',\n    '\\u1E82': 'W',\n    '\\u0174': 'W',\n    '\\u1E86': 'W',\n    '\\u1E84': 'W',\n    '\\u1E88': 'W',\n    '\\u2C72': 'W',\n    '\\u24CD': 'X',\n    '\\uFF38': 'X',\n    '\\u1E8A': 'X',\n    '\\u1E8C': 'X',\n    '\\u24CE': 'Y',\n    '\\uFF39': 'Y',\n    '\\u1EF2': 'Y',\n    '\\u00DD': 'Y',\n    '\\u0176': 'Y',\n    '\\u1EF8': 'Y',\n    '\\u0232': 'Y',\n    '\\u1E8E': 'Y',\n    '\\u0178': 'Y',\n    '\\u1EF6': 'Y',\n    '\\u1EF4': 'Y',\n    '\\u01B3': 'Y',\n    '\\u024E': 'Y',\n    '\\u1EFE': 'Y',\n    '\\u24CF': 'Z',\n    '\\uFF3A': 'Z',\n    '\\u0179': 'Z',\n    '\\u1E90': 'Z',\n    '\\u017B': 'Z',\n    '\\u017D': 'Z',\n    '\\u1E92': 'Z',\n    '\\u1E94': 'Z',\n    '\\u01B5': 'Z',\n    '\\u0224': 'Z',\n    '\\u2C7F': 'Z',\n    '\\u2C6B': 'Z',\n    '\\uA762': 'Z',\n    '\\u24D0': 'a',\n    '\\uFF41': 'a',\n    '\\u1E9A': 'a',\n    '\\u00E0': 'a',\n    '\\u00E1': 'a',\n    '\\u00E2': 'a',\n    '\\u1EA7': 'a',\n    '\\u1EA5': 'a',\n    '\\u1EAB': 'a',\n    '\\u1EA9': 'a',\n    '\\u00E3': 'a',\n    '\\u0101': 'a',\n    '\\u0103': 'a',\n    '\\u1EB1': 'a',\n    '\\u1EAF': 'a',\n    '\\u1EB5': 'a',\n    '\\u1EB3': 'a',\n    '\\u0227': 'a',\n    '\\u01E1': 'a',\n    '\\u00E4': 'a',\n    '\\u01DF': 'a',\n    '\\u1EA3': 'a',\n    '\\u00E5': 'a',\n    '\\u01FB': 'a',\n    '\\u01CE': 'a',\n    '\\u0201': 'a',\n    '\\u0203': 'a',\n    '\\u1EA1': 'a',\n    '\\u1EAD': 'a',\n    '\\u1EB7': 'a',\n    '\\u1E01': 'a',\n    '\\u0105': 'a',\n    '\\u2C65': 'a',\n    '\\u0250': 'a',\n    '\\uA733': 'aa',\n    '\\u00E6': 'ae',\n    '\\u01FD': 'ae',\n    '\\u01E3': 'ae',\n    '\\uA735': 'ao',\n    '\\uA737': 'au',\n    '\\uA739': 'av',\n    '\\uA73B': 'av',\n    '\\uA73D': 'ay',\n    '\\u24D1': 'b',\n    '\\uFF42': 'b',\n    '\\u1E03': 'b',\n    '\\u1E05': 'b',\n    '\\u1E07': 'b',\n    '\\u0180': 'b',\n    '\\u0183': 'b',\n    '\\u0253': 'b',\n    '\\u24D2': 'c',\n    '\\uFF43': 'c',\n    '\\u0107': 'c',\n    '\\u0109': 'c',\n    '\\u010B': 'c',\n    '\\u010D': 'c',\n    '\\u00E7': 'c',\n    '\\u1E09': 'c',\n    '\\u0188': 'c',\n    '\\u023C': 'c',\n    '\\uA73F': 'c',\n    '\\u2184': 'c',\n    '\\u24D3': 'd',\n    '\\uFF44': 'd',\n    '\\u1E0B': 'd',\n    '\\u010F': 'd',\n    '\\u1E0D': 'd',\n    '\\u1E11': 'd',\n    '\\u1E13': 'd',\n    '\\u1E0F': 'd',\n    '\\u0111': 'd',\n    '\\u018C': 'd',\n    '\\u0256': 'd',\n    '\\u0257': 'd',\n    '\\uA77A': 'd',\n    '\\u01F3': 'dz',\n    '\\u01C6': 'dz',\n    '\\u24D4': 'e',\n    '\\uFF45': 'e',\n    '\\u00E8': 'e',\n    '\\u00E9': 'e',\n    '\\u00EA': 'e',\n    '\\u1EC1': 'e',\n    '\\u1EBF': 'e',\n    '\\u1EC5': 'e',\n    '\\u1EC3': 'e',\n    '\\u1EBD': 'e',\n    '\\u0113': 'e',\n    '\\u1E15': 'e',\n    '\\u1E17': 'e',\n    '\\u0115': 'e',\n    '\\u0117': 'e',\n    '\\u00EB': 'e',\n    '\\u1EBB': 'e',\n    '\\u011B': 'e',\n    '\\u0205': 'e',\n    '\\u0207': 'e',\n    '\\u1EB9': 'e',\n    '\\u1EC7': 'e',\n    '\\u0229': 'e',\n    '\\u1E1D': 'e',\n    '\\u0119': 'e',\n    '\\u1E19': 'e',\n    '\\u1E1B': 'e',\n    '\\u0247': 'e',\n    '\\u025B': 'e',\n    '\\u01DD': 'e',\n    '\\u24D5': 'f',\n    '\\uFF46': 'f',\n    '\\u1E1F': 'f',\n    '\\u0192': 'f',\n    '\\uA77C': 'f',\n    '\\u24D6': 'g',\n    '\\uFF47': 'g',\n    '\\u01F5': 'g',\n    '\\u011D': 'g',\n    '\\u1E21': 'g',\n    '\\u011F': 'g',\n    '\\u0121': 'g',\n    '\\u01E7': 'g',\n    '\\u0123': 'g',\n    '\\u01E5': 'g',\n    '\\u0260': 'g',\n    '\\uA7A1': 'g',\n    '\\u1D79': 'g',\n    '\\uA77F': 'g',\n    '\\u24D7': 'h',\n    '\\uFF48': 'h',\n    '\\u0125': 'h',\n    '\\u1E23': 'h',\n    '\\u1E27': 'h',\n    '\\u021F': 'h',\n    '\\u1E25': 'h',\n    '\\u1E29': 'h',\n    '\\u1E2B': 'h',\n    '\\u1E96': 'h',\n    '\\u0127': 'h',\n    '\\u2C68': 'h',\n    '\\u2C76': 'h',\n    '\\u0265': 'h',\n    '\\u0195': 'hv',\n    '\\u24D8': 'i',\n    '\\uFF49': 'i',\n    '\\u00EC': 'i',\n    '\\u00ED': 'i',\n    '\\u00EE': 'i',\n    '\\u0129': 'i',\n    '\\u012B': 'i',\n    '\\u012D': 'i',\n    '\\u00EF': 'i',\n    '\\u1E2F': 'i',\n    '\\u1EC9': 'i',\n    '\\u01D0': 'i',\n    '\\u0209': 'i',\n    '\\u020B': 'i',\n    '\\u1ECB': 'i',\n    '\\u012F': 'i',\n    '\\u1E2D': 'i',\n    '\\u0268': 'i',\n    '\\u0131': 'i',\n    '\\u24D9': 'j',\n    '\\uFF4A': 'j',\n    '\\u0135': 'j',\n    '\\u01F0': 'j',\n    '\\u0249': 'j',\n    '\\u24DA': 'k',\n    '\\uFF4B': 'k',\n    '\\u1E31': 'k',\n    '\\u01E9': 'k',\n    '\\u1E33': 'k',\n    '\\u0137': 'k',\n    '\\u1E35': 'k',\n    '\\u0199': 'k',\n    '\\u2C6A': 'k',\n    '\\uA741': 'k',\n    '\\uA743': 'k',\n    '\\uA745': 'k',\n    '\\uA7A3': 'k',\n    '\\u24DB': 'l',\n    '\\uFF4C': 'l',\n    '\\u0140': 'l',\n    '\\u013A': 'l',\n    '\\u013E': 'l',\n    '\\u1E37': 'l',\n    '\\u1E39': 'l',\n    '\\u013C': 'l',\n    '\\u1E3D': 'l',\n    '\\u1E3B': 'l',\n    '\\u017F': 'l',\n    '\\u0142': 'l',\n    '\\u019A': 'l',\n    '\\u026B': 'l',\n    '\\u2C61': 'l',\n    '\\uA749': 'l',\n    '\\uA781': 'l',\n    '\\uA747': 'l',\n    '\\u01C9': 'lj',\n    '\\u24DC': 'm',\n    '\\uFF4D': 'm',\n    '\\u1E3F': 'm',\n    '\\u1E41': 'm',\n    '\\u1E43': 'm',\n    '\\u0271': 'm',\n    '\\u026F': 'm',\n    '\\u24DD': 'n',\n    '\\uFF4E': 'n',\n    '\\u01F9': 'n',\n    '\\u0144': 'n',\n    '\\u00F1': 'n',\n    '\\u1E45': 'n',\n    '\\u0148': 'n',\n    '\\u1E47': 'n',\n    '\\u0146': 'n',\n    '\\u1E4B': 'n',\n    '\\u1E49': 'n',\n    '\\u019E': 'n',\n    '\\u0272': 'n',\n    '\\u0149': 'n',\n    '\\uA791': 'n',\n    '\\uA7A5': 'n',\n    '\\u01CC': 'nj',\n    '\\u24DE': 'o',\n    '\\uFF4F': 'o',\n    '\\u00F2': 'o',\n    '\\u00F3': 'o',\n    '\\u00F4': 'o',\n    '\\u1ED3': 'o',\n    '\\u1ED1': 'o',\n    '\\u1ED7': 'o',\n    '\\u1ED5': 'o',\n    '\\u00F5': 'o',\n    '\\u1E4D': 'o',\n    '\\u022D': 'o',\n    '\\u1E4F': 'o',\n    '\\u014D': 'o',\n    '\\u1E51': 'o',\n    '\\u1E53': 'o',\n    '\\u014F': 'o',\n    '\\u022F': 'o',\n    '\\u0231': 'o',\n    '\\u00F6': 'o',\n    '\\u022B': 'o',\n    '\\u1ECF': 'o',\n    '\\u0151': 'o',\n    '\\u01D2': 'o',\n    '\\u020D': 'o',\n    '\\u020F': 'o',\n    '\\u01A1': 'o',\n    '\\u1EDD': 'o',\n    '\\u1EDB': 'o',\n    '\\u1EE1': 'o',\n    '\\u1EDF': 'o',\n    '\\u1EE3': 'o',\n    '\\u1ECD': 'o',\n    '\\u1ED9': 'o',\n    '\\u01EB': 'o',\n    '\\u01ED': 'o',\n    '\\u00F8': 'o',\n    '\\u01FF': 'o',\n    '\\u0254': 'o',\n    '\\uA74B': 'o',\n    '\\uA74D': 'o',\n    '\\u0275': 'o',\n    '\\u01A3': 'oi',\n    '\\u0223': 'ou',\n    '\\uA74F': 'oo',\n    '\\u24DF': 'p',\n    '\\uFF50': 'p',\n    '\\u1E55': 'p',\n    '\\u1E57': 'p',\n    '\\u01A5': 'p',\n    '\\u1D7D': 'p',\n    '\\uA751': 'p',\n    '\\uA753': 'p',\n    '\\uA755': 'p',\n    '\\u24E0': 'q',\n    '\\uFF51': 'q',\n    '\\u024B': 'q',\n    '\\uA757': 'q',\n    '\\uA759': 'q',\n    '\\u24E1': 'r',\n    '\\uFF52': 'r',\n    '\\u0155': 'r',\n    '\\u1E59': 'r',\n    '\\u0159': 'r',\n    '\\u0211': 'r',\n    '\\u0213': 'r',\n    '\\u1E5B': 'r',\n    '\\u1E5D': 'r',\n    '\\u0157': 'r',\n    '\\u1E5F': 'r',\n    '\\u024D': 'r',\n    '\\u027D': 'r',\n    '\\uA75B': 'r',\n    '\\uA7A7': 'r',\n    '\\uA783': 'r',\n    '\\u24E2': 's',\n    '\\uFF53': 's',\n    '\\u00DF': 's',\n    '\\u015B': 's',\n    '\\u1E65': 's',\n    '\\u015D': 's',\n    '\\u1E61': 's',\n    '\\u0161': 's',\n    '\\u1E67': 's',\n    '\\u1E63': 's',\n    '\\u1E69': 's',\n    '\\u0219': 's',\n    '\\u015F': 's',\n    '\\u023F': 's',\n    '\\uA7A9': 's',\n    '\\uA785': 's',\n    '\\u1E9B': 's',\n    '\\u24E3': 't',\n    '\\uFF54': 't',\n    '\\u1E6B': 't',\n    '\\u1E97': 't',\n    '\\u0165': 't',\n    '\\u1E6D': 't',\n    '\\u021B': 't',\n    '\\u0163': 't',\n    '\\u1E71': 't',\n    '\\u1E6F': 't',\n    '\\u0167': 't',\n    '\\u01AD': 't',\n    '\\u0288': 't',\n    '\\u2C66': 't',\n    '\\uA787': 't',\n    '\\uA729': 'tz',\n    '\\u24E4': 'u',\n    '\\uFF55': 'u',\n    '\\u00F9': 'u',\n    '\\u00FA': 'u',\n    '\\u00FB': 'u',\n    '\\u0169': 'u',\n    '\\u1E79': 'u',\n    '\\u016B': 'u',\n    '\\u1E7B': 'u',\n    '\\u016D': 'u',\n    '\\u00FC': 'u',\n    '\\u01DC': 'u',\n    '\\u01D8': 'u',\n    '\\u01D6': 'u',\n    '\\u01DA': 'u',\n    '\\u1EE7': 'u',\n    '\\u016F': 'u',\n    '\\u0171': 'u',\n    '\\u01D4': 'u',\n    '\\u0215': 'u',\n    '\\u0217': 'u',\n    '\\u01B0': 'u',\n    '\\u1EEB': 'u',\n    '\\u1EE9': 'u',\n    '\\u1EEF': 'u',\n    '\\u1EED': 'u',\n    '\\u1EF1': 'u',\n    '\\u1EE5': 'u',\n    '\\u1E73': 'u',\n    '\\u0173': 'u',\n    '\\u1E77': 'u',\n    '\\u1E75': 'u',\n    '\\u0289': 'u',\n    '\\u24E5': 'v',\n    '\\uFF56': 'v',\n    '\\u1E7D': 'v',\n    '\\u1E7F': 'v',\n    '\\u028B': 'v',\n    '\\uA75F': 'v',\n    '\\u028C': 'v',\n    '\\uA761': 'vy',\n    '\\u24E6': 'w',\n    '\\uFF57': 'w',\n    '\\u1E81': 'w',\n    '\\u1E83': 'w',\n    '\\u0175': 'w',\n    '\\u1E87': 'w',\n    '\\u1E85': 'w',\n    '\\u1E98': 'w',\n    '\\u1E89': 'w',\n    '\\u2C73': 'w',\n    '\\u24E7': 'x',\n    '\\uFF58': 'x',\n    '\\u1E8B': 'x',\n    '\\u1E8D': 'x',\n    '\\u24E8': 'y',\n    '\\uFF59': 'y',\n    '\\u1EF3': 'y',\n    '\\u00FD': 'y',\n    '\\u0177': 'y',\n    '\\u1EF9': 'y',\n    '\\u0233': 'y',\n    '\\u1E8F': 'y',\n    '\\u00FF': 'y',\n    '\\u1EF7': 'y',\n    '\\u1E99': 'y',\n    '\\u1EF5': 'y',\n    '\\u01B4': 'y',\n    '\\u024F': 'y',\n    '\\u1EFF': 'y',\n    '\\u24E9': 'z',\n    '\\uFF5A': 'z',\n    '\\u017A': 'z',\n    '\\u1E91': 'z',\n    '\\u017C': 'z',\n    '\\u017E': 'z',\n    '\\u1E93': 'z',\n    '\\u1E95': 'z',\n    '\\u01B6': 'z',\n    '\\u0225': 'z',\n    '\\u0240': 'z',\n    '\\u2C6C': 'z',\n    '\\uA763': 'z',\n    '\\u0386': '\\u0391',\n    '\\u0388': '\\u0395',\n    '\\u0389': '\\u0397',\n    '\\u038A': '\\u0399',\n    '\\u03AA': '\\u0399',\n    '\\u038C': '\\u039F',\n    '\\u038E': '\\u03A5',\n    '\\u03AB': '\\u03A5',\n    '\\u038F': '\\u03A9',\n    '\\u03AC': '\\u03B1',\n    '\\u03AD': '\\u03B5',\n    '\\u03AE': '\\u03B7',\n    '\\u03AF': '\\u03B9',\n    '\\u03CA': '\\u03B9',\n    '\\u0390': '\\u03B9',\n    '\\u03CC': '\\u03BF',\n    '\\u03CD': '\\u03C5',\n    '\\u03CB': '\\u03C5',\n    '\\u03B0': '\\u03C5',\n    '\\u03C9': '\\u03C9',\n    '\\u03C2': '\\u03C3'\n};\nDataUtil.fnOperators = {\n    /**\n     * Returns true when the actual input is equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     * @param  {boolean} ignoreAccent?\n     */\n    equal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n        }\n        return actual === expected;\n    },\n    /**\n     * Returns true when the actual input is not equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    notequal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n    },\n    /**\n     * Returns true when the actual input is less than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n        }\n        if (isNullOrUndefined(actual)) {\n            actual = undefined;\n        }\n        return actual < expected;\n    },\n    /**\n     * Returns true when the actual input is greater than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n        }\n        return actual > expected;\n    },\n    /**\n     * Returns true when the actual input is less than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n        }\n        return actual <= expected;\n    },\n    /**\n     * Returns true when the actual input is greater than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n        }\n        return actual >= expected;\n    },\n    /**\n     * Returns true when the actual input contains the given string.\n     * @param  {string|number} actual\n     * @param  {string|number} expected\n     * @param  {boolean} ignoreCase?\n     */\n    contains: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n                DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n        }\n        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n            actual.toString().indexOf(expected) !== -1;\n    },\n    /**\n     * Returns true when the given input value is not null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    notnull: (actual) => {\n        return actual !== null;\n    },\n    /**\n     * Returns true when the given input value is null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    isnull: (actual) => {\n        return actual === null;\n    },\n    /**\n     * Returns true when the actual input starts with the given string\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    startswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.startsWith(actual, expected);\n    },\n    /**\n     * Returns true when the actual input ends with the given string.\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    endswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.endsWith(actual, expected);\n    },\n    /**\n     * It will return the filter operator based on the filter symbol.\n     * @param  {string} operator\n     * @hidden\n     */\n    processSymbols: (operator) => {\n        let fnName = DataUtil.operatorSymbols[operator];\n        if (fnName) {\n            let fn = DataUtil.fnOperators[fnName];\n            return fn;\n        }\n        return DataUtil.throwError('Query - Process Operator : Invalid operator');\n    },\n    /**\n     * It will return the valid filter operator based on the specified operators.\n     * @param  {string} operator\n     * @hidden\n     */\n    processOperator: (operator) => {\n        let fn = DataUtil.fnOperators[operator];\n        if (fn) {\n            return fn;\n        }\n        return DataUtil.fnOperators.processSymbols(operator);\n    }\n};\n/**\n * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n */\nDataUtil.parse = {\n    /**\n     * Parse the given string to the plain JavaScript object.\n     * @param  {string|Object|Object[]} jsonText\n     */\n    parseJson: (jsonText) => {\n        if (typeof jsonText === 'string') {\n            jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n        }\n        else if (jsonText instanceof Array) {\n            DataUtil.parse.iterateAndReviveArray(jsonText);\n        }\n        else if (typeof jsonText === 'object' && jsonText !== null) {\n            DataUtil.parse.iterateAndReviveJson(jsonText);\n        }\n        return jsonText;\n    },\n    /**\n     * It will perform on array of values.\n     * @param  {string[]|Object[]} array\n     * @hidden\n     */\n    iterateAndReviveArray: (array) => {\n        for (let i = 0; i < array.length; i++) {\n            if (typeof array[i] === 'object' && array[i] !== null) {\n                DataUtil.parse.iterateAndReviveJson(array[i]);\n            }\n            else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{(.)+:|\\\"/g.test(array[i])) {\n                array[i] = DataUtil.parse.jsonReviver('', array[i]);\n            }\n            else {\n                array[i] = DataUtil.parse.parseJson(array[i]);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {JSON} json\n     * @hidden\n     */\n    iterateAndReviveJson: (json) => {\n        let value;\n        let keys = Object.keys(json);\n        for (let prop of keys) {\n            if (DataUtil.startsWith(prop, '__')) {\n                continue;\n            }\n            value = json[prop];\n            if (typeof value === 'object') {\n                if (value instanceof Array) {\n                    DataUtil.parse.iterateAndReviveArray(value);\n                }\n                else if (value) {\n                    DataUtil.parse.iterateAndReviveJson(value);\n                }\n            }\n            else {\n                json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {string} field\n     * @param  {string|Date} value\n     * @hidden\n     */\n    jsonReviver: (field, value) => {\n        if (typeof value === 'string') {\n            let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n            let offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;\n            if (ms) {\n                return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);\n            }\n            else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                let isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;\n                let arr = value.split(/[^0-9.]/);\n                if (isUTC) {\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);\n                }\n                else {\n                    let utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));\n                    let hrs = parseInt(arr[6], 10);\n                    let mins = parseInt(arr[7], 10);\n                    if (isNaN(hrs) && isNaN(mins)) {\n                        return utcFormat;\n                    }\n                    if (value.indexOf('+') > -1) {\n                        utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);\n                    }\n                    else {\n                        utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);\n                    }\n                    value = DataUtil.dateParse\n                        .toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);\n                }\n                if (DataUtil.serverTimezoneOffset == null) {\n                    value = DataUtil.dateParse.addSelfOffset(value);\n                }\n            }\n        }\n        return value;\n    },\n    /**\n     * Check wheather the given value is JSON or not.\n     * @param  {Object[]} jsonData\n     */\n    isJson: (jsonData) => {\n        if (typeof jsonData[0] === 'string') {\n            return jsonData;\n        }\n        return DataUtil.parse.parseJson(jsonData);\n    },\n    /**\n     * Checks wheather the given value is GUID or not.\n     * @param  {string} value\n     */\n    isGuid: (value) => {\n        let regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n        let match = regex.exec(value);\n        return match != null;\n    },\n    /**\n     * The method used to replace the value based on the type.\n     * @param  {Object} value\n     * @param  {boolean} stringify\n     * @hidden\n     */\n    replacer: (value, stringify) => {\n        if (DataUtil.isPlainObject(value)) {\n            return DataUtil.parse.jsonReplacer(value, stringify);\n        }\n        if (value instanceof Array) {\n            return DataUtil.parse.arrayReplacer(value);\n        }\n        if (value instanceof Date) {\n            return DataUtil.parse.jsonReplacer({ val: value }, stringify).val;\n        }\n        return value;\n    },\n    /**\n     * It will replace the JSON value.\n     * @param  {string} key\n     * @param  {Object} val\n     * @hidden\n     */\n    jsonReplacer: (val, stringify) => {\n        let value;\n        let keys = Object.keys(val);\n        for (let prop of keys) {\n            value = val[prop];\n            if (!(value instanceof Date)) {\n                continue;\n            }\n            let d = value;\n            if (DataUtil.serverTimezoneOffset == null) {\n                val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();\n            }\n            else {\n                d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);\n                val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Array of value.\n     * @param  {string} key\n     * @param  {Object[]} val\n     * @hidden\n     */\n    arrayReplacer: (val) => {\n        for (let i = 0; i < val.length; i++) {\n            if (DataUtil.isPlainObject(val[i])) {\n                val[i] = DataUtil.parse.jsonReplacer(val[i]);\n            }\n            else if (val[i] instanceof Date) {\n                val[i] = DataUtil.parse.jsonReplacer({ date: val[i] }).date;\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Date object with respective to UTC format value.\n     * @param  {string} key\n     * @param  {any} value\n     * @hidden\n     */\n    /* tslint:disable-next-line:no-any */\n    jsonDateReplacer: (key, value) => {\n        if (key === 'value' && value) {\n            if (typeof value === 'string') {\n                let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n                if (ms) {\n                    value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);\n                }\n                else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                    let arr = value.split(/[^0-9]/);\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);\n                }\n            }\n            if (value instanceof Date) {\n                value = DataUtil.dateParse.addSelfOffset(value);\n                if (DataUtil.serverTimezoneOffset === null) {\n                    return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();\n                }\n                else {\n                    value = DataUtil.dateParse.toTimeZone(value, (((value.getTimezoneOffset() / 60) * 2)\n                        - DataUtil.serverTimezoneOffset), false);\n                    return value.toJSON();\n                }\n            }\n        }\n        return value;\n    }\n};\n/**\n * @hidden\n */\nDataUtil.dateParse = {\n    addSelfOffset: (input) => {\n        return new Date(+input - (input.getTimezoneOffset() * 60000));\n    },\n    toUTC: (input) => {\n        return new Date(+input + (input.getTimezoneOffset() * 60000));\n    },\n    toTimeZone: (input, offset, utc) => {\n        if (offset === null) {\n            return input;\n        }\n        let unix = utc ? DataUtil.dateParse.toUTC(input) : input;\n        return new Date(+unix - (offset * 3600000));\n    },\n    toLocalTime: (input) => {\n        let datefn = input;\n        let timeZone = -datefn.getTimezoneOffset();\n        let differenceString = timeZone >= 0 ? '+' : '-';\n        let localtimefn = (num) => {\n            let norm = Math.floor(Math.abs(num));\n            return (norm < 10 ? '0' : '') + norm;\n        };\n        let val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) +\n            'T' + localtimefn(datefn.getHours()) +\n            ':' + localtimefn(datefn.getMinutes()) +\n            ':' + localtimefn(datefn.getSeconds()) +\n            differenceString + localtimefn(timeZone / 60) +\n            ':' + localtimefn(timeZone % 60);\n        return val;\n    }\n};\n\nconst consts$1 = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\nclass Adaptor {\n    /**\n     * Constructor for Adaptor class\n     * @param  {DataOptions} ds?\n     * @hidden\n     * @returns aggregates\n     */\n    constructor(ds) {\n        // common options for all the adaptors \n        this.options = {\n            from: 'table',\n            requestType: 'json',\n            sortBy: 'sorted',\n            select: 'select',\n            skip: 'skip',\n            group: 'group',\n            take: 'take',\n            search: 'search',\n            count: 'requiresCounts',\n            where: 'where',\n            aggregates: 'aggregates',\n            expand: 'expand'\n        };\n        /**\n         * Specifies the type of adaptor.\n         * @default Adaptor\n         */\n        this.type = Adaptor;\n        this.dataSource = ds;\n        this.pvt = {};\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {Object} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @returns Object\n     */\n    processResponse(data, ds, query, xhr) {\n        return data;\n    }\n}\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\nclass JsonAdaptor extends Adaptor {\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dataManager\n     * @param  {Query} query\n     * @returns Object\n     */\n    processQuery(dataManager, query) {\n        let result = dataManager.dataSource.json.slice(0);\n        let count = result.length;\n        let countFlg = true;\n        let ret;\n        let key;\n        let lazyLoad = {};\n        let keyCount = 0;\n        let group = [];\n        let page;\n        for (let i = 0; i < query.lazyLoad.length; i++) {\n            keyCount++;\n            lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n        }\n        let agg = {};\n        for (let i = 0; i < query.queries.length; i++) {\n            key = query.queries[i];\n            if ((key.fn === 'onPage' || key.fn === 'onGroup') && query.lazyLoad.length) {\n                if (key.fn === 'onGroup') {\n                    group.push(key.e);\n                }\n                if (key.fn === 'onPage') {\n                    page = key.e;\n                }\n                continue;\n            }\n            ret = this[key.fn].call(this, result, key.e, query);\n            if (key.fn === 'onAggregates') {\n                agg[key.e.field + ' - ' + key.e.type] = ret;\n            }\n            else {\n                result = ret !== undefined ? ret : result;\n            }\n            if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n                countFlg = false;\n            }\n            if (countFlg) {\n                count = result.length;\n            }\n        }\n        if (keyCount) {\n            let args = {\n                query: query, lazyLoad: lazyLoad, result: result, group: group, page: page\n            };\n            let lazyLoadData = this.lazyLoadGroup(args);\n            result = lazyLoadData.result;\n            count = lazyLoadData.count;\n        }\n        if (query.isCountRequired) {\n            result = {\n                result: result,\n                count: count,\n                aggregates: agg\n            };\n        }\n        return result;\n    }\n    /**\n     * Perform lazy load grouping in JSON array based on the given query and lazy load details.\n     * @param  {LazyLoadGroupArgs} args\n     */\n    lazyLoadGroup(args) {\n        let count = 0;\n        let agg = this.getAggregate(args.query);\n        let result = args.result;\n        if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {\n            let req = args.lazyLoad.onDemandGroupInfo;\n            for (let i = req.where.length - 1; i >= 0; i--) {\n                result = this.onWhere(result, req.where[i]);\n            }\n            if (args.group.length !== req.level) {\n                let field = args.group[req.level].fieldName;\n                result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n            }\n            count = result.length;\n            let data = result;\n            result = result.slice(req.skip);\n            result = result.slice(0, req.take);\n            if (args.group.length !== req.level) {\n                this.formGroupResult(result, data);\n            }\n        }\n        else {\n            let field = args.group[0].fieldName;\n            result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n            count = result.length;\n            let data = result;\n            if (args.page) {\n                result = this.onPage(result, args.page, args.query);\n            }\n            this.formGroupResult(result, data);\n        }\n        return { result: result, count: count };\n    }\n    formGroupResult(result, data) {\n        if (result.length && data.length) {\n            let uid = 'GroupGuid';\n            let childLevel = 'childLevels';\n            let level = 'level';\n            let records = 'records';\n            result[uid] = data[uid];\n            result[childLevel] = data[childLevel];\n            result[level] = data[level];\n            result[records] = data[records];\n        }\n        return result;\n    }\n    /**\n     * Separate the aggregate query from the given queries\n     * @param  {Query} query\n     */\n    getAggregate(query) {\n        let aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n        let agg = [];\n        if (aggQuery.length) {\n            let tmp;\n            for (let i = 0; i < aggQuery.length; i++) {\n                tmp = aggQuery[i].e;\n                agg.push({ type: tmp.type, field: DataUtil.getValue(tmp.field, query) });\n            }\n        }\n        return agg;\n    }\n    /**\n     * Performs batch update in the JSON array which add, remove and update records.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        let i;\n        let deletedRecordsLen = changes.deletedRecords.length;\n        for (i = 0; i < changes.addedRecords.length; i++) {\n            this.insert(dm, changes.addedRecords[i]);\n        }\n        for (i = 0; i < changes.changedRecords.length; i++) {\n            this.update(dm, e.key, changes.changedRecords[i]);\n        }\n        for (i = 0; i < deletedRecordsLen; i++) {\n            this.remove(dm, e.key, changes.deletedRecords[i]);\n        }\n        return changes;\n    }\n    /**\n     * Performs filter operation with the given data and where query.\n     * @param  {Object[]} ds\n     * @param  {{validate:Function}} e\n     */\n    onWhere(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.filter((obj) => {\n            if (e) {\n                return e.validate(obj);\n            }\n        });\n    }\n    /**\n     * Returns aggregate function based on the aggregate type.\n     * @param  {Object[]} ds\n     * @param  {{field:string} e\n     * @param  {string}} type\n     */\n    onAggregates(ds, e) {\n        let fn = DataUtil.aggregates[e.type];\n        if (!ds || !fn || ds.length === 0) {\n            return null;\n        }\n        return fn(ds, e.field);\n    }\n    /**\n     * Performs search operation based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     */\n    onSearch(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        if (e.fieldNames.length === 0) {\n            DataUtil.getFieldList(ds[0], e.fieldNames);\n        }\n        return ds.filter((obj) => {\n            for (let j = 0; j < e.fieldNames.length; j++) {\n                if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    }\n    /**\n     * Sort the data with given direction and field.\n     * @param  {Object[]} ds\n     * @param  {{comparer:(a:Object} e\n     * @param  {Object} b\n     */\n    onSortBy(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let fnCompare;\n        let field = DataUtil.getValue(e.fieldName, query);\n        if (!field) {\n            return ds.sort(e.comparer);\n        }\n        if (field instanceof Array) {\n            field = field.slice(0);\n            for (let i = field.length - 1; i >= 0; i--) {\n                if (!field[i]) {\n                    continue;\n                }\n                fnCompare = e.comparer;\n                if (DataUtil.endsWith(field[i], ' desc')) {\n                    fnCompare = DataUtil.fnSort('descending');\n                    field[i] = field[i].replace(' desc', '');\n                }\n                ds = DataUtil.sort(ds, field[i], fnCompare);\n            }\n            return ds;\n        }\n        return DataUtil.sort(ds, field, e.comparer);\n    }\n    /**\n     * Group the data based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     * @param  {Query} query\n     */\n    onGroup(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let agg = this.getAggregate(query);\n        return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n    }\n    /**\n     * Retrieves records based on the given page index and size.\n     * @param  {Object[]} ds\n     * @param  {{pageSize:number} e\n     * @param  {number}} pageIndex\n     * @param  {Query} query\n     */\n    onPage(ds, e, query) {\n        let size = DataUtil.getValue(e.pageSize, query);\n        let start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n        let end = start + size;\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(start, end);\n    }\n    /**\n     * Retrieves records based on the given start and end index from query.\n     * @param  {Object[]} ds\n     * @param  {{start:number} e\n     * @param  {number}} end\n     */\n    onRange(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n    }\n    /**\n     * Picks the given count of records from the top of the datasource.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onTake(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(0, DataUtil.getValue(e.nos));\n    }\n    /**\n     * Skips the given count of records from the data source.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onSkip(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.nos));\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {Object[]} ds\n     * @param  {{fieldNames:string}} e\n     */\n    onSelect(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n    }\n    /**\n     * Inserts new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {number} position\n     */\n    insert(dm, data, tableName, query, position) {\n        if (isNullOrUndefined(position)) {\n            return dm.dataSource.json.push(data);\n        }\n        else {\n            return dm.dataSource.json.splice(position, 0, data);\n        }\n    }\n    /**\n     * Remove the data from the dataSource based on the key field value.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    remove(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        if (typeof value === 'object' && !(value instanceof Date)) {\n            value = DataUtil.getObject(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (DataUtil.getObject(keyField, ds[i]) === value) {\n                break;\n            }\n        }\n        return i !== ds.length ? ds.splice(i, 1) : null;\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    update(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        let key;\n        if (!isNullOrUndefined(keyField)) {\n            key = getValue(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (!isNullOrUndefined(keyField) && (getValue(keyField, ds[i])) === key) {\n                break;\n            }\n        }\n        return i < ds.length ? merge(ds[i], value) : null;\n    }\n}\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\nclass UrlAdaptor extends Adaptor {\n    /**\n     * Process the query to generate request body.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns p\n     */\n    // tslint:disable-next-line:max-func-body-length\n    processQuery(dm, query, hierarchyFilters) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let params = query.params;\n        let url = dm.dataSource.url;\n        let temp;\n        let skip;\n        let take = null;\n        let options = this.options;\n        let request = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        // calc Paging & Range\n        if ('onPage' in singles) {\n            temp = singles.onPage;\n            skip = DataUtil.getValue(temp.pageIndex, query);\n            take = DataUtil.getValue(temp.pageSize, query);\n            skip = (skip - 1) * take;\n        }\n        else if ('onRange' in singles) {\n            temp = singles.onRange;\n            skip = temp.start;\n            take = temp.end - temp.start;\n        }\n        // Sorting\n        for (let i = 0; i < queries.sorts.length; i++) {\n            temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n            request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', { name: temp, direction: queries.sorts[i].e.direction }, query));\n        }\n        // hierarchy\n        if (hierarchyFilters) {\n            temp = this.getFiltersFrom(hierarchyFilters, query);\n            if (temp) {\n                request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n            }\n        }\n        // Filters\n        for (let i = 0; i < queries.filters.length; i++) {\n            let res = DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query);\n            if ((this.getModuleName &&\n                this.getModuleName() === 'ODataV4Adaptor') &&\n                !isNullOrUndefined(queries.filters[i].e.key) && queries.filters.length > 1) {\n                res = \"(\" + res + \")\";\n            }\n            request.filters.push(res);\n            let keys = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];\n            for (let prop of keys) {\n                if (DataUtil.isNull((request)[prop])) {\n                    delete request[prop];\n                }\n            }\n        }\n        // Searches\n        for (let i = 0; i < queries.searches.length; i++) {\n            temp = queries.searches[i].e;\n            request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n                fields: temp.fieldNames,\n                operator: temp.operator,\n                key: temp.searchKey,\n                ignoreCase: temp.ignoreCase\n            }, query));\n        }\n        // Grouping\n        for (let i = 0; i < queries.groups.length; i++) {\n            request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));\n        }\n        // aggregates\n        for (let i = 0; i < queries.aggregates.length; i++) {\n            temp = queries.aggregates[i].e;\n            request.aggregates.push({ type: temp.type, field: DataUtil.getValue(temp.field, query) });\n        }\n        let req = {};\n        this.getRequestQuery(options, query, singles, request, req);\n        // Params\n        DataUtil.callAdaptorFunction(this, 'addParams', { dm: dm, query: query, params: params, reqParams: req });\n        if (query.lazyLoad.length) {\n            for (let i = 0; i < query.lazyLoad.length; i++) {\n                req[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n            }\n        }\n        // cleanup\n        let keys = Object.keys(req);\n        for (let prop of keys) {\n            if (DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {\n                delete req[prop];\n            }\n        }\n        if (!(options.skip in req && options.take in req) && take !== null) {\n            req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n            req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n        }\n        let p = this.pvt;\n        this.pvt = {};\n        if (this.options.requestType === 'json') {\n            return {\n                data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),\n                url: url,\n                pvtData: p,\n                type: 'POST',\n                contentType: 'application/json; charset=utf-8'\n            };\n        }\n        temp = this.convertToQueryString(req, query, dm);\n        temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n        return {\n            type: 'GET', url: temp.length ? url.replace(/\\/*$/, temp) : url, pvtData: p\n        };\n    }\n    getRequestQuery(options, query, singles, request, request1) {\n        let param = 'param';\n        let req = request1;\n        req[options.from] = query.fromTable;\n        if (options.apply && query.distincts.length) {\n            req[options.apply] = 'onDistinct' in this ? DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';\n        }\n        if (!query.distincts.length && options.expand) {\n            req[options.expand] = 'onExpand' in this && 'onSelect' in singles ?\n                DataUtil.callAdaptorFunction(this, 'onExpand', { selects: DataUtil.getValue(singles.onSelect.fieldNames, query), expands: query.expands }, query) : query.expands;\n        }\n        req[options.select] = 'onSelect' in singles && !query.distincts.length ?\n            DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n        req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n        req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n        req[options.skip] = 'onSkip' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n        req[options.take] = 'onTake' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n        req[options.where] = request.filters.length || request.searches.length ?\n            DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n        req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n        req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n        req[options.aggregates] = request.aggregates.length ?\n            DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n        req[param] = [];\n    }\n    /**\n     * Convert the object from processQuery to string which can be added query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     */\n    convertToQueryString(request, query, dm) {\n        return '';\n        // this needs to be overridden\n    }\n    /**\n     * Return the data from the data manager processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {\n            let handleTimeZone = DataUtil.timeZoneHandling;\n            if (ds && !ds.timeZoneHandling) {\n                DataUtil.timeZoneHandling = false;\n            }\n            data = DataUtil.parse.parseJson(data);\n            DataUtil.timeZoneHandling = handleTimeZone;\n        }\n        let requests = request;\n        let pvt = requests.pvtData || {};\n        let groupDs = data ? data.groupDs : [];\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        let d = JSON.parse(requests.data);\n        if (d && d.action === 'batch' && data && data.addedRecords) {\n            changes.addedRecords = data.addedRecords;\n            return changes;\n        }\n        if (data && data.d) {\n            data = data.d;\n        }\n        let args = {};\n        if (data && 'count' in data) {\n            args.count = data.count;\n        }\n        args.result = data && data.result ? data.result : data;\n        let isExpand = false;\n        if (Array.isArray(data.result) && data.result.length) {\n            let key = 'key';\n            let val = 'value';\n            let level = 'level';\n            if (!isNullOrUndefined(data.result[0][key])) {\n                args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);\n            }\n            if (query && query.lazyLoad.length && pvt.groups.length) {\n                for (let i = 0; i < query.lazyLoad.length; i++) {\n                    if (query.lazyLoad[i][key] === 'onDemandGroupInfo') {\n                        let value = query.lazyLoad[i][val][level];\n                        if (pvt.groups.length === value) {\n                            isExpand = true;\n                        }\n                    }\n                }\n            }\n        }\n        if (!isExpand) {\n            this.getAggregateResult(pvt, data, args, groupDs, query);\n        }\n        return DataUtil.isNull(args.count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    formRemoteGroupedData(data, level, childLevel) {\n        for (let i = 0; i < data.length; i++) {\n            if (data[i].items.length && Object.keys(data[i].items[0]).indexOf('key') > -1) {\n                this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);\n            }\n        }\n        let uid = 'GroupGuid';\n        let childLvl = 'childLevels';\n        let lvl = 'level';\n        let records = 'records';\n        data[uid] = consts$1[uid];\n        data[lvl] = level;\n        data[childLvl] = childLevel;\n        data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];\n        return data;\n    }\n    getGroupedRecords(data, hasRecords) {\n        let childGroupedRecords = [];\n        let records = 'records';\n        for (let i = 0; i < data.length; i++) {\n            if (!hasRecords) {\n                for (let j = 0; j < data[i].items.length; j++) {\n                    childGroupedRecords.push(data[i].items[j]);\n                }\n            }\n            else {\n                childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);\n            }\n        }\n        return childGroupedRecords;\n    }\n    /**\n     * Add the group query to the adaptor`s option.\n     * @param  {Object[]} e\n     * @returns void\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return e;\n    }\n    /**\n     * Add the aggregate query to the adaptor`s option.\n     * @param  {Aggregates[]} e\n     * @returns void\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let url;\n        let key;\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e[url],\n                key: e[key]\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @returns void\n     */\n    beforeSend(dm, request) {\n        // need to extend this method\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName\n     */\n    insert(dm, data, tableName, query) {\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number|string} value\n     * @param  {string} tableName\n     */\n    remove(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: value,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: value,\n                action: 'update',\n                keyColumn: keyField,\n                key: DataUtil.getObject(keyField, value),\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * To generate the predicate based on the filtered query.\n     * @param  {Object[]|string[]|number[]} data\n     * @param  {Query} query\n     * @hidden\n     */\n    getFiltersFrom(data, query) {\n        let key = query.fKey;\n        let value;\n        let prop = key;\n        let pKey = query.key;\n        let predicats = [];\n        if (typeof data[0] !== 'object') {\n            prop = null;\n        }\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[0] === 'object') {\n                value = DataUtil.getObject(pKey || prop, data[i]);\n            }\n            else {\n                value = data[i];\n            }\n            predicats.push(new Predicate(key, 'equal', value));\n        }\n        return Predicate.or(predicats);\n    }\n    getAggregateResult(pvt, data, args, groupDs, query) {\n        let pData = data;\n        if (data && data.result) {\n            pData = data.result;\n        }\n        if (pvt && pvt.aggregates && pvt.aggregates.length) {\n            let agg = pvt.aggregates;\n            let fn;\n            let aggregateData = pData;\n            let res = {};\n            if (data.aggregate) {\n                aggregateData = data.aggregate;\n            }\n            for (let i = 0; i < agg.length; i++) {\n                fn = DataUtil.aggregates[agg[i].type];\n                if (fn) {\n                    res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n                }\n            }\n            args.aggregates = res;\n        }\n        let key = 'key';\n        let isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);\n        if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {\n            let groups = pvt.groups;\n            for (let i = 0; i < groups.length; i++) {\n                let level = null;\n                if (!isNullOrUndefined(groupDs)) {\n                    groupDs = DataUtil.group(groupDs, groups[i]);\n                }\n                let groupQuery = Query.filterQueries(query.queries, 'onGroup')[i].e;\n                pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);\n            }\n            args.result = pData;\n        }\n        return args;\n    }\n    getQueryRequest(query) {\n        let req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n        req.groups = Query.filterQueries(query.queries, 'onGroup');\n        req.filters = Query.filterQueries(query.queries, 'onWhere');\n        req.searches = Query.filterQueries(query.queries, 'onSearch');\n        req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n        return req;\n    }\n    addParams(options) {\n        let req = options.reqParams;\n        if (options.params.length) {\n            req.params = {};\n        }\n        for (let tmp of options.params) {\n            if (req[tmp.key]) {\n                throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n            }\n            req[tmp.key] = tmp.value;\n            if (tmp.fn) {\n                req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n            }\n            req.params[tmp.key] = req[tmp.key];\n        }\n    }\n}\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\nclass ODataAdaptor extends UrlAdaptor {\n    constructor(props) {\n        super();\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$inlinecount',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PUT'\n        });\n        extend(this.options, props || {});\n    }\n    getModuleName() {\n        return 'ODataAdaptor';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let operator;\n        let guid;\n        let val = predicate.value;\n        let type = typeof val;\n        let field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n        if (val instanceof Date) {\n            val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n        }\n        if (type === 'string') {\n            val = encodeURIComponent(val);\n            val = '\\'' + val + '\\'';\n            if (requiresCast) {\n                field = 'cast(' + field + ', \\'Edm.String\\')';\n            }\n            if (DataUtil.parse.isGuid(val)) {\n                guid = 'guid';\n            }\n            if (predicate.ignoreCase) {\n                if (!guid) {\n                    field = 'tolower(' + field + ')';\n                }\n                val = val.toLowerCase();\n            }\n        }\n        operator = DataUtil.odBiOperator[predicate.operator];\n        if (operator) {\n            returnValue += field;\n            returnValue += operator;\n            if (guid) {\n                returnValue += guid;\n            }\n            return returnValue + val;\n        }\n        if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {\n            operator = DataUtil.odv4UniOperator[predicate.operator];\n        }\n        else {\n            operator = DataUtil.odUniOperator[predicate.operator];\n        }\n        if (operator === 'substringof') {\n            let temp = val;\n            val = field;\n            field = temp;\n        }\n        returnValue += operator + '(';\n        returnValue += field + ',';\n        if (guid) {\n            returnValue += guid;\n        }\n        returnValue += val + ')';\n        return returnValue;\n    }\n    addParams(options) {\n        super.addParams(options);\n        delete options.reqParams.params;\n    }\n    /**\n     * Generate request string based on the multiple filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onComplexPredicate(predicate, query, requiresCast) {\n        let res = [];\n        for (let i = 0; i < predicate.predicates.length; i++) {\n            res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n        }\n        return res.join(' ' + predicate.condition + ' ');\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {Predicate} filter\n     * @param  {boolean} requiresCast?\n     */\n    onEachWhere(filter, query, requiresCast) {\n        return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {string[]} filters\n     */\n    onWhere(filters) {\n        if (this.pvt.search) {\n            filters.push(this.onEachWhere(this.pvt.search, null, true));\n        }\n        return filters.join(' and ');\n    }\n    /**\n     * Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        if (e.fields && e.fields.length === 0) {\n            DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n        }\n        let filter = this.pvt.search || [];\n        for (let i = 0; i < e.fields.length; i++) {\n            filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n        }\n        this.pvt.search = filter;\n    }\n    /**\n     * Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        this.pvt.search = Predicate.or(this.pvt.search);\n        return '';\n    }\n    /**\n     * Generate query string based on multiple sort criteria from query.\n     * @param  {QueryOptions} e\n     */\n    onEachSort(e) {\n        let res = [];\n        if (e.name instanceof Array) {\n            for (let i = 0; i < e.name.length; i++) {\n                res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n            }\n        }\n        else {\n            res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n        }\n        return res.join(',');\n    }\n    /**\n     * Returns sort query string.\n     * @param  {string[]} e\n     */\n    onSortBy(e) {\n        return e.reverse().join(',');\n    }\n    /**\n     * Adds the group query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return [];\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        for (let i = 0; i < e.length; i++) {\n            e[i] = ODataAdaptor.getField(e[i]);\n        }\n        return e.join(',');\n    }\n    /**\n     * Add the aggregate query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n        return '';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'allpages' : '';\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.options.multipartAccept);\n            request.setRequestHeader('DataServiceVersion', '2.0');\n            request.overrideMimeType('text/plain; charset=x-user-defined');\n        }\n        else {\n            request.setRequestHeader('Accept', this.options.accept);\n        }\n        request.setRequestHeader('DataServiceVersion', '2.0');\n        request.setRequestHeader('MaxDataServiceVersion', '2.0');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaCheck = 'odata.metadata';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaCheck]) {\n            let dataUrls = data[metaCheck].split('/$metadata#');\n            this.rootUrl = dataUrls[0];\n            this.resourceTableName = dataUrls[1];\n        }\n        let pvtData = 'pvtData';\n        if (!isNullOrUndefined(data.d)) {\n            let dataCopy = ((query && query.isCountRequired) ? data.d.results : data.d);\n            let metaData = '__metadata';\n            if (!isNullOrUndefined(dataCopy)) {\n                for (let i = 0; i < dataCopy.length; i++) {\n                    if (!isNullOrUndefined(dataCopy[i][metaData])) {\n                        delete dataCopy[i][metaData];\n                    }\n                }\n            }\n        }\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n        let count = null;\n        let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n        if (query && query.isCountRequired) {\n            let oDataCount = '__count';\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n            if (data.d) {\n                data = data.d;\n            }\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n        }\n        if (version === 3 && data.value) {\n            data = data.value;\n        }\n        if (data.d) {\n            data = data.d;\n        }\n        if (version < 3 && data.results) {\n            data = data.results;\n        }\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    /**\n     * Converts the request object to query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     * @returns tableName\n     */\n    convertToQueryString(request, query, dm) {\n        let res = [];\n        let table = 'table';\n        let tableName = request[table] || '';\n        let format = '$format';\n        delete request[table];\n        if (dm.dataSource.requiresFormat) {\n            request[format] = 'json';\n        }\n        let keys = Object.keys(request);\n        for (let prop of keys) {\n            res.push(prop + '=' + request[prop]);\n        }\n        res = res.join('&');\n        if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n            return res;\n        }\n        return res.length ? tableName + '?' + res : tableName || '';\n    }\n    localTimeReplacer(key, convertObj) {\n        for (let prop of !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []) {\n            if ((convertObj[prop] instanceof Date)) {\n                convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);\n            }\n        }\n        return convertObj;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : ''),\n            data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        let url;\n        if (typeof value === 'string' && !DataUtil.parse.isGuid(value)) {\n            url = `('${value}')`;\n        }\n        else {\n            url = `(${value})`;\n        }\n        return {\n            type: 'DELETE',\n            url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url\n        };\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns this\n     */\n    update(dm, keyField, value, tableName, query, original) {\n        if (this.options.updateType === 'PATCH' && !isNullOrUndefined(original)) {\n            value = this.compareAndRemove(value, original, keyField);\n        }\n        let url;\n        if (typeof value[keyField] === 'string' && !DataUtil.parse.isGuid(value[keyField])) {\n            url = `('${value[keyField]}')`;\n        }\n        else {\n            url = `(${value[keyField]})`;\n        }\n        return {\n            type: this.options.updateType,\n            url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url,\n            data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),\n            accept: this.options.accept\n        };\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     * @returns {Object}\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = this.rootUrl ? this.rootUrl + '/' + this.options.batch :\n            dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let args = {\n            url: e.url,\n            key: e.key,\n            cid: 1,\n            cSet: DataUtil.getGuid(this.options.changeSet)\n        };\n        let req = '--' + initialGuid + '\\n';\n        req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n        this.pvt.changeSet = 0;\n        req += this.generateInsertRequest(changes.addedRecords, args, dm);\n        req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);\n        req += this.generateDeleteRequest(changes.deletedRecords, args, dm);\n        req += args.cSet + '--\\n';\n        req += '--' + initialGuid + '--';\n        return {\n            type: 'POST',\n            url: url,\n            dataType: 'json',\n            contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n            data: req\n        };\n    }\n    /**\n     * Generate the string content from the removed records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     * @returns this\n     */\n    generateDeleteRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'DELETE ',\n            'url': (data, i, key) => {\n                let url = DataUtil.getObject(key, data[i]);\n                if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                    return '(' + url + ')';\n                }\n                else if (url instanceof Date) {\n                    let dateTime = data[i][key];\n                    return '(' + dateTime.toJSON() + ')';\n                }\n                else {\n                    return `('${url}')`;\n                }\n            },\n            'data': (data, i) => ''\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req + '\\n';\n    }\n    /**\n     * Generate the string content from the inserted records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateInsertRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'POST ',\n            'url': (data, i, key) => '',\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    /**\n     * Generate the string content from the updated records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateUpdateRequest(arr, e, dm, org) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        arr.forEach((change) => change = this.compareAndRemove(change, org.filter((o) => DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change))[0], e.key));\n        let stat = {\n            'method': this.options.updateType + ' ',\n            'url': (data, i, key) => {\n                if (typeof data[i][key] === 'number' || DataUtil.parse.isGuid(data[i][key])) {\n                    return '(' + data[i][key] + ')';\n                }\n                else if (data[i][key] instanceof Date) {\n                    let date = data[i][key];\n                    return '(' + date.toJSON() + ')';\n                }\n                else {\n                    return `('${data[i][key]}')`;\n                }\n            },\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    static getField(prop) {\n        return prop.replace(/\\./g, '/');\n    }\n    generateBodyContent(arr, e, stat, dm) {\n        let req = '';\n        for (let i = 0; i < arr.length; i++) {\n            req += '\\n' + e.cSet + '\\n';\n            req += this.options.changeSetContent + '\\n\\n';\n            req += stat.method;\n            if (stat.method === 'POST ') {\n                req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {\n                req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'DELETE ') {\n                req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            req += 'Accept: ' + this.options.accept + '\\n';\n            req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n            req += this.options.batchChangeSetContentType + '\\n';\n            if (!isNullOrUndefined(arr[i]['@odata.etag'])) {\n                req += 'If-Match: ' + arr[i]['@odata.etag'] + '\\n\\n';\n                delete arr[i]['@odata.etag'];\n            }\n            else {\n                req += '\\n';\n            }\n            req += stat.data(arr, i);\n        }\n        return req;\n    }\n    processBatchResponse(data, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n            let guid = xhr.getResponseHeader('Content-Type');\n            let cIdx;\n            let jsonObj;\n            let d = data + '';\n            guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n            d = d.split(guid);\n            if (d.length < 2) {\n                return {};\n            }\n            d = d[1];\n            let exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n            if (exVal) {\n                d.replace(exVal[0], '');\n            }\n            let changeGuid = exVal ? exVal[1] : '';\n            d = d.split(changeGuid);\n            for (let i = d.length; i > -1; i--) {\n                if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n                    continue;\n                }\n                cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n                if (changes.addedRecords[cIdx]) {\n                    jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n                    extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n                }\n            }\n            return changes;\n        }\n        return null;\n    }\n    compareAndRemove(data, original, key) {\n        if (isNullOrUndefined(original)) {\n            return data;\n        }\n        Object.keys(data).forEach((prop) => {\n            if (prop !== key && prop !== '@odata.etag') {\n                if (DataUtil.isPlainObject(data[prop])) {\n                    this.compareAndRemove(data[prop], original[prop]);\n                    let final = Object.keys(data[prop]).filter((data) => data !== '@odata.etag');\n                    if (final.length === 0) {\n                        delete data[prop];\n                    }\n                }\n                else if (data[prop] === original[prop]) {\n                    delete data[prop];\n                }\n                else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {\n                    delete data[prop];\n                }\n            }\n        });\n        return data;\n    }\n}\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\nclass ODataV4Adaptor extends ODataAdaptor {\n    constructor(props) {\n        super(props);\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json, text/javascript, */*; q=0.01',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$count',\n            search: '$search',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PATCH',\n            localTime: false,\n            apply: '$apply'\n        });\n        extend(this.options, props || {});\n    }\n    /**\n     * @hidden\n     */\n    getModuleName() {\n        return 'ODataV4Adaptor';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'true' : '';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let val = predicate.value;\n        let isDate = val instanceof Date;\n        if (query instanceof Query) {\n            let queries = this.getQueryRequest(query);\n            for (let i = 0; i < queries.filters.length; i++) {\n                if (queries.filters[i].e.key === predicate.value) {\n                    requiresCast = true;\n                }\n            }\n        }\n        returnValue = super.onPredicate.call(this, predicate, query, requiresCast);\n        if (isDate) {\n            returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n        }\n        if (DataUtil.parse.isGuid(val)) {\n            returnValue = returnValue.replace('guid', '').replace(/'/g, '');\n        }\n        return returnValue;\n    }\n    /**\n     *  Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        let search = this.pvt.searches || [];\n        search.push(e.key);\n        this.pvt.searches = search;\n    }\n    /**\n     *  Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        return this.pvt.searches.join(' OR ');\n    }\n    /**\n     * Returns the expand query string.\n     * @param  {string} e\n     */\n    onExpand(e) {\n        let selected = {};\n        let expanded = {};\n        let expands = e.expands.slice();\n        let exArr = [];\n        let selects = e.selects.filter((item) => item.indexOf('.') > -1);\n        selects.forEach((select) => {\n            let splits = select.split('.');\n            if (!(splits[0] in selected)) {\n                selected[splits[0]] = [];\n            }\n            selected[splits[0]].push(splits[1]);\n        });\n        //Auto expand from select query\n        Object.keys(selected).forEach((expand) => {\n            if ((expands.indexOf(expand) === -1)) {\n                expands.push(expand);\n            }\n        });\n        expands.forEach((expand) => {\n            expanded[expand] = expand in selected ? `${expand}(${this.options.select}=${selected[expand].join(',')})` : expand;\n        });\n        Object.keys(expanded).forEach((ex) => exArr.push(expanded[ex]));\n        return exArr.join(',');\n    }\n    /**\n     * Returns the groupby query string.\n     * @param  {string} e\n     */\n    onDistinct(distinctFields) {\n        let fields = distinctFields.map((field) => ODataAdaptor.getField(field)).join(',');\n        return `groupby((${fields}))`;\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        return super.onSelect(e.filter((item) => item.indexOf('.') === -1));\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {\n            request.setRequestHeader('Prefer', 'return=representation');\n        }\n        request.setRequestHeader('Accept', this.options.accept);\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaName = '@odata.context';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaName]) {\n            let dataUrl = data[metaName].split('/$metadata#');\n            this.rootUrl = dataUrl[0];\n            this.resourceTableName = dataUrl[1];\n        }\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = super.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let count = null;\n        let dataCount = '@odata.count';\n        if (query && query.isCountRequired) {\n            if (dataCount in data) {\n                count = data[dataCount];\n            }\n        }\n        data = !isNullOrUndefined(data.value) ? data.value : data;\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: count, aggregates: args.aggregates };\n    }\n}\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\nclass WebApiAdaptor extends ODataAdaptor {\n    getModuleName() {\n        return 'WebApiAdaptor';\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.url,\n            data: JSON.stringify(data)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        return {\n            type: 'DELETE',\n            url: dm.dataSource.url + '/' + value,\n            data: JSON.stringify(value)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    update(dm, keyField, value, tableName) {\n        return {\n            type: 'PUT',\n            url: dm.dataSource.url,\n            data: JSON.stringify(value)\n        };\n    }\n    batchRequest(dm, changes, e) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let req = [];\n        //insertion\n        for (let i = 0, x = changes.addedRecords.length; i < x; i++) {\n            changes.addedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': 'POST ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //updation \n        for (let i = 0, x = changes.changedRecords.length; i < x; i++) {\n            changes.changedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': this.options.updateType + ' ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //deletion\n        for (let i = 0, x = changes.deletedRecords.length; i < x; i++) {\n            changes.deletedRecords.forEach((j, d) => {\n                let state = {\n                    'mtd': 'DELETE ',\n                    'url': (data, i, key) => {\n                        let url = DataUtil.getObject(key, data[i]);\n                        if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                            return '/' + url;\n                        }\n                        else if (url instanceof Date) {\n                            let datTime = data[i][key];\n                            return '/' + datTime.toJSON();\n                        }\n                        else {\n                            return `/'${url}'`;\n                        }\n                    },\n                    'data': (data, i) => ''\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url)\n                    + state.url(changes.deletedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        req.push('--' + initialGuid + '--', '');\n        return {\n            type: 'POST',\n            url: url,\n            contentType: 'multipart/mixed; boundary=' + initialGuid,\n            data: req.join('\\r\\n')\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let count = null;\n        let args = {};\n        if (request && request.type.toLowerCase() !== 'post') {\n            let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n            let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n            if (query && query.isCountRequired) {\n                if (!DataUtil.isNull(data.Count)) {\n                    count = data.Count;\n                }\n            }\n            if (version < 3 && data.Items) {\n                data = data.Items;\n            }\n            args.count = count;\n            args.result = data;\n            this.getAggregateResult(pvt, data, args, null, query);\n        }\n        args.result = args.result || data;\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n}\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\nclass WebMethodAdaptor extends UrlAdaptor {\n    /**\n     * Prepare the request body based on the query.\n     * The query information can be accessed at the WebMethod using variable named `value`.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns application\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n        let getData = 'data';\n        let data = DataUtil.parse.parseJson(obj[getData]);\n        let result = {};\n        let value = 'value';\n        if (data.param) {\n            for (let i = 0; i < data.param.length; i++) {\n                let param = data.param[i];\n                let key = Object.keys(param)[0];\n                result[key] = param[key];\n            }\n        }\n        result[value] = data;\n        let pvtData = 'pvtData';\n        let url = 'url';\n        return {\n            data: JSON.stringify(result),\n            url: obj[url],\n            pvtData: obj[pvtData],\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8'\n        };\n    }\n}\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\nclass RemoteSaveAdaptor extends JsonAdaptor {\n    /**\n     * @hidden\n     */\n    constructor() {\n        super();\n        setValue('beforeSend', UrlAdaptor.prototype.beforeSend, this);\n    }\n    insert(dm, data, tableName, query, position) {\n        this.pvt.position = position;\n        this.updateType = 'add';\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    remove(dm, keyField, val, tableName, query) {\n        super.remove(dm, keyField, val);\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: val,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    update(dm, keyField, val, tableName, query) {\n        this.updateType = 'update';\n        this.updateKey = keyField;\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: val,\n                action: 'update',\n                keyColumn: keyField,\n                key: val[keyField],\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    processResponse(data, ds, query, xhr, request, changes, e) {\n        let i;\n        let newData = request ? JSON.parse(request.data) : data;\n        data = newData.action === 'batch' ? DataUtil.parse.parseJson(data) : data;\n        if (this.updateType === 'add') {\n            super.insert(ds, data, null, null, this.pvt.position);\n        }\n        if (this.updateType === 'update') {\n            super.update(ds, this.updateKey, data);\n        }\n        this.updateType = undefined;\n        if (data.added) {\n            for (i = 0; i < data.added.length; i++) {\n                super.insert(ds, data.added[i]);\n            }\n        }\n        if (data.changed) {\n            for (i = 0; i < data.changed.length; i++) {\n                super.update(ds, e.key, data.changed[i]);\n            }\n        }\n        if (data.deleted) {\n            for (i = 0; i < data.deleted.length; i++) {\n                super.remove(ds, e.key, data.deleted[i]);\n            }\n        }\n        return data;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * Also perform the changes in the locally cached data to sync with the remote data.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e.url,\n                key: e.key\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    addParams(options) {\n        let urlParams = new UrlAdaptor();\n        urlParams.addParams(options);\n    }\n}\n/**\n * Ajax Adaptor that is extended from URL Adaptor, is used for handle data operations with user defined functions.\n * @hidden\n */\nclass CustomDataAdaptor extends UrlAdaptor {\n    constructor(props) {\n        super();\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            getData: new Function(),\n            addRecord: new Function(),\n            updateRecord: new Function(),\n            deleteRecord: new Function(),\n            batchUpdate: new Function()\n        });\n        extend(this.options, props || {});\n    }\n    getModuleName() {\n        return 'CustomDataAdaptor';\n    }\n}\n/**\n * The GraphqlAdaptor that is extended from URL Adaptor, is used for retrieving data from the Graphql server.\n * It interacts with the Graphql server with all the DataManager Queries and performs CRUD operations.\n * @hidden\n */\nclass GraphQLAdaptor extends UrlAdaptor {\n    getModuleName() {\n        return 'GraphQLAdaptor';\n    }\n    constructor(options) {\n        super();\n        this.opt = options;\n        this.schema = this.opt.response;\n        this.query = this.opt.query;\n        this.getVariables = this.opt.getVariables ? this.opt.getVariables : () => { };\n        this.getQuery = () => this.query;\n    }\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     */\n    processQuery(datamanager, query) {\n        let urlQuery = super.processQuery.apply(this, arguments);\n        let dm = JSON.parse(urlQuery.data);\n        // constructing GraphQL parameters\n        let keys = ['skip', 'take', 'sorted', 'table', 'select', 'where',\n            'search', 'requiresCounts', 'aggregates', 'params'];\n        let temp = {};\n        let str = 'searchwhereparams';\n        keys.filter((e) => {\n            temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];\n        });\n        let vars = this.getVariables() || {};\n        vars['datamanager'] = temp;\n        let data = JSON.stringify({\n            query: this.getQuery(),\n            variables: vars\n        });\n        urlQuery.data = data;\n        return urlQuery;\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @returns DataResult\n     */\n    processResponse(resData, ds, query, xhr, request) {\n        const res = resData;\n        let count;\n        let aggregates;\n        let result = getValue(this.schema.result, res.data);\n        if (this.schema.count) {\n            count = getValue(this.schema.count, res.data);\n        }\n        if (this.schema.aggregates) {\n            aggregates = getValue(this.schema.aggregates, res.data);\n            aggregates = !isNullOrUndefined(aggregates) ? DataUtil.parse.parseJson(aggregates) : aggregates;\n        }\n        let pvt = request.pvtData || {};\n        let args = { result: result, aggregates: aggregates };\n        let data = args;\n        if (pvt && pvt.groups && pvt.groups.length) {\n            this.getAggregateResult(pvt, data, args, null, query);\n        }\n        return !isNullOrUndefined(count) ? { result: args.result, count: count, aggregates: aggregates } : args.result;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     */\n    insert() {\n        let inserted = super.insert.apply(this, arguments);\n        return this.generateCrudData(inserted, 'insert');\n    }\n    /**\n     * Prepare and returns request body which is used to update a new record in the table.\n     */\n    update() {\n        let inserted = super.update.apply(this, arguments);\n        return this.generateCrudData(inserted, 'update');\n    }\n    /**\n     * Prepare and returns request body which is used to remove a new record in the table.\n     */\n    remove() {\n        let inserted = super.remove.apply(this, arguments);\n        return this.generateCrudData(inserted, 'remove');\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     * @param  {Query} query\n     * @param  {Object} original\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let batch = super.batchRequest.apply(this, arguments);\n        let bData = JSON.parse(batch.data);\n        bData.key = e.key;\n        batch.data = JSON.stringify(bData);\n        return this.generateCrudData(batch, 'batch');\n    }\n    generateCrudData(crudData, action) {\n        let parsed = JSON.parse(crudData.data);\n        crudData.data = JSON.stringify({\n            query: this.opt.getMutation(action),\n            variables: parsed\n        });\n        return crudData;\n    }\n}\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\nclass CacheAdaptor extends UrlAdaptor {\n    /**\n     * Constructor for CacheAdaptor class.\n     * @param  {CacheAdaptor} adaptor?\n     * @param  {number} timeStamp?\n     * @param  {number} pageSize?\n     * @hidden\n     */\n    constructor(adaptor, timeStamp, pageSize) {\n        super();\n        this.isCrudAction = false;\n        this.isInsertAction = false;\n        if (!isNullOrUndefined(adaptor)) {\n            this.cacheAdaptor = adaptor;\n        }\n        this.pageSize = pageSize;\n        this.guidId = DataUtil.getGuid('cacheAdaptor');\n        let obj = { keys: [], results: [] };\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        let guid = this.guidId;\n        if (!isNullOrUndefined(timeStamp)) {\n            setInterval(() => {\n                let data;\n                data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n                let forDel = [];\n                for (let i = 0; i < data.results.length; i++) {\n                    let currentTime = +new Date();\n                    let requestTime = +new Date(data.results[i].timeStamp);\n                    data.results[i].timeStamp = currentTime - requestTime;\n                    if (currentTime - requestTime > timeStamp) {\n                        forDel.push(i);\n                    }\n                }\n                for (let i = 0; i < forDel.length; i++) {\n                    data.results.splice(forDel[i], 1);\n                    data.keys.splice(forDel[i], 1);\n                }\n                window.localStorage.removeItem(guid);\n                window.localStorage.setItem(guid, JSON.stringify(data));\n            }, timeStamp);\n        }\n    }\n    /**\n     * It will generate the key based on the URL when we send a request to server.\n     * @param  {string} url\n     * @param  {Query} query?\n     * @hidden\n     */\n    generateKey(url, query) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let key = url;\n        let page = 'onPage';\n        if (page in singles) {\n            key += singles[page].pageIndex;\n        }\n        queries.sorts.forEach((obj) => {\n            key += obj.e.direction + obj.e.fieldName;\n        });\n        queries.groups.forEach((obj) => {\n            key += obj.e.fieldName;\n        });\n        queries.searches.forEach((obj) => {\n            key += obj.e.searchKey;\n        });\n        for (let filter = 0; filter < queries.filters.length; filter++) {\n            let currentFilter = queries.filters[filter];\n            if (currentFilter.e.isComplex) {\n                let newQuery = query.clone();\n                newQuery.queries = [];\n                for (let i = 0; i < currentFilter.e.predicates.length; i++) {\n                    newQuery.queries.push({ fn: 'onWhere', e: currentFilter.e.predicates[i], filter: query.queries.filter });\n                }\n                key += currentFilter.e.condition + this.generateKey(url, newQuery);\n            }\n            else {\n                key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n            }\n        }\n        return key;\n    }\n    /**\n     * Process the query to generate request body.\n     * If the data is already cached, it will return the cached data.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     * @param  {Object[]} hierarchyFilters?\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let key = this.generateKey(dm.dataSource.url, query);\n        let cachedItems;\n        cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n        if (data != null && !this.isCrudAction && !this.isInsertAction) {\n            return data;\n        }\n        this.isCrudAction = null;\n        this.isInsertAction = null;\n        return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (this.isInsertAction || (request && this.cacheAdaptor.options.batch &&\n            DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post')) {\n            return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n        }\n        data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n        let key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n        let obj = {};\n        obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let index = obj.keys.indexOf(key);\n        if (index !== -1) {\n            obj.results.splice(index, 1);\n            obj.keys.splice(index, 1);\n        }\n        obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count };\n        while (obj.results.length > this.pageSize) {\n            obj.results.splice(0, 1);\n            obj.keys.splice(0, 1);\n        }\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        return data;\n    }\n    /**\n     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch)\n            && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n        }\n        if (!dm.dataSource.crossDomain) {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n        }\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.update(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        this.isInsertAction = true;\n        return this.cacheAdaptor.insert(dm, data, tableName);\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        return this.cacheAdaptor.batchRequest(dm, changes, e);\n    }\n}\n\n/**\n * DataManager is used to manage and manipulate relational data.\n */\nclass DataManager {\n    /**\n     * Constructor for DataManager class\n     * @param  {DataOptions|JSON[]} dataSource?\n     * @param  {Query} query?\n     * @param  {AdaptorOptions|string} adaptor?\n     * @hidden\n     */\n    constructor(dataSource, query, adaptor) {\n        /** @hidden */\n        this.dateParse = true;\n        /** @hidden */\n        this.timeZoneHandling = true;\n        this.requests = [];\n        if (!dataSource && !this.dataSource) {\n            dataSource = [];\n        }\n        adaptor = adaptor || dataSource.adaptor;\n        if (dataSource && dataSource.timeZoneHandling === false) {\n            this.timeZoneHandling = dataSource.timeZoneHandling;\n        }\n        let data;\n        if (dataSource instanceof Array) {\n            data = {\n                json: dataSource,\n                offline: true\n            };\n        }\n        else if (typeof dataSource === 'object') {\n            if (!dataSource.json) {\n                dataSource.json = [];\n            }\n            data = {\n                url: dataSource.url,\n                insertUrl: dataSource.insertUrl,\n                removeUrl: dataSource.removeUrl,\n                updateUrl: dataSource.updateUrl,\n                crudUrl: dataSource.crudUrl,\n                batchUrl: dataSource.batchUrl,\n                json: dataSource.json,\n                headers: dataSource.headers,\n                accept: dataSource.accept,\n                data: dataSource.data,\n                timeTillExpiration: dataSource.timeTillExpiration,\n                cachingPageSize: dataSource.cachingPageSize,\n                enableCaching: dataSource.enableCaching,\n                requestType: dataSource.requestType,\n                key: dataSource.key,\n                crossDomain: dataSource.crossDomain,\n                jsonp: dataSource.jsonp,\n                dataType: dataSource.dataType,\n                offline: dataSource.offline !== undefined ? dataSource.offline\n                    : dataSource.adaptor instanceof RemoteSaveAdaptor || dataSource.adaptor instanceof CustomDataAdaptor ?\n                        false : dataSource.url ? false : true,\n                requiresFormat: dataSource.requiresFormat\n            };\n        }\n        else {\n            DataUtil.throwError('DataManager: Invalid arguments');\n        }\n        if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n            data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n        }\n        if (data.dataType === undefined) {\n            data.dataType = 'json';\n        }\n        this.dataSource = data;\n        this.defaultQuery = query;\n        if (data.url && data.offline && !data.json.length) {\n            this.isDataAvailable = false;\n            this.adaptor = adaptor || new ODataAdaptor();\n            this.dataSource.offline = false;\n            this.ready = this.executeQuery(query || new Query());\n            this.ready.then((e) => {\n                this.dataSource.offline = true;\n                this.isDataAvailable = true;\n                data.json = e.result;\n                this.adaptor = new JsonAdaptor();\n            });\n        }\n        else {\n            this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n        }\n        if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n            data.jsonp = 'callback';\n        }\n        this.adaptor = adaptor || this.adaptor;\n        if (data.enableCaching) {\n            this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n        }\n        return this;\n    }\n    /**\n     * Overrides DataManager's default query with given query.\n     * @param  {Query} query - Defines the new default query.\n     */\n    setDefaultQuery(query) {\n        this.defaultQuery = query;\n        return this;\n    }\n    /**\n     * Executes the given query with local data source.\n     * @param  {Query} query - Defines the query to retrieve data.\n     */\n    executeLocal(query) {\n        if (!this.defaultQuery && !(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n        }\n        if (!this.dataSource.json) {\n            DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n        }\n        query = query || this.defaultQuery;\n        let result = this.adaptor.processQuery(this, query);\n        if (query.subQuery) {\n            let from = query.subQuery.fromTable;\n            let lookup = query.subQuery.lookups;\n            let res = query.isCountRequired ? result.result :\n                result;\n            if (lookup && lookup instanceof Array) {\n                DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n            }\n            for (let j = 0; j < res.length; j++) {\n                if (res[j][from] instanceof Array) {\n                    res[j] = extend({}, {}, res[j]);\n                    res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n                }\n            }\n        }\n        return this.adaptor.processResponse(result, this, query);\n    }\n    /**\n     * Executes the given query with either local or remote data source.\n     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n     * @param  {Query|Function} query - Defines the query to retrieve data.\n     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n     */\n    executeQuery(query, done, fail, always) {\n        let makeRequest = 'makeRequest';\n        if (typeof query === 'function') {\n            always = fail;\n            fail = done;\n            done = query;\n            query = null;\n        }\n        if (!query) {\n            query = this.defaultQuery;\n        }\n        if (!(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n        }\n        let deffered = new Deferred();\n        let args = { query: query };\n        if (!this.dataSource.offline && (this.dataSource.url !== undefined && this.dataSource.url !== '')\n            || (!isNullOrUndefined(this.adaptor[makeRequest])) || this.isCustomDataAdaptor(this.adaptor)) {\n            let result = this.adaptor.processQuery(this, query);\n            if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n                this.adaptor[makeRequest](result, deffered, args, query);\n            }\n            else if (!isNullOrUndefined(result.url) || this.isCustomDataAdaptor(this.adaptor)) {\n                this.makeRequest(result, deffered, args, query);\n            }\n            else {\n                args = DataManager.getDeferedArgs(query, result, args);\n                deffered.resolve(args);\n            }\n        }\n        else {\n            DataManager.nextTick(() => {\n                let res = this.executeLocal(query);\n                args = DataManager.getDeferedArgs(query, res, args);\n                deffered.resolve(args);\n            });\n        }\n        if (done || fail) {\n            deffered.promise.then(done, fail);\n        }\n        if (always) {\n            deffered.promise.then(always, always);\n        }\n        return deffered.promise;\n    }\n    static getDeferedArgs(query, result, args) {\n        if (query.isCountRequired) {\n            args.result = result.result;\n            args.count = result.count;\n            args.aggregates = result.aggregates;\n        }\n        else {\n            args.result = result;\n        }\n        return args;\n    }\n    static nextTick(fn) {\n        (window.setImmediate || window.setTimeout)(fn, 0);\n    }\n    extendRequest(url, fnSuccess, fnFail) {\n        return extend({}, {\n            type: 'GET',\n            dataType: this.dataSource.dataType,\n            crossDomain: this.dataSource.crossDomain,\n            jsonp: this.dataSource.jsonp,\n            cache: true,\n            processData: false,\n            onSuccess: fnSuccess,\n            onFailure: fnFail\n        }, url);\n    }\n    // tslint:disable-next-line:max-func-body-length\n    makeRequest(url, deffered, args, query) {\n        let isSelector = !!query.subQuerySelector;\n        let fnFail = (e) => {\n            args.error = e;\n            deffered.reject(args);\n        };\n        let process = (data, count, xhr, request, actual, aggregates, virtualSelectRecords) => {\n            args.xhr = xhr;\n            args.count = count ? parseInt(count.toString(), 10) : 0;\n            args.result = data;\n            args.request = request;\n            args.aggregates = aggregates;\n            args.actual = actual;\n            args.virtualSelectRecords = virtualSelectRecords;\n            deffered.resolve(args);\n        };\n        let fnQueryChild = (data, selector) => {\n            let subDeffer = new Deferred();\n            let childArgs = { parent: args };\n            query.subQuery.isChild = true;\n            let subUrl = this.adaptor.processQuery(this, query.subQuery, data ? this.adaptor.processResponse(data) : selector);\n            let childReq = this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n            if (!isSelector) {\n                subDeffer.then((subData) => {\n                    if (data) {\n                        DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n                        process(data, subData.count, subData.xhr);\n                    }\n                }, fnFail);\n            }\n            return childReq;\n        };\n        let fnSuccess = (data, request) => {\n            if (this.isGraphQLAdaptor(this.adaptor)) {\n                if (!isNullOrUndefined(data['errors'])) {\n                    return fnFail(data['errors'], request);\n                }\n            }\n            if (this.isCustomDataAdaptor(this.adaptor)) {\n                request = extend({}, this.ajaxReqOption, request);\n            }\n            if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && this.dateParse) {\n                data = DataUtil.parse.parseJson(data);\n            }\n            let result = this.adaptor.processResponse(data, this, query, request.httpRequest, request);\n            let count = 0;\n            let aggregates = null;\n            let virtualSelectRecords = 'virtualSelectRecords';\n            let virtualRecords = data[virtualSelectRecords];\n            if (query.isCountRequired) {\n                count = result.count;\n                aggregates = result.aggregates;\n                result = result.result;\n            }\n            if (!query.subQuery) {\n                process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n                return;\n            }\n            if (!isSelector) {\n                fnQueryChild(result, request);\n            }\n        };\n        let req = this.extendRequest(url, fnSuccess, fnFail);\n        if (!this.isCustomDataAdaptor(this.adaptor)) {\n            let ajax = new Ajax(req);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            req = ajax.send();\n            req.catch((e) => true); // to handle failure remote requests.        \n            this.requests.push(ajax);\n        }\n        else {\n            this.ajaxReqOption = req;\n            let request = req;\n            this.adaptor.options.getData({\n                data: request.data,\n                onSuccess: request.onSuccess, onFailure: request.onFailure\n            });\n        }\n        if (isSelector) {\n            let promise;\n            let res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });\n            if (res && res.length) {\n                promise = Promise.all([req, fnQueryChild(null, res)]);\n                promise.then((...args) => {\n                    let result = args[0];\n                    let pResult = this.adaptor.processResponse(result[0], this, query, this.requests[0].httpRequest, this.requests[0]);\n                    let count = 0;\n                    if (query.isCountRequired) {\n                        count = pResult.count;\n                        pResult = pResult.result;\n                    }\n                    let cResult = this.adaptor.processResponse(result[1], this, query.subQuery, this.requests[1].httpRequest, this.requests[1]);\n                    count = 0;\n                    if (query.subQuery.isCountRequired) {\n                        count = cResult.count;\n                        cResult = cResult.result;\n                    }\n                    DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n                    isSelector = false;\n                    process(pResult, count, this.requests[0].httpRequest);\n                });\n            }\n            else {\n                isSelector = false;\n            }\n        }\n        return req;\n    }\n    beforeSend(request, settings) {\n        this.adaptor.beforeSend(this, request, settings);\n        let headers = this.dataSource.headers;\n        let props;\n        for (let i = 0; headers && i < headers.length; i++) {\n            props = [];\n            let keys = Object.keys(headers[i]);\n            for (let prop of keys) {\n                props.push(prop);\n                request.setRequestHeader(prop, headers[i][prop]);\n            }\n        }\n    }\n    /**\n     * Save bulk changes to the given table name.\n     * User can add a new record, edit an existing record, and delete a record at the same time.\n     * If the datasource from remote, then updated in a single post.\n     * @param  {Object} changes - Defines the CrudOptions.\n     * @param  {string} key - Defines the column field.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    saveChanges(changes, key, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let args = {\n            url: tableName,\n            key: key || this.dataSource.key\n        };\n        let req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else if (!this.isCustomDataAdaptor(this.adaptor)) {\n            let deff = new Deferred();\n            let ajax = new Ajax(req);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            ajax.onSuccess = (data, request) => {\n                if (this.isGraphQLAdaptor(this.adaptor)) {\n                    if (!isNullOrUndefined(data['errors'])) {\n                        ajax.onFailure(JSON.stringify(data['errors']));\n                    }\n                }\n                deff.resolve(this.adaptor.processResponse(data, this, null, request.httpRequest, request, changes, args));\n            };\n            ajax.onFailure = (e) => {\n                deff.reject([{ error: e }]);\n            };\n            ajax.send().catch((e) => true); // to handle the failure requests.        \n            return deff.promise;\n        }\n        else {\n            return this.doAjaxRequest(req, this.adaptor.options.batchUpdate);\n        }\n    }\n    /**\n     * Inserts new record in the given table.\n     * @param  {Object} data - Defines the data to insert.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    insert(data, tableName, query, position) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let req = this.adaptor.insert(this, data, tableName, query, position);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else {\n            return this.doAjaxRequest(req, this.adaptor.options.addRecord);\n        }\n    }\n    /**\n     * Removes data from the table with the given key.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    remove(keyField, value, tableName, query) {\n        if (typeof value === 'object') {\n            value = DataUtil.getObject(keyField, value);\n        }\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.remove(this, keyField, value, tableName, query);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            let remove = this.adaptor.options.deleteRecord;\n            return this.doAjaxRequest(res, remove);\n        }\n    }\n    /**\n     * Updates existing record in the given table.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    update(keyField, value, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.update(this, keyField, value, tableName, query, original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            let update = this.adaptor.options.updateRecord;\n            return this.doAjaxRequest(res, update);\n        }\n    }\n    isCustomDataAdaptor(dataSource) {\n        return this.adaptor.getModuleName &&\n            this.adaptor.getModuleName() === 'CustomDataAdaptor';\n    }\n    isGraphQLAdaptor(dataSource) {\n        return this.adaptor.getModuleName &&\n            this.adaptor.getModuleName() === 'GraphQLAdaptor';\n    }\n    successFunc(record, request) {\n        if (this.isGraphQLAdaptor(this.adaptor)) {\n            let data = JSON.parse(record);\n            if (!isNullOrUndefined(data['errors'])) {\n                this.failureFunc(JSON.stringify(data['errors']));\n            }\n        }\n        if (this.isCustomDataAdaptor(this.adaptor)) {\n            request = extend({}, this.ajaxReqOption, request);\n        }\n        try {\n            DataUtil.parse.parseJson(record);\n        }\n        catch (e) {\n            record = [];\n        }\n        record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);\n        this.ajaxDeffered.resolve(record);\n    }\n    ;\n    failureFunc(e) {\n        this.ajaxDeffered.reject([{ error: e }]);\n    }\n    ;\n    doAjaxRequest(res, ajaxFunc) {\n        res = extend({}, {\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8',\n            processData: false\n        }, res);\n        this.ajaxDeffered = new Deferred();\n        if (!this.isCustomDataAdaptor(this.adaptor)) {\n            let ajax = new Ajax(res);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            ajax.onSuccess = this.successFunc.bind(this);\n            ajax.onFailure = this.failureFunc.bind(this);\n            ajax.send().catch((e) => true); // to handle the failure requests.\n        }\n        else {\n            this.ajaxReqOption = res;\n            ajaxFunc.call(this, {\n                data: res.data, onSuccess: this.successFunc.bind(this),\n                onFailure: this.failureFunc.bind(this)\n            });\n        }\n        return this.ajaxDeffered.promise;\n    }\n}\n/**\n * Deferred is used to handle asynchronous operation.\n */\nclass Deferred {\n    constructor() {\n        /**\n         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n         */\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        /**\n         * Defines the callback function triggers when the Deferred object is resolved.\n         */\n        this.then = this.promise.then.bind(this.promise);\n        /**\n         * Defines the callback function triggers when the Deferred object is rejected.\n         */\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n}\n\n/**\n * Data modules\n */\n\nexport { DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CustomDataAdaptor, GraphQLAdaptor, CacheAdaptor, DataUtil };\n"]},"metadata":{},"sourceType":"module"}