{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nimport * as i3 from \"src/app/services/user.service\";\nimport * as i4 from \"src/app/services/sibling.service\";\nimport * as i5 from \"@angular/router\";\nconst host = window.location.hostname;\nconst apiUrl = 'http://' + host + ':9090';\nexport let ServerService = /*#__PURE__*/(() => {\n  class ServerService {\n    constructor(httpClient, cookieService, auth, sibling, router) {\n      this.httpClient = httpClient;\n      this.cookieService = cookieService;\n      this.auth = auth;\n      this.sibling = sibling;\n      this.router = router;\n    }\n\n    getAll(limit, num) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      return this.httpClient.get(`${apiUrl}/dashboard/${limit}/${num}`, httpOptions).pipe();\n    }\n\n    searchField(key, field, limit, num) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      return this.httpClient.get(`${apiUrl}/search/${field}/${key}/${limit}/${num}`, httpOptions).pipe();\n    }\n\n    createServer(server) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      let body = JSON.stringify(server);\n      return this.httpClient.post(`${apiUrl}/addServer`, body, httpOptions).pipe();\n    }\n\n    editServer(detailsServer, id) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      let body = JSON.stringify(detailsServer);\n      return this.httpClient.put(`${apiUrl}/detailsServer/${id}`, body, httpOptions).pipe();\n    }\n\n    changePass(pass, id) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      let body = JSON.stringify(pass);\n      return this.httpClient.put(`${apiUrl}/changePassword/${id}`, body, httpOptions).pipe();\n    }\n\n    deleteSer(id) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      return this.httpClient.delete(`${apiUrl}/delete/${id}`, httpOptions).pipe();\n    }\n\n    disconnect(id) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      return this.httpClient.get(`${apiUrl}/disconnect/${id}`, httpOptions).pipe();\n    }\n\n    connect(con) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      let body = JSON.stringify(con);\n      return this.httpClient.post(`${apiUrl}/connect`, body, httpOptions);\n    }\n\n    checkServerName(serverName) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      return this.httpClient.get(`${apiUrl}/queryname?serverName=${serverName}`, httpOptions).pipe();\n    }\n\n    export(check, limit, num) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      return this.httpClient.get(`${apiUrl}/export?page=${check}&numberPage=${num}&limitPage=${limit}`, httpOptions).pipe();\n    }\n\n  }\n\n  ServerService.ɵfac = function ServerService_Factory(t) {\n    return new (t || ServerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService), i0.ɵɵinject(i3.UserService), i0.ɵɵinject(i4.SiblingService), i0.ɵɵinject(i5.Router));\n  };\n\n  ServerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServerService,\n    factory: ServerService.ɵfac,\n    providedIn: 'root'\n  });\n  return ServerService;\n})();","map":null,"metadata":{},"sourceType":"module"}