{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Pipe, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction NgOtpInputComponent_div_0_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 3, 4);\n    i0.ɵɵlistener(\"paste\", function NgOtpInputComponent_div_0_input_1_Template_input_paste_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.handlePaste($event);\n    })(\"keyup\", function NgOtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const i_r3 = restoredCtx.index;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.onKeyUp($event, i_r3);\n    })(\"input\", function NgOtpInputComponent_div_0_input_1_Template_input_input_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.onInput($event);\n    })(\"keydown\", function NgOtpInputComponent_div_0_input_1_Template_input_keydown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const i_r3 = restoredCtx.index;\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.onKeyDown($event, i_r3);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMapInterpolate1(\"otp-input \", ctx_r1.config.inputClass, \"\");\n    i0.ɵɵpropertyInterpolate2(\"id\", \"otp_\", i_r3, \"_\", ctx_r1.componentKey, \"\");\n    i0.ɵɵproperty(\"pattern\", ctx_r1.config.allowNumbersOnly ? \"\\\\d*\" : \"\")(\"type\", ctx_r1.inputType)(\"placeholder\", (ctx_r1.config == null ? null : ctx_r1.config.placeholder) || \"\")(\"ngStyle\", ctx_r1.config.inputStyles)(\"formControl\", ctx_r1.otpForm.controls[item_r2]);\n  }\n}\n\nfunction NgOtpInputComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, NgOtpInputComponent_div_0_input_1_Template, 2, 10, \"input\", 2);\n    i0.ɵɵpipe(2, \"keys\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"ng-otp-input-wrapper wrapper \", ctx_r0.config.containerClass, \"\");\n    i0.ɵɵpropertyInterpolate1(\"id\", \"c_\", ctx_r0.componentKey, \"\");\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.config.containerStyles);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 6, ctx_r0.otpForm == null ? null : ctx_r0.otpForm.controls));\n  }\n}\n\nclass KeyboardUtil {\n  static ifBackspaceOrDelete(event) {\n    return this.ifKey(event, 'Backspace;Delete;Del');\n  }\n\n  static ifRightArrow(event) {\n    return this.ifKey(event, 'ArrowRight;Right');\n  }\n\n  static ifLeftArrow(event) {\n    return this.ifKey(event, 'ArrowLeft;Left');\n  }\n\n  static ifSpacebar(event) {\n    return this.ifKey(event, 'Spacebar; '); //don't remove the space after ; as this will check for space key\n  }\n\n  static ifKey(event, keys) {\n    let keysToCheck = keys.split(';');\n    return keysToCheck.some(k => k === event.key);\n  }\n\n}\n\nclass KeysPipe {\n  transform(value) {\n    return Object.keys(value);\n  }\n\n}\n/** @nocollapse */\n\n\nKeysPipe.ɵfac = function KeysPipe_Factory(t) {\n  return new (t || KeysPipe)();\n};\n/** @nocollapse */\n\n\nKeysPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"keys\",\n  type: KeysPipe,\n  pure: true\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeysPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'keys'\n    }]\n  }], null, null);\n})();\n\nclass NgOtpInputComponent {\n  constructor(keysPipe) {\n    this.keysPipe = keysPipe;\n    this.config = {\n      length: 4\n    }; // tslint:disable-next-line: no-output-on-prefix\n\n    this.onInputChange = new EventEmitter();\n    this.inputControls = new Array(this.config.length);\n    this.componentKey = Math.random().toString(36).substring(2) + new Date().getTime().toString(36);\n  }\n\n  get inputType() {\n    var _a, _b;\n\n    return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.isPasswordInput) ? 'password' : ((_b = this.config) === null || _b === void 0 ? void 0 : _b.allowNumbersOnly) ? 'tel' : 'text';\n  }\n\n  ngOnInit() {\n    this.otpForm = new FormGroup({});\n\n    for (let index = 0; index < this.config.length; index++) {\n      this.otpForm.addControl(this.getControlName(index), new FormControl());\n    }\n\n    this.otpForm.valueChanges.subscribe(v => {\n      this.keysPipe.transform(this.otpForm.controls).forEach(k => {\n        var val = this.otpForm.controls[k].value;\n\n        if (val && val.length > 1) {\n          if (val.length >= this.config.length) {\n            this.setValue(val);\n          } else {\n            this.rebuildValue();\n          }\n        }\n      });\n    });\n  }\n\n  ngAfterViewInit() {\n    if (!this.config.disableAutoFocus) {\n      const containerItem = document.getElementById(`c_${this.componentKey}`);\n\n      if (containerItem) {\n        const ele = containerItem.getElementsByClassName('otp-input')[0];\n\n        if (ele && ele.focus) {\n          ele.focus();\n        }\n      }\n    }\n  }\n\n  getControlName(idx) {\n    return `ctrl_${idx}`;\n  }\n\n  onKeyDown($event, inputIdx) {\n    if (KeyboardUtil.ifSpacebar($event)) {\n      $event.preventDefault();\n      return false;\n    }\n  }\n\n  onInput($event) {\n    let newVal = this.currentVal ? `${this.currentVal}${$event.target.value}` : $event.target.value;\n\n    if (this.config.allowNumbersOnly && !this.validateNumber(newVal)) {\n      $event.target.value = '';\n      $event.stopPropagation();\n      $event.preventDefault();\n      return;\n    }\n  }\n\n  onKeyUp($event, inputIdx) {\n    const nextInputId = this.appendKey(`otp_${inputIdx + 1}`);\n    const prevInputId = this.appendKey(`otp_${inputIdx - 1}`);\n\n    if (KeyboardUtil.ifRightArrow($event)) {\n      $event.preventDefault();\n      this.setSelected(nextInputId);\n      return;\n    }\n\n    if (KeyboardUtil.ifLeftArrow($event)) {\n      $event.preventDefault();\n      this.setSelected(prevInputId);\n      return;\n    }\n\n    if (KeyboardUtil.ifBackspaceOrDelete($event) && !$event.target.value) {\n      this.setSelected(prevInputId);\n      this.rebuildValue();\n      return;\n    }\n\n    if (!$event.target.value) {\n      return;\n    }\n\n    if (this.ifValidKeyCode($event)) {\n      this.setSelected(nextInputId);\n    }\n\n    this.rebuildValue();\n  }\n\n  validateNumber(val) {\n    return val && /^\\d*\\.?\\d*$/.test(val);\n  }\n\n  appendKey(id) {\n    return `${id}_${this.componentKey}`;\n  }\n\n  setSelected(eleId) {\n    this.focusTo(eleId);\n    const ele = document.getElementById(eleId);\n\n    if (ele && ele.setSelectionRange) {\n      setTimeout(() => {\n        ele.setSelectionRange(0, 1);\n      }, 0);\n    }\n  }\n\n  ifValidKeyCode(event) {\n    const inp = event.key;\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    return isMobile || /[a-zA-Z0-9-_]/.test(inp) || this.config.allowKeyCodes && this.config.allowKeyCodes.includes(event.keyCode);\n  }\n\n  focusTo(eleId) {\n    const ele = document.getElementById(eleId);\n\n    if (ele) {\n      ele.focus();\n    }\n  } // method to set component value\n\n\n  setValue(value) {\n    if (this.config.allowNumbersOnly && isNaN(value)) {\n      return;\n    }\n\n    this.otpForm.reset();\n\n    if (!value) {\n      this.rebuildValue();\n      return;\n    }\n\n    value = value.toString().replace(/\\s/g, ''); // remove whitespace\n\n    Array.from(value).forEach((c, idx) => {\n      if (this.otpForm.get(this.getControlName(idx))) {\n        this.otpForm.get(this.getControlName(idx)).setValue(c);\n      }\n    });\n\n    if (!this.config.disableAutoFocus) {\n      const containerItem = document.getElementById(`c_${this.componentKey}`);\n      var indexOfElementToFocus = value.length < this.config.length ? value.length : this.config.length - 1;\n      let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\n\n      if (ele && ele.focus) {\n        ele.focus();\n      }\n    }\n\n    this.rebuildValue();\n  }\n\n  rebuildValue() {\n    var _a;\n\n    let val = '';\n    this.keysPipe.transform(this.otpForm.controls).forEach(k => {\n      if (this.otpForm.controls[k].value) {\n        let ctrlVal = this.otpForm.controls[k].value;\n        let isLengthExceed = ctrlVal.length > 1;\n        let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\n        ctrlVal = ctrlVal[0];\n        let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\n\n        if (isCaseTransformEnabled && transformedVal == ctrlVal) {\n          isCaseTransformEnabled = false;\n        } else {\n          ctrlVal = transformedVal;\n        }\n\n        val += ctrlVal;\n\n        if (isLengthExceed || isCaseTransformEnabled) {\n          this.otpForm.controls[k].setValue(ctrlVal);\n        }\n      }\n    });\n\n    if ((_a = this.formCtrl) === null || _a === void 0 ? void 0 : _a.setValue) {\n      this.formCtrl.setValue(val);\n    }\n\n    this.onInputChange.emit(val);\n    this.currentVal = val;\n  }\n\n  handlePaste(e) {\n    // Get pasted data via clipboard API\n    let clipboardData = e.clipboardData || window['clipboardData'];\n\n    if (clipboardData) {\n      var pastedData = clipboardData.getData('Text');\n    } // Stop data actually being pasted into div\n\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    if (!pastedData || this.config.allowNumbersOnly && !this.validateNumber(pastedData)) {\n      return;\n    }\n\n    this.setValue(pastedData);\n  }\n\n}\n/** @nocollapse */\n\n\nNgOtpInputComponent.ɵfac = function NgOtpInputComponent_Factory(t) {\n  return new (t || NgOtpInputComponent)(i0.ɵɵdirectiveInject(KeysPipe));\n};\n/** @nocollapse */\n\n\nNgOtpInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgOtpInputComponent,\n  selectors: [[\"ng-otp-input\"]],\n  inputs: {\n    config: \"config\",\n    formCtrl: \"formCtrl\"\n  },\n  outputs: {\n    onInputChange: \"onInputChange\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"class\", \"id\", \"ngStyle\", 4, \"ngIf\"], [3, \"id\", \"ngStyle\"], [\"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"ngStyle\", \"class\", \"formControl\", \"id\", \"paste\", \"keyup\", \"input\", \"keydown\", 4, \"ngFor\", \"ngForOf\"], [\"autocomplete\", \"one-time-code\", 3, \"pattern\", \"type\", \"placeholder\", \"ngStyle\", \"formControl\", \"id\", \"paste\", \"keyup\", \"input\", \"keydown\"], [\"inp\", \"\"]],\n  template: function NgOtpInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgOtpInputComponent_div_0_Template, 3, 8, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.otpForm == null ? null : ctx.otpForm.controls);\n    }\n  },\n  directives: [i2.NgIf, i2.NgStyle, i2.NgForOf, i3.DefaultValueAccessor, i3.PatternValidator, i3.NgControlStatus, i3.FormControlDirective],\n  pipes: [KeysPipe],\n  styles: [\".otp-input[_ngcontent-%COMP%]{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input[_ngcontent-%COMP%]{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input[_ngcontent-%COMP%]{width:30px;font-size:18px;height:30px}}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgOtpInputComponent, [{\n    type: Component,\n    args: [{\n      // tslint:disable-next-line: component-selector\n      selector: 'ng-otp-input',\n      templateUrl: './ng-otp-input.component.html',\n      styleUrls: ['./ng-otp-input.component.scss']\n    }]\n  }], function () {\n    return [{\n      type: KeysPipe\n    }];\n  }, {\n    config: [{\n      type: Input\n    }],\n    onInputChange: [{\n      type: Output\n    }],\n    formCtrl: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NgOtpInputModule {}\n/** @nocollapse */\n\n\nNgOtpInputModule.ɵfac = function NgOtpInputModule_Factory(t) {\n  return new (t || NgOtpInputModule)();\n};\n/** @nocollapse */\n\n\nNgOtpInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgOtpInputModule\n});\n/** @nocollapse */\n\nNgOtpInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [KeysPipe],\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgOtpInputModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule, ReactiveFormsModule],\n      declarations: [NgOtpInputComponent, KeysPipe],\n      exports: [NgOtpInputComponent],\n      providers: [KeysPipe]\n    }]\n  }], null, null);\n})();\n\nclass Config {}\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NgOtpInputComponent, Config as NgOtpInputConfig, NgOtpInputModule };","map":{"version":3,"sources":["/home/unutu/go/src/github.com/thteam47/admin-portal/node_modules/ng-otp-input/fesm2015/ng-otp-input.js"],"names":["i0","Pipe","EventEmitter","Component","Input","Output","NgModule","i3","FormGroup","FormControl","FormsModule","ReactiveFormsModule","i2","CommonModule","KeyboardUtil","ifBackspaceOrDelete","event","ifKey","ifRightArrow","ifLeftArrow","ifSpacebar","keys","keysToCheck","split","some","k","key","KeysPipe","transform","value","Object","ɵfac","ɵpipe","type","args","name","NgOtpInputComponent","constructor","keysPipe","config","length","onInputChange","inputControls","Array","componentKey","Math","random","toString","substring","Date","getTime","inputType","_a","_b","isPasswordInput","allowNumbersOnly","ngOnInit","otpForm","index","addControl","getControlName","valueChanges","subscribe","v","controls","forEach","val","setValue","rebuildValue","ngAfterViewInit","disableAutoFocus","containerItem","document","getElementById","ele","getElementsByClassName","focus","idx","onKeyDown","$event","inputIdx","preventDefault","onInput","newVal","currentVal","target","validateNumber","stopPropagation","onKeyUp","nextInputId","appendKey","prevInputId","setSelected","ifValidKeyCode","test","id","eleId","focusTo","setSelectionRange","setTimeout","inp","isMobile","navigator","userAgent","allowKeyCodes","includes","keyCode","isNaN","reset","replace","from","c","get","indexOfElementToFocus","ctrlVal","isLengthExceed","isCaseTransformEnabled","letterCase","toLocaleLowerCase","transformedVal","toUpperCase","toLowerCase","formCtrl","emit","handlePaste","e","clipboardData","window","pastedData","getData","ɵcmp","NgIf","NgStyle","NgForOf","DefaultValueAccessor","PatternValidator","NgControlStatus","FormControlDirective","selector","templateUrl","styleUrls","NgOtpInputModule","ɵmod","ɵinj","imports","declarations","exports","providers","Config","NgOtpInputConfig"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Pipe, EventEmitter, Component, Input, Output, NgModule } from '@angular/core';\nimport * as i3 from '@angular/forms';\nimport { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass KeyboardUtil {\r\n    static ifBackspaceOrDelete(event) {\r\n        return this.ifKey(event, 'Backspace;Delete;Del');\r\n    }\r\n    static ifRightArrow(event) {\r\n        return this.ifKey(event, 'ArrowRight;Right');\r\n    }\r\n    static ifLeftArrow(event) {\r\n        return this.ifKey(event, 'ArrowLeft;Left');\r\n    }\r\n    static ifSpacebar(event) {\r\n        return this.ifKey(event, 'Spacebar; '); //don't remove the space after ; as this will check for space key\r\n    }\r\n    static ifKey(event, keys) {\r\n        let keysToCheck = keys.split(';');\r\n        return keysToCheck.some(k => k === event.key);\r\n    }\r\n}\n\nclass KeysPipe {\r\n    transform(value) {\r\n        return Object.keys(value);\r\n    }\r\n}\r\n/** @nocollapse */ KeysPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeysPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\r\n/** @nocollapse */ KeysPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeysPipe, name: \"keys\" });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: KeysPipe, decorators: [{\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'keys'\r\n                }]\r\n        }] });\n\nclass NgOtpInputComponent {\r\n    constructor(keysPipe) {\r\n        this.keysPipe = keysPipe;\r\n        this.config = { length: 4 };\r\n        // tslint:disable-next-line: no-output-on-prefix\r\n        this.onInputChange = new EventEmitter();\r\n        this.inputControls = new Array(this.config.length);\r\n        this.componentKey = Math.random()\r\n            .toString(36)\r\n            .substring(2) + new Date().getTime().toString(36);\r\n    }\r\n    get inputType() {\r\n        var _a, _b;\r\n        return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.isPasswordInput)\r\n            ? 'password'\r\n            : ((_b = this.config) === null || _b === void 0 ? void 0 : _b.allowNumbersOnly)\r\n                ? 'tel'\r\n                : 'text';\r\n    }\r\n    ngOnInit() {\r\n        this.otpForm = new FormGroup({});\r\n        for (let index = 0; index < this.config.length; index++) {\r\n            this.otpForm.addControl(this.getControlName(index), new FormControl());\r\n        }\r\n        this.otpForm.valueChanges.subscribe((v) => {\r\n            this.keysPipe.transform(this.otpForm.controls).forEach((k) => {\r\n                var val = this.otpForm.controls[k].value;\r\n                if (val && val.length > 1) {\r\n                    if (val.length >= this.config.length) {\r\n                        this.setValue(val);\r\n                    }\r\n                    else {\r\n                        this.rebuildValue();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ngAfterViewInit() {\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            if (containerItem) {\r\n                const ele = containerItem.getElementsByClassName('otp-input')[0];\r\n                if (ele && ele.focus) {\r\n                    ele.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getControlName(idx) {\r\n        return `ctrl_${idx}`;\r\n    }\r\n    onKeyDown($event, inputIdx) {\r\n        if (KeyboardUtil.ifSpacebar($event)) {\r\n            $event.preventDefault();\r\n            return false;\r\n        }\r\n    }\r\n    onInput($event) {\r\n        let newVal = this.currentVal ? `${this.currentVal}${$event.target.value}` : $event.target.value;\r\n        if (this.config.allowNumbersOnly && !this.validateNumber(newVal)) {\r\n            $event.target.value = '';\r\n            $event.stopPropagation();\r\n            $event.preventDefault();\r\n            return;\r\n        }\r\n    }\r\n    onKeyUp($event, inputIdx) {\r\n        const nextInputId = this.appendKey(`otp_${inputIdx + 1}`);\r\n        const prevInputId = this.appendKey(`otp_${inputIdx - 1}`);\r\n        if (KeyboardUtil.ifRightArrow($event)) {\r\n            $event.preventDefault();\r\n            this.setSelected(nextInputId);\r\n            return;\r\n        }\r\n        if (KeyboardUtil.ifLeftArrow($event)) {\r\n            $event.preventDefault();\r\n            this.setSelected(prevInputId);\r\n            return;\r\n        }\r\n        if (KeyboardUtil.ifBackspaceOrDelete($event) && !$event.target.value) {\r\n            this.setSelected(prevInputId);\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        if (!$event.target.value) {\r\n            return;\r\n        }\r\n        if (this.ifValidKeyCode($event)) {\r\n            this.setSelected(nextInputId);\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    validateNumber(val) {\r\n        return val && /^\\d*\\.?\\d*$/.test(val);\r\n    }\r\n    appendKey(id) {\r\n        return `${id}_${this.componentKey}`;\r\n    }\r\n    setSelected(eleId) {\r\n        this.focusTo(eleId);\r\n        const ele = document.getElementById(eleId);\r\n        if (ele && ele.setSelectionRange) {\r\n            setTimeout(() => {\r\n                ele.setSelectionRange(0, 1);\r\n            }, 0);\r\n        }\r\n    }\r\n    ifValidKeyCode(event) {\r\n        const inp = event.key;\r\n        const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n        return (isMobile ||\r\n            /[a-zA-Z0-9-_]/.test(inp) ||\r\n            (this.config.allowKeyCodes &&\r\n                this.config.allowKeyCodes.includes(event.keyCode)));\r\n    }\r\n    focusTo(eleId) {\r\n        const ele = document.getElementById(eleId);\r\n        if (ele) {\r\n            ele.focus();\r\n        }\r\n    }\r\n    // method to set component value\r\n    setValue(value) {\r\n        if (this.config.allowNumbersOnly && isNaN(value)) {\r\n            return;\r\n        }\r\n        this.otpForm.reset();\r\n        if (!value) {\r\n            this.rebuildValue();\r\n            return;\r\n        }\r\n        value = value.toString().replace(/\\s/g, ''); // remove whitespace\r\n        Array.from(value).forEach((c, idx) => {\r\n            if (this.otpForm.get(this.getControlName(idx))) {\r\n                this.otpForm.get(this.getControlName(idx)).setValue(c);\r\n            }\r\n        });\r\n        if (!this.config.disableAutoFocus) {\r\n            const containerItem = document.getElementById(`c_${this.componentKey}`);\r\n            var indexOfElementToFocus = value.length < this.config.length ? value.length : (this.config.length - 1);\r\n            let ele = containerItem.getElementsByClassName('otp-input')[indexOfElementToFocus];\r\n            if (ele && ele.focus) {\r\n                ele.focus();\r\n            }\r\n        }\r\n        this.rebuildValue();\r\n    }\r\n    rebuildValue() {\r\n        var _a;\r\n        let val = '';\r\n        this.keysPipe.transform(this.otpForm.controls).forEach(k => {\r\n            if (this.otpForm.controls[k].value) {\r\n                let ctrlVal = this.otpForm.controls[k].value;\r\n                let isLengthExceed = ctrlVal.length > 1;\r\n                let isCaseTransformEnabled = !this.config.allowNumbersOnly && this.config.letterCase && (this.config.letterCase.toLocaleLowerCase() == 'upper' || this.config.letterCase.toLocaleLowerCase() == 'lower');\r\n                ctrlVal = ctrlVal[0];\r\n                let transformedVal = isCaseTransformEnabled ? this.config.letterCase.toLocaleLowerCase() == 'upper' ? ctrlVal.toUpperCase() : ctrlVal.toLowerCase() : ctrlVal;\r\n                if (isCaseTransformEnabled && transformedVal == ctrlVal) {\r\n                    isCaseTransformEnabled = false;\r\n                }\r\n                else {\r\n                    ctrlVal = transformedVal;\r\n                }\r\n                val += ctrlVal;\r\n                if (isLengthExceed || isCaseTransformEnabled) {\r\n                    this.otpForm.controls[k].setValue(ctrlVal);\r\n                }\r\n            }\r\n        });\r\n        if ((_a = this.formCtrl) === null || _a === void 0 ? void 0 : _a.setValue) {\r\n            this.formCtrl.setValue(val);\r\n        }\r\n        this.onInputChange.emit(val);\r\n        this.currentVal = val;\r\n    }\r\n    handlePaste(e) {\r\n        // Get pasted data via clipboard API\r\n        let clipboardData = e.clipboardData || window['clipboardData'];\r\n        if (clipboardData) {\r\n            var pastedData = clipboardData.getData('Text');\r\n        }\r\n        // Stop data actually being pasted into div\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        if (!pastedData || (this.config.allowNumbersOnly && !this.validateNumber(pastedData))) {\r\n            return;\r\n        }\r\n        this.setValue(pastedData);\r\n    }\r\n}\r\n/** @nocollapse */ NgOtpInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputComponent, deps: [{ token: KeysPipe }], target: i0.ɵɵFactoryTarget.Component });\r\n/** @nocollapse */ NgOtpInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.16\", type: NgOtpInputComponent, selector: \"ng-otp-input\", inputs: { config: \"config\", formCtrl: \"formCtrl\" }, outputs: { onInputChange: \"onInputChange\" }, ngImport: i0, template: \"<div class=\\\"ng-otp-input-wrapper wrapper {{config.containerClass}}\\\" id=\\\"c_{{componentKey}}\\\" *ngIf=\\\"otpForm?.controls\\\"\\r\\n  [ngStyle]=\\\"config.containerStyles\\\">\\r\\n  <input (paste)=\\\"handlePaste($event)\\\" [pattern]=\\\"config.allowNumbersOnly ? '\\\\\\\\d*' : ''\\\" [type]=\\\"inputType\\\"  [placeholder]=\\\"config?.placeholder || ''\\\"\\r\\n    [ngStyle]=\\\"config.inputStyles\\\" \\r\\n    class=\\\"otp-input {{config.inputClass}}\\\" autocomplete=\\\"one-time-code\\\" *ngFor=\\\"let item of otpForm?.controls | keys;let i=index\\\"\\r\\n    [formControl]=\\\"otpForm.controls[item]\\\" #inp id=\\\"otp_{{i}}_{{componentKey}}\\\" \\r\\n    (keyup)=\\\"onKeyUp($event,i)\\\" (input)=\\\"onInput($event)\\\" (keydown)=\\\"onKeyDown($event,i)\\\" >\\r\\n</div>\", styles: [\".otp-input{width:50px;height:50px;border-radius:4px;border:solid 1px #c5c5c5;text-align:center;font-size:32px}.ng-otp-input-wrapper .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width: 767px){.otp-input{width:40px;font-size:24px;height:40px}}@media screen and (max-width: 420px){.otp-input{width:30px;font-size:18px;height:30px}}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i3.PatternValidator, selector: \"[pattern][formControlName],[pattern][formControl],[pattern][ngModel]\", inputs: [\"pattern\"] }, { type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i3.FormControlDirective, selector: \"[formControl]\", inputs: [\"disabled\", \"formControl\", \"ngModel\"], outputs: [\"ngModelChange\"], exportAs: [\"ngForm\"] }], pipes: { \"keys\": KeysPipe } });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    // tslint:disable-next-line: component-selector\r\n                    selector: 'ng-otp-input',\r\n                    templateUrl: './ng-otp-input.component.html',\r\n                    styleUrls: ['./ng-otp-input.component.scss']\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: KeysPipe }]; }, propDecorators: { config: [{\r\n                type: Input\r\n            }], onInputChange: [{\r\n                type: Output\r\n            }], formCtrl: [{\r\n                type: Input\r\n            }] } });\n\nclass NgOtpInputModule {\r\n}\r\n/** @nocollapse */ NgOtpInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n/** @nocollapse */ NgOtpInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputModule, declarations: [NgOtpInputComponent, KeysPipe], imports: [CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule], exports: [NgOtpInputComponent] });\r\n/** @nocollapse */ NgOtpInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputModule, providers: [KeysPipe], imports: [[\r\n            CommonModule,\r\n            FormsModule,\r\n            ReactiveFormsModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.16\", ngImport: i0, type: NgOtpInputModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        FormsModule,\r\n                        ReactiveFormsModule\r\n                    ],\r\n                    declarations: [NgOtpInputComponent, KeysPipe],\r\n                    exports: [NgOtpInputComponent],\r\n                    providers: [KeysPipe]\r\n                }]\r\n        }] });\n\nclass Config {\r\n}\n\n/*\r\n * Public API Surface of ng-otp-input\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgOtpInputComponent, Config as NgOtpInputConfig, NgOtpInputModule };\n"]},"metadata":{},"sourceType":"module"}