{"ast":null,"code":"import { Component, Event, EventHandler, NotifyPropertyChanges, Observer, Property, SanitizeHtmlHelper, addClass, append, attributes, closest, deleteObject, detach, getInstance, getUniqueID, getValue, isBlazor, isNullOrUndefined, isRippleEnabled, removeClass, rippleEffect, setValue } from '@syncfusion/ej2-base';\n/**\n * Initialize wrapper element for angular.\n *\n * @private\n *\n * @param {CreateElementArgs} createElement - Specifies created element args\n * @param {string} tag - Specifies tag name\n * @param {string} type - Specifies type name\n * @param {HTMLInputElement} element - Specifies input element\n * @param {string} WRAPPER - Specifies wrapper element\n * @param {string} role - Specifies role\n * @returns {HTMLInputElement} - Input Element\n */\n\nfunction wrapperInitialize(createElement, tag, type, element, WRAPPER, role) {\n  let input = element;\n\n  if (element.tagName === tag) {\n    const ejInstance = getValue('ej2_instances', element);\n    input = createElement('input', {\n      attrs: {\n        'type': type\n      }\n    });\n    const props = ['change', 'cssClass', 'label', 'labelPosition', 'id'];\n\n    for (let index = 0, len = element.attributes.length; index < len; index++) {\n      if (props.indexOf(element.attributes[index].nodeName) === -1) {\n        input.setAttribute(element.attributes[index].nodeName, element.attributes[index].nodeValue);\n      }\n    }\n\n    attributes(element, {\n      'class': WRAPPER,\n      'role': role,\n      'aria-checked': 'false'\n    });\n    element.appendChild(input);\n    setValue('ej2_instances', ejInstance, input);\n    deleteObject(element, 'ej2_instances');\n  }\n\n  return input;\n}\n/**\n * Get the text node.\n *\n * @param {HTMLElement} element - Specifies html element\n * @private\n * @returns {Node} - Text node.\n */\n\n\nfunction getTextNode(element) {\n  let node;\n  const childnode = element.childNodes;\n\n  for (let i = 0; i < childnode.length; i++) {\n    node = childnode[i];\n\n    if (node.nodeType === 3) {\n      return node;\n    }\n  }\n\n  return null;\n}\n/**\n * Destroy the button components.\n *\n * @private\n * @param {Switch | CheckBox} ejInst - Specifies eJ2 Instance\n * @param {Element} wrapper - Specifies wrapper element\n * @param {string} tagName - Specifies tag name\n * @returns {void}\n */\n\n\nfunction destroy(ejInst, wrapper, tagName) {\n  if (tagName === 'INPUT') {\n    wrapper.parentNode.insertBefore(ejInst.element, wrapper);\n    detach(wrapper);\n    ejInst.element.checked = false;\n    ['name', 'value', 'disabled'].forEach(key => {\n      ejInst.element.removeAttribute(key);\n    });\n  } else {\n    ['role', 'aria-checked', 'class'].forEach(key => {\n      wrapper.removeAttribute(key);\n    });\n    wrapper.innerHTML = '';\n  }\n}\n/**\n * Initialize control pre rendering.\n *\n * @private\n * @param {Switch | CheckBox} proxy - Specifies proxy\n * @param {string} control - Specifies control\n * @param {string} wrapper - Specifies wrapper element\n * @param {HTMLInputElement} element - Specifies input element\n * @param {string} moduleName - Specifies module name\n * @returns {void}\n */\n\n\nfunction preRender(proxy, control, wrapper, element, moduleName) {\n  element = wrapperInitialize(proxy.createElement, control, 'checkbox', element, wrapper, moduleName);\n  proxy.element = element;\n\n  if (proxy.element.getAttribute('type') !== 'checkbox') {\n    proxy.element.setAttribute('type', 'checkbox');\n  }\n\n  if (!proxy.element.id) {\n    proxy.element.id = getUniqueID('e-' + moduleName);\n  }\n}\n/**\n * Creates CheckBox component UI with theming and ripple support.\n *\n * @private\n * @param {CreateElementArgs} createElement - Specifies Created Element args\n * @param {boolean} enableRipple - Specifies ripple effect\n * @param {CheckBoxUtilModel} options - Specifies Checkbox util Model\n * @returns {Element} - Checkbox Element\n */\n\n\nfunction createCheckBox(createElement, enableRipple = false, options = {}) {\n  const wrapper = createElement('div', {\n    className: 'e-checkbox-wrapper e-css'\n  });\n\n  if (options.cssClass) {\n    addClass([wrapper], options.cssClass.split(' '));\n  }\n\n  if (options.enableRtl) {\n    wrapper.classList.add('e-rtl');\n  }\n\n  if (enableRipple) {\n    const rippleSpan = createElement('span', {\n      className: 'e-ripple-container'\n    });\n    rippleEffect(rippleSpan, {\n      isCenterRipple: true,\n      duration: 400\n    });\n    wrapper.appendChild(rippleSpan);\n  }\n\n  const frameSpan = createElement('span', {\n    className: 'e-frame e-icons'\n  });\n\n  if (options.checked) {\n    frameSpan.classList.add('e-check');\n  }\n\n  wrapper.appendChild(frameSpan);\n\n  if (options.label) {\n    const labelSpan = createElement('span', {\n      className: 'e-label'\n    });\n\n    if (options.disableHtmlEncode) {\n      labelSpan.textContent = options.label;\n    } else {\n      labelSpan.innerHTML = options.label;\n    }\n\n    wrapper.appendChild(labelSpan);\n  }\n\n  return wrapper;\n}\n/**\n * Handles ripple mouse.\n *\n * @private\n * @param {MouseEvent} e - Specifies mouse event\n * @param {Element} rippleSpan - Specifies Ripple span element\n * @returns {void}\n */\n\n\nfunction rippleMouseHandler(e, rippleSpan) {\n  if (rippleSpan) {\n    const event = document.createEvent('MouseEvents');\n    event.initEvent(e.type, false, true);\n    rippleSpan.dispatchEvent(event);\n  }\n}\n/**\n * Append hidden input to given element\n *\n * @private\n * @param {Switch | CheckBox} proxy - Specifies Proxy\n * @param {Element} wrap - Specifies Wrapper ELement\n * @returns {void}\n */\n\n\nfunction setHiddenInput(proxy, wrap) {\n  if (proxy.element.getAttribute('ejs-for')) {\n    wrap.appendChild(proxy.createElement('input', {\n      attrs: {\n        'name': proxy.name || proxy.element.name,\n        'value': 'false',\n        'type': 'hidden'\n      }\n    }));\n  }\n}\n/**\n * Common modules\n */\n\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst buttonObserver = new Observer();\nconst cssClassName = {\n  RTL: 'e-rtl',\n  BUTTON: 'e-btn',\n  PRIMARY: 'e-primary',\n  ICONBTN: 'e-icon-btn'\n};\n/**\n * The Button is a graphical user interface element that triggers an event on its click action. It can contain a text, an image, or both.\n * ```html\n * <button id=\"button\">Button</button>\n * ```\n * ```typescript\n * <script>\n * var btnObj = new Button();\n * btnObj.appendTo(\"#button\");\n * </script>\n * ```\n */\n\nlet Button = /*#__PURE__*/(() => {\n  let Button = class Button extends Component {\n    /**\n     * Constructor for creating the widget\n     *\n     * @param  {ButtonModel} options - Specifies the button model\n     * @param  {string|HTMLButtonElement} element - Specifies the target element\n     */\n    constructor(options, element) {\n      super(options, element);\n    }\n\n    preRender() {// pre render code snippets\n    }\n    /**\n     * Initialize the control rendering\n     *\n     * @returns {void}\n     * @private\n     */\n\n\n    render() {\n      this.initialize();\n      this.removeRippleEffect = rippleEffect(this.element, {\n        selector: '.' + cssClassName.BUTTON\n      });\n      this.renderComplete();\n    }\n\n    initialize() {\n      if (this.cssClass) {\n        addClass([this.element], this.cssClass.split(' '));\n      }\n\n      if (this.isPrimary) {\n        this.element.classList.add(cssClassName.PRIMARY);\n      }\n\n      if (!isBlazor() || isBlazor() && this.getModuleName() !== 'progress-btn') {\n        if (this.content) {\n          const tempContent = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.content) : this.content;\n          this.element.innerHTML = tempContent;\n        }\n\n        this.setIconCss();\n      }\n\n      if (this.enableRtl) {\n        this.element.classList.add(cssClassName.RTL);\n      }\n\n      if (this.disabled) {\n        this.controlStatus(this.disabled);\n      } else {\n        this.wireEvents();\n      }\n    }\n\n    controlStatus(disabled) {\n      this.element.disabled = disabled;\n    }\n\n    setIconCss() {\n      if (this.iconCss) {\n        const span = this.createElement('span', {\n          className: 'e-btn-icon ' + this.iconCss\n        });\n\n        if (!this.element.textContent.trim()) {\n          this.element.classList.add(cssClassName.ICONBTN);\n        } else {\n          span.classList.add('e-icon-' + this.iconPosition.toLowerCase());\n\n          if (this.iconPosition === 'Top' || this.iconPosition === 'Bottom') {\n            this.element.classList.add('e-' + this.iconPosition.toLowerCase() + '-icon-btn');\n          }\n        }\n\n        const node = this.element.childNodes[0];\n\n        if (node && (this.iconPosition === 'Left' || this.iconPosition === 'Top')) {\n          this.element.insertBefore(span, node);\n        } else {\n          this.element.appendChild(span);\n        }\n      }\n    }\n\n    wireEvents() {\n      if (this.isToggle) {\n        EventHandler.add(this.element, 'click', this.btnClickHandler, this);\n      }\n    }\n\n    unWireEvents() {\n      if (this.isToggle) {\n        EventHandler.remove(this.element, 'click', this.btnClickHandler);\n      }\n    }\n\n    btnClickHandler() {\n      if (this.element.classList.contains('e-active')) {\n        this.element.classList.remove('e-active');\n      } else {\n        this.element.classList.add('e-active');\n      }\n    }\n    /**\n     * Destroys the widget.\n     *\n     * @returns {void}\n     */\n\n\n    destroy() {\n      let classList = [cssClassName.PRIMARY, cssClassName.RTL, cssClassName.ICONBTN, 'e-success', 'e-info', 'e-danger', 'e-warning', 'e-flat', 'e-outline', 'e-small', 'e-bigger', 'e-active', 'e-round', 'e-top-icon-btn', 'e-bottom-icon-btn'];\n\n      if (this.cssClass) {\n        classList = classList.concat(this.cssClass.split(' '));\n      }\n\n      super.destroy();\n      removeClass([this.element], classList);\n\n      if (!this.element.getAttribute('class')) {\n        this.element.removeAttribute('class');\n      }\n\n      if (this.disabled) {\n        this.element.removeAttribute('disabled');\n      }\n\n      if (this.content) {\n        this.element.innerHTML = this.element.innerHTML.replace(this.content, '');\n      }\n\n      const span = this.element.querySelector('span.e-btn-icon');\n\n      if (span) {\n        detach(span);\n      }\n\n      this.unWireEvents();\n\n      if (isRippleEnabled) {\n        this.removeRippleEffect();\n      }\n    }\n    /**\n     * Get component name.\n     *\n     * @returns {string} - Module name\n     * @private\n     */\n\n\n    getModuleName() {\n      return 'btn';\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - Persist Data\n     * @private\n     */\n\n\n    getPersistData() {\n      return this.addOnPersist([]);\n    }\n    /**\n     * Dynamically injects the required modules to the component.\n     *\n     * @private\n     * @returns {void}\n     */\n\n\n    static Inject() {// Inject code snippets\n    }\n    /**\n     * Called internally if any of the property value changed.\n     *\n     * @param  {ButtonModel} newProp - Specifies new properties\n     * @param  {ButtonModel} oldProp - Specifies old properties\n     * @returns {void}\n     * @private\n     */\n\n\n    onPropertyChanged(newProp, oldProp) {\n      let span = this.element.querySelector('span.e-btn-icon');\n\n      for (const prop of Object.keys(newProp)) {\n        switch (prop) {\n          case 'isPrimary':\n            if (newProp.isPrimary) {\n              this.element.classList.add(cssClassName.PRIMARY);\n            } else {\n              this.element.classList.remove(cssClassName.PRIMARY);\n            }\n\n            break;\n\n          case 'disabled':\n            this.controlStatus(newProp.disabled);\n            break;\n\n          case 'iconCss':\n            {\n              if (span) {\n                if (newProp.iconCss) {\n                  span.className = 'e-btn-icon ' + newProp.iconCss;\n\n                  if (this.element.textContent.trim()) {\n                    if (this.iconPosition === 'Left') {\n                      span.classList.add('e-icon-left');\n                    } else {\n                      span.classList.add('e-icon-right');\n                    }\n                  }\n                } else {\n                  detach(span);\n                }\n              } else {\n                this.setIconCss();\n              }\n\n              break;\n            }\n\n          case 'iconPosition':\n            removeClass([this.element], ['e-top-icon-btn', 'e-bottom-icon-btn']);\n            span = this.element.querySelector('span.e-btn-icon');\n\n            if (span) {\n              detach(span);\n            }\n\n            this.setIconCss();\n            break;\n\n          case 'cssClass':\n            if (oldProp.cssClass) {\n              removeClass([this.element], oldProp.cssClass.split(' '));\n            }\n\n            if (newProp.cssClass) {\n              addClass([this.element], newProp.cssClass.split(' '));\n            }\n\n            break;\n\n          case 'enableRtl':\n            if (newProp.enableRtl) {\n              this.element.classList.add(cssClassName.RTL);\n            } else {\n              this.element.classList.remove(cssClassName.RTL);\n            }\n\n            break;\n\n          case 'content':\n            {\n              const node = getTextNode(this.element);\n\n              if (!node) {\n                this.element.classList.remove(cssClassName.ICONBTN);\n              }\n\n              if (!isBlazor() || isBlazor() && !this.isServerRendered && this.getModuleName() !== 'progress-btn') {\n                if (this.enableHtmlSanitizer) {\n                  newProp.content = SanitizeHtmlHelper.sanitize(newProp.content);\n                }\n\n                this.element.innerHTML = newProp.content;\n                this.setIconCss();\n              }\n\n              break;\n            }\n\n          case 'isToggle':\n            if (newProp.isToggle) {\n              EventHandler.add(this.element, 'click', this.btnClickHandler, this);\n            } else {\n              EventHandler.remove(this.element, 'click', this.btnClickHandler);\n              removeClass([this.element], ['e-active']);\n            }\n\n            break;\n        }\n      }\n    }\n    /**\n     * Click the button element\n     * its native method\n     *\n     * @public\n     * @returns {void}\n     */\n\n\n    click() {\n      this.element.click();\n    }\n    /**\n     * Sets the focus to Button\n     * its native method\n     *\n     * @public\n     * @returns {void}\n     */\n\n\n    focusIn() {\n      this.element.focus();\n    }\n\n  };\n\n  __decorate([Property('Left')], Button.prototype, \"iconPosition\", void 0);\n\n  __decorate([Property('')], Button.prototype, \"iconCss\", void 0);\n\n  __decorate([Property(false)], Button.prototype, \"disabled\", void 0);\n\n  __decorate([Property(false)], Button.prototype, \"isPrimary\", void 0);\n\n  __decorate([Property('')], Button.prototype, \"cssClass\", void 0);\n\n  __decorate([Property('')], Button.prototype, \"content\", void 0);\n\n  __decorate([Property(false)], Button.prototype, \"isToggle\", void 0);\n\n  __decorate([Property()], Button.prototype, \"locale\", void 0);\n\n  __decorate([Property(false)], Button.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Event()], Button.prototype, \"created\", void 0);\n\n  Button = __decorate([NotifyPropertyChanges], Button);\n  /**\n   * Button modules\n   */\n\n  return Button;\n})();\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst CHECK = 'e-check';\nconst DISABLED = 'e-checkbox-disabled';\nconst FRAME = 'e-frame';\nconst INDETERMINATE = 'e-stop';\nconst LABEL = 'e-label';\nconst RIPPLE = 'e-ripple-container';\nconst RIPPLECHECK = 'e-ripple-check';\nconst RIPPLEINDETERMINATE = 'e-ripple-stop';\nconst RTL = 'e-rtl';\nconst WRAPPER = 'e-checkbox-wrapper';\nconst containerAttr = ['title', 'class', 'style', 'disabled', 'readonly', 'name', 'value'];\n/**\n * The CheckBox is a graphical user interface element that allows you to select one or more options from the choices.\n * It contains checked, unchecked, and indeterminate states.\n * ```html\n * <input type=\"checkbox\" id=\"checkbox\"/>\n * <script>\n * var checkboxObj = new CheckBox({ label: \"Default\" });\n * checkboxObj.appendTo(\"#checkbox\");\n * </script>\n * ```\n */\n\nlet CheckBox = class CheckBox extends Component {\n  /**\n   * Constructor for creating the widget\n   *\n   * @private\n   * @param {CheckBoxModel} options - Specifies checkbox model\n   * @param {string | HTMLInputElement} element - Specifies target element\n   */\n  constructor(options, element) {\n    super(options, element);\n    this.isFocused = false;\n    this.isMouseClick = false;\n  }\n\n  changeState(state) {\n    let ariaState;\n    let rippleSpan;\n    const frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];\n\n    if (isRippleEnabled) {\n      rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n    }\n\n    if (state === 'check') {\n      frameSpan.classList.remove(INDETERMINATE);\n      frameSpan.classList.add(CHECK);\n\n      if (rippleSpan) {\n        rippleSpan.classList.remove(RIPPLEINDETERMINATE);\n        rippleSpan.classList.add(RIPPLECHECK);\n      }\n\n      ariaState = 'true';\n      this.element.checked = true;\n    } else if (state === 'uncheck') {\n      removeClass([frameSpan], [CHECK, INDETERMINATE]);\n\n      if (rippleSpan) {\n        removeClass([rippleSpan], [RIPPLECHECK, RIPPLEINDETERMINATE]);\n      }\n\n      ariaState = 'false';\n      this.element.checked = false;\n    } else {\n      frameSpan.classList.remove(CHECK);\n      frameSpan.classList.add(INDETERMINATE);\n\n      if (rippleSpan) {\n        rippleSpan.classList.remove(RIPPLECHECK);\n        rippleSpan.classList.add(RIPPLEINDETERMINATE);\n      }\n\n      ariaState = 'mixed';\n      this.element.indeterminate = true;\n    }\n\n    this.getWrapper().setAttribute('aria-checked', ariaState);\n  }\n\n  clickHandler(event) {\n    if (this.isMouseClick) {\n      this.focusOutHandler();\n      this.isMouseClick = false;\n    }\n\n    if (this.indeterminate) {\n      this.changeState(this.checked ? 'check' : 'uncheck');\n      this.indeterminate = false;\n      this.element.indeterminate = false;\n    } else if (this.checked) {\n      this.changeState('uncheck');\n      this.checked = false;\n    } else {\n      this.changeState('check');\n      this.checked = true;\n    }\n\n    const changeEventArgs = {\n      checked: this.updateVueArrayModel(false),\n      event: event\n    };\n    this.trigger('change', changeEventArgs);\n    event.stopPropagation();\n  }\n  /**\n   * Destroys the widget.\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    let wrapper = this.getWrapper();\n    super.destroy();\n\n    if (this.wrapper) {\n      wrapper = this.wrapper;\n\n      if (!this.disabled) {\n        this.unWireEvents();\n      }\n\n      if (this.tagName === 'INPUT') {\n        if (this.getWrapper() && wrapper.parentNode) {\n          wrapper.parentNode.insertBefore(this.element, wrapper);\n        }\n\n        detach(wrapper);\n        this.element.checked = false;\n\n        if (this.indeterminate) {\n          this.element.indeterminate = false;\n        }\n\n        ['name', 'value', 'disabled'].forEach(key => {\n          this.element.removeAttribute(key);\n        });\n      } else {\n        ['role', 'aria-checked', 'class'].forEach(key => {\n          wrapper.removeAttribute(key);\n        });\n        wrapper.innerHTML = '';\n      }\n    }\n  }\n\n  focusHandler() {\n    this.isFocused = true;\n  }\n\n  focusOutHandler() {\n    const wrapper = this.getWrapper();\n\n    if (wrapper) {\n      wrapper.classList.remove('e-focus');\n    }\n\n    this.isFocused = false;\n  }\n  /**\n   * Gets the module name.\n   *\n   * @private\n   * @returns {string} - Module Name\n   */\n\n\n  getModuleName() {\n    return 'checkbox';\n  }\n  /**\n   * Gets the properties to be maintained in the persistence state.\n   *\n   * @private\n   * @returns {string} - Persist Data\n   */\n\n\n  getPersistData() {\n    return this.addOnPersist(['checked', 'indeterminate']);\n  }\n\n  getWrapper() {\n    if (this.element && this.element.parentElement) {\n      return this.element.parentElement.parentElement;\n    } else {\n      return null;\n    }\n  }\n\n  initialize() {\n    if (isNullOrUndefined(this.initialCheckedValue)) {\n      this.initialCheckedValue = this.checked;\n    }\n\n    if (this.name) {\n      this.element.setAttribute('name', this.name);\n    }\n\n    if (this.value) {\n      this.element.setAttribute('value', this.value);\n\n      if (this.isVue && typeof this.value === 'boolean' && this.value === true) {\n        this.setProperties({\n          'checked': true\n        }, true);\n      }\n    }\n\n    if (this.checked) {\n      this.changeState('check');\n    }\n\n    if (this.indeterminate) {\n      this.changeState();\n    }\n\n    if (this.disabled) {\n      this.setDisabled();\n    }\n  }\n\n  initWrapper() {\n    let wrapper = this.element.parentElement;\n\n    if (!wrapper.classList.contains(WRAPPER)) {\n      wrapper = this.createElement('div', {\n        className: WRAPPER,\n        attrs: {\n          'role': 'checkbox',\n          'aria-checked': 'false'\n        }\n      });\n      this.element.parentNode.insertBefore(wrapper, this.element);\n    }\n\n    const label = this.createElement('label', {\n      attrs: {\n        for: this.element.id\n      }\n    });\n    const frameSpan = this.createElement('span', {\n      className: 'e-icons ' + FRAME\n    });\n    wrapper.classList.add('e-wrapper');\n\n    if (this.enableRtl) {\n      wrapper.classList.add(RTL);\n    }\n\n    if (this.cssClass) {\n      addClass([wrapper], this.cssClass.split(' '));\n    }\n\n    wrapper.appendChild(label);\n    label.appendChild(this.element);\n    setHiddenInput(this, label);\n    label.appendChild(frameSpan);\n\n    if (isRippleEnabled) {\n      const rippleSpan = this.createElement('span', {\n        className: RIPPLE\n      });\n\n      if (this.labelPosition === 'Before') {\n        label.appendChild(rippleSpan);\n      } else {\n        label.insertBefore(rippleSpan, frameSpan);\n      }\n\n      rippleEffect(rippleSpan, {\n        duration: 400,\n        isCenterRipple: true\n      });\n    }\n\n    if (this.label) {\n      this.setText(this.label);\n    }\n  }\n\n  keyUpHandler() {\n    if (this.isFocused) {\n      this.getWrapper().classList.add('e-focus');\n    }\n  }\n\n  labelMouseDownHandler(e) {\n    this.isMouseClick = true;\n    const rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n    rippleMouseHandler(e, rippleSpan);\n  }\n\n  labelMouseUpHandler(e) {\n    this.isMouseClick = true;\n    const rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];\n\n    if (rippleSpan) {\n      const rippleElem = rippleSpan.querySelectorAll('.e-ripple-element');\n\n      for (let i = 0; i < rippleElem.length - 1; i++) {\n        rippleSpan.removeChild(rippleSpan.childNodes[i]);\n      }\n\n      rippleMouseHandler(e, rippleSpan);\n    }\n  }\n  /**\n   * Called internally if any of the property value changes.\n   *\n   * @private\n   * @param {CheckBoxModel} newProp - Specifies new Properties\n   * @param {CheckBoxModel} oldProp - Specifies old Properties\n   *\n   * @returns {void}\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    const wrapper = this.getWrapper();\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'checked':\n          this.indeterminate = false;\n          this.element.indeterminate = false;\n          this.changeState(newProp.checked ? 'check' : 'uncheck');\n          break;\n\n        case 'indeterminate':\n          if (newProp.indeterminate) {\n            this.changeState();\n          } else {\n            this.element.indeterminate = false;\n            this.changeState(this.checked ? 'check' : 'uncheck');\n          }\n\n          break;\n\n        case 'disabled':\n          if (newProp.disabled) {\n            this.setDisabled();\n            this.wrapper = this.getWrapper();\n            this.unWireEvents();\n          } else {\n            this.element.disabled = false;\n            wrapper.classList.remove(DISABLED);\n            wrapper.setAttribute('aria-disabled', 'false');\n            this.wireEvents();\n          }\n\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([wrapper], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([wrapper], newProp.cssClass.split(' '));\n          }\n\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            wrapper.classList.add(RTL);\n          } else {\n            wrapper.classList.remove(RTL);\n          }\n\n          break;\n\n        case 'label':\n          this.setText(newProp.label);\n          break;\n\n        case 'labelPosition':\n          {\n            const label = wrapper.getElementsByClassName(LABEL)[0];\n            const labelWrap = wrapper.getElementsByTagName('label')[0];\n            detach(label);\n\n            if (newProp.labelPosition === 'After') {\n              labelWrap.appendChild(label);\n            } else {\n              labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);\n            }\n\n            break;\n          }\n\n        case 'name':\n          this.element.setAttribute('name', newProp.name);\n          break;\n\n        case 'value':\n          if (this.isVue && typeof newProp.value === 'object') {\n            break;\n          }\n\n          this.element.setAttribute('value', newProp.value);\n          break;\n\n        case 'htmlAttributes':\n          this.updateHtmlAttributeToWrapper();\n          break;\n      }\n    }\n  }\n  /**\n   * Initialize Angular, React and Unique ID support.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  preRender() {\n    let element = this.element;\n    this.formElement = closest(this.element, 'form');\n    this.tagName = this.element.tagName;\n    element = wrapperInitialize(this.createElement, 'EJS-CHECKBOX', 'checkbox', element, WRAPPER, 'checkbox');\n    this.element = element;\n\n    if (this.element.getAttribute('type') !== 'checkbox') {\n      this.element.setAttribute('type', 'checkbox');\n    }\n\n    if (!this.element.id) {\n      this.element.id = getUniqueID('e-' + this.getModuleName());\n    }\n  }\n  /**\n   * Initialize the control rendering.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  render() {\n    this.initWrapper();\n    this.initialize();\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    this.updateHtmlAttributeToWrapper();\n    this.updateVueArrayModel(true);\n    this.renderComplete();\n    this.wrapper = this.getWrapper();\n  }\n\n  setDisabled() {\n    const wrapper = this.getWrapper();\n    this.element.disabled = true;\n    wrapper.classList.add(DISABLED);\n    wrapper.setAttribute('aria-disabled', 'true');\n  }\n\n  setText(text) {\n    const wrapper = this.getWrapper();\n\n    if (!wrapper) {\n      return;\n    }\n\n    let label = wrapper.getElementsByClassName(LABEL)[0];\n\n    if (label) {\n      label.textContent = text;\n    } else {\n      text = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(text) : text;\n      label = this.createElement('span', {\n        className: LABEL,\n        innerHTML: text\n      });\n      const labelWrap = wrapper.getElementsByTagName('label')[0];\n\n      if (this.labelPosition === 'Before') {\n        labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);\n      } else {\n        labelWrap.appendChild(label);\n      }\n    }\n  }\n\n  changeHandler(e) {\n    e.stopPropagation();\n  }\n\n  formResetHandler() {\n    this.checked = this.initialCheckedValue;\n    this.element.checked = this.initialCheckedValue;\n  }\n\n  unWireEvents() {\n    const wrapper = this.wrapper;\n    EventHandler.remove(this.element, 'click', this.clickHandler);\n    EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n    EventHandler.remove(this.element, 'focus', this.focusHandler);\n    EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n    const label = wrapper.getElementsByTagName('label')[0];\n    EventHandler.remove(label, 'mousedown', this.labelMouseDownHandler);\n    EventHandler.remove(label, 'mouseup', this.labelMouseUpHandler);\n\n    if (this.formElement) {\n      EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n    }\n\n    if (this.tagName === 'EJS-CHECKBOX') {\n      EventHandler.remove(this.element, 'change', this.changeHandler);\n    }\n  }\n\n  wireEvents() {\n    const wrapper = this.getWrapper();\n    EventHandler.add(this.element, 'click', this.clickHandler, this);\n    EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n    EventHandler.add(this.element, 'focus', this.focusHandler, this);\n    EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n    const label = wrapper.getElementsByTagName('label')[0];\n    EventHandler.add(label, 'mousedown', this.labelMouseDownHandler, this);\n    EventHandler.add(label, 'mouseup', this.labelMouseUpHandler, this);\n\n    if (this.formElement) {\n      EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n    }\n\n    if (this.tagName === 'EJS-CHECKBOX') {\n      EventHandler.add(this.element, 'change', this.changeHandler, this);\n    }\n  }\n\n  updateVueArrayModel(init) {\n    if (this.isVue && typeof this.value === 'object') {\n      const value = this.element.value;\n\n      if (value && this.value) {\n        if (init) {\n          for (let i = 0; i < this.value.length; i++) {\n            if (value === this.value[i]) {\n              this.changeState('check');\n              this.setProperties({\n                'checked': true\n              }, true);\n            }\n          }\n        } else {\n          const index = this.value.indexOf(value);\n\n          if (this.checked) {\n            if (index < 0) {\n              this.value.push(value);\n            }\n          } else {\n            if (index > -1) {\n              this.value.splice(index, 1);\n            }\n          } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n          return this.value;\n        }\n      }\n    }\n\n    return this.element.checked;\n  }\n\n  updateHtmlAttributeToWrapper() {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (const key of Object.keys(this.htmlAttributes)) {\n        if (containerAttr.indexOf(key) > -1) {\n          const wrapper = this.getWrapper();\n\n          if (key === 'class') {\n            addClass([wrapper], this.htmlAttributes[key].split(' '));\n          } else if (key === 'title') {\n            wrapper.setAttribute(key, this.htmlAttributes[key]);\n          } else if (key === 'style') {\n            const frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];\n            frameSpan.setAttribute(key, this.htmlAttributes[key]);\n          } else {\n            this.element.setAttribute(key, this.htmlAttributes[key]);\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Click the CheckBox element\n   * its native method\n   *\n   * @public\n   * @returns {void}\n   */\n\n\n  click() {\n    this.element.click();\n  }\n  /**\n   * Sets the focus to CheckBox\n   * its native method\n   *\n   * @public\n   * @returns {void}\n   */\n\n\n  focusIn() {\n    this.element.focus();\n  }\n\n};\n\n__decorate$1([Event()], CheckBox.prototype, \"change\", void 0);\n\n__decorate$1([Event()], CheckBox.prototype, \"created\", void 0);\n\n__decorate$1([Property(false)], CheckBox.prototype, \"checked\", void 0);\n\n__decorate$1([Property('')], CheckBox.prototype, \"cssClass\", void 0);\n\n__decorate$1([Property(false)], CheckBox.prototype, \"disabled\", void 0);\n\n__decorate$1([Property(false)], CheckBox.prototype, \"indeterminate\", void 0);\n\n__decorate$1([Property('')], CheckBox.prototype, \"label\", void 0);\n\n__decorate$1([Property('After')], CheckBox.prototype, \"labelPosition\", void 0);\n\n__decorate$1([Property('')], CheckBox.prototype, \"name\", void 0);\n\n__decorate$1([Property('')], CheckBox.prototype, \"value\", void 0);\n\n__decorate$1([Property(false)], CheckBox.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$1([Property({})], CheckBox.prototype, \"htmlAttributes\", void 0);\n\nCheckBox = __decorate$1([NotifyPropertyChanges], CheckBox);\n/**\n * CheckBox modules\n */\n\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar RadioButton_1;\nconst LABEL$1 = 'e-label';\nconst RIPPLE$1 = 'e-ripple-container';\nconst RTL$1 = 'e-rtl';\nconst WRAPPER$1 = 'e-radio-wrapper';\nconst ATTRIBUTES = ['title', 'class', 'style', 'disabled', 'readonly', 'name', 'value'];\n/**\n * The RadioButton is a graphical user interface element that allows you to select one option from the choices.\n * It contains checked and unchecked states.\n * ```html\n * <input type=\"radio\" id=\"radio\"/>\n * <script>\n * var radioObj = new RadioButton({ label: \"Default\" });\n * radioObj.appendTo(\"#radio\");\n * </script>\n * ```\n */\n\nlet RadioButton = RadioButton_1 = class RadioButton extends Component {\n  /**\n   * Constructor for creating the widget\n   *\n   * @private\n   * @param {RadioButtonModel} options - Specifies Radio button model\n   * @param {string | HTMLInputElement} element - Specifies target element\n   */\n  constructor(options, element) {\n    super(options, element);\n    this.isFocused = false;\n  }\n\n  changeHandler(event) {\n    this.checked = true;\n    this.dataBind();\n    let value = this.element.getAttribute('value');\n    value = this.isVue && value ? this.element.value : this.value;\n    this.trigger('change', {\n      value: value,\n      event: event\n    });\n\n    if (this.tagName === 'EJS-RADIOBUTTON') {\n      event.stopPropagation();\n    }\n  }\n\n  updateChange() {\n    let input;\n    let instance;\n    const radioGrp = this.getRadioGroup();\n\n    for (let i = 0; i < radioGrp.length; i++) {\n      input = radioGrp[i];\n\n      if (input !== this.element) {\n        instance = getInstance(input, RadioButton_1);\n        instance.checked = false;\n\n        if (this.tagName === 'EJS-RADIOBUTTON') {\n          instance.angularValue = this.value;\n        }\n      }\n    }\n  }\n  /**\n   * Destroys the widget.\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    const radioWrap = this.element.parentElement;\n    super.destroy();\n\n    if (!this.disabled) {\n      this.unWireEvents();\n    }\n\n    if (this.tagName === 'INPUT') {\n      if (radioWrap.parentNode) {\n        radioWrap.parentNode.insertBefore(this.element, radioWrap);\n      }\n\n      detach(radioWrap);\n      this.element.checked = false;\n      ['name', 'value', 'disabled'].forEach(key => {\n        this.element.removeAttribute(key);\n      });\n    } else {\n      ['role', 'aria-checked', 'class'].forEach(key => {\n        radioWrap.removeAttribute(key);\n      });\n      radioWrap.innerHTML = '';\n    }\n  }\n\n  focusHandler() {\n    this.isFocused = true;\n  }\n\n  focusOutHandler() {\n    const label = this.getLabel();\n\n    if (label) {\n      label.classList.remove('e-focus');\n    }\n  }\n\n  getModuleName() {\n    return 'radio';\n  }\n  /**\n   * To get the value of selected radio button in a group.\n   *\n   * @method getSelectedValue\n   * @returns {string} - Selected Value\n   */\n\n\n  getSelectedValue() {\n    let input;\n    const radioGrp = this.getRadioGroup();\n\n    for (let i = 0, len = radioGrp.length; i < len; i++) {\n      input = radioGrp[i];\n\n      if (input.checked) {\n        return input.value;\n      }\n    }\n\n    return '';\n  }\n\n  getRadioGroup() {\n    return document.querySelectorAll('input.e-radio[name=\"' + this.element.getAttribute('name') + '\"]');\n  }\n  /**\n   * Gets the properties to be maintained in the persistence state.\n   *\n   * @private\n   * @returns {string} - Persist Data\n   */\n\n\n  getPersistData() {\n    return this.addOnPersist(['checked']);\n  }\n\n  getWrapper() {\n    if (this.element) {\n      return this.element.parentElement;\n    } else {\n      return null;\n    }\n  }\n\n  getLabel() {\n    if (this.element) {\n      return this.element.nextElementSibling;\n    } else {\n      return null;\n    }\n  }\n\n  initialize() {\n    if (isNullOrUndefined(this.initialCheckedValue)) {\n      this.initialCheckedValue = this.checked;\n    }\n\n    this.initWrapper();\n    this.updateHtmlAttribute();\n\n    if (this.name) {\n      this.element.setAttribute('name', this.name);\n    }\n\n    const value = this.element.getAttribute('value');\n\n    if (this.isVue && value && value === this.value) {\n      this.checked = true;\n    }\n\n    if (this.isVue ? this.value && !value : this.value) {\n      this.element.setAttribute('value', this.value);\n    }\n\n    if (this.checked) {\n      this.element.checked = true;\n    }\n\n    if (this.disabled) {\n      this.setDisabled();\n    }\n  }\n\n  initWrapper() {\n    let rippleSpan;\n    let wrapper = this.element.parentElement;\n\n    if (!wrapper.classList.contains(WRAPPER$1)) {\n      wrapper = this.createElement('div', {\n        className: WRAPPER$1\n      });\n      this.element.parentNode.insertBefore(wrapper, this.element);\n    }\n\n    const label = this.createElement('label', {\n      attrs: {\n        for: this.element.id\n      }\n    });\n    wrapper.appendChild(this.element);\n    wrapper.appendChild(label);\n\n    if (isRippleEnabled) {\n      rippleSpan = this.createElement('span', {\n        className: RIPPLE$1\n      });\n      label.appendChild(rippleSpan);\n      rippleEffect(rippleSpan, {\n        duration: 400,\n        isCenterRipple: true\n      });\n    }\n\n    wrapper.classList.add('e-wrapper');\n\n    if (this.enableRtl) {\n      label.classList.add(RTL$1);\n    }\n\n    if (this.cssClass) {\n      addClass([wrapper], this.cssClass.split(' '));\n    }\n\n    if (this.label) {\n      this.setText(this.label);\n    }\n  }\n\n  keyUpHandler() {\n    if (this.isFocused) {\n      this.getLabel().classList.add('e-focus');\n    }\n  }\n\n  labelRippleHandler(e) {\n    const ripple = this.getLabel().getElementsByClassName(RIPPLE$1)[0];\n    rippleMouseHandler(e, ripple);\n  }\n\n  formResetHandler() {\n    this.checked = this.initialCheckedValue;\n\n    if (this.initialCheckedValue) {\n      attributes(this.element, {\n        'checked': 'true'\n      });\n    }\n  }\n  /**\n   * Called internally if any of the property value changes.\n   *\n   * @private\n   * @param {RadioButtonModel} newProp - Specifies New Properties\n   * @param {RadioButtonModel} oldProp - Specifies Old Properties\n   * @returns {void}\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    const wrap = this.getWrapper();\n    const label = this.getLabel();\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'checked':\n          if (newProp.checked) {\n            this.updateChange();\n          }\n\n          this.element.checked = newProp.checked;\n          break;\n\n        case 'disabled':\n          if (newProp.disabled) {\n            this.setDisabled();\n            this.unWireEvents();\n          } else {\n            this.element.disabled = false;\n            this.wireEvents();\n          }\n\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([wrap], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([wrap], newProp.cssClass.split(' '));\n          }\n\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            label.classList.add(RTL$1);\n          } else {\n            label.classList.remove(RTL$1);\n          }\n\n          break;\n\n        case 'label':\n          this.setText(newProp.label);\n          break;\n\n        case 'labelPosition':\n          if (newProp.labelPosition === 'Before') {\n            label.classList.add('e-right');\n          } else {\n            label.classList.remove('e-right');\n          }\n\n          break;\n\n        case 'name':\n          this.element.setAttribute('name', newProp.name);\n          break;\n\n        case 'value':\n          if (!isNullOrUndefined(this.htmlAttributes) && this.htmlAttributes.value) {\n            break;\n          }\n\n          this.element.setAttribute('value', newProp.value);\n          break;\n\n        case 'htmlAttributes':\n          this.updateHtmlAttribute();\n          break;\n      }\n    }\n  }\n  /**\n   * Initialize checked Property, Angular and React and Unique ID support.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  preRender() {\n    let element = this.element;\n    this.formElement = closest(this.element, 'form');\n    this.tagName = this.element.tagName;\n    element = wrapperInitialize(this.createElement, 'EJS-RADIOBUTTON', 'radio', element, WRAPPER$1, 'radio');\n    this.element = element;\n\n    if (this.element.getAttribute('type') !== 'radio') {\n      this.element.setAttribute('type', 'radio');\n    }\n\n    if (!this.element.id) {\n      this.element.id = getUniqueID('e-' + this.getModuleName());\n    }\n\n    if (this.tagName === 'EJS-RADIOBUTTON') {\n      const formControlName = this.element.getAttribute('formcontrolname');\n\n      if (formControlName) {\n        this.setProperties({\n          'name': formControlName\n        }, true);\n        this.element.setAttribute('name', formControlName);\n      }\n    }\n  }\n  /**\n   * Initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  render() {\n    this.initialize();\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    this.renderComplete();\n  }\n\n  setDisabled() {\n    this.element.disabled = true;\n  }\n\n  setText(text) {\n    const label = this.getLabel();\n    let textLabel = label.getElementsByClassName(LABEL$1)[0];\n\n    if (textLabel) {\n      textLabel.textContent = text;\n    } else {\n      text = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(text) : text;\n      textLabel = this.createElement('span', {\n        className: LABEL$1,\n        innerHTML: text\n      });\n      label.appendChild(textLabel);\n    }\n\n    if (this.labelPosition === 'Before') {\n      this.getLabel().classList.add('e-right');\n    } else {\n      this.getLabel().classList.remove('e-right');\n    }\n  }\n\n  updateHtmlAttribute() {\n    if (!isNullOrUndefined(this.htmlAttributes)) {\n      for (const key of Object.keys(this.htmlAttributes)) {\n        if (ATTRIBUTES.indexOf(key) > -1) {\n          const wrapper = this.element.parentElement;\n\n          if (key === 'class') {\n            addClass([wrapper], this.htmlAttributes[key].split(' '));\n          } else if (key === 'title' || key === 'style') {\n            wrapper.setAttribute(key, this.htmlAttributes[key]);\n          } else {\n            this.element.setAttribute(key, this.htmlAttributes[key]);\n          }\n        }\n      }\n    }\n  }\n\n  unWireEvents() {\n    const label = this.getLabel();\n    EventHandler.remove(this.element, 'change', this.changeHandler);\n    EventHandler.remove(this.element, 'focus', this.focusHandler);\n    EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n    EventHandler.remove(this.element, 'keyup', this.keyUpHandler);\n    const rippleLabel = label.getElementsByClassName(LABEL$1)[0];\n\n    if (rippleLabel) {\n      EventHandler.remove(rippleLabel, 'mousedown', this.labelRippleHandler);\n      EventHandler.remove(rippleLabel, 'mouseup', this.labelRippleHandler);\n    }\n\n    if (this.formElement) {\n      EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n    }\n  }\n\n  wireEvents() {\n    const label = this.getLabel();\n    EventHandler.add(this.element, 'change', this.changeHandler, this);\n    EventHandler.add(this.element, 'keyup', this.keyUpHandler, this);\n    EventHandler.add(this.element, 'focus', this.focusHandler, this);\n    EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n    const rippleLabel = label.getElementsByClassName(LABEL$1)[0];\n\n    if (rippleLabel) {\n      EventHandler.add(rippleLabel, 'mousedown', this.labelRippleHandler, this);\n      EventHandler.add(rippleLabel, 'mouseup', this.labelRippleHandler, this);\n    }\n\n    if (this.formElement) {\n      EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n    }\n  }\n  /**\n   * Click the RadioButton element\n   * its native method\n   *\n   * @public\n   * @returns {void}\n   */\n\n\n  click() {\n    this.element.click();\n  }\n  /**\n   * Sets the focus to RadioButton\n   * its native method\n   *\n   * @public\n   * @returns {void}\n   */\n\n\n  focusIn() {\n    this.element.focus();\n  }\n\n};\n\n__decorate$2([Event()], RadioButton.prototype, \"change\", void 0);\n\n__decorate$2([Event()], RadioButton.prototype, \"created\", void 0);\n\n__decorate$2([Property(false)], RadioButton.prototype, \"checked\", void 0);\n\n__decorate$2([Property('')], RadioButton.prototype, \"cssClass\", void 0);\n\n__decorate$2([Property(false)], RadioButton.prototype, \"disabled\", void 0);\n\n__decorate$2([Property('')], RadioButton.prototype, \"label\", void 0);\n\n__decorate$2([Property('After')], RadioButton.prototype, \"labelPosition\", void 0);\n\n__decorate$2([Property('')], RadioButton.prototype, \"name\", void 0);\n\n__decorate$2([Property('')], RadioButton.prototype, \"value\", void 0);\n\n__decorate$2([Property(false)], RadioButton.prototype, \"enableHtmlSanitizer\", void 0);\n\n__decorate$2([Property({})], RadioButton.prototype, \"htmlAttributes\", void 0);\n\nRadioButton = RadioButton_1 = __decorate$2([NotifyPropertyChanges], RadioButton);\n/**\n * RadioButton modules\n */\n\nvar __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst DISABLED$1 = 'e-switch-disabled';\nconst RIPPLE$2 = 'e-ripple-container';\nconst RIPPLE_CHECK = 'e-ripple-check';\nconst RTL$2 = 'e-rtl';\nconst WRAPPER$2 = 'e-switch-wrapper';\nconst ACTIVE = 'e-switch-active';\n/**\n * The Switch is a graphical user interface element that allows you to toggle between checked and unchecked states.\n * ```html\n * <input type=\"checkbox\" id=\"switch\"/>\n * <script>\n * var switchObj = new Switch({});\n * switchObj.appendTo(\"#switch\");\n * </script>\n * ```\n */\n\nlet Switch = class Switch extends Component {\n  /**\n   * Constructor for creating the widget.\n   *\n   * @private\n   *\n   * @param {SwitchModel} options switch model\n   * @param {string | HTMLInputElement} element target element\n   *\n   */\n  constructor(options, element) {\n    super(options, element);\n    this.isFocused = false;\n    this.isDrag = false;\n  }\n\n  changeState(state) {\n    let ariaState;\n    let rippleSpan;\n    const wrapper = this.getWrapper();\n    const bar = wrapper.querySelector('.e-switch-inner');\n    const handle = wrapper.querySelector('.e-switch-handle');\n\n    if (isRippleEnabled) {\n      rippleSpan = wrapper.getElementsByClassName(RIPPLE$2)[0];\n    }\n\n    if (state) {\n      addClass([bar, handle], ACTIVE);\n      ariaState = 'true';\n      this.element.checked = true;\n      this.checked = true;\n\n      if (rippleSpan) {\n        addClass([rippleSpan], [RIPPLE_CHECK]);\n      }\n    } else {\n      removeClass([bar, handle], ACTIVE);\n      ariaState = 'false';\n      this.element.checked = false;\n      this.checked = false;\n\n      if (rippleSpan) {\n        removeClass([rippleSpan], [RIPPLE_CHECK]);\n      }\n    }\n\n    wrapper.setAttribute('aria-checked', ariaState);\n  }\n\n  clickHandler(evt) {\n    this.isDrag = false;\n    this.focusOutHandler();\n    this.changeState(!this.checked);\n    this.element.focus();\n    const changeEventArgs = {\n      checked: this.element.checked,\n      event: evt\n    };\n    this.trigger('change', changeEventArgs);\n  }\n  /**\n   * Destroys the Switch widget.\n   *\n   * @returns {void}\n   */\n\n\n  destroy() {\n    super.destroy();\n\n    if (!this.disabled) {\n      this.unWireEvents();\n    }\n\n    destroy(this, this.getWrapper(), this.tagName);\n  }\n\n  focusHandler() {\n    this.isFocused = true;\n  }\n\n  focusOutHandler() {\n    this.getWrapper().classList.remove('e-focus');\n  }\n  /**\n   * Gets the module name.\n   *\n   * @private\n   * @returns {string} - Module Name\n   */\n\n\n  getModuleName() {\n    return 'switch';\n  }\n  /**\n   * Gets the properties to be maintained in the persistence state.\n   *\n   * @private\n   * @returns {string} - Persist data\n   */\n\n\n  getPersistData() {\n    return this.addOnPersist(['checked']);\n  }\n\n  getWrapper() {\n    return this.element.parentElement;\n  }\n\n  initialize() {\n    if (isNullOrUndefined(this.initialSwitchCheckedValue)) {\n      this.initialSwitchCheckedValue = this.checked;\n    }\n\n    if (this.name) {\n      this.element.setAttribute('name', this.name);\n    }\n\n    if (this.value) {\n      this.element.setAttribute('value', this.value);\n    }\n\n    if (this.checked) {\n      this.changeState(true);\n    }\n\n    if (this.disabled) {\n      this.setDisabled();\n    }\n\n    if (this.onLabel || this.offLabel) {\n      this.setLabel(this.onLabel, this.offLabel);\n    }\n  }\n\n  initWrapper() {\n    let wrapper = this.element.parentElement;\n\n    if (!wrapper.classList.contains(WRAPPER$2)) {\n      wrapper = this.createElement('div', {\n        className: WRAPPER$2,\n        attrs: {\n          'role': 'switch',\n          'aria-checked': 'false'\n        }\n      });\n      this.element.parentNode.insertBefore(wrapper, this.element);\n    }\n\n    const switchInner = this.createElement('span', {\n      className: 'e-switch-inner'\n    });\n    const onLabel = this.createElement('span', {\n      className: 'e-switch-on'\n    });\n    const offLabel = this.createElement('span', {\n      className: 'e-switch-off'\n    });\n    const handle = this.createElement('span', {\n      className: 'e-switch-handle'\n    });\n    wrapper.appendChild(this.element);\n    setHiddenInput(this, wrapper);\n    switchInner.appendChild(onLabel);\n    switchInner.appendChild(offLabel);\n    wrapper.appendChild(switchInner);\n    wrapper.appendChild(handle);\n\n    if (isRippleEnabled) {\n      const rippleSpan = this.createElement('span', {\n        className: RIPPLE$2\n      });\n      handle.appendChild(rippleSpan);\n      rippleEffect(rippleSpan, {\n        duration: 400,\n        isCenterRipple: true\n      });\n    }\n\n    wrapper.classList.add('e-wrapper');\n\n    if (this.enableRtl) {\n      wrapper.classList.add(RTL$2);\n    }\n\n    if (this.cssClass) {\n      addClass([wrapper], this.cssClass.split(' '));\n    }\n  }\n  /**\n   * Called internally if any of the property value changes.\n   *\n   * @private\n   * @param {SwitchModel} newProp - Specifies New Properties\n   * @param {SwitchModel} oldProp - Specifies Old Properties\n   * @returns {void}\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    const wrapper = this.getWrapper();\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'checked':\n          this.changeState(newProp.checked);\n          break;\n\n        case 'disabled':\n          if (newProp.disabled) {\n            this.setDisabled();\n            this.unWireEvents();\n          } else {\n            this.element.disabled = false;\n            wrapper.classList.remove(DISABLED$1);\n            wrapper.setAttribute('aria-disabled', 'false');\n            this.wireEvents();\n          }\n\n          break;\n\n        case 'value':\n          this.element.setAttribute('value', newProp.value);\n          break;\n\n        case 'name':\n          this.element.setAttribute('name', newProp.name);\n          break;\n\n        case 'onLabel':\n        case 'offLabel':\n          this.setLabel(newProp.onLabel, newProp.offLabel);\n          break;\n\n        case 'enableRtl':\n          if (newProp.enableRtl) {\n            wrapper.classList.add(RTL$2);\n          } else {\n            wrapper.classList.remove(RTL$2);\n          }\n\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([wrapper], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([wrapper], newProp.cssClass.split(' '));\n          }\n\n          break;\n      }\n    }\n  }\n  /**\n   * Initialize Angular, React and Unique ID support.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  preRender() {\n    const element = this.element;\n    this.formElement = closest(this.element, 'form');\n    this.tagName = this.element.tagName;\n    preRender(this, 'EJS-SWITCH', WRAPPER$2, element, this.getModuleName());\n  }\n  /**\n   * Initialize control rendering.\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  render() {\n    this.initWrapper();\n    this.initialize();\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    this.renderComplete();\n  }\n\n  rippleHandler(e) {\n    const rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];\n    rippleMouseHandler(e, rippleSpan);\n\n    if (e.type === 'mousedown' && e.currentTarget.classList.contains('e-switch-wrapper') && e.which === 1) {\n      this.isDrag = true;\n      this.isFocused = false;\n    }\n  }\n\n  rippleTouchHandler(eventType) {\n    const rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE$2)[0];\n\n    if (rippleSpan) {\n      const event = document.createEvent('MouseEvents');\n      event.initEvent(eventType, false, true);\n      rippleSpan.dispatchEvent(event);\n    }\n  }\n\n  setDisabled() {\n    const wrapper = this.getWrapper();\n    this.element.disabled = true;\n    wrapper.classList.add(DISABLED$1);\n    wrapper.setAttribute('aria-disabled', 'true');\n  }\n\n  setLabel(onText, offText) {\n    const wrapper = this.getWrapper();\n\n    if (onText) {\n      wrapper.querySelector('.e-switch-on').textContent = onText;\n    }\n\n    if (offText) {\n      wrapper.querySelector('.e-switch-off').textContent = offText;\n    }\n  }\n\n  switchFocusHandler() {\n    if (this.isFocused) {\n      this.getWrapper().classList.add('e-focus');\n    }\n  }\n\n  switchMouseUp(e) {\n    const target = e.target;\n\n    if (e.type === 'touchmove') {\n      e.preventDefault();\n    }\n\n    if (e.type === 'touchstart') {\n      this.isDrag = true;\n      this.rippleTouchHandler('mousedown');\n    }\n\n    if (this.isDrag) {\n      if (e.type === 'mouseup' && target.className.indexOf('e-switch') < 0 || e.type === 'touchend') {\n        this.clickHandler(e);\n        this.rippleTouchHandler('mouseup');\n        e.preventDefault();\n      }\n    }\n  }\n\n  formResetHandler() {\n    this.checked = this.initialSwitchCheckedValue;\n    this.element.checked = this.initialSwitchCheckedValue;\n  }\n  /**\n   * Toggle the Switch component state into checked/unchecked.\n   *\n   * @returns {void}\n   */\n\n\n  toggle() {\n    this.clickHandler();\n  }\n\n  wireEvents() {\n    const wrapper = this.getWrapper();\n    this.delegateMouseUpHandler = this.switchMouseUp.bind(this);\n    this.delegateKeyUpHandler = this.switchFocusHandler.bind(this);\n    EventHandler.add(wrapper, 'click', this.clickHandler, this);\n    EventHandler.add(this.element, 'focus', this.focusHandler, this);\n    EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n    EventHandler.add(this.element, 'mouseup', this.delegateMouseUpHandler, this);\n    EventHandler.add(this.element, 'keyup', this.delegateKeyUpHandler, this);\n    EventHandler.add(wrapper, 'mousedown mouseup', this.rippleHandler, this);\n    EventHandler.add(wrapper, 'touchstart touchmove touchend', this.switchMouseUp, this);\n\n    if (this.formElement) {\n      EventHandler.add(this.formElement, 'reset', this.formResetHandler, this);\n    }\n  }\n\n  unWireEvents() {\n    const wrapper = this.getWrapper();\n    EventHandler.remove(wrapper, 'click', this.clickHandler);\n    EventHandler.remove(this.element, 'focus', this.focusHandler);\n    EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n    EventHandler.remove(this.element, 'mouseup', this.delegateMouseUpHandler);\n    EventHandler.remove(this.element, 'keyup', this.delegateKeyUpHandler);\n    EventHandler.remove(wrapper, 'mousedown mouseup', this.rippleHandler);\n    EventHandler.remove(wrapper, 'touchstart touchmove touchend', this.switchMouseUp);\n\n    if (this.formElement) {\n      EventHandler.remove(this.formElement, 'reset', this.formResetHandler);\n    }\n  }\n  /**\n   * Click the switch element\n   * its native method\n   *\n   * @public\n   * @returns {void}\n   */\n\n\n  click() {\n    this.element.click();\n  }\n  /**\n   * Sets the focus to Switch\n   * its native method\n   *\n   * @public\n   */\n\n\n  focusIn() {\n    this.element.focus();\n  }\n\n};\n\n__decorate$3([Event()], Switch.prototype, \"change\", void 0);\n\n__decorate$3([Event()], Switch.prototype, \"created\", void 0);\n\n__decorate$3([Property(false)], Switch.prototype, \"checked\", void 0);\n\n__decorate$3([Property('')], Switch.prototype, \"cssClass\", void 0);\n\n__decorate$3([Property(false)], Switch.prototype, \"disabled\", void 0);\n\n__decorate$3([Property('')], Switch.prototype, \"name\", void 0);\n\n__decorate$3([Property('')], Switch.prototype, \"onLabel\", void 0);\n\n__decorate$3([Property('')], Switch.prototype, \"offLabel\", void 0);\n\n__decorate$3([Property('')], Switch.prototype, \"value\", void 0);\n\nSwitch = __decorate$3([NotifyPropertyChanges], Switch);\n/**\n * Switch modules\n */\n\nvar __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nconst classNames = {\n  chipSet: 'e-chip-set',\n  chip: 'e-chip',\n  avatar: 'e-chip-avatar',\n  text: 'e-chip-text',\n  icon: 'e-chip-icon',\n  delete: 'e-chip-delete',\n  deleteIcon: 'e-dlt-btn',\n  multiSelection: 'e-multi-selection',\n  singleSelection: 'e-selection',\n  active: 'e-active',\n  chipWrapper: 'e-chip-avatar-wrap',\n  iconWrapper: 'e-chip-icon-wrap',\n  focused: 'e-focused',\n  disabled: 'e-disabled',\n  rtl: 'e-rtl'\n};\n/**\n * A chip component is a small block of essential information, mostly used on contacts or filter tags.\n * ```html\n * <div id=\"chip\"></div>\n * ```\n * ```typescript\n * <script>\n * var chipObj = new ChipList();\n * chipObj.appendTo(\"#chip\");\n * </script>\n * ```\n */\n\nlet ChipList = class ChipList extends Component {\n  constructor(options, element) {\n    super(options, element);\n    this.multiSelectedChip = [];\n  }\n  /**\n   * Initialize the event handler\n   *\n   * @private\n   */\n\n\n  preRender() {//prerender\n  }\n  /**\n   * To find the chips length.\n   *\n   * @returns boolean\n   * @private\n   */\n\n\n  chipType() {\n    return this.chips && this.chips.length && this.chips.length > 0;\n  }\n  /**\n   * To Initialize the control rendering.\n   *\n   * @returns void\n   * @private\n   */\n\n\n  render() {\n    let property;\n    this.type = this.chips.length ? 'chipset' : this.text || this.element.innerText ? 'chip' : 'chipset';\n    this.setAttributes();\n    this.createChip();\n    this.setRtl();\n    this.select(this.selectedChips, property);\n    this.wireEvent(false);\n    this.rippleFunction = rippleEffect(this.element, {\n      selector: '.e-chip'\n    });\n    this.renderComplete();\n  }\n\n  createChip() {\n    this.innerText = this.element.innerText.trim();\n    this.element.innerHTML = '';\n    this.chipCreation(this.type === 'chip' ? [this.innerText ? this.innerText : this.text] : this.chips);\n  }\n\n  setAttributes() {\n    if (this.type === 'chip') {\n      this.element.tabIndex = 0;\n      this.element.setAttribute('role', 'option');\n    } else {\n      this.element.classList.add(classNames.chipSet);\n      this.element.setAttribute('role', 'listbox');\n\n      if (this.selection === 'Multiple') {\n        this.element.classList.add(classNames.multiSelection);\n        this.element.setAttribute('aria-multiselectable', 'true');\n      } else if (this.selection === 'Single') {\n        this.element.classList.add(classNames.singleSelection);\n        this.element.setAttribute('aria-multiselectable', 'false');\n      } else {\n        this.element.setAttribute('aria-multiselectable', 'false');\n      }\n    }\n  }\n\n  setRtl() {\n    this.element.classList[this.enableRtl ? 'add' : 'remove'](classNames.rtl);\n  }\n\n  chipCreation(data) {\n    let chipListArray = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const fieldsData = this.getFieldValues(data[i]);\n      const chipArray = this.elementCreation(fieldsData);\n      const className = (classNames.chip + ' ' + (fieldsData.enabled ? ' ' : classNames.disabled) + ' ' + (fieldsData.avatarIconCss || fieldsData.avatarText ? classNames.chipWrapper : fieldsData.leadingIconCss ? classNames.iconWrapper : ' ') + ' ' + fieldsData.cssClass).split(' ').filter(css => css);\n\n      if (!this.chipType()) {\n        chipListArray = chipArray;\n        addClass([this.element], className);\n        this.element.setAttribute('aria-label', fieldsData.text);\n\n        if (fieldsData.value) {\n          this.element.setAttribute('data-value', fieldsData.value.toString());\n        }\n      } else {\n        const wrapper = this.createElement('DIV', {\n          className: className.join(' '),\n          attrs: {\n            tabIndex: '0',\n            role: 'option',\n            'aria-label': fieldsData.text,\n            'aria-selected': 'false'\n          }\n        });\n\n        if (fieldsData.value) {\n          wrapper.setAttribute('data-value', fieldsData.value.toString());\n        }\n\n        append(chipArray, wrapper);\n        chipListArray.push(wrapper);\n      }\n    }\n\n    append(chipListArray, this.element);\n  }\n\n  getFieldValues(data) {\n    const chipEnabled = !(this.enabled.toString() === 'false');\n    const fields = {\n      text: typeof data === 'object' ? data.text ? data.text.toString() : this.text.toString() : !this.chipType() ? this.innerText ? this.innerText : this.text.toString() : data.toString(),\n      cssClass: typeof data === 'object' ? data.cssClass ? data.cssClass.toString() : this.cssClass.toString() : this.cssClass.toString(),\n      leadingIconCss: typeof data === 'object' ? data.leadingIconCss ? data.leadingIconCss.toString() : this.leadingIconCss.toString() : this.leadingIconCss.toString(),\n      avatarIconCss: typeof data === 'object' ? data.avatarIconCss ? data.avatarIconCss.toString() : this.avatarIconCss.toString() : this.avatarIconCss.toString(),\n      avatarText: typeof data === 'object' ? data.avatarText ? data.avatarText.toString() : this.avatarText.toString() : this.avatarText.toString(),\n      trailingIconCss: typeof data === 'object' ? data.trailingIconCss ? data.trailingIconCss.toString() : this.trailingIconCss.toString() : this.trailingIconCss.toString(),\n      enabled: typeof data === 'object' ? !isNullOrUndefined(data.enabled) ? data.enabled.toString() === 'false' ? false : true : chipEnabled : chipEnabled,\n      value: typeof data === 'object' ? data.value ? data.value.toString() : null : null,\n      leadingIconUrl: typeof data === 'object' ? data.leadingIconUrl ? data.leadingIconUrl.toString() : this.leadingIconUrl : this.leadingIconUrl,\n      trailingIconUrl: typeof data === 'object' ? data.trailingIconUrl ? data.trailingIconUrl.toString() : this.trailingIconUrl : this.trailingIconUrl\n    };\n    return fields;\n  }\n\n  elementCreation(fields) {\n    const chipArray = [];\n\n    if (fields.avatarText || fields.avatarIconCss) {\n      const className = (classNames.avatar + ' ' + fields.avatarIconCss).trim();\n      const chipAvatarElement = this.createElement('span', {\n        className: className\n      });\n      chipAvatarElement.innerText = fields.avatarText;\n      chipArray.push(chipAvatarElement);\n    } else if (fields.leadingIconCss) {\n      const className = (classNames.icon + ' ' + fields.leadingIconCss).trim();\n      const chipIconElement = this.createElement('span', {\n        className: className\n      });\n      chipArray.push(chipIconElement);\n    } else if (fields.leadingIconUrl) {\n      const className = (classNames.avatar + ' ' + 'image-url').trim();\n      const chipIconElement = this.createElement('span', {\n        className: className\n      });\n      chipIconElement.style.backgroundImage = 'url(' + fields.leadingIconUrl + ')';\n      chipArray.push(chipIconElement);\n    }\n\n    const chipTextElement = this.createElement('span', {\n      className: classNames.text\n    });\n    chipTextElement.innerText = fields.text;\n    chipArray.push(chipTextElement);\n\n    if (fields.trailingIconCss || this.chipType() && this.enableDelete) {\n      const className = (classNames.delete + ' ' + (fields.trailingIconCss ? fields.trailingIconCss : classNames.deleteIcon)).trim();\n      const chipdeleteElement = this.createElement('span', {\n        className: className\n      });\n      chipArray.push(chipdeleteElement);\n    } else if (fields.trailingIconUrl) {\n      const className = 'trailing-icon-url'.trim();\n      const chipIconsElement = this.createElement('span', {\n        className: className\n      });\n      chipIconsElement.style.backgroundImage = 'url(' + fields.trailingIconUrl + ')';\n      chipArray.push(chipIconsElement);\n    }\n\n    return chipArray;\n  }\n  /**\n   * A function that finds chip based on given input.\n   *\n   * @param  {number | HTMLElement } fields - We can pass index number or element of chip.\n   * {% codeBlock src='chips/find/index.md' %}{% endcodeBlock %}.\n   */\n\n\n  find(fields) {\n    let chipData;\n    const chipElement = fields instanceof HTMLElement ? fields : this.element.querySelectorAll('.' + classNames.chip)[fields];\n\n    if (chipElement && this.chipType()) {\n      chipData = {\n        text: undefined,\n        index: undefined,\n        element: undefined,\n        data: undefined\n      };\n      chipData.index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipElement);\n      chipData.text = typeof this.chips[chipData.index] === 'object' ? this.chips[chipData.index].text ? this.chips[chipData.index].text.toString() : '' : this.chips[chipData.index].toString();\n      chipData.data = this.chips[chipData.index];\n      chipData.element = chipElement;\n    }\n\n    return chipData;\n  }\n  /**\n   * Allows adding the chip item(s) by passing a single or array of string, number, or ChipModel values.\n   *\n   * @param  {string[] | number[] | ChipModel[] | string | number | ChipModel} chipsData - We can pass array of string or\n   *  array of number or array of chip model or string data or number data or chip model.\n   * {% codeBlock src='chips/add/index.md' %}{% endcodeBlock %}\n   * @deprecated\n   */\n\n\n  add(chipsData) {\n    if (this.type !== 'chip') {\n      const fieldData = chipsData instanceof Array ? chipsData : [chipsData];\n      this.chips.push(...fieldData);\n      this.chipCreation(fieldData);\n    }\n  }\n  /**\n   * Allows selecting the chip item(s) by passing a single or array of string, number, or ChipModel values.\n   *\n   * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n   *  or chip element or array of chip element.\n   * {% codeBlock src='chips/select/index.md' %}{% endcodeBlock %}\n   */\n\n\n  select(fields, selectionType) {\n    this.onSelect(fields, false, selectionType);\n  }\n\n  multiSelection(newProp) {\n    const items = this.element.querySelectorAll('.' + 'e-chip');\n\n    for (let j = 0; j < newProp.length; j++) {\n      if (typeof newProp[j] === 'string') {\n        for (let k = 0; k < items.length; k++) {\n          if (newProp[j] !== k) {\n            if (newProp[j] === items[k].attributes[5].value) {\n              this.multiSelectedChip.push(k);\n              break;\n            }\n          }\n        }\n      } else {\n        this.multiSelectedChip.push(newProp[j]);\n      }\n    }\n  }\n\n  onSelect(fields, callFromProperty, selectionType) {\n    let index;\n    let chipNodes;\n    let chipValue;\n\n    if (this.chipType() && this.selection !== 'None') {\n      if (callFromProperty) {\n        const chipElements = this.element.querySelectorAll('.' + classNames.chip);\n\n        for (let i = 0; i < chipElements.length; i++) {\n          chipElements[i].setAttribute('aria-selected', 'false');\n          chipElements[i].classList.remove(classNames.active);\n        }\n      }\n\n      const fieldData = fields instanceof Array ? fields : [fields];\n\n      for (let i = 0; i < fieldData.length; i++) {\n        let chipElement = fieldData[i] instanceof HTMLElement ? fieldData[i] : this.element.querySelectorAll('.' + classNames.chip)[fieldData[i]];\n\n        if (selectionType !== 'index') {\n          for (let j = 0; j < this.chips.length; j++) {\n            chipNodes = this.element.querySelectorAll('.' + classNames.chip)[j];\n            const fieldsData = this.getFieldValues(this.chips[j]);\n\n            if (selectionType === 'value') {\n              if (fieldsData.value !== null) {\n                chipValue = chipNodes.dataset.value;\n              }\n            } else if (selectionType === 'text') {\n              chipValue = chipNodes.innerText;\n            }\n\n            if (chipValue === fieldData[i].toString()) {\n              index = j;\n              chipElement = this.element.querySelectorAll('.' + classNames.chip)[index];\n            }\n          }\n        }\n\n        if (chipElement instanceof HTMLElement) {\n          this.selectionHandler(chipElement);\n        }\n      }\n    }\n  }\n  /**\n   * Allows removing the chip item(s) by passing a single or array of string, number, or ChipModel values.\n   *\n   * @param  {number | number[] | HTMLElement | HTMLElement[]} fields - We can pass number or array of number\n   *  or chip element or array of chip element.\n   * {% codeBlock src='chips/remove/index.md' %}{% endcodeBlock %}\n   */\n\n\n  remove(fields) {\n    if (this.chipType()) {\n      const fieldData = fields instanceof Array ? fields : [fields];\n      const chipElements = [];\n      const chipCollection = this.element.querySelectorAll('.' + classNames.chip);\n      fieldData.forEach(data => {\n        const chipElement = data instanceof HTMLElement ? data : chipCollection[data];\n\n        if (chipElement instanceof HTMLElement) {\n          chipElements.push(chipElement);\n        }\n      });\n      chipElements.forEach(element => {\n        const chips = this.element.querySelectorAll('.' + classNames.chip);\n        const index = Array.prototype.slice.call(chips).indexOf(element);\n        this.deleteHandler(element, index);\n      });\n    }\n  }\n  /**\n   * Returns the selected chip(s) data.\n   * {% codeBlock src='chips/getSelectedChips/index.md' %}{% endcodeBlock %}\n   */\n\n\n  getSelectedChips() {\n    let selectedChips;\n\n    if (this.chipType() && this.selection !== 'None') {\n      const selectedItems = {\n        texts: [],\n        Indexes: [],\n        data: [],\n        elements: []\n      };\n      const items = this.element.querySelectorAll('.' + classNames.active);\n\n      for (let i = 0; i < items.length; i++) {\n        const chip = items[i];\n        selectedItems.elements.push(chip);\n        const index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chip);\n        selectedItems.Indexes.push(index);\n        selectedItems.data.push(this.chips[index]);\n        const text = typeof this.chips[index] === 'object' ? this.chips[index].text ? this.chips[index].text.toString() : null : this.chips[index].toString();\n        selectedItems.texts.push(text);\n      }\n\n      const selectedItem = {\n        text: selectedItems.texts[0],\n        index: selectedItems.Indexes[0],\n        data: selectedItems.data[0],\n        element: selectedItems.elements[0]\n      };\n      selectedChips = !isNullOrUndefined(selectedItem.index) ? this.selection === 'Multiple' ? selectedItems : selectedItem : undefined;\n    }\n\n    return selectedChips;\n  }\n\n  wireEvent(unWireEvent) {\n    if (!unWireEvent) {\n      EventHandler.add(this.element, 'click', this.clickHandler, this);\n      EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);\n      EventHandler.add(this.element, 'keydown', this.keyHandler, this);\n      EventHandler.add(this.element, 'keyup', this.keyHandler, this);\n    } else {\n      EventHandler.remove(this.element, 'click', this.clickHandler);\n      EventHandler.remove(this.element, 'focusout', this.focusOutHandler);\n      EventHandler.remove(this.element, 'keydown', this.keyHandler);\n      EventHandler.remove(this.element, 'keyup', this.keyHandler);\n    }\n  }\n\n  keyHandler(e) {\n    if (e.target.classList.contains(classNames.chip)) {\n      if (e.type === 'keydown') {\n        if (e.keyCode === 13) {\n          this.clickHandler(e);\n        } else if (e.keyCode === 46 && this.enableDelete) {\n          this.clickHandler(e, true);\n        }\n      } else if (e.keyCode === 9) {\n        this.focusInHandler(e.target);\n      }\n    }\n  }\n\n  focusInHandler(chipWrapper) {\n    if (!chipWrapper.classList.contains(classNames.focused)) {\n      chipWrapper.classList.add(classNames.focused);\n    }\n  }\n\n  focusOutHandler(e) {\n    const chipWrapper = closest(e.target, '.' + classNames.chip);\n    const focusedElement = !this.chipType() ? this.element.classList.contains(classNames.focused) ? this.element : null : this.element.querySelector('.' + classNames.focused);\n\n    if (chipWrapper && focusedElement) {\n      focusedElement.classList.remove(classNames.focused);\n    }\n  }\n\n  clickHandler(e, del = false) {\n    const chipWrapper = closest(e.target, '.' + classNames.chip);\n\n    if (chipWrapper) {\n      // eslint-disable-next-line\n      let chipDataArgs;\n\n      if (this.chipType()) {\n        chipDataArgs = this.find(chipWrapper);\n      } else {\n        const index = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.chip)).indexOf(chipWrapper);\n        chipDataArgs = {\n          text: this.innerText ? this.innerText : this.text,\n          element: chipWrapper,\n          data: this.text,\n          index: index\n        };\n      }\n\n      chipDataArgs.event = e;\n      chipDataArgs.cancel = false;\n      this.trigger('beforeClick', chipDataArgs, observedArgs => {\n        if (!observedArgs.cancel) {\n          this.clickEventHandler(observedArgs.element, e, del);\n        }\n      });\n    }\n  }\n\n  clickEventHandler(chipWrapper, e, del) {\n    if (this.chipType()) {\n      const chipData = this.find(chipWrapper);\n      chipData.event = e;\n      const deleteElement = e.target.classList.contains(classNames.deleteIcon) ? e.target : del ? chipWrapper.querySelector('.' + classNames.deleteIcon) : undefined;\n\n      if (deleteElement && this.enableDelete) {\n        chipData.cancel = false;\n        const deletedItemArgs = chipData;\n        this.trigger('delete', deletedItemArgs, observedArgs => {\n          if (!observedArgs.cancel) {\n            this.deleteHandler(observedArgs.element, observedArgs.index);\n            this.selectionHandler(chipWrapper);\n            chipData.selected = observedArgs.element.classList.contains(classNames.active);\n            let selectedItemArgs = chipData;\n            this.trigger('click', selectedItemArgs);\n          }\n        });\n      } else if (this.selection !== 'None') {\n        this.selectionHandler(chipWrapper);\n        chipData.selected = chipWrapper.classList.contains(classNames.active);\n        const selectedItemArgs = chipData;\n        this.trigger('click', selectedItemArgs);\n      } else {\n        this.focusInHandler(chipWrapper);\n        const clickedItemArgs = chipData;\n        this.trigger('click', clickedItemArgs);\n      }\n    } else {\n      this.focusInHandler(chipWrapper);\n      const clickedItemArgs = {\n        text: this.innerText ? this.innerText : this.text,\n        element: chipWrapper,\n        data: this.text,\n        event: e\n      };\n      this.trigger('click', clickedItemArgs);\n    }\n  }\n\n  selectionHandler(chipWrapper) {\n    if (this.selection === 'Single') {\n      const activeElement = this.element.querySelector('.' + classNames.active);\n\n      if (activeElement && activeElement !== chipWrapper) {\n        activeElement.classList.remove(classNames.active);\n        activeElement.setAttribute('aria-selected', 'false');\n      }\n\n      this.setProperties({\n        selectedChips: null\n      }, true);\n    } else {\n      this.setProperties({\n        selectedChips: []\n      }, true);\n    }\n\n    if (chipWrapper.classList.contains(classNames.active)) {\n      chipWrapper.classList.remove(classNames.active);\n      chipWrapper.setAttribute('aria-selected', 'false');\n    } else {\n      chipWrapper.classList.add(classNames.active);\n      chipWrapper.setAttribute('aria-selected', 'true');\n    }\n\n    this.updateSelectedChips();\n  }\n\n  updateSelectedChips() {\n    const chipListEle = this.element.querySelectorAll('.e-chip');\n    const chipCollIndex = [];\n    const chipCollValue = [];\n    let chip = null;\n    let value;\n\n    for (let i = 0; i < chipListEle.length; i++) {\n      const selectedEle = this.element.querySelectorAll('.e-chip')[i];\n\n      if (selectedEle.getAttribute('aria-selected') === 'true') {\n        value = selectedEle.getAttribute('data-value');\n\n        if (this.selection === 'Single' && selectedEle.classList.contains('e-active')) {\n          chip = value ? value : i;\n          break;\n        } else {\n          chip = value ? chipCollValue.push(value) : chipCollIndex.push(i);\n        }\n      }\n    }\n\n    this.setProperties({\n      selectedChips: this.selection === 'Single' ? chip : value ? chipCollValue : chipCollIndex\n    }, true);\n  }\n\n  deleteHandler(chipWrapper, index) {\n    this.chips.splice(index, 1);\n    this.setProperties({\n      chips: this.chips\n    }, true);\n    detach(chipWrapper);\n  }\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. Also, it removes the attributes and classes.\n   * {% codeBlock src='chips/destroy/index.md' %}{% endcodeBlock %}\n   */\n\n\n  destroy() {\n    removeClass([this.element], [classNames.chipSet, classNames.chip, classNames.rtl, classNames.multiSelection, classNames.singleSelection, classNames.disabled, classNames.chipWrapper, classNames.iconWrapper, classNames.active, classNames.focused].concat(this.cssClass.toString().split(' ').filter(css => css)));\n    this.removeMultipleAttributes(['tabindex', 'role', 'aria-label', 'aria-multiselectable'], this.element);\n    this.wireEvent(true);\n    this.rippleFunction();\n    super.destroy();\n    this.element.innerHTML = '';\n    this.element.innerText = this.innerText;\n  }\n\n  removeMultipleAttributes(attributes$$1, element) {\n    attributes$$1.forEach(attr => {\n      element.removeAttribute(attr);\n    });\n  }\n\n  getPersistData() {\n    return this.addOnPersist([]);\n  }\n\n  getModuleName() {\n    return 'chip-list';\n  }\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @returns void\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {\n    let property;\n\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'chips':\n        case 'text':\n        case 'avatarText':\n        case 'avatarIconCss':\n        case 'leadingIconCss':\n        case 'trailingIconCss':\n        case 'selection':\n        case 'enableDelete':\n        case 'enabled':\n          this.refresh();\n          break;\n\n        case 'cssClass':\n          if (!this.chipType()) {\n            removeClass([this.element], oldProp.cssClass.toString().split(' ').filter(css => css));\n            addClass([this.element], newProp.cssClass.toString().split(' ').filter(css => css));\n          } else {\n            this.refresh();\n          }\n\n          break;\n\n        case 'selectedChips':\n          removeClass(this.element.querySelectorAll('.e-active'), 'e-active');\n\n          if (this.selection === 'Multiple') {\n            this.multiSelectedChip = [];\n            this.multiSelection(newProp.selectedChips);\n            this.onSelect(this.multiSelectedChip, true, property);\n            this.updateSelectedChips();\n          } else {\n            this.onSelect(newProp.selectedChips, true, property);\n          }\n\n          break;\n\n        case 'enableRtl':\n          this.setRtl();\n          break;\n      }\n    }\n  }\n\n};\n\n__decorate$4([Property([])], ChipList.prototype, \"chips\", void 0);\n\n__decorate$4([Property('')], ChipList.prototype, \"text\", void 0);\n\n__decorate$4([Property('')], ChipList.prototype, \"avatarText\", void 0);\n\n__decorate$4([Property('')], ChipList.prototype, \"avatarIconCss\", void 0);\n\n__decorate$4([Property('')], ChipList.prototype, \"leadingIconCss\", void 0);\n\n__decorate$4([Property('')], ChipList.prototype, \"trailingIconCss\", void 0);\n\n__decorate$4([Property('')], ChipList.prototype, \"leadingIconUrl\", void 0);\n\n__decorate$4([Property('')], ChipList.prototype, \"trailingIconUrl\", void 0);\n\n__decorate$4([Property('')], ChipList.prototype, \"cssClass\", void 0);\n\n__decorate$4([Property(true)], ChipList.prototype, \"enabled\", void 0);\n\n__decorate$4([Property([])], ChipList.prototype, \"selectedChips\", void 0);\n\n__decorate$4([Property('None')], ChipList.prototype, \"selection\", void 0);\n\n__decorate$4([Property(false)], ChipList.prototype, \"enableDelete\", void 0);\n\n__decorate$4([Event()], ChipList.prototype, \"created\", void 0);\n\n__decorate$4([Event()], ChipList.prototype, \"click\", void 0);\n\n__decorate$4([Event()], ChipList.prototype, \"beforeClick\", void 0);\n\n__decorate$4([Event()], ChipList.prototype, \"delete\", void 0);\n\nChipList = __decorate$4([NotifyPropertyChanges], ChipList);\n/**\n * Represents ChipList `Chip` model class.\n */\n\nclass Chip {}\n/**\n * Chip modules\n */\n\n/**\n * Button all modules\n */\n\n\nexport { wrapperInitialize, getTextNode, destroy, preRender, createCheckBox, rippleMouseHandler, setHiddenInput, buttonObserver, Button, CheckBox, RadioButton, Switch, classNames, ChipList, Chip }; //# sourceMappingURL=ej2-buttons.es2015.js.map","map":null,"metadata":{},"sourceType":"module"}