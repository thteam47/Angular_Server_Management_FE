{"ast":null,"code":"/**\r\n * A collection of network-related functions\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $type from \"./Type\";\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\n\nexport function load(url, target, options) {\n  return new Promise(function (success, error) {\n    // Is return type Blob?\n    var isBlob = $type.hasValue(options) && options.responseType == \"blob\"; // Create request and set up handlers\n\n    var xhr = new XMLHttpRequest();\n\n    xhr.onload = function () {\n      if (xhr.status === 200) {\n        var response = void 0;\n        var blob_1;\n\n        if (isBlob) {\n          blob_1 = xhr.response;\n          readBlob(blob_1).then(function (response) {\n            var output = {\n              xhr: xhr,\n              error: false,\n              response: response,\n              blob: blob_1,\n              type: xhr.getResponseHeader(\"Content-Type\"),\n              target: target\n            };\n            success(output);\n          });\n          return;\n        } else {\n          response = xhr.responseText || xhr.response;\n        }\n\n        var output = {\n          xhr: xhr,\n          error: false,\n          response: response,\n          blob: blob_1,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        };\n        success(output);\n      } else {\n        error({\n          xhr: xhr,\n          error: true,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        });\n      }\n    };\n\n    xhr.onerror = function () {\n      error({\n        xhr: xhr,\n        error: true,\n        type: xhr.getResponseHeader(\"Content-Type\"),\n        target: target\n      });\n    }; // Open request\n\n\n    xhr.open(\"GET\", url, true);\n\n    if (options && options.withCredentials) {\n      xhr.withCredentials = true;\n    } // Process options\n\n\n    if ($type.hasValue(options)) {\n      if ($type.hasValue(options.requestHeaders)) {\n        for (var i = 0; i < options.requestHeaders.length; i++) {\n          var header = options.requestHeaders[i];\n          xhr.setRequestHeader(header.key, header.value);\n        }\n      }\n\n      if ($type.hasValue(options.responseType)) {\n        xhr.responseType = options.responseType;\n      }\n    } // Send request\n\n\n    xhr.send();\n  });\n}\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\n\nexport function readBlob(blob) {\n  return new Promise(function (success, error) {\n    var reader = new FileReader();\n\n    reader.onload = function (event) {\n      success(reader.result);\n    };\n\n    reader.onerror = function (e) {\n      error(e);\n    };\n\n    reader.readAsText(blob);\n  });\n}","map":{"version":3,"names":["$type","load","url","target","options","Promise","success","error","isBlob","hasValue","responseType","xhr","XMLHttpRequest","onload","status","response","blob_1","readBlob","then","output","blob","type","getResponseHeader","responseText","onerror","open","withCredentials","requestHeaders","i","length","header","setRequestHeader","key","value","send","reader","FileReader","event","result","e","readAsText"],"sources":["/home/unutu/go/src/github.com/thteam47/admin-portal/node_modules/@amcharts/amcharts4/.internal/core/utils/Net.js"],"sourcesContent":["/**\r\n * A collection of network-related functions\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\r\nexport function load(url, target, options) {\r\n    return new Promise(function (success, error) {\r\n        // Is return type Blob?\r\n        var isBlob = $type.hasValue(options) && options.responseType == \"blob\";\r\n        // Create request and set up handlers\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.onload = function () {\r\n            if (xhr.status === 200) {\r\n                var response = void 0;\r\n                var blob_1;\r\n                if (isBlob) {\r\n                    blob_1 = xhr.response;\r\n                    readBlob(blob_1).then(function (response) {\r\n                        var output = {\r\n                            xhr: xhr,\r\n                            error: false,\r\n                            response: response,\r\n                            blob: blob_1,\r\n                            type: xhr.getResponseHeader(\"Content-Type\"),\r\n                            target: target\r\n                        };\r\n                        success(output);\r\n                    });\r\n                    return;\r\n                }\r\n                else {\r\n                    response = xhr.responseText || xhr.response;\r\n                }\r\n                var output = {\r\n                    xhr: xhr,\r\n                    error: false,\r\n                    response: response,\r\n                    blob: blob_1,\r\n                    type: xhr.getResponseHeader(\"Content-Type\"),\r\n                    target: target\r\n                };\r\n                success(output);\r\n            }\r\n            else {\r\n                error({\r\n                    xhr: xhr,\r\n                    error: true,\r\n                    type: xhr.getResponseHeader(\"Content-Type\"),\r\n                    target: target\r\n                });\r\n            }\r\n        };\r\n        xhr.onerror = function () {\r\n            error({\r\n                xhr: xhr,\r\n                error: true,\r\n                type: xhr.getResponseHeader(\"Content-Type\"),\r\n                target: target\r\n            });\r\n        };\r\n        // Open request\r\n        xhr.open(\"GET\", url, true);\r\n        if (options && options.withCredentials) {\r\n            xhr.withCredentials = true;\r\n        }\r\n        // Process options\r\n        if ($type.hasValue(options)) {\r\n            if ($type.hasValue(options.requestHeaders)) {\r\n                for (var i = 0; i < options.requestHeaders.length; i++) {\r\n                    var header = options.requestHeaders[i];\r\n                    xhr.setRequestHeader(header.key, header.value);\r\n                }\r\n            }\r\n            if ($type.hasValue(options.responseType)) {\r\n                xhr.responseType = options.responseType;\r\n            }\r\n        }\r\n        // Send request\r\n        xhr.send();\r\n    });\r\n}\r\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\r\nexport function readBlob(blob) {\r\n    return new Promise(function (success, error) {\r\n        var reader = new FileReader();\r\n        reader.onload = function (event) {\r\n            success(reader.result);\r\n        };\r\n        reader.onerror = function (e) {\r\n            error(e);\r\n        };\r\n        reader.readAsText(blob);\r\n    });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}