{"ast":null,"code":"import { Animation, Base, ChildProperty, Complex, Component, Draggable, Event, EventHandler, NotifyPropertyChanges, Property, SanitizeHtmlHelper, Touch, addClass, append, attributes, closest, compareElementParent, compile, detach, extend, formatUnit, getComponent, getUniqueID, getValue, isBlazor, isNullOrUndefined, isVisible, merge, prepend, remove, removeClass, rippleEffect } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { createCheckBox } from '@syncfusion/ej2-buttons';\n/* eslint-disable no-inner-declarations */\n\nlet cssClass = {\n  li: 'e-list-item',\n  ul: 'e-list-parent e-ul',\n  group: 'e-list-group-item',\n  icon: 'e-list-icon',\n  text: 'e-list-text',\n  check: 'e-list-check',\n  checked: 'e-checked',\n  selected: 'e-selected',\n  expanded: 'e-expanded',\n  textContent: 'e-text-content',\n  hasChild: 'e-has-child',\n  level: 'e-level',\n  url: 'e-list-url',\n  collapsible: 'e-icon-collapsible',\n  disabled: 'e-disabled',\n  image: 'e-list-img',\n  iconWrapper: 'e-icon-wrapper',\n  anchorWrap: 'e-anchor-wrap',\n  navigable: 'e-navigable'\n};\n/**\n * Base List Generator\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\n\nvar ListBase;\n\n(function (ListBase) {\n  /**\n   *\n   * Default mapped fields.\n   */\n  ListBase.defaultMappedFields = {\n    id: 'id',\n    text: 'text',\n    url: 'url',\n    value: 'value',\n    isChecked: 'isChecked',\n    enabled: 'enabled',\n    expanded: 'expanded',\n    selected: 'selected',\n    iconCss: 'iconCss',\n    child: 'child',\n    isVisible: 'isVisible',\n    hasChildren: 'hasChildren',\n    tooltip: 'tooltip',\n    htmlAttributes: 'htmlAttributes',\n    urlAttributes: 'urlAttributes',\n    imageAttributes: 'imageAttributes',\n    imageUrl: 'imageUrl',\n    groupBy: null\n  };\n  const defaultAriaAttributes = {\n    level: 1,\n    listRole: 'presentation',\n    itemRole: 'presentation',\n    groupItemRole: 'group',\n    itemText: 'list-item',\n    wrapperRole: 'presentation'\n  };\n  const defaultListBaseOptions = {\n    showCheckBox: false,\n    showIcon: false,\n    enableHtmlSanitizer: false,\n    expandCollapse: false,\n    fields: ListBase.defaultMappedFields,\n    ariaAttributes: defaultAriaAttributes,\n    listClass: '',\n    itemClass: '',\n    processSubChild: false,\n    sortOrder: 'None',\n    template: null,\n    groupTemplate: null,\n    headerTemplate: null,\n    expandIconClass: 'e-icon-collapsible',\n    moduleName: 'list',\n    expandIconPosition: 'Right',\n    itemNavigable: false\n  };\n  /**\n   * Function helps to created and return the UL Li element based on your data.\n   *\n   * @param  {createElementParams} createElement - Specifies an array of JSON data.\n   *\n   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n   *\n   * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n   *\n   * @param  {boolean} isSingleLevel? - Specifies the list options that need to provide.\n   *\n   * @param  {any} componentInstance? - Specifies the list options that need to provide.\n   *\n   * @returns  {createElement} createListFromJson - Specifies the list options that need to provide.\n   */\n\n  function createList(createElement, dataSource, // eslint-disable-next-line\n  options, isSingleLevel, componentInstance) {\n    const curOpt = extend({}, defaultListBaseOptions, options);\n    const ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n    const type = typeofData(dataSource).typeof;\n\n    if (type === 'string' || type === 'number') {\n      return createListFromArray(createElement, dataSource, isSingleLevel, options, componentInstance);\n    } else {\n      return createListFromJson(createElement, dataSource, options, ariaAttributes.level, isSingleLevel, componentInstance);\n    }\n  }\n\n  ListBase.createList = createList;\n  /**\n   * Function helps to created an element list based on string array input .\n   *\n   * @param  {createElementParams} createElement - Specifies an array of JSON data.\n   *\n   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n   *\n   * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n   *\n   * @param  {boolean} isSingleLevel? - Specifies the list options that need to provide.\n   *\n   * @param  {any} componentInstance? - Specifies the list options that need to provide.\n   *\n   * @returns  {createElement} generateUL - returns the list options that need to provide.\n   */\n\n  function createListFromArray(createElement, dataSource, // tslint:disable-next-line\n  // eslint-disable-next-line\n  isSingleLevel, options, componentInstance) {\n    const subChild = createListItemFromArray(createElement, dataSource, isSingleLevel, options, componentInstance);\n    return generateUL(createElement, subChild, null, options);\n  }\n\n  ListBase.createListFromArray = createListFromArray;\n  /**\n   * Function helps to created an element list based on string array input .\n   *\n   * @param  {createElementParams} createElement - Specifies an array of JSON data.\n   *\n   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n   *\n   * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n   *\n   * @param  {boolean} isSingleLevel? - Specifies the list options that need to provide.\n   *\n   * @param  {any} componentInstance? - Specifies the list options that need to provide.\n   *\n   * @returns  {HTMLElement[]} subChild - returns the list options that need to provide.\n   */\n\n  function createListItemFromArray(createElement, dataSource, // eslint-disable-next-line\n  isSingleLevel, options, componentInstance) {\n    const subChild = [];\n    const curOpt = extend({}, defaultListBaseOptions, options);\n    cssClass = getModuleClass(curOpt.moduleName);\n    const id = generateId(); // generate id for drop-down-list option.\n\n    for (let i = 0; i < dataSource.length; i++) {\n      if (isNullOrUndefined(dataSource[i])) {\n        continue;\n      }\n\n      let li;\n\n      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n        const curData = {\n          dataSource: dataSource,\n          curData: dataSource[i],\n          text: dataSource[i],\n          options: curOpt\n        };\n        curOpt.itemCreating(curData);\n      }\n\n      if (isSingleLevel) {\n        li = generateSingleLevelLI(createElement, dataSource[i], undefined, null, null, [], null, id, i, options);\n      } else {\n        li = generateLI(createElement, dataSource[i], undefined, null, null, options, componentInstance);\n      }\n\n      if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n        const curData = {\n          dataSource: dataSource,\n          curData: dataSource[i],\n          text: dataSource[i],\n          item: li,\n          options: curOpt\n        };\n        curOpt.itemCreated(curData);\n      }\n\n      subChild.push(li);\n    }\n\n    return subChild;\n  }\n\n  ListBase.createListItemFromArray = createListItemFromArray;\n  /**\n   * Function helps to created an element list based on array of JSON input .\n   *\n   * @param  {createElementParams} createElement - Specifies an array of JSON data.\n   *\n   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n   *\n   * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n   *\n   * @param  {boolean} isSingleLevel? - Specifies the list options that need to provide.\n   *\n   * @param  {number} level? - Specifies the list options that need to provide.\n   *\n   * @param  {any} componentInstance? - Specifies the list options that need to provide.\n   *\n   * @returns  {HTMLElement[]} child - returns the list options that need to provide.\n   */\n\n  function createListItemFromJson(createElement, dataSource, // eslint-disable-next-line\n  options, level, isSingleLevel, componentInstance) {\n    const curOpt = extend({}, defaultListBaseOptions, options);\n    cssClass = getModuleClass(curOpt.moduleName);\n    const fields = extend({}, ListBase.defaultMappedFields, curOpt.fields);\n    const ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n    let id;\n    let checkboxElement = [];\n\n    if (level) {\n      ariaAttributes.level = level;\n    }\n\n    const child = [];\n    let li;\n    let anchorElement;\n\n    if (dataSource && dataSource.length && !isNullOrUndefined(typeofData(dataSource).item) && // eslint-disable-next-line no-prototype-builtins\n    !typeofData(dataSource).item.hasOwnProperty(fields.id)) {\n      id = generateId(); // generate id for drop-down-list option.\n    }\n\n    for (let i = 0; i < dataSource.length; i++) {\n      let fieldData = getFieldValues(dataSource[i], fields);\n\n      if (isNullOrUndefined(dataSource[i])) {\n        continue;\n      }\n\n      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n        const curData = {\n          dataSource: dataSource,\n          curData: dataSource[i],\n          text: fieldData[fields.text],\n          options: curOpt,\n          fields: fields\n        };\n        curOpt.itemCreating(curData);\n      }\n\n      const curItem = dataSource[i];\n\n      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n        fieldData = getFieldValues(dataSource[i], fields);\n      } // eslint-disable-next-line no-prototype-builtins\n\n\n      if (fieldData.hasOwnProperty(fields.id) && !isNullOrUndefined(fieldData[fields.id])) {\n        id = fieldData[fields.id];\n      }\n\n      const innerEle = [];\n\n      if (curOpt.showCheckBox) {\n        if (curOpt.itemNavigable && (fieldData[fields.url] || fieldData[fields.urlAttributes])) {\n          checkboxElement.push(createElement('input', {\n            className: cssClass.check,\n            attrs: {\n              type: 'checkbox'\n            }\n          }));\n        } else {\n          innerEle.push(createElement('input', {\n            className: cssClass.check,\n            attrs: {\n              type: 'checkbox'\n            }\n          }));\n        }\n      }\n\n      if (isSingleLevel === true) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss])) {\n          innerEle.push(createElement('span', {\n            className: cssClass.icon + ' ' + fieldData[fields.iconCss]\n          }));\n        }\n\n        li = generateSingleLevelLI(createElement, curItem, fieldData, fields, curOpt.itemClass, innerEle, // eslint-disable-next-line no-prototype-builtins\n        curItem.hasOwnProperty('isHeader') && curItem.isHeader ? true : false, id, i, options);\n        anchorElement = li.querySelector('.' + cssClass.anchorWrap);\n\n        if (curOpt.itemNavigable && checkboxElement.length) {\n          prepend(checkboxElement, li.firstElementChild);\n        }\n      } else {\n        li = generateLI(createElement, curItem, fieldData, fields, curOpt.itemClass, options, componentInstance);\n        li.classList.add(cssClass.level + '-' + ariaAttributes.level);\n        li.setAttribute('aria-level', ariaAttributes.level.toString());\n        anchorElement = li.querySelector('.' + cssClass.anchorWrap); // eslint-disable-next-line no-prototype-builtins\n\n        if (fieldData.hasOwnProperty(fields.tooltip)) {\n          li.setAttribute('title', fieldData[fields.tooltip]);\n        } // eslint-disable-next-line no-prototype-builtins\n\n\n        if (fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {\n          setAttribute(li, fieldData[fields.htmlAttributes]);\n        } // eslint-disable-next-line no-prototype-builtins\n\n\n        if (fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled] === false) {\n          li.classList.add(cssClass.disabled);\n        } // eslint-disable-next-line no-prototype-builtins\n\n\n        if (fieldData.hasOwnProperty(fields.isVisible) && fieldData[fields.isVisible] === false) {\n          li.style.display = 'none';\n        } // eslint-disable-next-line no-prototype-builtins\n\n\n        if (fieldData.hasOwnProperty(fields.imageUrl) && !isNullOrUndefined(fieldData[fields.imageUrl]) && !curOpt.template) {\n          const attr = {\n            src: fieldData[fields.imageUrl]\n          };\n          merge(attr, fieldData[fields.imageAttributes]);\n          const imageElemnt = createElement('img', {\n            className: cssClass.image,\n            attrs: attr\n          });\n\n          if (anchorElement) {\n            anchorElement.insertAdjacentElement('afterbegin', imageElemnt);\n          } else {\n            prepend([imageElemnt], li.firstElementChild);\n          }\n        } // eslint-disable-next-line no-prototype-builtins\n\n\n        if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss]) && !curOpt.template) {\n          const iconElement = createElement('div', {\n            className: cssClass.icon + ' ' + fieldData[fields.iconCss]\n          });\n\n          if (anchorElement) {\n            anchorElement.insertAdjacentElement('afterbegin', iconElement);\n          } else {\n            prepend([iconElement], li.firstElementChild);\n          }\n        }\n\n        if (innerEle.length) {\n          prepend(innerEle, li.firstElementChild);\n        }\n\n        if (curOpt.itemNavigable && checkboxElement.length) {\n          prepend(checkboxElement, li.firstElementChild);\n        }\n\n        processSubChild(createElement, fieldData, fields, dataSource, curOpt, li, ariaAttributes.level);\n      }\n\n      if (anchorElement) {\n        addClass([li], [cssClass.navigable]);\n      }\n\n      if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n        const curData = {\n          dataSource: dataSource,\n          curData: dataSource[i],\n          text: fieldData[fields.text],\n          item: li,\n          options: curOpt,\n          fields: fields\n        };\n        curOpt.itemCreated(curData);\n      }\n\n      checkboxElement = [];\n      child.push(li);\n    }\n\n    return child;\n  }\n\n  ListBase.createListItemFromJson = createListItemFromJson;\n  /**\n   * Function helps to created an element list based on array of JSON input .\n   *\n   * @param  {createElementParams} createElement - Specifies an array of JSON data.\n   *\n   * @param  {{Object}[]} dataSource - Specifies an array of JSON data.\n   *\n   * @param  {ListBaseOptions} options? - Specifies the list options that need to provide.\n   *\n   * @param  {number} level? - Specifies the list options that need to provide.\n   *\n   * @param  {boolean} isSingleLevel? - Specifies the list options that need to provide.\n   *\n   * @param  {any} componentInstance? - Specifies the list options that need to provide.\n   *\n   * @returns  {createElement} generateUL - Specifies the list options that need to provide.\n   */\n\n  function createListFromJson(createElement, dataSource, // eslint-disable-next-line\n  options, level, isSingleLevel, componentInstance) {\n    const curOpt = extend({}, defaultListBaseOptions, options);\n    const li = createListItemFromJson(createElement, dataSource, options, level, isSingleLevel, componentInstance);\n    return generateUL(createElement, li, curOpt.listClass, options);\n  }\n\n  ListBase.createListFromJson = createListFromJson;\n  /**\n   * Return the next or previous visible element.\n   *\n   * @param  {Element[]|NodeList} elementArray - An element array to find next or previous element.\n   * @param  {Element} li - An element to find next or previous after this element.\n   * @param  {boolean} isPrevious? - Specify when the need get previous element from array.\n   */\n\n  function getSiblingLI(elementArray, element, isPrevious) {\n    cssClass = getModuleClass(defaultListBaseOptions.moduleName);\n\n    if (!elementArray || !elementArray.length) {\n      return void 0;\n    }\n\n    let siblingLI;\n    let liIndex;\n    const liCollections = Array.prototype.slice.call(elementArray);\n\n    if (element) {\n      liIndex = indexOf(element, liCollections);\n    } else {\n      liIndex = isPrevious === true ? liCollections.length : -1;\n    }\n\n    siblingLI = liCollections[liIndex + (isPrevious === true ? -1 : 1)];\n\n    while (siblingLI && (!isVisible(siblingLI) || siblingLI.classList.contains(cssClass.disabled))) {\n      liIndex = liIndex + (isPrevious === true ? -1 : 1);\n      siblingLI = liCollections[liIndex];\n    }\n\n    return siblingLI;\n  }\n\n  ListBase.getSiblingLI = getSiblingLI;\n  /**\n   * Return the index of the li element\n   *\n   * @param  {Element} item - An element to find next or previous after this element.\n   * @param  {Element[]} elementArray - An element array to find index of given li.\n   */\n\n  function indexOf(item, elementArray) {\n    if (!elementArray || !item) {\n      return void 0;\n    } else {\n      let liCollections = elementArray;\n      liCollections = Array.prototype.slice.call(elementArray);\n      return liCollections.indexOf(item);\n    }\n  }\n\n  ListBase.indexOf = indexOf;\n  /**\n   * Returns the grouped data from given dataSource.\n   *\n   * @param  {{Object}[]} dataSource - The JSON data which is necessary to process.\n   * @param  {FieldsMapping} fields - Fields that are mapped from the data source.\n   * @param  {SortOrder} sortOrder- Specifies final result sort order.\n   */\n\n  function groupDataSource(dataSource, fields, sortOrder = 'None') {\n    const curFields = extend({}, ListBase.defaultMappedFields, fields);\n    let cusQuery = new Query().group(curFields.groupBy); // need to remove once sorting issues fixed in DataManager\n\n    cusQuery = addSorting(sortOrder, 'key', cusQuery);\n    const ds = getDataSource(dataSource, cusQuery);\n    dataSource = [];\n\n    for (let j = 0; j < ds.length; j++) {\n      const itemObj = ds[j].items;\n      const grpItem = {};\n      const hdr = 'isHeader';\n      grpItem[curFields.text] = ds[j].key;\n      grpItem[hdr] = true;\n      let newtext = curFields.text;\n\n      if (newtext === 'id') {\n        newtext = 'text';\n        grpItem[newtext] = ds[j].key;\n      }\n\n      grpItem._id = 'group-list-item-' + (ds[j].key ? ds[j].key.toString().trim() : 'undefined');\n      grpItem.items = itemObj;\n      dataSource.push(grpItem);\n\n      for (let k = 0; k < itemObj.length; k++) {\n        dataSource.push(itemObj[k]);\n      }\n    }\n\n    return dataSource;\n  }\n\n  ListBase.groupDataSource = groupDataSource;\n  /**\n   * Returns a sorted query object.\n   *\n   * @param  {SortOrder} sortOrder - Specifies that sort order.\n   * @param  {string} sortBy - Specifies sortBy fields.\n   * @param  {Query} query - Pass if any existing query.\n   */\n\n  function addSorting(sortOrder, sortBy, query = new Query()) {\n    if (sortOrder === 'Ascending') {\n      query.sortBy(sortBy, 'ascending', true);\n    } else if (sortOrder === 'Descending') {\n      query.sortBy(sortBy, 'descending', true);\n    } else {\n      for (let i = 0; i < query.queries.length; i++) {\n        if (query.queries[i].fn === 'onSortBy') {\n          query.queries.splice(i, 1);\n        }\n      }\n    }\n\n    return query;\n  }\n\n  ListBase.addSorting = addSorting;\n  /**\n   * Return an array of JSON Data that processed based on queries.\n   *\n   * @param  {{Object}[]} dataSource - Specifies local JSON data source.\n   *\n   * @param  {Query} query - Specifies query that need to process.\n   */\n\n  function getDataSource(dataSource, query) {\n    // eslint-disable-next-line\n    return new DataManager(dataSource).executeLocal(query);\n  }\n\n  ListBase.getDataSource = getDataSource;\n  /**\n   * Created JSON data based the UL and LI element\n   *\n   * @param  {HTMLElement|Element} element - UL element that need to convert as a JSON\n   * @param  {ListBaseOptions} options? - Specifies listbase option for fields.\n   */\n\n  function createJsonFromElement(element, options) {\n    const curOpt = extend({}, defaultListBaseOptions, options);\n    const fields = extend({}, ListBase.defaultMappedFields, curOpt.fields);\n    const curEle = element.cloneNode(true); // eslint-disable-next-line\n\n    const jsonAr = [];\n    curEle.classList.add('json-parent');\n    const childs = curEle.querySelectorAll('.json-parent>li');\n    curEle.classList.remove('json-parent');\n\n    for (let i = 0; i < childs.length; i++) {\n      const li = childs[i];\n      const anchor = li.querySelector('a');\n      const ul = li.querySelector('ul'); // eslint-disable-next-line\n\n      const json = {};\n      const childNodes = anchor ? anchor.childNodes : li.childNodes;\n      const keys = Object.keys(childNodes);\n\n      for (let i = 0; i < childNodes.length; i++) {\n        if (!childNodes[Number(keys[i])].hasChildNodes()) {\n          json[fields.text] = childNodes[Number(keys[i])].textContent;\n        }\n      }\n\n      let attributes$$1 = getAllAttributes(li);\n\n      if (attributes$$1.id) {\n        json[fields.id] = attributes$$1.id;\n        delete attributes$$1.id;\n      } else {\n        json[fields.id] = generateId();\n      }\n\n      if (Object.keys(attributes$$1).length) {\n        json[fields.htmlAttributes] = attributes$$1;\n      }\n\n      if (anchor) {\n        attributes$$1 = getAllAttributes(anchor);\n\n        if (Object.keys(attributes$$1).length) {\n          json[fields.urlAttributes] = attributes$$1;\n        }\n      }\n\n      if (ul) {\n        json[fields.child] = createJsonFromElement(ul, options);\n      }\n\n      jsonAr.push(json);\n    }\n\n    return jsonAr;\n  }\n\n  ListBase.createJsonFromElement = createJsonFromElement;\n\n  function typeofData(data) {\n    let match = {\n      typeof: null,\n      item: null\n    };\n\n    for (let i = 0; i < data.length; i++) {\n      if (!isNullOrUndefined(data[i])) {\n        return match = {\n          typeof: typeof data[i],\n          item: data[i]\n        };\n      }\n    }\n\n    return match;\n  }\n\n  function setAttribute(element, elementAttributes) {\n    const attr = {};\n    merge(attr, elementAttributes);\n\n    if (attr.class) {\n      addClass([element], attr.class.split(' '));\n      delete attr.class;\n    }\n\n    attributes(element, attr);\n  }\n\n  function getAllAttributes(element) {\n    const attributes$$1 = {};\n    const attr = element.attributes;\n\n    for (let index = 0; index < attr.length; index++) {\n      attributes$$1[attr[index].nodeName] = attr[index].nodeValue;\n    }\n\n    return attributes$$1;\n  }\n  /**\n   * Created UL element from content template.\n   *\n   * @param  {string} template - that need to convert and generate li element.\n   * @param  {{Object}[]} dataSource - Specifies local JSON data source.\n   * @param  {ListBaseOptions} options? - Specifies listbase option for fields.\n   */\n\n\n  function renderContentTemplate(createElement, template, dataSource, // eslint-disable-next-line\n  fields, options, componentInstance) {\n    cssClass = getModuleClass(defaultListBaseOptions.moduleName);\n    const ulElement = createElement('ul', {\n      className: cssClass.ul,\n      attrs: {\n        role: 'presentation'\n      }\n    });\n    const curOpt = extend({}, defaultListBaseOptions, options);\n    const curFields = extend({}, ListBase.defaultMappedFields, fields); // eslint-disable-next-line\n\n    const compiledString = compile(template);\n    const liCollection = [];\n    let value;\n    const id = generateId(); // generate id for drop-down-list option.\n\n    for (let i = 0; i < dataSource.length; i++) {\n      let fieldData = getFieldValues(dataSource[i], curFields);\n      const curItem = dataSource[i];\n      const isHeader = curItem.isHeader;\n\n      if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {\n        value = curItem;\n      } else {\n        value = fieldData[curFields.value];\n      }\n\n      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n        const curData = {\n          dataSource: dataSource,\n          curData: curItem,\n          text: value,\n          options: curOpt,\n          fields: curFields\n        };\n        curOpt.itemCreating(curData);\n      }\n\n      if (curOpt.itemCreating && typeof curOpt.itemCreating === 'function') {\n        fieldData = getFieldValues(dataSource[i], curFields);\n\n        if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {\n          value = curItem;\n        } else {\n          value = fieldData[curFields.value];\n        }\n      }\n\n      const li = createElement('li', {\n        id: id + '-' + i,\n        className: isHeader ? cssClass.group : cssClass.li,\n        attrs: {\n          role: 'presentation'\n        }\n      });\n\n      if (isHeader) {\n        if (typeof dataSource[i] === 'string' || typeof dataSource[i] === 'number') {\n          li.innerText = curItem;\n        } else {\n          li.innerText = fieldData[curFields.text];\n        }\n      } else {\n        const currentID = isHeader ? curOpt.groupTemplateID : curOpt.templateID;\n\n        if (isHeader) {\n          // eslint-disable-next-line\n          const compiledElement = compiledString(curItem, componentInstance, 'headerTemplate', currentID, !!curOpt.isStringTemplate, null, li);\n\n          if (compiledElement) {\n            append(compiledElement, li);\n          }\n        } else {\n          // eslint-disable-next-line\n          const compiledElement = compiledString(curItem, componentInstance, 'template', currentID, !!curOpt.isStringTemplate, null, li);\n\n          if (compiledElement) {\n            append(compiledElement, li);\n          }\n        }\n\n        li.setAttribute('data-value', isNullOrUndefined(value) ? 'null' : value);\n        li.setAttribute('role', 'option');\n      }\n\n      if (curOpt.itemCreated && typeof curOpt.itemCreated === 'function') {\n        const curData = {\n          dataSource: dataSource,\n          curData: curItem,\n          text: value,\n          item: li,\n          options: curOpt,\n          fields: curFields\n        };\n        curOpt.itemCreated(curData);\n      }\n\n      liCollection.push(li);\n    }\n\n    append(liCollection, ulElement);\n    return ulElement;\n  }\n\n  ListBase.renderContentTemplate = renderContentTemplate;\n  /**\n   * Created header items from group template.\n   *\n   * @param  {string} template - that need to convert and generate li element.\n   *\n   * @param  {{Object}[]} dataSource - Specifies local JSON data source.\n   *\n   * @param  {FieldsMapping} fields - Specifies fields for mapping the dataSource.\n   *\n   * @param  {Element[]} headerItems? - Specifies listbase header items.\n   */\n  // tslint:disable-next-line\n\n  function renderGroupTemplate(groupTemplate, groupDataSource, fields, // eslint-disable-next-line\n  headerItems, options, componentInstance) {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const compiledString = compile(groupTemplate);\n    const curFields = extend({}, ListBase.defaultMappedFields, fields);\n    const curOpt = extend({}, defaultListBaseOptions, options);\n    const category = curFields.groupBy;\n\n    for (const header of headerItems) {\n      const headerData = {};\n      headerData[category] = header.textContent;\n      header.innerHTML = ''; // eslint-disable-next-line\n\n      const compiledElement = compiledString(headerData, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, header);\n\n      if (compiledElement) {\n        append(compiledElement, header);\n      }\n    }\n\n    return headerItems;\n  }\n\n  ListBase.renderGroupTemplate = renderGroupTemplate;\n\n  function generateId() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  ListBase.generateId = generateId;\n\n  function processSubChild(createElement, fieldData, fields, ds, options, element, level) {\n    // Get SubList\n    const subDS = fieldData[fields.child] || [];\n    let hasChildren = fieldData[fields.hasChildren]; //Create Sub child\n\n    if (subDS.length) {\n      hasChildren = true;\n      element.classList.add(cssClass.hasChild);\n\n      if (options.processSubChild) {\n        const subLi = createListFromJson(createElement, subDS, options, ++level);\n        element.appendChild(subLi);\n      }\n    } // Create expand and collapse node\n\n\n    if (!!options.expandCollapse && hasChildren && !options.template) {\n      element.firstElementChild.classList.add(cssClass.iconWrapper); // eslint-disable-next-line @typescript-eslint/ban-types\n\n      const expandElement = options.expandIconPosition === 'Left' ? prepend : append;\n      expandElement([createElement('div', {\n        className: 'e-icons ' + options.expandIconClass\n      })], element.querySelector('.' + cssClass.textContent));\n    }\n  }\n\n  function generateSingleLevelLI(createElement, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {\n    const curOpt = extend({}, defaultListBaseOptions, options);\n    const ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n    let text = item;\n    let value = item;\n    let dataSource;\n\n    if (typeof item !== 'string' && typeof item !== 'number' && typeof item !== 'boolean') {\n      dataSource = item;\n      text = typeof fieldData[fields.text] === 'boolean' || typeof fieldData[fields.text] === 'number' ? fieldData[fields.text] : fieldData[fields.text] || '';\n      value = fieldData[fields.value];\n    }\n\n    let elementID;\n\n    if (!isNullOrUndefined(dataSource) && !isNullOrUndefined(fieldData[fields.id]) && fieldData[fields.id] !== '') {\n      elementID = id;\n    } else {\n      elementID = id + '-' + index;\n    }\n\n    const li = createElement('li', {\n      className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (isNullOrUndefined(className) ? '' : className),\n      id: elementID,\n      attrs: ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ? {\n        role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole\n      } : {}\n    }); // eslint-disable-next-line no-prototype-builtins\n\n    if (dataSource && fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled].toString() === 'false') {\n      li.classList.add(cssClass.disabled);\n    }\n\n    if (grpLI) {\n      li.innerText = text;\n    } else {\n      li.setAttribute('data-value', isNullOrUndefined(value) ? 'null' : value);\n      li.setAttribute('role', 'option'); // eslint-disable-next-line no-prototype-builtins\n\n      if (dataSource && fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {\n        setAttribute(li, fieldData[fields.htmlAttributes]);\n      }\n\n      if (innerElements.length && !curOpt.itemNavigable) {\n        append(innerElements, li);\n      }\n\n      if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {\n        li.appendChild(anchorTag(createElement, dataSource, fields, text, innerElements, curOpt.itemNavigable));\n      } else {\n        if (innerElements.length && curOpt.itemNavigable) {\n          append(innerElements, li);\n        }\n\n        li.appendChild(document.createTextNode(text));\n      }\n    }\n\n    return li;\n  }\n\n  function getModuleClass(moduleName) {\n    let moduleClass; // eslint-disable-next-line\n\n    return moduleClass = {\n      li: `e-${moduleName}-item`,\n      ul: `e-${moduleName}-parent e-ul`,\n      group: `e-${moduleName}-group-item`,\n      icon: `e-${moduleName}-icon`,\n      text: `e-${moduleName}-text`,\n      check: `e-${moduleName}-check`,\n      checked: 'e-checked',\n      selected: 'e-selected',\n      expanded: 'e-expanded',\n      textContent: 'e-text-content',\n      hasChild: 'e-has-child',\n      level: 'e-level',\n      url: `e-${moduleName}-url`,\n      collapsible: 'e-icon-collapsible',\n      disabled: 'e-disabled',\n      image: `e-${moduleName}-img`,\n      iconWrapper: 'e-icon-wrapper',\n      anchorWrap: 'e-anchor-wrap',\n      navigable: 'e-navigable'\n    };\n  }\n\n  function anchorTag(createElement, dataSource, fields, text, innerElements, isFullNavigation) {\n    const fieldData = getFieldValues(dataSource, fields);\n    const attr = {\n      href: fieldData[fields.url]\n    }; // eslint-disable-next-line no-prototype-builtins\n\n    if (fieldData.hasOwnProperty(fields.urlAttributes) && fieldData[fields.urlAttributes]) {\n      merge(attr, fieldData[fields.urlAttributes]);\n      attr.href = fieldData[fields.url] ? fieldData[fields.url] : fieldData[fields.urlAttributes].href;\n    }\n\n    let anchorTag;\n\n    if (!isFullNavigation) {\n      anchorTag = createElement('a', {\n        className: cssClass.text + ' ' + cssClass.url,\n        innerHTML: text\n      });\n    } else {\n      anchorTag = createElement('a', {\n        className: cssClass.text + ' ' + cssClass.url\n      });\n      const anchorWrapper = createElement('div', {\n        className: cssClass.anchorWrap\n      });\n\n      if (innerElements && innerElements.length) {\n        append(innerElements, anchorWrapper);\n      }\n\n      anchorWrapper.appendChild(document.createTextNode(text));\n      append([anchorWrapper], anchorTag);\n    }\n\n    setAttribute(anchorTag, attr);\n    return anchorTag;\n  } // tslint:disable-next-line\n\n  /* tslint:disable:align */\n\n\n  function generateLI(createElement, item, fieldData, // eslint-disable-next-line\n  fields, className, options, componentInstance) {\n    const curOpt = extend({}, defaultListBaseOptions, options);\n    const ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n    let text = item;\n    let uID;\n    let grpLI;\n    let dataSource;\n\n    if (typeof item !== 'string' && typeof item !== 'number') {\n      dataSource = item;\n      text = fieldData[fields.text] || ''; // tslint:disable-next-line\n\n      uID = isNullOrUndefined(fieldData['_id']) ? fieldData[fields.id] : fieldData['_id']; // eslint-disable-next-line no-prototype-builtins\n\n      grpLI = item.hasOwnProperty('isHeader') && item.isHeader ? true : false;\n    }\n\n    if (options && options.enableHtmlSanitizer) {\n      // eslint-disable-next-line no-self-assign\n      text = text;\n    }\n\n    const li = createElement('li', {\n      className: (grpLI === true ? cssClass.group : cssClass.li) + ' ' + (isNullOrUndefined(className) ? '' : className),\n      attrs: ariaAttributes.groupItemRole !== '' && ariaAttributes.itemRole !== '' ? {\n        role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole\n      } : {}\n    });\n\n    if (!isNullOrUndefined(uID) === true) {\n      li.setAttribute('data-uid', uID);\n    } else {\n      li.setAttribute('data-uid', generateId());\n    }\n\n    if (grpLI && options && options.groupTemplate) {\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      const compiledString = compile(options.groupTemplate); // eslint-disable-next-line\n\n      const compiledElement = compiledString(item, componentInstance, 'groupTemplate', curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, li);\n\n      if (compiledElement) {\n        append(compiledElement, li);\n      }\n    } else if (!grpLI && options && options.template) {\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      const compiledString = compile(options.template); // eslint-disable-next-line\n\n      const compiledElement = compiledString(item, componentInstance, 'template', curOpt.templateID, !!curOpt.isStringTemplate, null, li);\n\n      if (compiledElement) {\n        append(compiledElement, li);\n      }\n    } else {\n      const innerDiv = createElement('div', {\n        className: cssClass.textContent,\n        attrs: ariaAttributes.wrapperRole !== '' ? {\n          role: ariaAttributes.wrapperRole\n        } : {}\n      });\n\n      if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {\n        innerDiv.appendChild(anchorTag(createElement, dataSource, fields, text, null, curOpt.itemNavigable));\n      } else {\n        const element = createElement('span', {\n          className: cssClass.text,\n          attrs: ariaAttributes.itemText !== '' ? {\n            role: ariaAttributes.itemText\n          } : {}\n        });\n\n        if (options && options.enableHtmlSanitizer) {\n          element.innerText = text;\n        } else {\n          element.innerHTML = text;\n        }\n\n        innerDiv.appendChild(element);\n      }\n\n      li.appendChild(innerDiv);\n    }\n\n    return li;\n  }\n  /**\n   * Returns UL element based on the given LI element.\n   *\n   * @param  {HTMLElement[]} liElement - Specifies array of LI element.\n   *\n   * @param  {string} className? - Specifies class name that need to be added in UL element.\n   *\n   * @param  {ListBaseOptions} options? - Specifies ListBase options.\n   */\n\n\n  function generateUL(createElement, liElement, className, options) {\n    const curOpt = extend({}, defaultListBaseOptions, options);\n    const ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);\n    cssClass = getModuleClass(curOpt.moduleName);\n    const ulElement = createElement('ul', {\n      className: cssClass.ul + ' ' + (isNullOrUndefined(className) ? '' : className),\n      attrs: ariaAttributes.listRole !== '' ? {\n        role: ariaAttributes.listRole\n      } : {}\n    });\n    append(liElement, ulElement);\n    return ulElement;\n  }\n\n  ListBase.generateUL = generateUL;\n  /**\n   * Returns LI element with additional DIV tag based on the given LI element.\n   *\n   * @param  {liElement} liElement - Specifies LI element.\n   *\n   * @param  {string} className? - Specifies class name that need to be added in created DIV element.\n   *\n   * @param  {ListBaseOptions} options? - Specifies ListBase options.\n   */\n\n  function generateIcon(createElement, liElement, className, options) {\n    const curOpt = extend({}, defaultListBaseOptions, options);\n    cssClass = getModuleClass(curOpt.moduleName); // eslint-disable-next-line @typescript-eslint/ban-types\n\n    const expandElement = curOpt.expandIconPosition === 'Left' ? prepend : append;\n    expandElement([createElement('div', {\n      className: 'e-icons ' + curOpt.expandIconClass + ' ' + (isNullOrUndefined(className) ? '' : className)\n    })], liElement.querySelector('.' + cssClass.textContent));\n    return liElement;\n  }\n\n  ListBase.generateIcon = generateIcon;\n})(ListBase || (ListBase = {}));\n/**\n * Used to get dataSource item from complex data using fields.\n *\n * @param {Object} dataSource - Specifies an  JSON or String data.\n *\n * @param {FieldsMapping} fields - Fields that are mapped from the dataSource.\n */\n\n\nfunction getFieldValues(dataItem, fields) {\n  const fieldData = {};\n\n  if (isNullOrUndefined(dataItem) || typeof dataItem === 'string' || typeof dataItem === 'number' || !isNullOrUndefined(dataItem.isHeader)) {\n    return dataItem;\n  } else {\n    for (const field of Object.keys(fields)) {\n      const dataField = fields[field];\n      const value = !isNullOrUndefined(dataField) && typeof dataField === 'string' ? getValue(dataField, dataItem) : undefined;\n\n      if (!isNullOrUndefined(value)) {\n        fieldData[dataField] = value;\n      }\n    }\n  }\n\n  return fieldData;\n}\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}; // Effect Configuration Effect[] =  [fromViewBackward,fromViewForward,toViewBackward,toviewForward];\n\n\nconst effectsConfig = {\n  'None': [],\n  'SlideLeft': ['SlideRightOut', 'SlideLeftOut', 'SlideLeftIn', 'SlideRightIn'],\n  'SlideDown': ['SlideTopOut', 'SlideBottomOut', 'SlideBottomIn', 'SlideTopIn'],\n  'Zoom': ['FadeOut', 'FadeZoomOut', 'FadeZoomIn', 'FadeIn'],\n  'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']\n};\nconst effectsRTLConfig = {\n  'None': [],\n  'SlideLeft': ['SlideLeftOut', 'SlideRightOut', 'SlideRightIn', 'SlideLeftIn'],\n  'SlideDown': ['SlideBottomOut', 'SlideTopOut', 'SlideTopIn', 'SlideBottomIn'],\n  'Zoom': ['FadeZoomOut', 'FadeOut', 'FadeIn', 'FadeZoomIn'],\n  'Fade': ['FadeOut', 'FadeOut', 'FadeIn', 'FadeIn']\n}; // don't use space in classnames.\n\nconst classNames = {\n  root: 'e-listview',\n  hover: 'e-hover',\n  selected: 'e-active',\n  focused: 'e-focused',\n  parentItem: 'e-list-parent',\n  listItem: 'e-list-item',\n  listIcon: 'e-list-icon',\n  textContent: 'e-text-content',\n  listItemText: 'e-list-text',\n  groupListItem: 'e-list-group-item',\n  hasChild: 'e-has-child',\n  view: 'e-view',\n  header: 'e-list-header',\n  headerText: 'e-headertext',\n  headerTemplateText: 'e-headertemplate-text',\n  text: 'e-text',\n  disable: 'e-disabled',\n  content: 'e-content',\n  icon: 'e-icons',\n  backIcon: 'e-icon-back',\n  checkboxWrapper: 'e-checkbox-wrapper',\n  checkbox: 'e-checkbox',\n  checked: 'e-check',\n  checklist: 'e-checklist',\n  checkboxIcon: 'e-frame',\n  checkboxRight: 'e-checkbox-right',\n  checkboxLeft: 'e-checkbox-left',\n  listviewCheckbox: 'e-listview-checkbox',\n  itemCheckList: 'e-checklist',\n  virtualElementContainer: 'e-list-virtualcontainer'\n};\nconst LISTVIEW_TEMPLATE_PROPERTY = 'Template';\nconst LISTVIEW_GROUPTEMPLATE_PROPERTY = 'GroupTemplate';\nconst LISTVIEW_HEADERTEMPLATE_PROPERTY = 'HeaderTemplate';\nconst swipeVelocity = 0.5;\n/**\n * Represents the field settings of the ListView.\n */\n\nlet FieldSettings = /*#__PURE__*/(() => {\n  class FieldSettings extends ChildProperty {}\n\n  __decorate([Property('id')], FieldSettings.prototype, \"id\", void 0);\n\n  __decorate([Property('text')], FieldSettings.prototype, \"text\", void 0);\n\n  __decorate([Property('isChecked')], FieldSettings.prototype, \"isChecked\", void 0);\n\n  __decorate([Property('isVisible')], FieldSettings.prototype, \"isVisible\", void 0);\n\n  __decorate([Property('enabled')], FieldSettings.prototype, \"enabled\", void 0);\n\n  __decorate([Property('iconCss')], FieldSettings.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('child')], FieldSettings.prototype, \"child\", void 0);\n\n  __decorate([Property('tooltip')], FieldSettings.prototype, \"tooltip\", void 0);\n\n  __decorate([Property('groupBy')], FieldSettings.prototype, \"groupBy\", void 0);\n\n  __decorate([Property('text')], FieldSettings.prototype, \"sortBy\", void 0);\n\n  __decorate([Property('htmlAttributes')], FieldSettings.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property('tableName')], FieldSettings.prototype, \"tableName\", void 0);\n  /**\n   * Represents the EJ2 ListView control.\n   * ```html\n   * <div id=\"listview\">\n   * <ul>\n   * <li>Favorite</li>\n   * <li>Documents</li>\n   * <li>Downloads</li>\n   * </ul>\n   * </div>\n   * ```\n   * ```typescript\n   *   var listviewObject = new ListView({});\n   *   listviewObject.appendTo(\"#listview\");\n   * ```\n   */\n\n\n  return FieldSettings;\n})();\nlet ListView = /*#__PURE__*/(() => {\n  let ListView = class ListView extends Component {\n    /**\n     * Constructor for creating the widget\n     *\n     * @param options\n     *\n     * @param element\n     */\n    constructor(options, element) {\n      super(options, element);\n      this.previousSelectedItems = [];\n      this.hiddenItems = [];\n      this.enabledItems = [];\n      this.disabledItems = [];\n    }\n    /**\n     * @param newProp\n     *\n     * @param oldProp\n     *\n     * @private\n     */\n\n\n    onPropertyChanged(newProp, oldProp) {\n      for (const prop of Object.keys(newProp)) {\n        switch (prop) {\n          case 'htmlAttributes':\n            this.setHTMLAttribute();\n            break;\n\n          case 'cssClass':\n            this.setCSSClass(oldProp.cssClass);\n            break;\n\n          case 'enable':\n            this.setEnable();\n            break;\n\n          case 'width':\n          case 'height':\n            this.setSize();\n            break;\n\n          case 'enableRtl':\n            this.setEnableRTL();\n            break;\n\n          case 'fields':\n            // eslint-disable-next-line\n            this.listBaseOption.fields = this.fields.properties;\n\n            if (this.enableVirtualization) {\n              this.virtualizationModule.reRenderUiVirtualization();\n            } else {\n              this.reRender();\n            }\n\n            break;\n\n          case 'headerTitle':\n            if (!this.curDSLevel.length) {\n              this.header(this.headerTitle, false, 'header');\n            }\n\n            break;\n\n          case 'query':\n            if (this.enableVirtualization) {\n              this.virtualizationModule.reRenderUiVirtualization();\n            } else {\n              this.reRender();\n            }\n\n            break;\n\n          case 'showHeader':\n            this.header(this.headerTitle, false, 'header');\n            break;\n\n          case 'enableVirtualization':\n            if (!isNullOrUndefined(this.contentContainer)) {\n              detach(this.contentContainer);\n            }\n\n            this.refresh();\n            break;\n\n          case 'showCheckBox':\n          case 'checkBoxPosition':\n            if (this.enableVirtualization) {\n              this.virtualizationModule.reRenderUiVirtualization();\n            } else {\n              this.setCheckbox();\n            }\n\n            break;\n\n          case 'dataSource':\n            if (this.enableVirtualization) {\n              this.virtualizationModule.reRenderUiVirtualization();\n            } else {\n              this.reRender();\n            }\n\n            break;\n\n          case 'sortOrder':\n          case 'template':\n            if (!this.enableVirtualization) {\n              this.refresh();\n            }\n\n            break;\n\n          case 'showIcon':\n            if (this.enableVirtualization) {\n              this.virtualizationModule.reRenderUiVirtualization();\n            } else {\n              this.listBaseOption.showIcon = this.showIcon;\n              this.curViewDS = this.getSubDS();\n              this.resetCurrentList();\n            }\n\n            break;\n\n          default:\n            break;\n        }\n      }\n    } // Model Changes\n\n\n    setHTMLAttribute() {\n      if (Object.keys(this.htmlAttributes).length) {\n        attributes(this.element, this.htmlAttributes);\n      }\n    }\n\n    setCSSClass(oldCSSClass) {\n      if (this.cssClass) {\n        addClass([this.element], this.cssClass.split(' ').filter(css => css));\n      }\n\n      if (oldCSSClass) {\n        removeClass([this.element], oldCSSClass.split(' ').filter(css => css));\n      }\n    }\n\n    setSize() {\n      this.element.style.height = formatUnit(this.height);\n      this.element.style.width = formatUnit(this.width);\n      this.isWindow = this.element.clientHeight ? false : true;\n    }\n\n    setEnable() {\n      this.enableElement(this.element, this.enable);\n    }\n\n    setEnableRTL() {\n      if (this.enableRtl) {\n        this.element.classList.add('e-rtl');\n      } else {\n        this.element.classList.remove('e-rtl');\n      }\n    }\n\n    enableElement(element, isEnabled) {\n      if (isEnabled) {\n        element.classList.remove(classNames.disable);\n      } else {\n        element.classList.add(classNames.disable);\n      }\n    } // Support Component Functions\n\n\n    header(text, showBack, prop) {\n      if (this.headerEle === undefined && this.showHeader) {\n        if (this.enableHtmlSanitizer) {\n          this.setProperties({\n            headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle)\n          }, true);\n        }\n\n        this.headerEle = this.createElement('div', {\n          className: classNames.header\n        });\n        const innerHeaderEle = this.createElement('span', {\n          className: classNames.headerText,\n          innerHTML: this.headerTitle\n        });\n        const textEle = this.createElement('div', {\n          className: classNames.text,\n          innerHTML: innerHeaderEle.outerHTML\n        });\n        const hedBackButton = this.createElement('div', {\n          className: classNames.icon + ' ' + classNames.backIcon + ' e-but-back',\n          attrs: {\n            style: 'display:none;'\n          }\n        });\n        this.headerEle.appendChild(hedBackButton);\n        this.headerEle.appendChild(textEle);\n\n        if (this.headerTemplate) {\n          // eslint-disable-next-line\n          const compiledString = compile(this.headerTemplate);\n          const headerTemplateEle = this.createElement('div', {\n            className: classNames.headerTemplateText\n          }); // eslint-disable-next-line\n\n          const compiledElement = compiledString({}, this, prop, this.LISTVIEW_HEADERTEMPLATE_ID, null, null, this.headerEle);\n\n          if (compiledElement) {\n            append(compiledElement, headerTemplateEle);\n          }\n\n          append([headerTemplateEle], this.headerEle); // eslint-disable-next-line\n\n          if (this.isReact) {\n            this.renderReactTemplates();\n          }\n        }\n\n        if (this.headerTemplate && this.headerTitle) {\n          textEle.classList.add('header');\n        }\n\n        this.element.classList.add('e-has-header');\n        prepend([this.headerEle], this.element);\n      } else if (this.headerEle) {\n        if (this.showHeader) {\n          this.headerEle.style.display = '';\n          const textEle = this.headerEle.querySelector('.' + classNames.headerText);\n          const hedBackButton = this.headerEle.querySelector('.' + classNames.backIcon);\n\n          if (this.enableHtmlSanitizer) {\n            text = SanitizeHtmlHelper.sanitize(text);\n          }\n\n          textEle.innerHTML = text;\n\n          if (this.headerTemplate && showBack) {\n            textEle.parentElement.classList.remove('header');\n            this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('nested-header');\n          }\n\n          if (this.headerTemplate && !showBack) {\n            textEle.parentElement.classList.add('header');\n            this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.remove('nested-header');\n            this.headerEle.querySelector('.' + classNames.headerTemplateText).classList.add('header');\n          }\n\n          if (showBack === true) {\n            hedBackButton.style.display = '';\n          } else {\n            hedBackButton.style.display = 'none';\n          }\n        } else {\n          this.headerEle.style.display = 'none';\n        }\n      }\n    } // Animation Related Functions\n\n\n    switchView(fromView, toView, reverse) {\n      if (fromView && toView) {\n        const fPos = fromView.style.position;\n        const overflow = this.element.style.overflow !== 'hidden' ? this.element.style.overflow : '';\n        fromView.style.position = 'absolute';\n        fromView.classList.add('e-view');\n        let anim;\n        let duration = this.animation.duration;\n\n        if (this.animation.effect) {\n          anim = this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect];\n        } else {\n          const slideLeft = 'SlideLeft';\n          anim = effectsConfig[slideLeft];\n          reverse = this.enableRtl;\n          duration = 0;\n        }\n\n        this.element.style.overflow = 'hidden';\n        this.aniObj.animate(fromView, {\n          name: reverse === true ? anim[0] : anim[1],\n          duration: duration,\n          timingFunction: this.animation.easing,\n          // eslint-disable-next-line\n          end: model => {\n            fromView.style.display = 'none';\n            this.element.style.overflow = overflow;\n            fromView.style.position = fPos;\n            fromView.classList.remove('e-view');\n          }\n        });\n        toView.style.display = '';\n        this.aniObj.animate(toView, {\n          name: reverse === true ? anim[2] : anim[3],\n          duration: duration,\n          timingFunction: this.animation.easing,\n          end: () => {\n            this.trigger('actionComplete');\n          }\n        });\n        this.curUL = toView;\n      }\n    }\n\n    preRender() {\n      if (this.template) {\n        try {\n          if (document.querySelectorAll(this.template).length) {\n            this.setProperties({\n              template: document.querySelector(this.template).innerHTML.trim()\n            }, true);\n          }\n        } catch (e) {\n          compile(this.template);\n        }\n      }\n\n      this.listBaseOption = {\n        template: this.template,\n        headerTemplate: this.headerTemplate,\n        groupTemplate: this.groupTemplate,\n        expandCollapse: true,\n        listClass: '',\n        ariaAttributes: {\n          itemRole: 'option',\n          listRole: 'presentation',\n          itemText: '',\n          groupItemRole: 'group',\n          wrapperRole: 'presentation'\n        },\n        // eslint-disable-next-line\n        fields: this.fields.properties,\n        sortOrder: this.sortOrder,\n        showIcon: this.showIcon,\n        itemCreated: this.renderCheckbox.bind(this),\n        templateID: `${this.element.id}${LISTVIEW_TEMPLATE_PROPERTY}`,\n        groupTemplateID: `${this.element.id}${LISTVIEW_GROUPTEMPLATE_PROPERTY}`,\n        enableHtmlSanitizer: this.enableHtmlSanitizer\n      };\n      this.initialization();\n    }\n\n    initialization() {\n      this.curDSLevel = [];\n      this.animateOptions = {};\n      this.curViewDS = [];\n      this.currentLiElements = [];\n      this.isNestedList = false;\n      this.selectedData = [];\n      this.selectedId = [];\n      this.LISTVIEW_TEMPLATE_ID = `${this.element.id}${LISTVIEW_TEMPLATE_PROPERTY}`;\n      this.LISTVIEW_GROUPTEMPLATE_ID = `${this.element.id}${LISTVIEW_GROUPTEMPLATE_PROPERTY}`;\n      this.LISTVIEW_HEADERTEMPLATE_ID = `${this.element.id}${LISTVIEW_HEADERTEMPLATE_PROPERTY}`;\n      this.aniObj = new Animation(this.animateOptions);\n      this.removeElement(this.curUL);\n      this.removeElement(this.ulElement);\n      this.removeElement(this.headerEle);\n      this.removeElement(this.contentContainer);\n      this.curUL = this.ulElement = this.liCollection = this.headerEle = this.contentContainer = undefined;\n    }\n\n    renderCheckbox(args) {\n      if (args.item.classList.contains(classNames.hasChild)) {\n        this.isNestedList = true;\n      }\n\n      if (this.showCheckBox && this.isValidLI(args.item)) {\n        let checkboxElement;\n        let fieldData; // eslint-disable-next-line prefer-const\n\n        checkboxElement = createCheckBox(this.createElement, false, {\n          checked: false,\n          enableRtl: this.enableRtl,\n          cssClass: classNames.listviewCheckbox\n        });\n        checkboxElement.setAttribute('role', 'checkbox');\n        const frameElement = checkboxElement.querySelector('.' + classNames.checkboxIcon);\n        args.item.classList.add(classNames.itemCheckList);\n        args.item.firstElementChild.classList.add(classNames.checkbox);\n\n        if (typeof this.dataSource[0] !== 'string' && typeof this.dataSource[0] !== 'number') {\n          fieldData = getFieldValues(args.curData, this.listBaseOption.fields);\n\n          if (fieldData[this.listBaseOption.fields.isChecked]) {\n            this.checkInternally(args, checkboxElement);\n          }\n        } else if ((typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') && this.selectedData.indexOf(args.text) !== -1) {\n          this.checkInternally(args, checkboxElement);\n        }\n\n        checkboxElement.setAttribute('aria-checked', frameElement.classList.contains(classNames.checked) ? 'true' : 'false');\n\n        if (this.checkBoxPosition === 'Left') {\n          checkboxElement.classList.add(classNames.checkboxLeft);\n          args.item.firstElementChild.classList.add(classNames.checkboxLeft);\n          args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0]);\n        } else {\n          checkboxElement.classList.add(classNames.checkboxRight);\n          args.item.firstElementChild.classList.add(classNames.checkboxRight);\n          args.item.firstElementChild.appendChild(checkboxElement);\n        }\n\n        this.currentLiElements.push(args.item);\n\n        if (this.checkBoxPosition === 'Left') {\n          this.virtualCheckBox = args.item.firstElementChild.children[0];\n        } else {\n          this.virtualCheckBox = args.item.firstElementChild.lastElementChild;\n        }\n      }\n    }\n\n    checkInternally(args, checkboxElement) {\n      args.item.classList.add(classNames.selected);\n      args.item.setAttribute('aria-selected', 'true');\n      checkboxElement.querySelector('.' + classNames.checkboxIcon).classList.add(classNames.checked);\n      checkboxElement.setAttribute('aria-checked', 'true');\n    }\n    /**\n     * Checks the specific list item by passing the unchecked fields as an argument to this method.\n     *\n     * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.\n     */\n\n\n    checkItem(item) {\n      this.toggleCheckBase(item, true);\n    }\n\n    toggleCheckBase(item, checked) {\n      if (this.showCheckBox) {\n        let liElement = item;\n\n        if (item instanceof Object && item.constructor !== HTMLLIElement) {\n          liElement = this.getLiFromObjOrElement(item);\n        }\n\n        if (!isNullOrUndefined(liElement)) {\n          const checkboxIcon = liElement.querySelector('.' + classNames.checkboxIcon);\n\n          if (checked === true) {\n            liElement.classList.add(classNames.selected);\n          } else {\n            liElement.classList.remove(classNames.selected);\n          }\n\n          liElement.setAttribute('aria-selected', checked ? 'true' : 'false');\n\n          if (checked === true) {\n            checkboxIcon.classList.add(classNames.checked);\n          } else {\n            checkboxIcon.classList.remove(classNames.checked);\n          }\n\n          checkboxIcon.parentElement.setAttribute('aria-checked', checked ? 'true' : 'false');\n        }\n\n        this.setSelectedItemData(liElement);\n      }\n    }\n    /**\n     * Uncheck the specific list item by passing the checked fields as an argument to this method.\n     *\n     * @param  {Fields | HTMLElement | Element} item - It accepts Fields or HTML list element as an argument.\n     */\n\n\n    uncheckItem(item) {\n      this.toggleCheckBase(item, false);\n    }\n    /**\n     * Checks all the unchecked items in the ListView.\n     */\n\n\n    checkAllItems() {\n      this.toggleAllCheckBase(true);\n    }\n    /**\n     * Uncheck all the checked items in ListView.\n     */\n\n\n    uncheckAllItems() {\n      this.toggleAllCheckBase(false);\n    }\n\n    toggleAllCheckBase(checked) {\n      if (this.showCheckBox) {\n        for (let i = 0; i < this.liCollection.length; i++) {\n          const checkIcon = this.liCollection[i].querySelector('.' + classNames.checkboxIcon);\n\n          if (checkIcon) {\n            if (checked) {\n              if (!checkIcon.classList.contains(classNames.checked)) {\n                this.checkItem(this.liCollection[i]);\n              }\n            } else {\n              if (checkIcon.classList.contains(classNames.checked)) {\n                this.uncheckItem(this.liCollection[i]);\n              }\n            }\n          }\n        }\n\n        if (this.enableVirtualization) {\n          this.virtualizationModule.checkedItem(checked);\n        }\n      }\n    }\n\n    setCheckbox() {\n      if (this.showCheckBox) {\n        const liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));\n        const args = {\n          item: undefined,\n          curData: undefined,\n          dataSource: undefined,\n          fields: undefined,\n          options: undefined,\n          text: ''\n        };\n\n        for (let i = 0; i < liCollection.length; i++) {\n          const element = liCollection[i];\n          args.item = element; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          args.curData = this.getItemData(element);\n\n          if (element.querySelector('.' + classNames.checkboxWrapper)) {\n            this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));\n          }\n\n          this.renderCheckbox(args);\n\n          if (args.item.classList.contains(classNames.selected)) {\n            this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n          }\n        }\n      } else {\n        const liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.itemCheckList));\n\n        for (let i = 0; i < liCollection.length; i++) {\n          const element = liCollection[i];\n          element.classList.remove(classNames.selected);\n          element.firstElementChild.classList.remove(classNames.checkbox);\n          this.removeElement(element.querySelector('.' + classNames.checkboxWrapper));\n        }\n\n        if (this.selectedItems) {\n          this.selectedItems.item.classList.add(classNames.selected);\n        }\n      }\n    }\n    /**\n     * Refresh the height of the list item only on enabling the virtualization property.\n     */\n\n\n    refreshItemHeight() {\n      if (this.virtualizationModule) {\n        this.virtualizationModule.refreshItemHeight();\n      }\n    }\n\n    clickHandler(e) {\n      const target = e.target;\n      const classList = target.classList;\n      let closestElement;\n\n      if (classList.contains(classNames.backIcon) || classList.contains(classNames.headerText)) {\n        if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n          this.uncheckAllItems();\n        }\n\n        this.back();\n      } else {\n        let li = closest(target.parentNode, '.' + classNames.listItem);\n\n        if (li === null) {\n          li = target;\n        }\n\n        this.removeFocus();\n\n        if (this.enable && this.showCheckBox && this.isValidLI(li)) {\n          if (e.target.classList.contains(classNames.checkboxIcon)) {\n            li.classList.add(classNames.focused);\n\n            if (isNullOrUndefined(li.querySelector('.' + classNames.checked))) {\n              const args = {\n                curData: undefined,\n                dataSource: undefined,\n                fields: undefined,\n                options: undefined,\n                text: undefined,\n                item: li\n              };\n              this.checkInternally(args, args.item.querySelector('.' + classNames.checkboxWrapper));\n            } else {\n              this.uncheckItem(li);\n              li.classList.add(classNames.focused);\n            }\n\n            if (this.enableVirtualization) {\n              this.virtualizationModule.setCheckboxLI(li, e);\n            }\n\n            if (e) {\n              const eventArgs = this.selectEventData(li, e);\n              const checkIcon = li.querySelector('.' + classNames.checkboxIcon);\n              merge(eventArgs, {\n                isChecked: checkIcon.classList.contains(classNames.checked)\n              });\n              this.trigger('select', eventArgs);\n            }\n          } else if (li.classList.contains(classNames.hasChild)) {\n            this.removeHover();\n            this.removeSelect();\n            this.removeSelect(li);\n            this.setSelectLI(li, e);\n            li.classList.remove(classNames.selected);\n          } else {\n            this.setCheckboxLI(li, e);\n          }\n        } else {\n          this.setSelectLI(li, e);\n        }\n\n        closestElement = closest(e.target, 'li');\n\n        if (!isNullOrUndefined(closestElement)) {\n          if (closestElement.classList.contains('e-has-child') && !e.target.parentElement.classList.contains('e-listview-checkbox')) {\n            closestElement.classList.add(classNames.disable);\n          }\n        }\n      }\n    }\n\n    removeElement(element) {\n      return element && element.parentNode && element.parentNode.removeChild(element);\n    }\n\n    hoverHandler(e) {\n      const curLi = closest(e.target.parentNode, '.' + classNames.listItem);\n      this.setHoverLI(curLi);\n    } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    leaveHandler(e) {\n      this.removeHover();\n    }\n\n    homeKeyHandler(e, end) {\n      if (Object.keys(this.dataSource).length && this.curUL) {\n        if (this.selectedItems) {\n          this.selectedItems.item.setAttribute('aria-selected', 'false');\n        }\n\n        const li = this.curUL.querySelectorAll('.' + classNames.listItem);\n        const focusedElement = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);\n\n        if (focusedElement) {\n          focusedElement.classList.remove(classNames.focused);\n\n          if (!this.showCheckBox) {\n            focusedElement.classList.remove(classNames.selected);\n          }\n        }\n\n        const index = !end ? 0 : li.length - 1;\n\n        if (li[index].classList.contains(classNames.hasChild) || this.showCheckBox) {\n          li[index].classList.add(classNames.focused);\n        } else {\n          this.setSelectLI(li[index], e);\n        }\n\n        if (li[index]) {\n          this.element.setAttribute('aria-activedescendant', li[index].id.toString());\n        } else {\n          this.element.removeAttribute('aria-activedescendant');\n        }\n      }\n    }\n\n    onArrowKeyDown(e, prev) {\n      let siblingLI;\n      let li;\n      const hasChild = !isNullOrUndefined(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;\n\n      if (hasChild || this.showCheckBox) {\n        li = this.curUL.querySelector('.' + classNames.focused) || this.curUL.querySelector('.' + classNames.selected);\n        siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);\n\n        if (!isNullOrUndefined(siblingLI)) {\n          if (li) {\n            li.classList.remove(classNames.focused);\n\n            if (!this.showCheckBox) {\n              li.classList.remove(classNames.selected);\n            }\n          }\n\n          if (siblingLI.classList.contains(classNames.hasChild) || this.showCheckBox) {\n            siblingLI.classList.add(classNames.focused);\n          } else {\n            this.setSelectLI(siblingLI, e);\n          }\n        }\n      } else {\n        li = this.curUL.querySelector('.' + classNames.selected);\n        siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll('.' + classNames.listItem), li, prev);\n        this.setSelectLI(siblingLI, e);\n      }\n\n      if (siblingLI) {\n        this.element.setAttribute('aria-activedescendant', siblingLI.id.toString());\n      } else {\n        this.element.removeAttribute('aria-activedescendant');\n      }\n\n      return siblingLI;\n    }\n\n    arrowKeyHandler(e, prev) {\n      e.preventDefault();\n\n      if (Object.keys(this.dataSource).length && this.curUL) {\n        const siblingLI = this.onArrowKeyDown(e, prev);\n        const elementTop = this.element.getBoundingClientRect().top;\n        const elementHeight = this.element.getBoundingClientRect().height;\n        const firstItemBounds = this.curUL.querySelector('.' + classNames.listItem).getBoundingClientRect();\n        let heightDiff;\n        let groupItemBounds;\n\n        if (this.fields.groupBy) {\n          groupItemBounds = this.curUL.querySelector('.' + classNames.groupListItem).getBoundingClientRect();\n        }\n\n        if (siblingLI) {\n          const siblingTop = siblingLI.getBoundingClientRect().top;\n          const siblingHeight = siblingLI.getBoundingClientRect().height;\n\n          if (!prev) {\n            const height = this.isWindow ? window.innerHeight : elementHeight;\n            heightDiff = this.isWindow ? siblingTop + siblingHeight : siblingTop - elementTop + siblingHeight;\n\n            if (heightDiff > height) {\n              if (this.isWindow === true) {\n                window.scroll(0, pageYOffset + (heightDiff - height));\n              } else {\n                this.element.scrollTop = this.element.scrollTop + (heightDiff - height);\n              }\n            }\n          } else {\n            heightDiff = this.isWindow ? siblingTop : siblingTop - elementTop;\n\n            if (heightDiff < 0) {\n              if (this.isWindow === true) {\n                window.scroll(0, pageYOffset + heightDiff);\n              } else {\n                this.element.scrollTop = this.element.scrollTop + heightDiff;\n              }\n            }\n          }\n        } else if (this.enableVirtualization && prev && this.virtualizationModule.uiFirstIndex) {\n          this.onUIScrolled = () => {\n            this.onArrowKeyDown(e, prev);\n            this.onUIScrolled = undefined;\n          };\n\n          heightDiff = this.virtualizationModule.listItemHeight;\n\n          if (this.isWindow === true) {\n            window.scroll(0, pageYOffset - heightDiff);\n          } else {\n            this.element.scrollTop = this.element.scrollTop - heightDiff;\n          }\n        } else if (prev) {\n          if (this.showHeader && this.headerEle) {\n            const topHeight = groupItemBounds ? groupItemBounds.top : firstItemBounds.top;\n            const headerBounds = this.headerEle.getBoundingClientRect();\n            heightDiff = headerBounds.top < 0 ? headerBounds.height - topHeight : 0;\n\n            if (this.isWindow === true) {\n              window.scroll(0, pageYOffset - heightDiff);\n            } else {\n              this.element.scrollTop = 0;\n            }\n          } else if (this.fields.groupBy) {\n            heightDiff = this.isWindow ? groupItemBounds.top < 0 ? groupItemBounds.top : 0 : elementTop - firstItemBounds.top + groupItemBounds.height;\n\n            if (this.isWindow === true) {\n              window.scroll(0, pageYOffset + heightDiff);\n            } else {\n              this.element.scrollTop = this.element.scrollTop - heightDiff;\n            }\n          }\n        }\n      }\n    }\n\n    enterKeyHandler(e) {\n      if (Object.keys(this.dataSource).length && this.curUL) {\n        const hasChild = !isNullOrUndefined(this.curUL.querySelector('.' + classNames.hasChild)) ? true : false;\n        const li = this.curUL.querySelector('.' + classNames.focused);\n\n        if (hasChild && li) {\n          li.classList.remove(classNames.focused);\n\n          if (this.showCheckBox) {\n            this.removeSelect();\n            this.removeSelect(li);\n            this.removeHover();\n          }\n\n          this.setSelectLI(li, e);\n        }\n      }\n    }\n\n    spaceKeyHandler(e) {\n      if (this.enable && this.showCheckBox && Object.keys(this.dataSource).length && this.curUL) {\n        const li = this.curUL.querySelector('.' + classNames.focused);\n        let checkboxElement;\n        let checkIcon;\n\n        if (!isNullOrUndefined(li) && isNullOrUndefined(li.querySelector('.' + classNames.checked))) {\n          const args = {\n            curData: undefined,\n            dataSource: undefined,\n            fields: undefined,\n            options: undefined,\n            text: undefined,\n            item: li\n          };\n          checkboxElement = args.item.querySelector('.' + classNames.checkboxWrapper);\n          this.checkInternally(args, checkboxElement);\n          checkIcon = checkboxElement.querySelector('.' + classNames.checkboxIcon + '.' + classNames.icon);\n        } else {\n          this.uncheckItem(li);\n        }\n\n        const eventArgs = this.selectEventData(li, e);\n        merge(eventArgs, {\n          isChecked: checkIcon ? checkIcon.classList.contains(classNames.checked) : false\n        });\n        this.trigger('select', eventArgs);\n      }\n    }\n\n    keyActionHandler(e) {\n      switch (e.keyCode) {\n        case 36:\n          this.homeKeyHandler(e);\n          break;\n\n        case 35:\n          this.homeKeyHandler(e, true);\n          break;\n\n        case 40:\n          this.arrowKeyHandler(e);\n          break;\n\n        case 38:\n          this.arrowKeyHandler(e, true);\n          break;\n\n        case 13:\n          this.enterKeyHandler(e);\n          break;\n\n        case 8:\n          if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n            this.uncheckAllItems();\n          }\n\n          this.back();\n          break;\n\n        case 32:\n          this.spaceKeyHandler(e);\n          break;\n      }\n    }\n\n    swipeActionHandler(e) {\n      if (e.swipeDirection === 'Right' && e.velocity > swipeVelocity && e.originalEvent.type === 'touchend') {\n        if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {\n          this.uncheckAllItems();\n        }\n\n        this.back();\n      }\n    }\n\n    focusout() {\n      if (Object.keys(this.dataSource).length && this.curUL) {\n        const focusedElement = this.curUL.querySelector('.' + classNames.focused);\n        const activeElement = this.curUL.querySelector('[aria-selected = true]');\n\n        if (focusedElement) {\n          focusedElement.classList.remove(classNames.focused);\n\n          if (activeElement && !this.showCheckBox) {\n            activeElement.classList.add(classNames.selected);\n          }\n        }\n      }\n    }\n\n    wireEvents() {\n      EventHandler.add(this.element, 'keydown', this.keyActionHandler, this);\n      EventHandler.add(this.element, 'click', this.clickHandler, this);\n      EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);\n      EventHandler.add(this.element, 'mouseout', this.leaveHandler, this);\n      EventHandler.add(this.element, 'focusout', this.focusout, this);\n      this.touchModule = new Touch(this.element, {\n        swipe: this.swipeActionHandler.bind(this)\n      });\n    }\n\n    unWireEvents() {\n      EventHandler.remove(this.element, 'click', this.clickHandler);\n      EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n      EventHandler.remove(this.element, 'mouseout', this.leaveHandler);\n      EventHandler.remove(this.element, 'mouseover', this.hoverHandler);\n      EventHandler.remove(this.element, 'mouseout', this.leaveHandler);\n      this.touchModule.destroy();\n    }\n\n    removeFocus() {\n      const focusedLI = this.element.querySelectorAll('.' + classNames.focused);\n\n      for (const ele of focusedLI) {\n        ele.classList.remove(classNames.focused);\n      }\n    }\n\n    removeHover() {\n      const hoverLI = this.element.querySelector('.' + classNames.hover);\n\n      if (hoverLI) {\n        hoverLI.classList.remove(classNames.hover);\n      }\n    }\n\n    removeSelect(li) {\n      if (isNullOrUndefined(li)) {\n        const selectedLI = this.element.querySelectorAll('.' + classNames.selected);\n\n        for (const ele of selectedLI) {\n          if (this.showCheckBox && ele.querySelector('.' + classNames.checked)) {\n            continue;\n          } else {\n            ele.setAttribute('aria-selected', 'false');\n            ele.classList.remove(classNames.selected);\n          }\n        }\n      } else {\n        li.classList.remove(classNames.selected);\n        li.setAttribute('aria-selected', 'false');\n      }\n    }\n\n    isValidLI(li) {\n      return li && li.classList.contains(classNames.listItem) && !li.classList.contains(classNames.groupListItem) && !li.classList.contains(classNames.disable);\n    }\n\n    setCheckboxLI(li, e) {\n      if (this.isValidLI(li) && this.enable && this.showCheckBox) {\n        if (this.curUL.querySelector('.' + classNames.focused)) {\n          this.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);\n        }\n\n        li.classList.add(classNames.focused);\n        const checkboxElement = li.querySelector('.' + classNames.checkboxWrapper);\n        const checkIcon = checkboxElement.querySelector('.' + classNames.checkboxIcon + '.' + classNames.icon);\n        this.removeHover();\n\n        if (!checkIcon.classList.contains(classNames.checked)) {\n          checkIcon.classList.add(classNames.checked);\n          li.classList.add(classNames.selected);\n          li.setAttribute('aria-selected', 'true');\n        } else {\n          checkIcon.classList.remove(classNames.checked);\n          li.classList.remove(classNames.selected);\n          li.setAttribute('aria-selected', 'false');\n        }\n\n        checkboxElement.setAttribute('aria-checked', checkIcon.classList.contains(classNames.checked) ? 'true' : 'false');\n        const eventArgs = this.selectEventData(li, e);\n        merge(eventArgs, {\n          isChecked: checkIcon.classList.contains(classNames.checked)\n        });\n\n        if (this.enableVirtualization) {\n          this.virtualizationModule.setCheckboxLI(li, e);\n        }\n\n        this.trigger('select', eventArgs);\n        this.setSelectedItemData(li);\n        this.renderSubList(li);\n      }\n    }\n\n    selectEventData(li, e) {\n      const data = this.getItemData(li);\n      const fieldData = getFieldValues(data, this.listBaseOption.fields);\n      let selectedItem;\n\n      if (!isNullOrUndefined(data) && typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number') {\n        selectedItem = {\n          item: li,\n          text: li && li.innerText.trim(),\n          data: this.dataSource\n        };\n      } else {\n        selectedItem = // eslint-disable-next-line\n        {\n          item: li,\n          text: fieldData && fieldData[this.listBaseOption.fields.text],\n          // eslint-disable-next-line\n          data: data\n        };\n      }\n\n      const eventArgs = {};\n      merge(eventArgs, selectedItem);\n\n      if (e) {\n        merge(eventArgs, {\n          isInteracted: true,\n          event: e,\n          index: this.curUL && Array.prototype.indexOf.call(this.curUL.children, li)\n        });\n      }\n\n      return eventArgs;\n    }\n\n    setSelectedItemData(li) {\n      const data = this.getItemData(li); // eslint-disable-next-line\n\n      const fieldData = getFieldValues(data, this.listBaseOption.fields);\n\n      if (!isNullOrUndefined(data) && (typeof this.dataSource[0] === 'string' || typeof this.dataSource[0] === 'number')) {\n        this.selectedItems = {\n          item: li,\n          text: li && li.innerText.trim(),\n          data: this.dataSource\n        };\n      } else {\n        this.selectedItems = {\n          item: li,\n          // eslint-disable-next-line\n          text: fieldData && fieldData[this.listBaseOption.fields.text],\n          // eslint-disable-next-line\n          data: data\n        };\n      }\n    }\n\n    setSelectLI(li, e) {\n      if (this.isValidLI(li) && !li.classList.contains(classNames.selected) && this.enable) {\n        if (!this.showCheckBox) {\n          this.removeSelect();\n        }\n\n        li.classList.add(classNames.selected);\n        li.setAttribute('aria-selected', 'true');\n        this.removeHover();\n        this.setSelectedItemData(li);\n\n        if (this.enableVirtualization) {\n          this.virtualizationModule.setSelectLI(li, e);\n        }\n\n        const eventArgs = this.selectEventData(li, e);\n        this.trigger('select', eventArgs);\n        this.selectedLI = li;\n        this.renderSubList(li);\n      }\n    }\n\n    setHoverLI(li) {\n      if (this.isValidLI(li) && !li.classList.contains(classNames.hover) && this.enable) {\n        const lastLi = this.element.querySelectorAll('.' + classNames.hover);\n\n        if (lastLi && lastLi.length) {\n          removeClass(lastLi, classNames.hover);\n        }\n\n        if (!li.classList.contains(classNames.selected) || this.showCheckBox) {\n          li.classList.add(classNames.hover);\n        }\n      }\n    } //Data Source Related Functions\n\n\n    getSubDS() {\n      const levelKeys = this.curDSLevel;\n\n      if (levelKeys.length) {\n        let ds = this.localData;\n\n        for (const key of levelKeys) {\n          const field = {}; // eslint-disable-next-line\n\n          field[this.fields.id] = key;\n          this.curDSJSON = this.findItemFromDS(ds, field);\n          const fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);\n          ds = this.curDSJSON ? fieldData[this.fields.child] : ds;\n        }\n\n        return ds;\n      }\n\n      return this.localData;\n    }\n\n    getItemData(li) {\n      const dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;\n      const fields = this.getElementUID(li);\n      let curDS;\n\n      if (isNullOrUndefined(this.element.querySelector('.' + classNames.hasChild)) && this.fields.groupBy) {\n        curDS = this.curViewDS;\n      } else {\n        curDS = dataSource;\n      }\n\n      return this.findItemFromDS(curDS, fields);\n    }\n\n    findItemFromDS(dataSource, fields, parent) {\n      let resultJSON;\n\n      if (dataSource && dataSource.length && fields) {\n        dataSource.some(data => {\n          const fieldData = // eslint-disable-next-line\n          getFieldValues(data, this.listBaseOption.fields); //(!(fid) || id === fid) && (!(ftext) || text === ftext) && (!!fid || !!ftext)\n\n          if ((fields[this.fields.id] || fields[this.fields.text]) && (!fields[this.fields.id] || (!isNullOrUndefined(fieldData[this.fields.id]) && fieldData[this.fields.id].toString()) === fields[this.fields.id].toString()) && (!fields[this.fields.text] || fieldData[this.fields.text] === fields[this.fields.text])) {\n            resultJSON = parent ? dataSource : data;\n          } else if (typeof data !== 'object' && dataSource.indexOf(data) !== -1) {\n            resultJSON = parent ? dataSource : data;\n          } else if (!isNullOrUndefined(fields[this.fields.id]) && isNullOrUndefined(fieldData[this.fields.id])) {\n            const li = this.element.querySelector('[data-uid=\"' + fields[this.fields.id] + '\"]'); // eslint-disable-next-line\n\n            if (li && li.innerText.trim() === fieldData[this.fields.text]) {\n              resultJSON = data;\n            } // eslint-disable-next-line\n\n          } else if (fieldData.hasOwnProperty(this.fields.child) && fieldData[this.fields.child].length) {\n            resultJSON = this.findItemFromDS(fieldData[this.fields.child], fields, parent);\n          }\n\n          return !!resultJSON;\n        });\n      } else {\n        resultJSON = dataSource;\n      }\n\n      return resultJSON;\n    }\n\n    getQuery() {\n      const columns = [];\n      const query = this.query ? this.query : new Query();\n\n      if (!this.query) {\n        // eslint-disable-next-line\n        for (const column of Object.keys(this.fields.properties)) {\n          if (column !== 'tableName' && !!this.fields[column] && this.fields[column] !== ListBase.defaultMappedFields[column] && columns.indexOf(this.fields[column]) === -1) {\n            columns.push(this.fields[column]);\n          }\n        }\n\n        query.select(columns); // eslint-disable-next-line\n\n        if (this.fields.properties.hasOwnProperty('tableName')) {\n          query.from(this.fields.tableName);\n        }\n      }\n\n      return query;\n    }\n\n    setViewDataSource(dataSource = this.localData) {\n      if (dataSource && this.fields.groupBy) {\n        if (this.sortOrder !== 'None') {\n          this.curViewDS = ListBase.groupDataSource(ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy)), this.listBaseOption.fields, this.sortOrder);\n        } else {\n          this.curViewDS = ListBase.groupDataSource(dataSource, this.listBaseOption.fields, this.sortOrder);\n        }\n      } else if (dataSource && this.sortOrder !== 'None') {\n        this.curViewDS = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, this.fields.sortBy));\n      } else {\n        this.curViewDS = dataSource;\n      }\n    }\n\n    isInAnimation() {\n      return this.curUL.classList.contains('.e-animate');\n    }\n\n    renderRemoteLists(e, listViewComponent) {\n      if (this.isDestroyed) {\n        return;\n      }\n\n      this.localData = e.result;\n      listViewComponent.removeElement(listViewComponent.contentContainer);\n      this.renderList();\n      this.trigger('actionComplete', e);\n    }\n\n    triggerActionFailure(e) {\n      if (this.isDestroyed) {\n        return;\n      }\n\n      this.trigger('actionFailure', e);\n    }\n\n    setLocalData() {\n      this.trigger('actionBegin'); // eslint-disable-next-line\n\n      const listViewComponent = this;\n\n      if (this.dataSource instanceof DataManager) {\n        if (this.dataSource.ready) {\n          this.dataSource.ready.then(e => {\n            /* eslint-disable */\n            this.isOffline = this.dataSource.dataSource.offline;\n\n            if (this.dataSource instanceof DataManager && this.isOffline) {\n              this.renderRemoteLists(e, listViewComponent);\n            }\n          }).catch(e => {\n            this.triggerActionFailure(e);\n          });\n        } else {\n          this.dataSource.executeQuery(this.getQuery()).then(e => {\n            this.renderRemoteLists(e, listViewComponent);\n          }).catch(e => {\n            this.triggerActionFailure(e);\n          });\n        }\n      } else if (!this.dataSource || !this.dataSource.length) {\n        const ul = this.element.querySelector('ul');\n\n        if (ul) {\n          remove(ul);\n          this.setProperties({\n            dataSource: ListBase.createJsonFromElement(ul)\n          }, true);\n          this.localData = this.dataSource;\n          this.renderList();\n          this.trigger('actionComplete', {\n            data: this.localData\n          });\n        }\n      } else {\n        this.localData = this.dataSource;\n        this.renderList();\n        this.trigger('actionComplete', {\n          data: this.localData\n        });\n      }\n    }\n\n    reRender() {\n      this.removeElement(this.headerEle);\n      this.removeElement(this.ulElement);\n      this.removeElement(this.contentContainer); // eslint-disable-next-line\n\n      if (this.isReact) {\n        this.clearTemplate();\n      }\n\n      if (Object.keys(window).indexOf('ejsInterop') === -1) {\n        this.element.innerHTML = '';\n      }\n\n      this.headerEle = this.ulElement = this.liCollection = undefined;\n      this.header();\n      this.setLocalData();\n    }\n\n    resetCurrentList() {\n      this.setViewDataSource(this.curViewDS);\n      this.contentContainer.innerHTML = '';\n      this.createList();\n      this.renderIntoDom(this.curUL);\n    }\n\n    setAttributes(liElements) {\n      for (let i = 0; i < liElements.length; i++) {\n        const element = liElements[i];\n\n        if (element.classList.contains('e-list-item')) {\n          element.setAttribute('id', this.element.id + '_' + element.getAttribute('data-uid'));\n          element.setAttribute('aria-selected', 'false');\n          element.setAttribute('tabindex', '-1');\n        }\n      }\n    }\n\n    createList() {\n      this.currentLiElements = [];\n      this.isNestedList = false;\n      this.ulElement = this.curUL = ListBase.createList(this.createElement, this.curViewDS, this.listBaseOption, null, this);\n      this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n      this.setAttributes(this.liCollection);\n    }\n\n    exceptionEvent(e) {\n      this.trigger('actionFailure', e);\n    }\n\n    UpdateCurrentUL() {\n      this.ulElement = this.curUL = this.element.querySelector('.' + classNames.parentItem);\n\n      if (this.curUL) {\n        // eslint-disable-next-line\n        this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n      }\n    }\n\n    renderSubList(li) {\n      this.liElement = li;\n      const uID = li.getAttribute('data-uid');\n\n      if (li.classList.contains(classNames.hasChild) && uID) {\n        const ul = closest(li.parentNode, '.' + classNames.parentItem);\n        let ele = this.element.querySelector('[pid=\\'' + uID + '\\']');\n        this.curDSLevel.push(uID);\n        this.setViewDataSource(this.getSubDS());\n\n        if (!ele) {\n          const data = this.curViewDS;\n          ele = ListBase.createListFromJson(this.createElement, data, this.listBaseOption, this.curDSLevel.length, null, this); // eslint-disable-next-line\n\n          if (this.isReact) {\n            this.renderReactTemplates();\n          }\n\n          const lists = ele.querySelectorAll('.' + classNames.listItem);\n          this.setAttributes(lists);\n          ele.setAttribute('pID', uID);\n          ele.style.display = 'none';\n          this.renderIntoDom(ele);\n        }\n\n        this.switchView(ul, ele);\n        this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n\n        if (this.selectedItems) {\n          const fieldData = getFieldValues(this.selectedItems.data, this.listBaseOption.fields); // eslint-disable-next-line\n\n          this.header(fieldData[this.listBaseOption.fields.text], true, 'header');\n        }\n\n        this.selectedLI = undefined;\n      }\n    }\n\n    renderIntoDom(ele) {\n      this.contentContainer.appendChild(ele);\n    }\n\n    renderList(data) {\n      this.setViewDataSource(data);\n\n      if (this.enableVirtualization) {\n        if (Object.keys(this.dataSource).length) {\n          if ((this.template || this.groupTemplate) && !this.virtualizationModule.isNgTemplate()) {\n            if (this.isReact) {\n              if (typeof this.template == \"string\") {\n                this.listBaseOption.template = null;\n              }\n\n              if (typeof this.groupTemplate == \"string\") {\n                this.listBaseOption.groupTemplate = null;\n              }\n            } else {\n              this.listBaseOption.template = null;\n              this.listBaseOption.groupTemplate = null;\n            }\n\n            this.listBaseOption.itemCreated = this.virtualizationModule.createUIItem.bind(this.virtualizationModule);\n          }\n        }\n\n        this.virtualizationModule.uiVirtualization();\n      } else {\n        this.createList();\n        this.contentContainer = this.createElement('div', {\n          className: classNames.content\n        });\n        this.element.appendChild(this.contentContainer);\n        this.renderIntoDom(this.ulElement); // eslint-disable-next-line\n\n        if (this.isReact) {\n          this.renderReactTemplates();\n        }\n      }\n    }\n\n    getElementUID(obj) {\n      let fields = {};\n\n      if (obj instanceof Element) {\n        // eslint-disable-next-line\n        fields[this.fields.id] = obj.getAttribute('data-uid');\n      } else {\n        fields = obj;\n      }\n\n      return fields;\n    }\n    /**\n     * Initializes the ListView component rendering.\n     */\n\n\n    render() {\n      this.element.classList.add(classNames.root);\n      attributes(this.element, {\n        role: 'list',\n        tabindex: '0'\n      });\n      this.setCSSClass();\n      this.setEnableRTL();\n      this.setEnable();\n      this.setSize();\n      this.wireEvents();\n      this.header();\n      this.setLocalData();\n      this.setHTMLAttribute();\n      this.rippleFn = rippleEffect(this.element, {\n        selector: '.' + classNames.listItem\n      });\n      this.renderComplete();\n    }\n    /**\n     * It is used to destroy the ListView component.\n     */\n\n\n    destroy() {\n      // eslint-disable-next-line\n      if (this.isReact) {\n        this.clearTemplate();\n      }\n\n      this.unWireEvents();\n      const classAr = [classNames.root, classNames.disable, 'e-rtl', 'e-has-header', 'e-lib'].concat(this.cssClass.split(' ').filter(css => css));\n      removeClass([this.element], classAr);\n      this.element.removeAttribute('role');\n      this.element.removeAttribute('tabindex');\n      this.curUL = this.ulElement = this.liCollection = this.headerEle = undefined;\n      this.element.innerHTML = '';\n      super.destroy();\n    }\n    /**\n     * Switches back from the navigated sub list item.\n     */\n\n\n    back() {\n      const pID = this.curDSLevel[this.curDSLevel.length - 1];\n\n      if (pID === undefined || this.isInAnimation()) {\n        return;\n      }\n\n      this.curDSLevel.pop();\n      this.setViewDataSource(this.getSubDS());\n      let toUL = this.element.querySelector('[data-uid=\\'' + pID + '\\']');\n      const fromUL = this.curUL;\n\n      if (!toUL) {\n        this.createList();\n        this.renderIntoDom(this.ulElement);\n        toUL = this.curUL;\n      } else {\n        toUL = toUL.parentElement;\n      }\n\n      const fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields); // eslint-disable-next-line\n\n      const text = fieldData[this.fields.text];\n      this.switchView(fromUL, toUL, true);\n      this.removeFocus();\n      const li = this.element.querySelector('[data-uid=\\'' + pID + '\\']');\n      li.classList.remove(classNames.disable);\n      li.classList.add(classNames.focused);\n\n      if (this.showCheckBox && li.querySelector('.' + classNames.checkboxIcon).classList.contains(classNames.checked)) {\n        li.setAttribute('aria-selected', 'true');\n      } else {\n        li.classList.remove(classNames.selected);\n        li.setAttribute('aria-selected', 'false');\n      }\n\n      this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n\n      if (this.enableHtmlSanitizer) {\n        this.setProperties({\n          headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle)\n        }, true);\n      }\n\n      this.header(this.curDSLevel.length ? text : this.headerTitle, this.curDSLevel.length ? true : false, 'header');\n    }\n    /**\n     * Selects the list item from the ListView by passing the elements or field object.\n     *\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n\n\n    selectItem(item) {\n      if (this.enableVirtualization) {\n        this.virtualizationModule.selectItem(item);\n      } else if (this.showCheckBox) {\n        this.setCheckboxLI(this.getLiFromObjOrElement(item));\n      } else {\n        if (isNullOrUndefined(item) === true) {\n          this.removeSelect();\n        } else {\n          this.setSelectLI(this.getLiFromObjOrElement(item));\n        }\n      }\n    }\n\n    getLiFromObjOrElement(obj) {\n      let li;\n      const dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;\n\n      if (!isNullOrUndefined(obj)) {\n        if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {\n          if (obj instanceof Element) {\n            const uid = obj.getAttribute('data-uid').toString();\n\n            for (let i = 0; i < this.liCollection.length; i++) {\n              if (this.liCollection[i].getAttribute('data-uid').toString() === uid) {\n                li = this.liCollection[i];\n                break;\n              }\n            }\n          } else {\n            Array.prototype.some.call(this.curUL.querySelectorAll('.' + classNames.listItem), item => {\n              if (item.innerText.trim() === obj.toString()) {\n                li = item;\n                return true;\n              } else {\n                return false;\n              }\n            });\n          }\n        } else {\n          const resultJSON = this.getItemData(obj);\n          const fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n\n          if (resultJSON) {\n            li = this.element.querySelector('[data-uid=\"' + fieldData[this.fields.id] + '\"]');\n\n            if (!this.enableVirtualization && isNullOrUndefined(li)) {\n              const curLi = this.element.querySelectorAll('.' + classNames.listItem);\n\n              for (let i = 0; i < curLi.length; i++) {\n                // eslint-disable-next-line\n                if (curLi[i].innerText.trim() === fieldData[this.fields.text]) {\n                  li = curLi[i];\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return li;\n    }\n    /**\n     * Selects multiple list items from the ListView.\n     *\n     * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of\n     *  elements or array of fields Object with ID and Text fields.\n     */\n\n\n    selectMultipleItems(item) {\n      if (!isNullOrUndefined(item)) {\n        for (let i = 0; i < item.length; i++) {\n          if (!isNullOrUndefined(item[i])) {\n            this.selectItem(item[i]);\n          }\n        }\n      }\n    }\n\n    getParentId() {\n      const parentId = [];\n\n      if (this.isNestedList) {\n        for (let i = this.curDSLevel.length - 1; i >= 0; i--) {\n          parentId.push(this.curDSLevel[i]);\n        }\n      }\n\n      return parentId;\n    }\n    /**\n     * Gets the details of the currently selected item from the list items.\n     *\n     */\n\n\n    getSelectedItems() {\n      // eslint-disable-next-line\n      let finalValue;\n      let isCompleted = false;\n      this.selectedId = [];\n      const dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;\n\n      if (this.enableVirtualization && !isCompleted) {\n        finalValue = this.virtualizationModule.getSelectedItems();\n        isCompleted = true;\n      } else if (this.showCheckBox && !isCompleted) {\n        // eslint-disable-next-line\n        const liCollection = this.curUL.getElementsByClassName(classNames.selected);\n        const liTextCollection = [];\n        const liDataCollection = [];\n        this.selectedId = [];\n        const dataParent = [];\n\n        for (let i = 0; i < liCollection.length; i++) {\n          if (typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') {\n            liTextCollection.push(liCollection[i].innerText.trim());\n          } else {\n            const tempData = this.getItemData(liCollection[i]);\n            const fieldData = getFieldValues(tempData, this.listBaseOption.fields);\n\n            if (this.isNestedList) {\n              dataParent.push({\n                data: tempData,\n                parentId: this.getParentId()\n              });\n            } else {\n              liDataCollection.push(tempData);\n            }\n\n            if (fieldData) {\n              // eslint-disable-next-line\n              liTextCollection.push(fieldData[this.listBaseOption.fields.text]); // eslint-disable-next-line\n\n              this.selectedId.push(fieldData[this.listBaseOption.fields.id]);\n            } else {\n              liTextCollection.push(undefined);\n              this.selectedId.push(undefined);\n            }\n          }\n        }\n\n        if ((typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') && !isCompleted) {\n          finalValue = {\n            item: liCollection,\n            data: dataSource,\n            text: liTextCollection\n          };\n          isCompleted = true;\n        }\n\n        if (this.isNestedList && !isCompleted) {\n          finalValue = {\n            item: liCollection,\n            data: dataParent,\n            text: liTextCollection\n          };\n          isCompleted = true;\n        } else if (!isCompleted) {\n          finalValue = {\n            item: liCollection,\n            data: liDataCollection,\n            text: liTextCollection\n          };\n          isCompleted = true;\n        }\n      } else if (!isCompleted) {\n        const liElement = this.element.getElementsByClassName(classNames.selected)[0];\n        const fieldData = getFieldValues(this.getItemData(liElement), this.listBaseOption.fields);\n\n        if ((typeof dataSource[0] === 'string' || typeof dataSource[0] === 'number') && !isCompleted) {\n          finalValue = !isNullOrUndefined(liElement) ? {\n            item: liElement,\n            data: dataSource,\n            text: liElement.innerText.trim()\n          } : undefined;\n          isCompleted = true;\n        } else if (!isCompleted) {\n          if (isNullOrUndefined(fieldData) || isNullOrUndefined(liElement)) {\n            finalValue = undefined;\n            isCompleted = true;\n          } else {\n            // eslint-disable-next-line\n            this.selectedId.push(fieldData[this.listBaseOption.fields.id]);\n            finalValue = {\n              text: fieldData[this.listBaseOption.fields.text],\n              item: liElement,\n              data: this.getItemData(liElement)\n            };\n            isCompleted = true;\n          }\n        }\n      }\n\n      return finalValue;\n    }\n    /**\n     * Finds out an item details from the current list.\n     *\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n\n\n    findItem(item) {\n      return this.getItemData(item);\n    }\n    /**\n     * Enables the disabled list items by passing the Id and text fields.\n     *\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n\n\n    enableItem(item) {\n      this.setItemState(item, true);\n\n      if (this.enableVirtualization) {\n        this.virtualizationModule.enableItem(item);\n      }\n    }\n    /**\n     * Disables the list items by passing the Id and text fields.\n     *\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n\n\n    disableItem(item) {\n      this.setItemState(item, false);\n\n      if (this.enableVirtualization) {\n        this.virtualizationModule.disableItem(item);\n      }\n    } //A function that used to set state of the list item like enable, disable.\n\n\n    setItemState(item, isEnable) {\n      const resultJSON = this.getItemData(item);\n      const fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n\n      if (resultJSON) {\n        const li = this.element.querySelector('[data-uid=\"' + fieldData[this.fields.id] + '\"]');\n\n        if (isEnable) {\n          if (li) {\n            li.classList.remove(classNames.disable);\n          }\n\n          delete resultJSON[this.fields.enabled];\n        } else if (!isEnable) {\n          if (li) {\n            li.classList.add(classNames.disable);\n          } // eslint-disable-next-line\n\n\n          resultJSON[this.fields.enabled] = false;\n        }\n      }\n    }\n    /**\n     * Shows the hide list item from the ListView.\n     *\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n\n\n    showItem(item) {\n      this.showHideItem(item, false, '');\n\n      if (this.enableVirtualization) {\n        this.virtualizationModule.showItem(item);\n      }\n    }\n    /**\n     * Hides an list item from the ListView.\n     *\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n\n\n    hideItem(item) {\n      this.showHideItem(item, true, 'none');\n\n      if (this.enableVirtualization) {\n        this.virtualizationModule.hideItem(item);\n      }\n    }\n\n    showHideItem(obj, isHide, display) {\n      const resultJSON = this.getItemData(obj);\n      const fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);\n\n      if (resultJSON) {\n        const li = this.element.querySelector('[data-uid=\"' + fieldData[this.fields.id] + '\"]');\n\n        if (li) {\n          li.style.display = display;\n        }\n\n        if (isHide) {\n          // eslint-disable-next-line\n          resultJSON[this.fields.isVisible] = false;\n        } else {\n          delete resultJSON[this.fields.isVisible];\n        }\n      }\n    }\n    /**\n     * Adds the new list item(s) to the current ListView.\n     * To add a new list item(s) in the ListView, we need to pass the `data` as an array of items that need\n     * to be added and `fields` as the target item to which we need to add the given item(s) as its children.\n     * For example fields: { text: 'Name', tooltip: 'Name', id:'id'}\n     *\n     * @param  {{Object}[]} data - JSON Array Data that need to add.\n     *\n     * @param  {Fields} fields - Target item to add the given data as its children (can be null).\n     *\n     */\n\n\n    addItem(data, fields = undefined) {\n      const dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;\n      this.addItemInternally(data, fields, dataSource);\n    }\n\n    addItemInternally(data, fields, dataSource) {\n      if (data instanceof Array) {\n        if (this.enableVirtualization) {\n          this.virtualizationModule.addItem(data, fields, dataSource);\n        } else {\n          const ds = this.findItemFromDS(dataSource, fields);\n          let child;\n\n          if (ds) {\n            const fieldData = getFieldValues(ds, this.listBaseOption.fields);\n            child = fieldData[this.fields.child];\n\n            if (!child) {\n              child = [];\n            }\n\n            child = child.concat(data);\n          } // check for whether target is nested level or top level in list\n\n\n          if (ds instanceof Array) {\n            for (let i = 0; i < data.length; i++) {\n              dataSource.push(data[i]);\n              this.setViewDataSource(dataSource); // since it is top level target, get the content container's first child\n              // as it is always the top level UL\n\n              const targetUL = this.contentContainer ? this.contentContainer.children[0] : null; // check for whether the list was previously empty or not, if it is\n              // proceed to call initial render\n\n              if (this.contentContainer && targetUL) {\n                this.addItemIntoDom(data[i], targetUL, this.curViewDS);\n              } else {\n                this.reRender();\n              }\n            }\n\n            this.liCollection = this.curUL.querySelectorAll('.' + classNames.listItem);\n          } else {\n            // proceed as target item is in nested level, only if it is a valid target ds\n            if (ds) {\n              ds[this.fields.child] = child;\n              this.addItemInNestedList(ds, data);\n            }\n          }\n        }\n      }\n    }\n\n    addItemInNestedList(targetItemData, itemQueue) {\n      // eslint-disable-next-line\n      const targetItemId = targetItemData[this.fields.id];\n      const targetChildDS = targetItemData[this.fields.child];\n      const isAlreadyRenderedUL = this.element.querySelector('[pid=\\'' + targetItemId + '\\']');\n      const targetLi = this.element.querySelector('[data-uid=\\'' + targetItemId + '\\']');\n      const targetUL = isAlreadyRenderedUL ? isAlreadyRenderedUL : targetLi ? closest(targetLi, 'ul') : null;\n      const targetDS = isAlreadyRenderedUL ? targetChildDS : [targetItemData];\n      const isTargetEmptyChild = targetLi ? !targetLi.classList.contains(classNames.hasChild) : false;\n\n      if (isTargetEmptyChild) {\n        const targetRefreshedElement = ListBase.createListItemFromJson(this.createElement, targetDS, this.listBaseOption, null, null, this);\n        this.setAttributes(targetRefreshedElement);\n        targetUL.insertBefore(targetRefreshedElement[0], targetLi);\n        detach(targetLi);\n      } // if it is already rendered element, we need to create and append new elements\n\n\n      if (isAlreadyRenderedUL && itemQueue) {\n        for (let i = 0; i < itemQueue.length; i++) {\n          targetDS.push(itemQueue[i]);\n          this.addItemIntoDom(itemQueue[i], targetUL, targetDS);\n        }\n      }\n    }\n\n    addItemIntoDom(currentItem, targetUL, curViewDS) {\n      const index = curViewDS.indexOf(currentItem);\n      this.addListItem(currentItem, index, targetUL, curViewDS);\n      const curItemDS = curViewDS[index - 1];\n\n      if (curItemDS && curItemDS.isHeader && curItemDS.items.length === 1) {\n        this.addListItem(curItemDS, index - 1, targetUL, curViewDS);\n      }\n    }\n\n    addListItem(dataSource, index, ulElement, curViewDS) {\n      let target = this.getLiFromObjOrElement(curViewDS[index + 1]) || this.getLiFromObjOrElement(curViewDS[index + 2]) || null;\n      const li = ListBase.createListItemFromJson(this.createElement, [dataSource], this.listBaseOption, null, null, this);\n      this.setAttributes(li); // eslint-disable-next-line\n\n      if (this.template && this.isReact) {\n        this.renderReactTemplates();\n      }\n\n      if (this.fields.groupBy && curViewDS[index + 1] && curViewDS[index + 1].isHeader) {\n        let targetEle = this.getLiFromObjOrElement(curViewDS[index - 1]);\n\n        if (targetEle) {\n          target = targetEle.nextElementSibling;\n        }\n      }\n\n      ulElement.insertBefore(li[0], target);\n    }\n    /**\n     * Removes the list item from the data source based on a passed\n     *  element like fields: { text: 'Name', tooltip: 'Name', id:'id'}\n     *\n     * @param  {Fields | HTMLElement | Element} item - We can pass element Object or Fields as Object with ID and Text fields.\n     */\n\n\n    removeItem(item) {\n      const listDataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;\n\n      if (this.enableVirtualization) {\n        this.virtualizationModule.removeItem(item);\n      } else {\n        this.removeItemFromList(item, listDataSource);\n      }\n    }\n\n    removeItemFromList(obj, listDataSource) {\n      const curViewDS = this.curViewDS;\n      const fields = obj instanceof Element ? this.getElementUID(obj) : obj;\n      let dataSource; // eslint-disable-next-line prefer-const\n\n      dataSource = this.findItemFromDS(listDataSource, fields, true);\n\n      if (dataSource) {\n        let data; // eslint-disable-next-line prefer-const\n\n        data = this.findItemFromDS(dataSource, fields);\n        const index = curViewDS.indexOf(data);\n        const li = this.getLiFromObjOrElement(obj);\n        let groupLi;\n        this.validateNestedView(li);\n\n        if (this.fields.groupBy && this.curViewDS[index - 1] && curViewDS[index - 1].isHeader && curViewDS[index - 1].items.length === 1) {\n          if (li && li.previousElementSibling.classList.contains(classNames.groupListItem) && (isNullOrUndefined(li.nextElementSibling) || li.nextElementSibling && li.nextElementSibling.classList.contains(classNames.groupListItem))) {\n            groupLi = li.previousElementSibling;\n          }\n        }\n\n        if (li) {\n          detach(li);\n        }\n\n        if (groupLi) {\n          detach(groupLi);\n        } // eslint-disable-next-line\n\n\n        const foundData = dataSource.length - 1 <= 0 ? this.findParent(this.localData, this.fields.id, // eslint-disable-next-line\n        value => value === data[this.fields.id], null) : null;\n        const dsIndex = dataSource.indexOf(data);\n        dataSource.splice(dsIndex, 1);\n        this.setViewDataSource(listDataSource);\n\n        if (foundData && foundData.parent && Array.isArray(foundData.parent[this.fields.child]) && foundData.parent[this.fields.child].length <= 0) {\n          const parentLi = this.getLiFromObjOrElement(foundData.parent);\n\n          if (parentLi) {\n            const li = ListBase.createListItemFromJson(this.createElement, [foundData.parent], this.listBaseOption, null, null, this);\n            this.setAttributes(li);\n            parentLi.parentElement.insertBefore(li[0], parentLi);\n            parentLi.parentElement.removeChild(parentLi);\n          }\n        }\n\n        if (dataSource.length <= 0) {\n          this.back();\n        }\n\n        this.liCollection = Array.prototype.slice.call(this.element.querySelectorAll('.' + classNames.listItem));\n      }\n    } // validate before removing an element whether the current view is inside target element's child view\n\n\n    validateNestedView(li) {\n      const liID = li ? li.getAttribute('data-uid').toString().toLowerCase() : null;\n\n      if (liID && this.curDSLevel && this.curDSLevel.length > 0) {\n        while (this.curDSLevel.some(id => id.toString().toLowerCase() === liID)) {\n          this.back();\n        }\n      }\n    }\n    /**\n     * Removes multiple items from the ListView by passing the array of elements or array of field objects.\n     *\n     * @param  {Fields[] | HTMLElement[] | Element[]} item - We can pass array of elements or array of field Object with ID and Text fields.\n     */\n\n\n    removeMultipleItems(item) {\n      if (item.length) {\n        for (let i = 0; i < item.length; i++) {\n          this.removeItem(item[i]);\n        }\n      }\n    } // eslint-disable-next-line\n\n\n    findParent(dataSource, id, callback, parent) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (dataSource.hasOwnProperty(id) && callback(dataSource[id]) === true) {\n        return extend({}, dataSource);\n      }\n\n      for (let i = 0; i < Object.keys(dataSource).length; i++) {\n        if (dataSource[Object.keys(dataSource)[i]] && typeof dataSource[Object.keys(dataSource)[i]] === 'object') {\n          // eslint-disable-next-line\n          const result = this.findParent(dataSource[Object.keys(dataSource)[i]], id, callback, dataSource);\n\n          if (result != null) {\n            if (!result.parent) {\n              result.parent = parent;\n            }\n\n            return result;\n          }\n        }\n      }\n\n      return null;\n    } // Module Required function\n\n\n    getModuleName() {\n      return 'listview';\n    }\n\n    requiredModules() {\n      const modules = [];\n\n      if (this.enableVirtualization) {\n        modules.push({\n          args: [this],\n          member: 'virtualization'\n        });\n      }\n\n      return modules;\n    }\n    /**\n     * Get the properties to be maintained in the persisted state.\n     */\n\n\n    getPersistData() {\n      return this.addOnPersist(['cssClass', 'enableRtl', 'htmlAttributes', 'enable', 'fields', 'animation', 'headerTitle', 'sortOrder', 'showIcon', 'height', 'width', 'showCheckBox', 'checkBoxPosition']);\n    }\n\n  };\n\n  __decorate([Property('')], ListView.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], ListView.prototype, \"enableVirtualization\", void 0);\n\n  __decorate([Property({})], ListView.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property(true)], ListView.prototype, \"enable\", void 0);\n\n  __decorate([Property([])], ListView.prototype, \"dataSource\", void 0);\n\n  __decorate([Property()], ListView.prototype, \"query\", void 0);\n\n  __decorate([Complex(ListBase.defaultMappedFields, FieldSettings)], ListView.prototype, \"fields\", void 0);\n\n  __decorate([Property({\n    effect: 'SlideLeft',\n    duration: 400,\n    easing: 'ease'\n  })], ListView.prototype, \"animation\", void 0);\n\n  __decorate([Property('None')], ListView.prototype, \"sortOrder\", void 0);\n\n  __decorate([Property(false)], ListView.prototype, \"showIcon\", void 0);\n\n  __decorate([Property(false)], ListView.prototype, \"showCheckBox\", void 0);\n\n  __decorate([Property('Left')], ListView.prototype, \"checkBoxPosition\", void 0);\n\n  __decorate([Property('')], ListView.prototype, \"headerTitle\", void 0);\n\n  __decorate([Property(false)], ListView.prototype, \"showHeader\", void 0);\n\n  __decorate([Property(false)], ListView.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Property('')], ListView.prototype, \"height\", void 0);\n\n  __decorate([Property('')], ListView.prototype, \"width\", void 0);\n\n  __decorate([Property(null)], ListView.prototype, \"template\", void 0);\n\n  __decorate([Property(null)], ListView.prototype, \"headerTemplate\", void 0);\n\n  __decorate([Property(null)], ListView.prototype, \"groupTemplate\", void 0);\n\n  __decorate([Event()], ListView.prototype, \"select\", void 0);\n\n  __decorate([Event()], ListView.prototype, \"actionBegin\", void 0);\n\n  __decorate([Event()], ListView.prototype, \"actionComplete\", void 0);\n\n  __decorate([Event()], ListView.prototype, \"actionFailure\", void 0);\n\n  ListView = __decorate([NotifyPropertyChanges], ListView);\n  return ListView;\n})();\nconst listElementCount = 1.5;\nconst windowElementCount = 3;\n\nclass Virtualization {\n  constructor(instance) {\n    this.elementDifference = 0;\n    this.listViewInstance = instance;\n  }\n  /**\n   * For internal use only.\n   *\n   * @private\n   */\n\n\n  isNgTemplate() {\n    return !isNullOrUndefined(this.listViewInstance.templateRef) && typeof this.listViewInstance.templateRef !== 'string';\n  }\n  /**\n   * For internal use only.\n   *\n   * @private\n   */\n\n\n  uiVirtualization() {\n    this.wireScrollEvent(false);\n    const curViewDS = this.listViewInstance.curViewDS;\n    const firstDs = curViewDS.slice(0, 1);\n    this.listViewInstance.ulElement = this.listViewInstance.curUL = ListBase.createList( // eslint-disable-next-line\n    this.listViewInstance.createElement, firstDs, this.listViewInstance.listBaseOption, null, this.listViewInstance);\n    this.listViewInstance.contentContainer = this.listViewInstance.createElement('div', {\n      className: classNames.content\n    });\n    this.listViewInstance.element.appendChild(this.listViewInstance.contentContainer);\n    this.listViewInstance.contentContainer.appendChild(this.listViewInstance.ulElement);\n    this.listItemHeight = this.listViewInstance.ulElement.firstElementChild.getBoundingClientRect().height;\n    this.expectedDomItemCount = this.ValidateItemCount(10000);\n    this.domItemCount = this.ValidateItemCount(Object.keys(this.listViewInstance.curViewDS).length);\n    this.uiFirstIndex = 0;\n    this.uiLastIndex = this.domItemCount - 1;\n    const otherDs = curViewDS.slice(1, this.domItemCount);\n    const listItems = ListBase.createListItemFromJson( // eslint-disable-next-line\n    this.listViewInstance.createElement, otherDs, this.listViewInstance.listBaseOption, null, null, this.listViewInstance);\n    append(listItems, this.listViewInstance.ulElement);\n    this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n    this.topElement = this.listViewInstance.createElement('div');\n    this.listViewInstance.ulElement.insertBefore(this.topElement, this.listViewInstance.ulElement.firstElementChild);\n    this.bottomElement = this.listViewInstance.createElement('div');\n    this.listViewInstance.ulElement.insertBefore(this.bottomElement, null);\n    this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;\n    this.topElement.style.height = 0 + 'px';\n    this.bottomElement.style.height = this.totalHeight + 'px';\n    this.topElementHeight = 0;\n    this.bottomElementHeight = this.totalHeight;\n    this.listDiff = 0;\n    this.uiIndicesInitialization();\n  }\n\n  wireScrollEvent(destroy) {\n    if (!destroy) {\n      if (this.listViewInstance.isWindow) {\n        this.onVirtualScroll = this.onVirtualUiScroll.bind(this);\n        window.addEventListener('scroll', this.onVirtualScroll);\n      } else {\n        EventHandler.add(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll, this);\n      }\n    } else {\n      if (this.listViewInstance.isWindow === true) {\n        window.removeEventListener('scroll', this.onVirtualScroll);\n        window.removeEventListener('scroll', this.updateUl);\n      } else {\n        EventHandler.remove(this.listViewInstance.element, 'scroll', this.onVirtualUiScroll);\n        EventHandler.remove(this.listViewInstance.element, 'scroll', this.updateUlContainer);\n      }\n    }\n  }\n\n  updateUlContainer(e) {\n    let listDiff;\n    const virtualElementContainer = this.listViewInstance.ulElement.querySelector('.' + classNames.virtualElementContainer);\n\n    if (isNullOrUndefined(this.listViewInstance.liElementHeight)) {\n      this.listViewInstance.updateLiElementHeight();\n    }\n\n    if (this.listViewInstance.isWindow) {\n      // eslint-disable-next-line\n      listDiff = Math.round(e.target.documentElement.scrollTop / this.listViewInstance.liElementHeight) - 2;\n    } else {\n      // eslint-disable-next-line\n      listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight) - 2;\n    }\n\n    if ((listDiff - 1) * this.listViewInstance.liElementHeight < 0) {\n      virtualElementContainer.style.top = '0px';\n    } else {\n      virtualElementContainer.style.top = listDiff * this.listViewInstance.liElementHeight + 'px';\n    }\n  }\n\n  ValidateItemCount(dataSourceLength) {\n    const height = parseFloat(formatUnit(this.listViewInstance.height));\n    let itemCount;\n\n    if (this.listViewInstance.isWindow) {\n      itemCount = Math.round(window.innerHeight / this.listItemHeight * windowElementCount);\n    } else {\n      if (typeof this.listViewInstance.height === 'string' && this.listViewInstance.height.indexOf('%') !== -1) {\n        // eslint-disable-next-line max-len\n        itemCount = Math.round(this.listViewInstance.element.getBoundingClientRect().height / this.listItemHeight * listElementCount);\n      } else {\n        itemCount = Math.round(height / this.listItemHeight * listElementCount);\n      }\n    }\n\n    if (itemCount > dataSourceLength) {\n      itemCount = dataSourceLength;\n    }\n\n    return itemCount;\n  }\n\n  uiIndicesInitialization() {\n    this.uiIndices = {\n      'activeIndices': [],\n      'disabledItemIndices': [],\n      'hiddenItemIndices': []\n    };\n    const data = this.listViewInstance.curViewDS;\n\n    for (let i = 0; i < data.length; i++) {\n      if (this.listViewInstance.showCheckBox && data[i][this.listViewInstance.fields.isChecked]) {\n        this.uiIndices.activeIndices.push(i);\n      } // eslint-disable-next-line\n\n\n      if (!isNullOrUndefined(data[i][this.listViewInstance.fields.enabled]) && !data[i][this.listViewInstance.fields.enabled]) {\n        // eslint-disable-next-line\n        this.uiIndices.disabledItemIndices.push(i);\n      }\n    }\n\n    if (this.isNgTemplate()) {\n      const items = this.listViewInstance.element.querySelectorAll('.' + classNames.listItem);\n\n      for (let index = 0; index < items.length; index++) {\n        items[index].context = this.listViewInstance.viewContainerRef.get(index).context;\n      }\n    }\n  }\n\n  refreshItemHeight() {\n    if (this.listViewInstance.curViewDS.length) {\n      const curViewDS = this.listViewInstance.curViewDS;\n      this.listItemHeight = this.topElement.nextSibling.getBoundingClientRect().height;\n      this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;\n      this.bottomElementHeight = this.totalHeight;\n      this.bottomElement.style.height = this.totalHeight + 'px';\n    }\n  }\n\n  getscrollerHeight(startingHeight) {\n    return this.listViewInstance.isWindow ? pageYOffset - startingHeight <= 0 ? 0 : pageYOffset - startingHeight : this.listViewInstance.element.scrollTop - startingHeight <= 0 ? 0 : this.listViewInstance.element.scrollTop - startingHeight;\n  }\n\n  onVirtualUiScroll(e) {\n    let startingHeight;\n\n    if (this.listViewInstance.isWindow) {\n      startingHeight = this.listViewInstance.ulElement.getBoundingClientRect().top - document.documentElement.getBoundingClientRect().top;\n    } else {\n      startingHeight = this.listViewInstance.headerEle ? this.listViewInstance.headerEle.getBoundingClientRect().height : 0;\n    }\n\n    this.scrollPosition = isNullOrUndefined(this.scrollPosition) ? 0 : this.scrollPosition;\n    const scroll = this.getscrollerHeight(startingHeight);\n    this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);\n    this.bottomElementHeight = this.totalHeight - this.topElementHeight;\n    [this.topElementHeight, this.bottomElementHeight] = scroll <= this.totalHeight ? [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0];\n\n    if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {\n      this.topElement.style.height = this.topElementHeight + 'px';\n      this.bottomElement.style.height = this.bottomElementHeight + 'px';\n\n      if (scroll > this.scrollPosition) {\n        const listDiff = Math.round(this.topElementHeight / this.listItemHeight - this.listDiff);\n\n        if (listDiff > this.expectedDomItemCount + 5) {\n          this.onLongScroll(listDiff, true);\n        } else {\n          this.onNormalScroll(listDiff, true);\n        }\n      } else {\n        const listDiff = Math.round(this.listDiff - this.topElementHeight / this.listItemHeight);\n\n        if (listDiff > this.expectedDomItemCount + 5) {\n          this.onLongScroll(listDiff, false);\n        } else {\n          this.onNormalScroll(listDiff, false);\n        }\n      }\n    }\n\n    this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);\n\n    if (typeof this.listViewInstance.onUIScrolled === 'function') {\n      this.listViewInstance.onUIScrolled();\n    }\n\n    this.scrollPosition = scroll;\n  }\n\n  onLongScroll(listDiff, isScrollingDown) {\n    let index = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;\n    const elements = this.listViewInstance.ulElement.querySelectorAll('li');\n\n    for (let i = 0; i < elements.length; i++) {\n      this.updateUI(elements[i], index);\n      index++;\n    }\n\n    this.uiLastIndex = isScrollingDown ? this.uiLastIndex + listDiff : this.uiLastIndex - listDiff;\n    this.uiFirstIndex = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;\n  }\n\n  onNormalScroll(listDiff, isScrollingDown) {\n    if (isScrollingDown) {\n      for (let i = 0; i < listDiff; i++) {\n        const index = ++this.uiLastIndex;\n        this.updateUI(this.topElement.nextElementSibling, index, this.bottomElement);\n        this.uiFirstIndex++;\n      }\n    } else {\n      for (let i = 0; i < listDiff; i++) {\n        const index = --this.uiFirstIndex;\n        const target = this.topElement.nextSibling;\n        this.updateUI(this.bottomElement.previousElementSibling, index, target);\n        this.uiLastIndex--;\n      }\n    }\n  }\n\n  updateUiContent(element, index) {\n    const curViewDs = this.listViewInstance.curViewDS;\n\n    if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {\n      element.dataset.uid = ListBase.generateId();\n      element.getElementsByClassName(classNames.listItemText)[0].innerHTML = this.listViewInstance.curViewDS[index].toString();\n    } else {\n      // eslint-disable-next-line\n      element.dataset.uid = curViewDs[index][this.listViewInstance.fields.id] ? curViewDs[index][this.listViewInstance.fields.id] : ListBase.generateId();\n      element.getElementsByClassName(classNames.listItemText)[0].innerHTML = curViewDs[index][this.listViewInstance.fields.text];\n    }\n\n    if (this.listViewInstance.showIcon) {\n      if (element.querySelector('.' + classNames.listIcon)) {\n        detach(element.querySelector('.' + classNames.listIcon));\n      }\n\n      if (this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]) {\n        const textContent = element.querySelector('.' + classNames.textContent);\n        const target = this.listViewInstance.createElement('div', {\n          className: classNames.listIcon + ' ' + this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]\n        });\n        textContent.insertBefore(target, element.querySelector('.' + classNames.listItemText));\n      }\n    }\n\n    if (this.listViewInstance.showCheckBox && this.listViewInstance.fields.groupBy) {\n      if (!this.checkListWrapper) {\n        this.checkListWrapper = this.listViewInstance.curUL.querySelector('.' + classNames.checkboxWrapper).cloneNode(true);\n      }\n\n      const textContent = element.querySelector('.' + classNames.textContent);\n\n      if (this.listViewInstance.curViewDS[index].isHeader) {\n        if (element.querySelector('.' + classNames.checkboxWrapper)) {\n          element.classList.remove(classNames.checklist);\n          textContent.classList.remove(classNames.checkbox);\n          detach(element.querySelector('.' + classNames.checkboxWrapper));\n        }\n      } else {\n        if (!element.querySelector('.' + classNames.checkboxWrapper)) {\n          element.classList.add(classNames.checklist);\n          textContent.classList.add(classNames.checkbox);\n          textContent.insertBefore(this.checkListWrapper.cloneNode(true), element.querySelector('.' + classNames.listItemText));\n        }\n      }\n    }\n  }\n\n  changeElementAttributes(element, index) {\n    element.classList.remove(classNames.disable);\n\n    if (this.uiIndices.disabledItemIndices.length && this.uiIndices.disabledItemIndices.indexOf(index) !== -1) {\n      element.classList.add(classNames.disable);\n    }\n\n    element.style.display = '';\n\n    if (this.uiIndices.hiddenItemIndices.length && this.uiIndices.hiddenItemIndices.indexOf(index) !== -1) {\n      element.style.display = 'none';\n    }\n\n    if (this.listViewInstance.showCheckBox) {\n      const checklistElement = element.querySelector('.' + classNames.checkboxWrapper);\n      element.classList.remove(classNames.selected);\n      element.classList.remove(classNames.focused);\n\n      if (checklistElement) {\n        checklistElement.removeAttribute('aria-checked');\n        checklistElement.firstElementChild.classList.remove(classNames.checked);\n      }\n\n      if (this.uiIndices.activeIndices.length && this.uiIndices.activeIndices.indexOf(index) !== -1 && !this.listViewInstance.curUL.querySelector(classNames.selected)) {\n        element.classList.add(classNames.selected);\n        checklistElement.firstElementChild.classList.add(classNames.checked);\n        checklistElement.setAttribute('aria-checked', 'true');\n\n        if (this.activeIndex === index) {\n          element.classList.add(classNames.focused);\n        }\n      }\n    } else {\n      element.classList.remove(classNames.selected);\n      element.removeAttribute('aria-selected');\n\n      if (!isNullOrUndefined(this.activeIndex) && this.activeIndex === index && !this.listViewInstance.curUL.querySelector(classNames.selected)) {\n        element.classList.add(classNames.selected);\n        element.setAttribute('aria-selected', 'true');\n      }\n    }\n\n    if (this.listViewInstance.fields.groupBy) {\n      if (this.listViewInstance.curViewDS[index].isHeader) {\n        if (element.classList.contains(classNames.listItem)) {\n          element.classList.remove(classNames.listItem);\n          element.setAttribute('role', 'group');\n          element.classList.add(classNames.groupListItem);\n        }\n      } else {\n        if (element.classList.contains(classNames.groupListItem)) {\n          element.classList.remove(classNames.groupListItem);\n          element.setAttribute('role', 'listitem');\n          element.classList.add(classNames.listItem);\n        }\n      }\n    }\n  }\n\n  findDSAndIndexFromId(ds, fields) {\n    const resultJSON = {};\n    fields = this.listViewInstance.getElementUID(fields);\n\n    if (!isNullOrUndefined(fields)) {\n      ds.some((data, index) => {\n        if (fields[this.listViewInstance.fields.id] && // eslint-disable-next-line\n        fields[this.listViewInstance.fields.id] // eslint-disable-next-line\n        === (data[this.listViewInstance.fields.id] && data[this.listViewInstance.fields.id]) || fields === data) {\n          resultJSON.index = index;\n          resultJSON.data = data;\n          return true;\n        } else {\n          return false;\n        }\n      });\n    }\n\n    return resultJSON;\n  }\n\n  getSelectedItems() {\n    if (!isNullOrUndefined(this.activeIndex) || this.listViewInstance.showCheckBox && this.uiIndices.activeIndices.length) {\n      const dataCollection = [];\n      const textCollection = [];\n\n      if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {\n        const curViewDS = this.listViewInstance.curViewDS;\n\n        if (this.listViewInstance.showCheckBox) {\n          const indices = this.uiIndices.activeIndices;\n\n          for (let i = 0; i < indices.length; i++) {\n            dataCollection.push(curViewDS[indices[i]]);\n          }\n\n          return {\n            text: dataCollection,\n            // eslint-disable-next-line\n            data: dataCollection,\n            index: this.uiIndices.activeIndices.map(index => this.listViewInstance.dataSource.indexOf(curViewDS[index]))\n          };\n        } else {\n          return {\n            text: curViewDS[this.activeIndex],\n            data: curViewDS[this.activeIndex],\n            index: this.listViewInstance.dataSource.indexOf(curViewDS[this.activeIndex])\n          };\n        }\n      } else {\n        const curViewDS = this.listViewInstance.curViewDS;\n        const text = this.listViewInstance.fields.text;\n\n        if (this.listViewInstance.showCheckBox) {\n          const indexArray = this.uiIndices.activeIndices;\n\n          for (let i = 0; i < indexArray.length; i++) {\n            textCollection.push(curViewDS[indexArray[i]][text]);\n            dataCollection.push(curViewDS[indexArray[i]]);\n          }\n\n          const dataSource = this.listViewInstance.dataSource instanceof DataManager ? curViewDS : this.listViewInstance.dataSource;\n          return {\n            text: textCollection,\n            // eslint-disable-next-line\n            data: dataCollection,\n            index: this.uiIndices.activeIndices.map(index => dataSource.indexOf(curViewDS[index]))\n          };\n        } else {\n          const dataSource = this.listViewInstance.dataSource instanceof DataManager ? curViewDS : this.listViewInstance.dataSource;\n          return {\n            text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],\n            // eslint-disable-next-line\n            data: curViewDS[this.activeIndex],\n            index: dataSource.indexOf(curViewDS[this.activeIndex])\n          };\n        }\n      }\n    } else {\n      return undefined;\n    }\n  }\n\n  selectItem(obj) {\n    const resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n\n    if (Object.keys(resutJSON).length) {\n      const isSelected = this.activeIndex === resutJSON.index;\n      let isChecked;\n      this.activeIndex = resutJSON.index;\n\n      if (this.listViewInstance.showCheckBox) {\n        if (this.uiIndices.activeIndices.indexOf(resutJSON.index) === -1) {\n          isChecked = true;\n          this.uiIndices.activeIndices.push(resutJSON.index);\n        } else {\n          isChecked = false;\n          this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);\n        }\n\n        if (this.listViewInstance.curUL.querySelector('.' + classNames.focused)) {\n          this.listViewInstance.curUL.querySelector('.' + classNames.focused).classList.remove(classNames.focused);\n        }\n      }\n\n      if (this.listViewInstance.getLiFromObjOrElement(obj)) {\n        if (this.listViewInstance.showCheckBox) {\n          this.listViewInstance.setCheckboxLI(this.listViewInstance.getLiFromObjOrElement(obj));\n        } else {\n          this.listViewInstance.setSelectLI(this.listViewInstance.getLiFromObjOrElement(obj));\n        }\n      } else {\n        let eventArgs;\n\n        if (typeof this.listViewInstance.dataSource[0] === 'string' || typeof this.listViewInstance.dataSource[0] === 'number') {\n          eventArgs = {\n            text: this.listViewInstance.curViewDS[this.activeIndex],\n            data: this.listViewInstance.curViewDS[this.activeIndex],\n            index: this.activeIndex\n          };\n        } else {\n          const curViewDS = this.listViewInstance.curViewDS;\n          eventArgs = {\n            text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],\n            data: curViewDS[this.activeIndex],\n            index: this.activeIndex\n          };\n        }\n\n        if (this.listViewInstance.showCheckBox) {\n          eventArgs.isChecked = isChecked;\n          this.listViewInstance.trigger('select', eventArgs);\n        } else if (!isSelected) {\n          this.listViewInstance.removeSelect();\n          this.listViewInstance.trigger('select', eventArgs);\n        }\n      }\n    } else if (isNullOrUndefined(obj) && !this.listViewInstance.showCheckBox) {\n      this.listViewInstance.removeSelect();\n      this.activeIndex = undefined;\n    }\n  }\n\n  enableItem(obj) {\n    const resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n\n    if (Object.keys(resutJSON).length) {\n      this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(resutJSON.index), 1);\n    }\n  }\n\n  disableItem(obj) {\n    const resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n\n    if (Object.keys(resutJSON).length && this.uiIndices.disabledItemIndices.indexOf(resutJSON.index) === -1) {\n      this.uiIndices.disabledItemIndices.push(resutJSON.index);\n    }\n  }\n\n  showItem(obj) {\n    const resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n\n    if (Object.keys(resutJSON).length) {\n      this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index), 1);\n    }\n  }\n\n  hideItem(obj) {\n    const resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);\n\n    if (Object.keys(resutJSON).length && this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index) === -1) {\n      this.uiIndices.hiddenItemIndices.push(resutJSON.index);\n    }\n  }\n\n  removeItem(obj) {\n    let dataSource;\n    const curViewDS = this.listViewInstance.curViewDS;\n    const resutJSON = this.findDSAndIndexFromId(curViewDS, obj);\n\n    if (Object.keys(resutJSON).length) {\n      dataSource = resutJSON.data;\n\n      if (curViewDS[resutJSON.index - 1] && curViewDS[resutJSON.index - 1].isHeader && curViewDS[resutJSON.index - 1].items.length === 1) {\n        this.removeUiItem(resutJSON.index - 1);\n        this.removeUiItem(resutJSON.index - 1);\n      } else {\n        this.removeUiItem(resutJSON.index);\n      }\n    }\n\n    const listDataSource = this.listViewInstance.dataSource instanceof DataManager ? this.listViewInstance.localData : this.listViewInstance.dataSource;\n    const index = listDataSource.indexOf(dataSource);\n\n    if (index !== -1) {\n      listDataSource.splice(index, 1);\n      this.listViewInstance.setViewDataSource(listDataSource);\n    } // recollect all the list item into collection\n\n\n    this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n  } // eslint-disable-next-line\n\n\n  setCheckboxLI(li, e) {\n    const index = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n    this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n\n    if (li.classList.contains(classNames.selected)) {\n      if (this.uiIndices.activeIndices.indexOf(index) === -1) {\n        this.uiIndices.activeIndices.push(index);\n      }\n    } else {\n      this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);\n    }\n  } // eslint-disable-next-line\n\n\n  setSelectLI(li, e) {\n    this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll('li'), li) + this.uiFirstIndex;\n  }\n\n  checkedItem(checked) {\n    if (checked) {\n      this.uiIndices.activeIndices = [];\n      this.activeIndex = undefined;\n      const data = this.listViewInstance.curViewDS;\n\n      for (let index = 0; index < data.length; index++) {\n        if (!data[index].isHeader) {\n          this.uiIndices.activeIndices.push(index);\n        }\n      }\n    } else {\n      this.activeIndex = undefined;\n      this.uiIndices.activeIndices = [];\n    }\n  }\n\n  addUiItem(index) {\n    // virtually new add list item based on the scollbar position\n    // if the scroll bar is at the top, just pretend the new item has been added since no UI\n    // change is required for the item that has been added at last but when scroll bar is at the bottom\n    // just detach top and inject into bottom to mimic new item is added\n    const curViewDs = this.listViewInstance.curViewDS;\n    this.changeUiIndices(index, true);\n\n    if (this.activeIndex && this.activeIndex >= index) {\n      this.activeIndex++;\n    }\n\n    if (this.listViewInstance.showCheckBox && curViewDs[index][this.listViewInstance.fields.isChecked]) {\n      this.uiIndices.activeIndices.push(index);\n    }\n\n    if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {\n      this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';\n    }\n\n    if (parseFloat(this.bottomElement.style.height)) {\n      const liItem = this.listViewInstance.curUL.lastElementChild.previousSibling;\n      const target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);\n\n      if (target) {\n        this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + 'px';\n        this.updateUI(liItem, index, target);\n      }\n    } else {\n      const liItem = this.listViewInstance.curUL.firstElementChild.nextSibling;\n      let target;\n\n      if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {\n        target = this.listViewInstance.curUL.lastElementChild;\n      } else {\n        target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);\n      }\n\n      this.topElement.style.height = parseFloat(this.topElement.style.height) + this.listItemHeight + 'px';\n      this.uiFirstIndex++;\n      this.uiLastIndex++;\n\n      if (target) {\n        this.updateUI(liItem, index, target);\n\n        if (this.listViewInstance.isWindow === true) {\n          window.scrollTo(0, pageYOffset + this.listItemHeight);\n        } else {\n          this.listViewInstance.element.scrollTop += this.listItemHeight;\n        }\n      }\n    }\n\n    this.totalHeight += this.listItemHeight;\n    this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);\n  }\n\n  removeUiItem(index) {\n    this.totalHeight -= this.listItemHeight;\n    const curViewDS = this.listViewInstance.curViewDS[index];\n    const liItem = this.listViewInstance.getLiFromObjOrElement(curViewDS);\n    this.listViewInstance.curViewDS.splice(index, 1);\n\n    if (this.activeIndex && this.activeIndex >= index) {\n      this.activeIndex--;\n    }\n\n    if (liItem) {\n      if (this.domItemCount > Object.keys(this.listViewInstance.curViewDS).length) {\n        detach(liItem);\n        this.domItemCount--;\n        this.uiLastIndex--;\n        this.totalHeight = 0;\n      } else {\n        if (liItem.classList.contains(classNames.disable)) {\n          liItem.classList.remove(classNames.disable);\n          this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(index), 1);\n        }\n\n        if (liItem.style.display === 'none') {\n          liItem.style.display = '';\n          this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(index), 1);\n        }\n\n        if (this.listViewInstance.showCheckBox && liItem.classList.contains(classNames.selected)) {\n          this.listViewInstance.removeSelect();\n          this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);\n          const checklistElement = liItem.querySelector('.' + classNames.checkboxWrapper);\n          checklistElement.removeAttribute('aria-checked');\n          checklistElement.firstElementChild.classList.remove(classNames.checked);\n\n          if (liItem.classList.contains(classNames.focused)) {\n            liItem.classList.remove(classNames.focused);\n            this.activeIndex = undefined;\n          }\n        } else if (liItem.classList.contains(classNames.selected)) {\n          this.listViewInstance.removeSelect();\n          this.activeIndex = undefined;\n        }\n\n        if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {\n          this.updateUI(liItem, this.uiLastIndex, this.bottomElement);\n        } else if (parseFloat(this.bottomElement.style.height)) {\n          this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) - this.listItemHeight + 'px';\n          this.updateUI(liItem, this.uiLastIndex, this.bottomElement);\n        } else {\n          this.topElement.style.height = parseFloat(this.topElement.style.height) - this.listItemHeight + 'px';\n          this.updateUI(liItem, this.uiFirstIndex - 1, this.topElement.nextSibling);\n          this.uiLastIndex--;\n          this.uiFirstIndex--;\n        }\n      }\n    }\n\n    this.changeUiIndices(index, false);\n    this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);\n  }\n\n  changeUiIndices(index, increment) {\n    const keys = Object.keys(this.uiIndices);\n\n    for (let ind = 0; ind < keys.length; ind++) {\n      this.uiIndices[keys[ind]] = this.uiIndices[keys[ind]].map(i => {\n        if (i >= index) {\n          return increment ? ++i : --i;\n        } else {\n          return i;\n        }\n      });\n    }\n  }\n\n  addItem(data, fields, dataSource) {\n    for (let i = 0; i < data.length; i++) {\n      const currentItem = data[i]; // push the given data to main data array\n\n      dataSource.push(currentItem); // recalculate all the group data or other datasource related things\n\n      this.listViewInstance.setViewDataSource(dataSource); // render list items for first time due to no datasource present earlier\n\n      if (!this.domItemCount) {\n        // fresh rendering for first time\n        if ((this.listViewInstance.template || this.listViewInstance.groupTemplate) && !this.isNgTemplate()) {\n          this.listViewInstance.listBaseOption.template = null;\n          this.listViewInstance.listBaseOption.groupTemplate = null;\n          this.listViewInstance.listBaseOption.itemCreated = this.createUIItem.bind(this);\n        }\n\n        this.uiVirtualization(); // when expected expected DOM count doesn't meet the condition we need to create and inject new item into DOM\n      } else if (this.domItemCount < this.expectedDomItemCount) {\n        const ds = this.listViewInstance.findItemFromDS(dataSource, fields);\n\n        if (ds instanceof Array) {\n          if (this.listViewInstance.ulElement) {\n            let index = this.listViewInstance.curViewDS.indexOf(currentItem); // inject new list item into DOM\n\n            this.createAndInjectNewItem(currentItem, index); // check for group header item\n\n            const curViewDS = this.listViewInstance.curViewDS[index - 1];\n\n            if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {\n              // target group item index in datasource\n              --index; // inject new group header into DOM for previously created list item\n\n              this.createAndInjectNewItem(curViewDS, index);\n            }\n          } // recollect all the list item into collection\n\n\n          this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll('li');\n        }\n      } else {\n        const index = this.listViewInstance.curViewDS.indexOf(currentItem); // virtually new add list item based on the scollbar position\n\n        this.addUiItem(index); // check for group header item needs to be added\n\n        const curViewDS = this.listViewInstance.curViewDS[index - 1];\n\n        if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {\n          this.addUiItem(index - 1);\n        }\n      }\n    }\n  }\n\n  createAndInjectNewItem(itemData, index) {\n    // generate li item for given datasource\n    let target;\n    const li = ListBase.createListItemFromJson(this.listViewInstance.createElement, // eslint-disable-next-line\n    [itemData], this.listViewInstance.listBaseOption, null, null, this.listViewInstance); // check for target element whether to insert before last item or group item\n\n    if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {\n      target = this.listViewInstance.curUL.lastElementChild;\n    } else {\n      // target group header's first child item to append its header\n      target = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 1]) || this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 2]);\n    }\n\n    if (this.listViewInstance.fields.groupBy && this.listViewInstance.curViewDS[index + 1] && this.listViewInstance.curViewDS[index + 1].isHeader) {\n      let targetEle = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index - 1]);\n\n      if (targetEle) {\n        target = targetEle.nextElementSibling;\n      }\n    } // insert before the target element\n\n\n    this.listViewInstance.ulElement.insertBefore(li[0], target); // increment internal DOM count, last index count for new element\n\n    this.domItemCount++;\n\n    if (this.bottomElementHeight <= 0) {\n      this.uiLastIndex++;\n    } // recalculate the current item height, to avoid jumpy scroller\n\n\n    this.refreshItemHeight();\n  }\n\n  createUIItem(args) {\n    const virtualTemplate = this.listViewInstance.template;\n    const template = this.listViewInstance.createElement('div');\n    let commonTemplate = '<div class=\"e-text-content\" role=\"presentation\"> ' + '<span class=\"e-list-text\"> ${' + this.listViewInstance.fields.text + '} </span></div>';\n\n    if (this.listViewInstance.isReact) {\n      commonTemplate = null;\n    }\n\n    if (this.listViewInstance.showCheckBox) {\n      // eslint-disable-next-line\n      this.listViewInstance.renderCheckbox(args);\n\n      if (!isNullOrUndefined(this.listViewInstance.virtualCheckBox) && !isNullOrUndefined(this.listViewInstance.virtualCheckBox.outerHTML)) {\n        const div = document.createElement('div');\n        div.innerHTML = this.listViewInstance.template || commonTemplate;\n\n        if (div.children && div.children[0]) {\n          div.children[0].classList.add('e-checkbox');\n\n          if (this.listViewInstance.checkBoxPosition === 'Left') {\n            div.children[0].classList.add('e-checkbox-left');\n          } else {\n            div.children[0].classList.add('e-checkbox-right');\n          }\n\n          if (this.listViewInstance.checkBoxPosition === 'Left') {\n            div.children[0].insertBefore(this.listViewInstance.virtualCheckBox, div.childNodes[0].children[0]);\n          } else {\n            div.children[0].appendChild(this.listViewInstance.virtualCheckBox);\n          }\n\n          this.listViewInstance.template = div.innerHTML;\n        }\n      }\n\n      template.innerHTML = this.listViewInstance.template;\n      this.listViewInstance.template = virtualTemplate;\n    } else {\n      template.innerHTML = this.listViewInstance.template || commonTemplate;\n    } // eslint-disable-next-line\n\n\n    const templateElements = template.getElementsByTagName('*');\n    const groupTemplate = this.listViewInstance.createElement('div');\n\n    if (this.listViewInstance.fields.groupBy) {\n      groupTemplate.innerHTML = this.listViewInstance.groupTemplate || commonTemplate;\n    } // eslint-disable-next-line\n\n\n    let groupTemplateElements = groupTemplate.getElementsByTagName('*');\n\n    if (args.curData.isHeader) {\n      this.headerData = args.curData;\n    }\n\n    this.templateData = args.curData.isHeader ? args.curData.items[0] : args.curData;\n\n    if (!this.listViewInstance.isReact || typeof this.listViewInstance.template == \"string\" && !args.item.classList.contains(\"e-list-group-item\") || typeof this.listViewInstance.groupTemplate == \"string\" && args.item.classList.contains(\"e-list-group-item\")) {\n      args.item.innerHTML = '';\n    }\n\n    args.item.context = {\n      data: args.curData,\n      nodes: {\n        flatTemplateNodes: [],\n        groupTemplateNodes: []\n      }\n    };\n\n    for (let i = 0; i < templateElements.length; i++) {\n      this.compileTemplate(templateElements[i], args.item, false);\n    }\n\n    for (let i = 0; i < groupTemplateElements.length; i++) {\n      this.compileTemplate(groupTemplateElements[i], args.item, true);\n    }\n\n    args.item.context.template = args.curData.isHeader ? template.firstElementChild : groupTemplate.firstElementChild;\n    args.item.context.type = args.curData.isHeader ? 'flatList' : 'groupList';\n    const element = args.curData.isHeader ? groupTemplate : template;\n\n    if (element.firstElementChild) {\n      args.item.insertBefore(element.firstElementChild, null);\n    }\n  }\n\n  compileTemplate(element, item, isHeader) {\n    this.textProperty(element, item, isHeader);\n    this.classProperty(element, item, isHeader);\n    this.attributeProperty(element, item, isHeader);\n  }\n\n  onChange(newData, listElement) {\n    listElement.context.data = newData; // eslint-disable-next-line max-len\n\n    const groupTemplateNodes = listElement.context.nodes.groupTemplateNodes; // eslint-disable-next-line max-len\n\n    const flatTemplateNodes = listElement.context.nodes.flatTemplateNodes; // eslint-disable-next-line\n\n    if (!isNullOrUndefined(newData.isHeader) && newData.isHeader && listElement.context.type === 'groupList') {\n      // eslint-disable-next-line\n      const element = listElement.firstElementChild;\n      detach(listElement.firstElementChild);\n      listElement.insertBefore(listElement.context.template, null);\n      listElement.context.template = element;\n      listElement.context.type = 'flatList';\n\n      for (let i = 0; i < groupTemplateNodes.length; i++) {\n        // eslint-disable-next-line\n        groupTemplateNodes[i].onChange(newData);\n      }\n    } else if (!newData.isHeader && listElement.context.type === 'flatList') {\n      const element = listElement.firstElementChild;\n      detach(listElement.firstElementChild);\n      listElement.insertBefore(listElement.context.template, null);\n      listElement.context.template = element;\n      listElement.context.type = 'groupList';\n\n      for (let i = 0; i < flatTemplateNodes.length; i++) {\n        // eslint-disable-next-line\n        flatTemplateNodes[i].onChange(newData);\n      }\n    } else if (!newData.isHeader) {\n      for (let i = 0; i < flatTemplateNodes.length; i++) {\n        // eslint-disable-next-line\n        flatTemplateNodes[i].onChange(newData);\n      }\n    } else {\n      for (let i = 0; i < groupTemplateNodes.length; i++) {\n        // eslint-disable-next-line\n        groupTemplateNodes[i].onChange(newData);\n      }\n    }\n  } // eslint-disable-next-line\n\n\n  updateContextData(listElement, node, isHeader) {\n    if (isHeader) {\n      listElement.context.nodes.groupTemplateNodes.push(node);\n    } else {\n      listElement.context.nodes.flatTemplateNodes.push(node);\n    }\n  }\n\n  classProperty(element, listElement, isHeader) {\n    const regex = new RegExp('\\\\${([^}]*)}', 'g');\n    const resultantOutput = [];\n    let regexMatch;\n\n    while (regexMatch !== null) {\n      const match = regex.exec(element.className);\n      resultantOutput.push(match);\n      regexMatch = match;\n\n      if (regexMatch === null) {\n        resultantOutput.pop();\n      }\n    }\n\n    if (resultantOutput && resultantOutput.length) {\n      for (let i = 0; i < resultantOutput.length; i++) {\n        const classNameMatch = resultantOutput[i]; // eslint-disable-next-line\n\n        let classFunction;\n\n        if (classNameMatch[1].indexOf('?') !== -1 && classNameMatch[1].indexOf(':') !== -1) {\n          // tslint:disable-next-line:no-function-constructor-with-string-args\n          classFunction = new Function('data', 'return ' + classNameMatch[1].replace(/\\$/g, 'data.'));\n        } else {\n          // tslint:disable-next-line:no-function-constructor-with-string-args\n          classFunction = new Function('data', 'return ' + 'data.' + classNameMatch[1]);\n        } // eslint-disable-next-line\n\n\n        const subNode = {};\n\n        if (isHeader) {\n          subNode.bindedvalue = classFunction(this.headerData);\n        } else {\n          subNode.bindedvalue = classFunction(this.templateData);\n        }\n\n        subNode.onChange = value => {\n          if (subNode.bindedvalue) {\n            removeClass([element], subNode.bindedvalue.split(' ').filter(css => css));\n          }\n\n          const newCss = classFunction(value);\n\n          if (newCss) {\n            addClass([element], newCss.split(' ').filter(css => css));\n          }\n\n          subNode.bindedvalue = newCss;\n        };\n\n        const className = classNameMatch[0].split(' ');\n\n        for (let i = 0; i < className.length; i++) {\n          element.classList.remove(className[i]);\n        }\n\n        if (subNode.bindedvalue) {\n          addClass([element], subNode.bindedvalue.split(' ').filter(css => css));\n        }\n\n        this.updateContextData(listElement, subNode, isHeader);\n      }\n    }\n  }\n\n  attributeProperty(element, listElement, isHeader) {\n    const attributeNames = [];\n\n    for (let i = 0; i < element.attributes.length; i++) {\n      attributeNames.push(element.attributes[i].nodeName);\n    }\n\n    if (attributeNames.indexOf('class') !== -1) {\n      attributeNames.splice(attributeNames.indexOf('class'), 1);\n    }\n\n    for (let i = 0; i < attributeNames.length; i++) {\n      const attributeName = attributeNames[i];\n      const attrNameMatch = new RegExp('\\\\${([^}]*)}', 'g').exec(attributeName) || [];\n      const attrValueMatch = new RegExp('\\\\${([^}]*)}', 'g').exec(element.getAttribute(attributeName)) || []; // eslint-disable-next-line\n\n      let attributeNameFunction; // eslint-disable-next-line\n\n      let attributeValueFunction;\n\n      if (attrNameMatch.length || attrValueMatch.length) {\n        if (attrNameMatch[1]) {\n          // tslint:disable-next-line:no-function-constructor-with-string-args\n          attributeNameFunction = new Function('data', 'return ' + 'data.' + attrNameMatch[1]);\n        }\n\n        if (attrValueMatch[1]) {\n          if (attrValueMatch[1].indexOf('?') !== -1 && attrValueMatch[1].indexOf(':') !== -1) {\n            // tslint:disable-next-line:no-function-constructor-with-string-args\n            attributeValueFunction = new Function('data', 'return ' + attrValueMatch[1].replace(/\\$/g, 'data.'));\n          } else {\n            // tslint:disable-next-line:no-function-constructor-with-string-args\n            attributeValueFunction = new Function('data', 'return ' + 'data.' + attrValueMatch[1]);\n          }\n        } // eslint-disable-next-line @typescript-eslint/ban-types\n\n\n        const subNode = {};\n\n        if (isHeader) {\n          subNode.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(this.headerData), attrValueMatch[1] === undefined ? undefined : attributeValueFunction(this.headerData)];\n        } else {\n          subNode.bindedvalue = [attrNameMatch[1] === undefined ? undefined : attributeNameFunction(this.templateData), attrValueMatch[1] === undefined ? undefined : attributeValueFunction(this.templateData)];\n        }\n\n        subNode.attrName = subNode.bindedvalue[0] === undefined ? attributeName : subNode.bindedvalue[0];\n\n        subNode.onChange = value => {\n          const bindedvalue = subNode.bindedvalue[1] === undefined ? element.getAttribute(subNode.attrName) : attributeValueFunction(value);\n          element.removeAttribute(subNode.attrName);\n          subNode.attrName = subNode.bindedvalue[0] === undefined ? subNode.attrName : attributeNameFunction(value);\n          element.setAttribute(subNode.attrName, bindedvalue);\n          subNode.bindedvalue = [subNode.bindedvalue[0] === undefined ? undefined : attributeNameFunction(value), subNode.bindedvalue[1] === undefined ? undefined : attributeValueFunction(value)];\n        };\n\n        const attributeValue = subNode.bindedvalue[1] === undefined ? element.getAttribute(attributeName) : subNode.bindedvalue[1];\n        element.removeAttribute(attributeName);\n        element.setAttribute(subNode.attrName, attributeValue);\n        this.updateContextData(listElement, subNode, isHeader);\n      }\n    }\n  }\n\n  textProperty(element, listElement, isHeader) {\n    const regex = new RegExp('\\\\${([^}]*)}', 'g');\n    const resultantOutput = [];\n    let regexMatch;\n\n    while (regexMatch !== null) {\n      const match = regex.exec(element.innerText);\n      resultantOutput.push(match);\n      regexMatch = match;\n\n      if (regexMatch === null) {\n        resultantOutput.pop();\n      }\n    }\n\n    const isChildHasTextContent = Array.prototype.some.call(element.children, element => {\n      if (new RegExp('\\\\${([^}]*)}', 'g').exec(element.innerText)) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n\n    if (resultantOutput && resultantOutput.length && !isChildHasTextContent) {\n      for (let i = 0; i < resultantOutput.length; i++) {\n        const textPropertyMatch = resultantOutput[i]; // eslint-disable-next-line\n\n        const subNode = {}; // eslint-disable-next-line\n\n        let textFunction;\n\n        if (textPropertyMatch[1].indexOf('?') !== -1 && textPropertyMatch[1].indexOf(':') !== -1) {\n          // tslint:disable-next-line:no-function-constructor-with-string-args\n          textFunction = new Function('data', 'return ' + textPropertyMatch[1].replace(/\\$/g, 'data.'));\n        } else {\n          // tslint:disable-next-line:no-function-constructor-with-string-args\n          textFunction = new Function('data', 'return ' + 'data.' + textPropertyMatch[1]);\n        }\n\n        if (isHeader) {\n          subNode.bindedvalue = textFunction(this.headerData);\n        } else {\n          subNode.bindedvalue = textFunction(this.templateData);\n        }\n\n        subNode.onChange = value => {\n          element.innerText = element.innerText.replace(subNode.bindedvalue, textFunction(value));\n          subNode.bindedvalue = textFunction(value);\n        };\n\n        element.innerText = element.innerText.replace(textPropertyMatch[0], subNode.bindedvalue);\n        this.updateContextData(listElement, subNode, isHeader);\n      }\n    }\n  }\n\n  reRenderUiVirtualization() {\n    this.wireScrollEvent(true);\n\n    if (this.listViewInstance.contentContainer) {\n      detach(this.listViewInstance.contentContainer);\n    }\n\n    this.listViewInstance.preRender(); // resetting the dom count to 0, to avoid edge case of dataSource suddenly becoming zero\n    // and then manually adding item using addItem API\n\n    this.domItemCount = 0;\n    this.listViewInstance.header();\n    this.listViewInstance.setLocalData();\n  }\n\n  updateUI(element, index, targetElement) {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const onChange = this.isNgTemplate() ? this.onNgChange : this.onChange;\n\n    if (this.listViewInstance.template || this.listViewInstance.groupTemplate) {\n      const curViewDS = this.listViewInstance.curViewDS[index]; // eslint-disable-next-line\n\n      element.dataset.uid = curViewDS[this.listViewInstance.fields.id] ? curViewDS[this.listViewInstance.fields.id] : ListBase.generateId();\n      onChange(curViewDS, element, this);\n    } else {\n      this.updateUiContent(element, index);\n    }\n\n    this.changeElementAttributes(element, index);\n\n    if (targetElement) {\n      this.listViewInstance.ulElement.insertBefore(element, targetElement);\n    }\n  }\n\n  onNgChange(newData, listElement, virtualThis) {\n    // compile given target element with template for new data\n    // eslint-disable-next-line\n    const templateCompiler = compile(virtualThis.listViewInstance.template);\n    const resultElement = templateCompiler(newData);\n\n    while (listElement.lastChild) {\n      listElement.removeChild(listElement.lastChild);\n    }\n\n    listElement.appendChild(resultElement[0]);\n  }\n\n  getModuleName() {\n    return 'virtualization';\n  }\n\n  destroy() {\n    this.wireScrollEvent(true);\n  }\n\n}\n/**\n * Listview Component\n */\n\n/**\n * Listview Component\n */\n\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Sortable_1;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Sortable Module provides support to enable sortable functionality in Dom Elements.\n * ```html\n * <div id=\"sortable\">\n *   <div>Item 1</div>\n *   <div>Item 2</div>\n *   <div>Item 3</div>\n *   <div>Item 4</div>\n *   <div>Item 5</div>\n * </div>\n * ```\n * ```typescript\n *   let ele: HTMLElement = document.getElementById('sortable');\n *   let sortObj: Sortable = new Sortable(ele, {});\n * ```\n */\n\nlet Sortable = Sortable_1 = class Sortable extends Base {\n  /* es-lint enable  */\n  constructor(element, options) {\n    super(options, element); // eslint-disable-next-line\n\n    this.getHelper = e => {\n      // eslint-disable-next-line prefer-const\n      let target = this.getSortableElement(e.sender.target);\n\n      if (!this.isValidTarget(target, this)) {\n        return false;\n      }\n\n      let element;\n\n      if (this.helper) {\n        element = this.helper({\n          sender: target,\n          element: e.element\n        });\n      } else {\n        element = target.cloneNode(true);\n        element.style.width = `${target.offsetWidth}px`;\n        element.style.height = `${target.offsetHeight}px`;\n      }\n\n      addClass([element], ['e-sortableclone']);\n      removeClass([element], ['e-listboxtool-container']);\n\n      if (element && element.className.indexOf(\"e-listbox-wrapper\") < 0) {\n        addClass([element], ['e-listbox-wrapper']);\n      }\n\n      document.body.appendChild(element);\n      return element;\n    }; // eslint-disable-next-line\n\n\n    this.onDrag = e => {\n      this.trigger('drag', {\n        event: e.event,\n        element: this.element,\n        target: e.target\n      });\n      let newInst = this.getSortableInstance(e.target);\n      let target = this.getSortableElement(e.target, newInst);\n\n      if ((this.isValidTarget(target, newInst) || e.target.className.indexOf('e-list-group-item') > -1) && (this.curTarget !== target || !isNullOrUndefined(newInst.placeHolder)) && (newInst.placeHolderElement ? newInst.placeHolderElement !== e.target : true)) {\n        if (e.target.className.indexOf('e-list-group-item') > -1) {\n          target = e.target;\n        }\n\n        this.curTarget = target;\n\n        if (this.target === target) {\n          return;\n        }\n\n        let oldIdx = this.getIndex(newInst.placeHolderElement, newInst);\n        const placeHolder = this.getPlaceHolder(target, newInst);\n        let newIdx;\n\n        if (placeHolder) {\n          oldIdx = isNullOrUndefined(oldIdx) ? this.getIndex(this.target) : oldIdx;\n          newIdx = this.getIndex(target, newInst, e.event);\n          const isPlaceHolderPresent = this.isPlaceHolderPresent(newInst);\n\n          if (isPlaceHolderPresent && oldIdx === newIdx) {\n            return;\n          }\n\n          if (isPlaceHolderPresent) {\n            remove(newInst.placeHolderElement);\n          }\n\n          newInst.placeHolderElement = placeHolder;\n\n          if (e.target.className.indexOf('e-list-group-item') > -1) {\n            newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);\n          } else if (newInst.element !== this.element && newIdx === newInst.element.childElementCount) {\n            newInst.element.appendChild(newInst.placeHolderElement);\n          } else {\n            newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);\n          }\n\n          this.refreshDisabled(oldIdx, newIdx, newInst);\n        } else {\n          oldIdx = isNullOrUndefined(oldIdx) ? this.getIndex(this.target) : this.getIndex(target, newInst) < oldIdx || !oldIdx ? oldIdx : oldIdx - 1;\n          newIdx = this.getIndex(target, newInst);\n          const idx = newInst.element !== this.element ? newIdx : oldIdx < newIdx ? newIdx + 1 : newIdx;\n          this.updateItemClass(newInst);\n          newInst.element.insertBefore(this.target, newInst.element.children[idx]);\n          this.refreshDisabled(oldIdx, newIdx, newInst);\n          this.curTarget = this.target;\n          this.trigger('drop', {\n            droppedElement: this.target,\n            element: newInst.element,\n            previousIndex: oldIdx,\n            currentIndex: newIdx,\n            target: e.target,\n            helper: document.getElementsByClassName('e-sortableclone')[0],\n            event: e.event,\n            scope: this.scope\n          });\n        }\n      }\n\n      newInst = this.getSortableInstance(this.curTarget);\n\n      if (isNullOrUndefined(target) && e.target !== newInst.placeHolderElement) {\n        if (this.isPlaceHolderPresent(newInst)) {\n          this.removePlaceHolder(newInst);\n        }\n      } else {\n        const placeHolders = [].slice.call(document.getElementsByClassName('e-sortable-placeholder'));\n        let inst;\n        placeHolders.forEach(placeHolder => {\n          inst = this.getSortableInstance(placeHolder);\n\n          if (inst.element && inst !== newInst) {\n            this.removePlaceHolder(inst);\n          }\n        });\n      }\n    }; // eslint-disable-next-line\n\n\n    this.onDragStart = e => {\n      this.target = this.getSortableElement(e.target);\n      let cancelDrag = false;\n      this.target.classList.add('e-grabbed');\n      this.curTarget = this.target;\n      e.helper = document.getElementsByClassName('e-sortableclone')[0];\n      const args = {\n        cancel: false,\n        element: this.element,\n        target: this.target\n      };\n      this.trigger('beforeDragStart', args, observedArgs => {\n        if (observedArgs.cancel) {\n          cancelDrag = observedArgs.cancel;\n          this.onDragStop(e);\n        }\n      });\n\n      if (cancelDrag) {\n        return;\n      }\n\n      if (isBlazor) {\n        this.trigger('dragStart', {\n          event: e.event,\n          element: this.element,\n          target: this.target,\n          bindEvents: e.bindEvents,\n          dragElement: e.dragElement\n        });\n      } else {\n        this.trigger('dragStart', {\n          event: e.event,\n          element: this.element,\n          target: this.target\n        });\n      }\n    }; // eslint-disable-next-line\n\n\n    this.onDragStop = e => {\n      let dropInst = this.getSortableInstance(this.curTarget);\n      let prevIdx;\n      let curIdx;\n      let handled;\n      prevIdx = this.getIndex(this.target);\n      const isPlaceHolderPresent = this.isPlaceHolderPresent(dropInst);\n\n      if (isPlaceHolderPresent) {\n        const curIdx = this.getIndex(dropInst.placeHolderElement, dropInst);\n        let prevIndx = this === dropInst && prevIdx - curIdx > 0 ? prevIdx - 1 : prevIdx;\n        const args = {\n          previousIndex: prevIndx,\n          currentIndex: this.curTarget === this.target ? prevIndx : curIdx,\n          target: e.target,\n          droppedElement: this.target,\n          helper: e.helper,\n          cancel: false,\n          handled: false\n        };\n        this.trigger('beforeDrop', args, observedArgs => {\n          if (!observedArgs.cancel) {\n            handled = observedArgs.handled;\n            this.updateItemClass(dropInst);\n\n            if (observedArgs.handled) {\n              const ele = this.target.cloneNode(true);\n              this.target.classList.remove('e-grabbed');\n              this.target = ele;\n            }\n\n            dropInst.element.insertBefore(this.target, dropInst.placeHolderElement);\n            const curIdx = this.getIndex(this.target, dropInst);\n            prevIdx = this === dropInst && prevIdx - curIdx > 1 ? prevIdx - 1 : prevIdx;\n            this.trigger('drop', {\n              event: e.event,\n              element: dropInst.element,\n              previousIndex: prevIdx,\n              currentIndex: curIdx,\n              target: e.target,\n              helper: e.helper,\n              droppedElement: this.target,\n              scopeName: this.scope,\n              handled: handled\n            });\n          }\n\n          remove(dropInst.placeHolderElement);\n        });\n      }\n\n      dropInst = this.getSortableInstance(e.target); // eslint-disable-next-line prefer-const\n\n      curIdx = dropInst.element.childElementCount;\n      prevIdx = this.getIndex(this.target);\n      const target = e.target.className.indexOf(\"e-list-nrt\") > -1 ? e.target.parentElement : e.target;\n\n      if (dropInst.element === target || !isPlaceHolderPresent && this.curTarget === this.target) {\n        const beforeDropArgs = {\n          previousIndex: prevIdx,\n          currentIndex: this.curTarget === this.target ? prevIdx : curIdx,\n          target: e.target,\n          droppedElement: this.target,\n          helper: e.helper,\n          cancel: false\n        };\n        this.trigger('beforeDrop', beforeDropArgs, observedArgs => {\n          if (dropInst.element === e.target && !observedArgs.cancel) {\n            this.updateItemClass(dropInst);\n            dropInst.element.appendChild(this.target);\n            this.trigger('drop', {\n              event: e.event,\n              element: dropInst.element,\n              previousIndex: prevIdx,\n              currentIndex: curIdx,\n              target: e.target,\n              helper: e.helper,\n              droppedElement: this.target,\n              scopeName: this.scope\n            });\n          }\n        });\n      }\n\n      this.target.classList.remove('e-grabbed');\n      this.target = null;\n      this.curTarget = null;\n      remove(e.helper);\n      getComponent(this.element, Draggable).intDestroy(e.event);\n    };\n\n    this.bind();\n  }\n\n  bind() {\n    if (!this.element.id) {\n      this.element.id = getUniqueID('sortable');\n    }\n\n    if (!this.itemClass) {\n      this.itemClass = 'e-sort-item';\n      this.dataBind();\n    }\n\n    this.initializeDraggable();\n  }\n\n  initializeDraggable() {\n    new Draggable(this.element, {\n      helper: this.getHelper,\n      dragStart: this.onDragStart,\n      drag: this.onDrag,\n      dragStop: this.onDragStop,\n      dragTarget: `.${this.itemClass}`,\n      enableTapHold: true,\n      tapHoldThreshold: 200,\n      queryPositionInfo: this.queryPositionInfo,\n      distance: 5\n    });\n  }\n\n  getPlaceHolder(target, instance) {\n    if (instance.placeHolder) {\n      const placeHolderElement = instance.placeHolder({\n        element: instance.element,\n        grabbedElement: this.target,\n        target: target\n      });\n      placeHolderElement.classList.add('e-sortable-placeholder');\n      return placeHolderElement;\n    }\n\n    return null;\n  }\n\n  isValidTarget(target, instance) {\n    return target && compareElementParent(target, instance.element) && target.classList.contains(instance.itemClass) && !target.classList.contains('e-disabled');\n  }\n\n  removePlaceHolder(instance) {\n    remove(instance.placeHolderElement);\n    instance.placeHolderElement = null;\n  }\n\n  updateItemClass(instance) {\n    if (this !== instance) {\n      this.target.classList.remove(this.itemClass);\n      this.target.classList.add(instance.itemClass);\n    }\n  }\n\n  getSortableInstance(element) {\n    element = closest(element, `.e-${this.getModuleName()}`);\n\n    if (element) {\n      const inst = getComponent(element, Sortable_1);\n      return inst.scope && this.scope && inst.scope === this.scope ? inst : this;\n    } else {\n      return this;\n    }\n  }\n\n  refreshDisabled(oldIdx, newIdx, instance) {\n    if (instance === this) {\n      let element;\n      const increased = oldIdx < newIdx;\n      let disabledIdx;\n      let start = increased ? oldIdx : newIdx;\n      const end = increased ? newIdx : oldIdx;\n\n      while (start <= end) {\n        element = this.element.children[start];\n\n        if (element.classList.contains('e-disabled')) {\n          disabledIdx = this.getIndex(element);\n          this.element.insertBefore(element, this.element.children[increased ? disabledIdx + 2 : disabledIdx - 1]);\n          start = increased ? disabledIdx + 2 : disabledIdx + 1;\n        } else {\n          start++;\n        }\n      }\n    }\n  }\n\n  getIndex(target, instance = this, e) {\n    let idx;\n    let placeHolderPresent;\n    [].slice.call(instance.element.children).forEach((element, index) => {\n      if (element.classList.contains('e-sortable-placeholder')) {\n        placeHolderPresent = true;\n      }\n\n      if (element === target) {\n        idx = index;\n\n        if (!isNullOrUndefined(e)) {\n          if (placeHolderPresent) {\n            idx -= 1;\n          }\n\n          const offset = target.getBoundingClientRect();\n          const clientY = offset.bottom - (offset.bottom - offset.top) / 2;\n          idx = e.clientY <= clientY ? idx : idx + 1;\n        }\n\n        return;\n      }\n    });\n    return idx;\n  }\n\n  getSortableElement(element, instance = this) {\n    return closest(element, `.${instance.itemClass}`);\n  }\n\n  queryPositionInfo(value) {\n    value.left = pageXOffset ? `${parseFloat(value.left) - pageXOffset}px` : value.left;\n    value.top = pageYOffset ? `${parseFloat(value.top) - pageYOffset}px` : value.top;\n    return value;\n  }\n\n  isPlaceHolderPresent(instance) {\n    return instance.placeHolderElement && !!closest(instance.placeHolderElement, `#${instance.element.id}`);\n  }\n  /**\n   * It is used to sort array of elements from source element to destination element.\n   *\n   * @param destination - Defines the destination element to which the sortable elements needs to be appended.\n   *\n   * If it is null, then the Sortable library element will be considered as destination.\n   * @param targetIndexes - Specifies the sortable elements indexes which needs to be sorted.\n   * @param insertBefore - Specifies the index before which the sortable elements needs to be appended.\n   * If it is null, elements will be appended as last child.\n   * @function moveTo\n   * @returns {void}\n   */\n\n\n  moveTo(destination, targetIndexes, insertBefore) {\n    moveTo(this.element, destination, targetIndexes, insertBefore);\n  }\n  /**\n   * It is used to destroy the Sortable library.\n   */\n\n\n  destroy() {\n    if (this.itemClass === 'e-sort-item') {\n      this.itemClass = null;\n      this.dataBind();\n    }\n\n    getComponent(this.element, Draggable).destroy();\n    super.destroy();\n  }\n\n  getModuleName() {\n    return 'sortable';\n  }\n\n  onPropertyChanged(newProp, oldProp) {\n    for (const prop of Object.keys(newProp)) {\n      switch (prop) {\n        case 'itemClass':\n          [].slice.call(this.element.children).forEach(element => {\n            if (element.classList.contains(oldProp.itemClass)) {\n              element.classList.remove(oldProp.itemClass);\n            }\n\n            if (newProp.itemClass) {\n              element.classList.add(newProp.itemClass);\n            }\n          });\n          break;\n      }\n    }\n  }\n\n};\n\n__decorate$1([Property(false)], Sortable.prototype, \"enableAnimation\", void 0);\n\n__decorate$1([Property(null)], Sortable.prototype, \"itemClass\", void 0);\n\n__decorate$1([Property(null)], Sortable.prototype, \"scope\", void 0);\n\n__decorate$1([Property()], Sortable.prototype, \"helper\", void 0);\n\n__decorate$1([Property()], Sortable.prototype, \"placeHolder\", void 0);\n\n__decorate$1([Event()], Sortable.prototype, \"drag\", void 0);\n\n__decorate$1([Event()], Sortable.prototype, \"beforeDragStart\", void 0);\n\n__decorate$1([Event()], Sortable.prototype, \"dragStart\", void 0);\n\n__decorate$1([Event()], Sortable.prototype, \"beforeDrop\", void 0);\n\n__decorate$1([Event()], Sortable.prototype, \"drop\", void 0);\n\nSortable = Sortable_1 = __decorate$1([NotifyPropertyChanges], Sortable);\n/**\n * It is used to sort array of elements from source element to destination element.\n *\n * @private\n */\n\nfunction moveTo(from, to, targetIndexes, insertBefore) {\n  let targetElements = [];\n\n  if (!to) {\n    to = from;\n  }\n\n  if (targetIndexes && targetIndexes.length) {\n    targetIndexes.forEach(index => {\n      targetElements.push(from.children[index]);\n    });\n  } else {\n    targetElements = [].slice.call(from.children);\n  }\n\n  if (isNullOrUndefined(insertBefore)) {\n    targetElements.forEach(target => {\n      to.appendChild(target);\n    });\n  } else {\n    const insertElement = to.children[insertBefore];\n    targetElements.forEach(target => {\n      to.insertBefore(target, insertElement);\n    });\n  }\n}\n/**\n * Sortable Module\n */\n\n/**\n * List Components\n */\n\n\nexport { classNames, FieldSettings, ListView, Virtualization, cssClass, ListBase, getFieldValues, Sortable, moveTo }; //# sourceMappingURL=ej2-lists.es2015.js.map","map":null,"metadata":{},"sourceType":"module"}