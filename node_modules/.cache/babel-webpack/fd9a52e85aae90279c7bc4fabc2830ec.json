{"ast":null,"code":"/**\r\n * A collection of network-related functions\r\n */\n\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $type from \"./Type\";\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\n\nexport function load(url, target, options) {\n  return new Promise(function (success, error) {\n    // Is return type Blob?\n    var isBlob = $type.hasValue(options) && options.responseType == \"blob\"; // Create request and set up handlers\n\n    var xhr = new XMLHttpRequest();\n\n    xhr.onload = function () {\n      if (xhr.status === 200) {\n        var response = void 0;\n        var blob_1;\n\n        if (isBlob) {\n          blob_1 = xhr.response;\n          readBlob(blob_1).then(function (response) {\n            var output = {\n              xhr: xhr,\n              error: false,\n              response: response,\n              blob: blob_1,\n              type: xhr.getResponseHeader(\"Content-Type\"),\n              target: target\n            };\n            success(output);\n          });\n          return;\n        } else {\n          response = xhr.responseText || xhr.response;\n        }\n\n        var output = {\n          xhr: xhr,\n          error: false,\n          response: response,\n          blob: blob_1,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        };\n        success(output);\n      } else {\n        error({\n          xhr: xhr,\n          error: true,\n          type: xhr.getResponseHeader(\"Content-Type\"),\n          target: target\n        });\n      }\n    };\n\n    xhr.onerror = function () {\n      error({\n        xhr: xhr,\n        error: true,\n        type: xhr.getResponseHeader(\"Content-Type\"),\n        target: target\n      });\n    }; // Open request\n\n\n    xhr.open(\"GET\", url, true);\n\n    if (options && options.withCredentials) {\n      xhr.withCredentials = true;\n    } // Process options\n\n\n    if ($type.hasValue(options)) {\n      if ($type.hasValue(options.requestHeaders)) {\n        for (var i = 0; i < options.requestHeaders.length; i++) {\n          var header = options.requestHeaders[i];\n          xhr.setRequestHeader(header.key, header.value);\n        }\n      }\n\n      if ($type.hasValue(options.responseType)) {\n        xhr.responseType = options.responseType;\n      }\n    } // Send request\n\n\n    xhr.send();\n  });\n}\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\n\nexport function readBlob(blob) {\n  return new Promise(function (success, error) {\n    var reader = new FileReader();\n\n    reader.onload = function (event) {\n      success(reader.result);\n    };\n\n    reader.onerror = function (e) {\n      error(e);\n    };\n\n    reader.readAsText(blob);\n  });\n}","map":{"version":3,"sources":["/home/unutu/fontend/Angular/Angular_Server_Management_FE/node_modules/@amcharts/amcharts4/.internal/core/utils/Net.js"],"names":["$type","load","url","target","options","Promise","success","error","isBlob","hasValue","responseType","xhr","XMLHttpRequest","onload","status","response","blob_1","readBlob","then","output","blob","type","getResponseHeader","responseText","onerror","open","withCredentials","requestHeaders","i","length","header","setRequestHeader","key","value","send","reader","FileReader","event","result","e","readAsText"],"mappings":"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","sourcesContent":["/**\r\n * A collection of network-related functions\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $type from \"./Type\";\r\n/**\r\n * Loads an external file via its URL.\r\n *\r\n * Please note that this is an asynchronous function.\r\n *\r\n * It will not return the result, but rather a `Promise`.\r\n *\r\n * You can use the `await` notion, or `then()`.\r\n *\r\n * ```TypeScript\r\n * // Using await\r\n * let response = await Net.load( \"http://www.my.com/data.json\" );\r\n * console.log( response.response );\r\n *\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( ( response ) => {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n * ```JavaScript\r\n * // Using then()\r\n * Net.load( \"http://www.my.com/data.json\" ).then( function( response ) {\r\n *   console.log( response.response );\r\n * } );\r\n * ```\r\n *\r\n * @async\r\n * @param url      URL for the file to load\r\n * @param target   A target element that is requesting the net load\r\n * @param options  Request options\r\n * @return Result (Promise)\r\n */\r\nexport function load(url, target, options) {\r\n    return new Promise(function (success, error) {\r\n        // Is return type Blob?\r\n        var isBlob = $type.hasValue(options) && options.responseType == \"blob\";\r\n        // Create request and set up handlers\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.onload = function () {\r\n            if (xhr.status === 200) {\r\n                var response = void 0;\r\n                var blob_1;\r\n                if (isBlob) {\r\n                    blob_1 = xhr.response;\r\n                    readBlob(blob_1).then(function (response) {\r\n                        var output = {\r\n                            xhr: xhr,\r\n                            error: false,\r\n                            response: response,\r\n                            blob: blob_1,\r\n                            type: xhr.getResponseHeader(\"Content-Type\"),\r\n                            target: target\r\n                        };\r\n                        success(output);\r\n                    });\r\n                    return;\r\n                }\r\n                else {\r\n                    response = xhr.responseText || xhr.response;\r\n                }\r\n                var output = {\r\n                    xhr: xhr,\r\n                    error: false,\r\n                    response: response,\r\n                    blob: blob_1,\r\n                    type: xhr.getResponseHeader(\"Content-Type\"),\r\n                    target: target\r\n                };\r\n                success(output);\r\n            }\r\n            else {\r\n                error({\r\n                    xhr: xhr,\r\n                    error: true,\r\n                    type: xhr.getResponseHeader(\"Content-Type\"),\r\n                    target: target\r\n                });\r\n            }\r\n        };\r\n        xhr.onerror = function () {\r\n            error({\r\n                xhr: xhr,\r\n                error: true,\r\n                type: xhr.getResponseHeader(\"Content-Type\"),\r\n                target: target\r\n            });\r\n        };\r\n        // Open request\r\n        xhr.open(\"GET\", url, true);\r\n        if (options && options.withCredentials) {\r\n            xhr.withCredentials = true;\r\n        }\r\n        // Process options\r\n        if ($type.hasValue(options)) {\r\n            if ($type.hasValue(options.requestHeaders)) {\r\n                for (var i = 0; i < options.requestHeaders.length; i++) {\r\n                    var header = options.requestHeaders[i];\r\n                    xhr.setRequestHeader(header.key, header.value);\r\n                }\r\n            }\r\n            if ($type.hasValue(options.responseType)) {\r\n                xhr.responseType = options.responseType;\r\n            }\r\n        }\r\n        // Send request\r\n        xhr.send();\r\n    });\r\n}\r\n/**\r\n * Returns textual representation of a Blob object.\r\n *\r\n * @param   blob  Target blob\r\n * @return        Text promise\r\n */\r\nexport function readBlob(blob) {\r\n    return new Promise(function (success, error) {\r\n        var reader = new FileReader();\r\n        reader.onload = function (event) {\r\n            success(reader.result);\r\n        };\r\n        reader.onerror = function (e) {\r\n            error(e);\r\n        };\r\n        reader.readAsText(blob);\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}