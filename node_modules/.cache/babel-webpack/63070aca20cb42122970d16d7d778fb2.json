{"ast":null,"code":"let instances = 'ej2_instances';\nlet uid = 0;\nlet isBlazorPlatform = false;\n/**\n * Function to check whether the platform is blazor or not.\n * @return {boolean} result\n * @private\n */\n\nfunction disableBlazorMode() {\n  isBlazorPlatform = false;\n}\n/**\n * Create Instance from constructor function with desired parameters.\n * @param {Function} classFunction - Class function to which need to create instance\n * @param {any[]} params - Parameters need to passed while creating instance\n * @return {any}\n * @private\n */\n\n\nfunction createInstance(classFunction, params) {\n  let arrayParam = params;\n  arrayParam.unshift(undefined);\n  return new (Function.prototype.bind.apply(classFunction, arrayParam))();\n}\n/**\n * To run a callback function immediately after the browser has completed other operations.\n * @param {Function} handler - callback function to be triggered.\n * @return {Function}\n * @private\n */\n\n\nfunction setImmediate(handler) {\n  let unbind;\n  let num = new Uint16Array(5);\n  let intCrypto = window.msCrypto || window.crypto;\n  intCrypto.getRandomValues(num);\n  let secret = 'ej2' + combineArray(num);\n\n  let messageHandler = event => {\n    if (event.source === window && typeof event.data === 'string' && event.data.length <= 32 && event.data === secret) {\n      handler();\n      unbind();\n    }\n  };\n\n  window.addEventListener('message', messageHandler, false);\n  window.postMessage(secret, '*');\n  return unbind = () => {\n    window.removeEventListener('message', messageHandler);\n    handler = messageHandler = secret = undefined;\n  };\n}\n/**\n * To get nameSpace value from the desired object.\n * @param {string} nameSpace - String value to the get the inner object\n * @param {any} obj - Object to get the inner object value.\n * @return {any}\n * @private\n */\n\n\nfunction getValue(nameSpace, obj) {\n  /* tslint:disable no-any */\n  let value = obj;\n  let splits = nameSpace.replace(/\\[/g, '.').replace(/\\]/g, '').split('.');\n\n  for (let i = 0; i < splits.length && !isUndefined(value); i++) {\n    value = value[splits[i]];\n  }\n\n  return value;\n}\n/**\n * To set value for the nameSpace in desired object.\n * @param {string} nameSpace - String value to the get the inner object\n * @param {any} value - Value that you need to set.\n * @param {any} obj - Object to get the inner object value.\n * @return {void}\n * @private\n */\n\n\nfunction setValue(nameSpace, value, obj) {\n  let keys = nameSpace.replace(/\\[/g, '.').replace(/\\]/g, '').split('.');\n  let start = obj || {};\n  let fromObj = start;\n  let i;\n  let length = keys.length;\n  let key;\n\n  for (i = 0; i < length; i++) {\n    key = keys[i];\n\n    if (i + 1 === length) {\n      fromObj[key] = value === undefined ? {} : value;\n    } else if (isNullOrUndefined(fromObj[key])) {\n      fromObj[key] = {};\n    }\n\n    fromObj = fromObj[key];\n  }\n\n  return start;\n}\n/**\n * Delete an item from Object\n * @param {any} obj - Object in which we need to delete an item.\n * @param {string} params - String value to the get the inner object\n * @return {void}\n * @private\n */\n\n\nfunction deleteObject(obj, key) {\n  delete obj[key];\n}\n/**\n * Check weather the given argument is only object.\n * @param {any} obj - Object which is need to check.\n * @return {boolean}\n * @private\n */\n\n\nfunction isObject(obj) {\n  let objCon = {};\n  return !isNullOrUndefined(obj) && obj.constructor === objCon.constructor;\n}\n/**\n * To get enum value by giving the string.\n * @param {any} enumObject - Enum object.\n * @param {string} enumValue - Enum value to be searched\n * @return {any}\n * @private\n */\n\n\nfunction getEnumValue(enumObject, enumValue) {\n  return enumObject[enumValue];\n}\n/**\n * Merge the source object into destination object.\n * @param {any} source - source object which is going to merge with destination object\n * @param {any} destination - object need to be merged\n * @return {void}\n * @private\n */\n\n\nfunction merge(source, destination) {\n  if (!isNullOrUndefined(destination)) {\n    let temrObj = source;\n    let tempProp = destination;\n    let keys = Object.keys(destination);\n    let deepmerge = 'deepMerge';\n\n    for (let key of keys) {\n      if (!isNullOrUndefined(temrObj[deepmerge]) && temrObj[deepmerge].indexOf(key) !== -1 && (isObject(tempProp[key]) || Array.isArray(tempProp[key]))) {\n        extend(temrObj[key], temrObj[key], tempProp[key], true);\n      } else {\n        temrObj[key] = tempProp[key];\n      }\n    }\n  }\n}\n/**\n * Extend the two object with newer one.\n * @param {any} copied - Resultant object after merged\n * @param {Object} first - First object need to merge\n * @param {Object} second - Second object need to merge\n * @return {Object}\n * @private\n */\n\n\nfunction extend(copied, first, second, deep) {\n  let result = copied && typeof copied === 'object' ? copied : {};\n  let length = arguments.length;\n\n  if (deep) {\n    length = length - 1;\n  }\n\n  for (let i = 1; i < length; i++) {\n    if (!arguments[i]) {\n      continue;\n    }\n\n    let obj1 = arguments[i];\n    Object.keys(obj1).forEach(key => {\n      let src = result[key];\n      let copy = obj1[key];\n      let clone;\n      let isArrayChanged = Array.isArray(copy) && Array.isArray(src) && copy.length !== src.length;\n      let blazorEventExtend = isBlazor() ? !(src instanceof Event) && !isArrayChanged : true;\n\n      if (deep && blazorEventExtend && (isObject(copy) || Array.isArray(copy))) {\n        if (isObject(copy)) {\n          clone = src ? src : {};\n\n          if (Array.isArray(clone) && clone.hasOwnProperty('isComplexArray')) {\n            extend(clone, {}, copy, deep);\n          } else {\n            result[key] = extend(clone, {}, copy, deep);\n          }\n        } else {\n          /* istanbul ignore next */\n          clone = isBlazor() ? src && Object.keys(copy).length : src ? src : [];\n          result[key] = extend([], clone, copy, deep);\n        }\n      } else {\n        result[key] = copy;\n      }\n    });\n  }\n\n  return result;\n}\n/**\n * To check whether the object is null or undefined.\n * @param {Object} value - To check the object is null or undefined\n * @return {boolean}\n * @private\n */\n\n\nfunction isNullOrUndefined(value) {\n  return value === undefined || value === null;\n}\n/**\n * To check whether the object is undefined.\n * @param {Object} value - To check the object is undefined\n * @return {boolean}\n * @private\n */\n\n\nfunction isUndefined(value) {\n  return 'undefined' === typeof value;\n}\n/**\n * To return the generated unique name\n * @param {string} definedName - To concatenate the unique id to provided name\n * @return {string}\n * @private\n */\n\n\nfunction getUniqueID(definedName) {\n  return definedName + '_' + uid++;\n}\n/**\n * It limits the rate at which a function can fire. The function will fire only once every provided second instead of as quickly.\n * @param {Function} eventFunction - Specifies the function to run when the event occurs\n * @param {number} delay - A number that specifies the milliseconds for function delay call option\n * @return {Function}\n * @private\n */\n\n\nfunction debounce(eventFunction, delay) {\n  let out; // tslint:disable-next-line\n\n  return function () {\n    let args = arguments;\n\n    let later = () => {\n      out = null;\n      return eventFunction.apply(this, args);\n    };\n\n    clearTimeout(out);\n    out = setTimeout(later, delay);\n  };\n} // Added since lint ignored after added '//tslint:disable-next-line' \n\n/* tslint:disable:no-any */\n\n/**\n * To convert the object to string for query url\n * @param  {Object} data\n * @returns string\n * @private\n */\n\n\nfunction queryParams(data) {\n  let array = [];\n  let keys = Object.keys(data);\n\n  for (let key of keys) {\n    array.push(encodeURIComponent(key) + '=' + encodeURIComponent('' + data[key]));\n  }\n\n  return array.join('&');\n}\n/**\n * To check whether the given array contains object.\n * @param {T[]} value- Specifies the T type array to be checked.\n * @private\n */\n\n\nfunction isObjectArray(value) {\n  let parser = Object.prototype.toString;\n\n  if (parser.call(value) === '[object Array]') {\n    if (parser.call(value[0]) === '[object Object]') {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * To check whether the  child element is descendant to parent element or parent and child are same element.\n * @param{Element} - Specifies the child element to compare with parent.\n * @param{Element} - Specifies the parent element.\n * @return boolean\n * @private\n */\n\n\nfunction compareElementParent(child, parent) {\n  let node = child;\n\n  if (node === parent) {\n    return true;\n  } else if (node === document || !node) {\n    return false;\n  } else {\n    return compareElementParent(node.parentNode, parent);\n  }\n}\n/**\n * To throw custom error message.\n * @param{string} - Specifies the error message to be thrown.\n * @private\n */\n\n\nfunction throwError(message) {\n  try {\n    throw new Error(message);\n  } catch (e) {\n    throw e.message + '\\n' + e.stack;\n  }\n}\n/**\n * This function is used to print given element\n * @param{Element} element - Specifies the print content element.\n * @param{Window} printWindow - Specifies the print window.\n * @private\n */\n\n\nfunction print(element, printWindow) {\n  let div = document.createElement('div');\n  let links = [].slice.call(document.getElementsByTagName('head')[0].querySelectorAll('base, link, style'));\n  let blinks = [].slice.call(document.getElementsByTagName('body')[0].querySelectorAll('link, style'));\n\n  if (blinks.length) {\n    for (let l = 0, len = blinks.length; l < len; l++) {\n      links.push(blinks[l]);\n    }\n  }\n\n  let reference = '';\n\n  if (isNullOrUndefined(printWindow)) {\n    printWindow = window.open('', 'print', 'height=452,width=1024,tabbar=no');\n  }\n\n  div.appendChild(element.cloneNode(true));\n\n  for (let i = 0, len = links.length; i < len; i++) {\n    reference += links[i].outerHTML;\n  }\n\n  printWindow.document.write('<!DOCTYPE html> <html><head>' + reference + '</head><body>' + div.innerHTML + '<script> (function() { window.ready = true; })(); </script>' + '</body></html>');\n  printWindow.document.close();\n  printWindow.focus(); // tslint:disable-next-line\n\n  let interval = setInterval(() => {\n    if (printWindow.ready) {\n      printWindow.print();\n      printWindow.close();\n      clearInterval(interval);\n    }\n  }, 500);\n  return printWindow;\n}\n/**\n * Function to normalize the units applied to the element.\n * @param  {number|string} value\n * @return {string} result\n * @private\n */\n\n\nfunction formatUnit(value) {\n  let result = value + '';\n\n  if (result.match(/auto|%|px|vh|vm|vmax|vmin|em/)) {\n    return result;\n  }\n\n  return result + 'px';\n}\n/**\n * Function to check whether the platform is blazor or not.\n * @return {boolean} result\n * @private\n */\n\n\nfunction enableBlazorMode() {\n  isBlazorPlatform = true;\n}\n/**\n * Function to check whether the platform is blazor or not.\n * @return {boolean} result\n * @private\n */\n\n\nfunction isBlazor() {\n  return isBlazorPlatform;\n}\n/**\n * Function to convert xPath to DOM element in blazor platform\n * @return {HTMLElement} result\n * @param {HTMLElement | object} element\n * @private\n */\n\n\nfunction getElement(element) {\n  let xPath = 'xPath';\n\n  if (!(element instanceof Node) && isBlazor() && !isNullOrUndefined(element[xPath])) {\n    return document.evaluate(element[xPath], document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n  }\n\n  return element;\n}\n/**\n * Function to fetch the Instances of a HTML element for the given component.\n * @param {string | HTMLElement} element\n * @param {any} component\n * @return {Object} inst\n * @private\n */\n// tslint:disable-next-line\n\n\nfunction getInstance(element, component) {\n  // tslint:disable-next-line:no-any\n  let elem = typeof element === 'string' ? document.querySelector(element) : element;\n\n  if (elem[instances]) {\n    for (let inst of elem[instances]) {\n      if (inst instanceof component) {\n        return inst;\n      }\n    }\n  }\n\n  return null;\n}\n/**\n * Function to add instances for the given element.\n * @param {string | HTMLElement} element\n * @param {Object} instance\n * @return {void}\n * @private\n */\n\n\nfunction addInstance(element, instance) {\n  // tslint:disable-next-line:no-any\n  let elem = typeof element === 'string' ? document.querySelector(element) : element;\n\n  if (elem[instances]) {\n    elem[instances].push(instance);\n  } else {\n    elem[instances] = [instance];\n  }\n}\n/**\n * Function to generate the unique id.\n * @return {any}\n * @private\n */\n// tslint:disable-next-line:no-any\n\n\nfunction uniqueID() {\n  // tslint:disable-next-line:no-any\n  if (typeof window === 'undefined') {\n    return;\n  } // tslint:disable-next-line:no-any\n\n\n  let num = new Uint16Array(5);\n  let intCrypto = window.msCrypto || window.crypto;\n  return intCrypto.getRandomValues(num);\n}\n\nfunction combineArray(num) {\n  let ret = '';\n\n  for (let i = 0; i < 5; i++) {\n    ret += (i ? ',' : '') + num[i];\n  }\n\n  return ret;\n}\n/**\n * Parser\n */\n\n\nconst defaultNumberingSystem = {\n  'latn': {\n    '_digits': '0123456789',\n    '_type': 'numeric'\n  }\n};\nconst defaultNumberSymbols = {\n  'decimal': '.',\n  'group': ',',\n  'percentSign': '%',\n  'plusSign': '+',\n  'minusSign': '-',\n  'infinity': '∞',\n  'nan': 'NaN',\n  'exponential': 'E'\n};\nconst latnNumberSystem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n/**\n * Interface for parser base\n * @private\n */\n\nlet ParserBase = /*#__PURE__*/(() => {\n  class ParserBase {\n    /**\n     * Returns the cldr object for the culture specifies\n     * @param {Object} obj - Specifies the object from which culture object to be acquired.\n     * @param {string} cName - Specifies the culture name.\n     * @returns {Object}\n     */\n    static getMainObject(obj, cName) {\n      let value = isBlazor() ? cName : 'main.' + cName;\n      return getValue(value, obj);\n    }\n    /**\n     * Returns the numbering system object from given cldr data.\n     * @param {Object} obj - Specifies the object from which number system is acquired.\n     * @returns {Object}\n     */\n\n\n    static getNumberingSystem(obj) {\n      return getValue('supplemental.numberingSystems', obj) || this.numberingSystems;\n    }\n    /**\n     * Returns the reverse of given object keys or keys specified.\n     * @param {Object} prop - Specifies the object to be reversed.\n     * @param {number[]} keys - Optional parameter specifies the custom keyList for reversal.\n     * @returns {Object}\n     */\n\n\n    static reverseObject(prop, keys) {\n      let propKeys = keys || Object.keys(prop);\n      let res = {};\n\n      for (let key of propKeys) {\n        /* tslint:disable no-any */\n        if (!res.hasOwnProperty(prop[key])) {\n          res[prop[key]] = key;\n        }\n      }\n\n      return res;\n    }\n    /**\n     * Returns the symbol regex by skipping the escape sequence.\n     * @param {string[]} props - Specifies the array values to be skipped.\n     * @returns {RegExp}\n     */\n\n\n    static getSymbolRegex(props) {\n      let regexStr = props.map(str => {\n        return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n      }).join('|');\n      return new RegExp(regexStr, 'g');\n    }\n\n    static getSymbolMatch(prop) {\n      let matchKeys = Object.keys(defaultNumberSymbols);\n      let ret = {};\n\n      for (let key of matchKeys) {\n        ret[prop[key]] = defaultNumberSymbols[key];\n      }\n\n      return ret;\n    }\n    /**\n     * Returns regex string for provided value\n     * @param {string} val\n     * @returns {string}\n     */\n\n\n    static constructRegex(val) {\n      let len = val.length;\n      let ret = '';\n\n      for (let i = 0; i < len; i++) {\n        if (i !== len - 1) {\n          ret += val[i] + '|';\n        } else {\n          ret += val[i];\n        }\n      }\n\n      return ret;\n    }\n    /**\n     * Returns the replaced value of matching regex and obj mapper.\n     * @param {string} value - Specifies the  values to be replaced.\n     * @param {RegExp} regex - Specifies the  regex to search.\n     * @param {Object} obj - Specifies the  object matcher to be replace value parts.\n     * @returns {string}\n     */\n\n\n    static convertValueParts(value, regex, obj) {\n      return value.replace(regex, str => {\n        return obj[str];\n      });\n    }\n    /**\n     * Returns default numbering system object for formatting from cldr data\n     * @param {Object} obj\n     * @returns {NumericObject}\n     */\n\n\n    static getDefaultNumberingSystem(obj) {\n      let ret = {};\n      ret.obj = getValue('numbers', obj);\n      ret.nSystem = getValue('defaultNumberingSystem', ret.obj);\n      return ret;\n    }\n    /**\n     * Returns the replaced value of matching regex and obj mapper.\n     */\n\n\n    static getCurrentNumericOptions(curObj, numberSystem, needSymbols, blazorMode) {\n      let ret = {};\n      let cur = this.getDefaultNumberingSystem(curObj);\n\n      if (!isUndefined(cur.nSystem) || blazorMode) {\n        let digits = blazorMode ? getValue('obj.mapperDigits', cur) : getValue(cur.nSystem + '._digits', numberSystem);\n\n        if (!isUndefined(digits)) {\n          ret.numericPair = this.reverseObject(digits, latnNumberSystem);\n          ret.numberParseRegex = new RegExp(this.constructRegex(digits), 'g');\n          ret.numericRegex = '[' + digits[0] + '-' + digits[9] + ']';\n\n          if (needSymbols) {\n            ret.numericRegex = digits[0] + '-' + digits[9];\n            ret.symbolNumberSystem = getValue(blazorMode ? 'numberSymbols' : 'symbols-numberSystem-' + cur.nSystem, cur.obj);\n            ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem);\n            ret.numberSystem = cur.nSystem;\n          }\n        }\n      }\n\n      return ret;\n    }\n    /**\n     * Returns number mapper object for the provided cldr data\n     * @param {Object} curObj\n     * @param {Object} numberSystem\n     * @param {boolean} isNumber\n     * @returns {NumberMapper}\n     */\n\n\n    static getNumberMapper(curObj, numberSystem, isNumber) {\n      let ret = {\n        mapper: {}\n      };\n      let cur = this.getDefaultNumberingSystem(curObj);\n\n      if (!isUndefined(cur.nSystem)) {\n        ret.numberSystem = cur.nSystem;\n        ret.numberSymbols = getValue('symbols-numberSystem-' + cur.nSystem, cur.obj);\n        ret.timeSeparator = getValue('timeSeparator', ret.numberSymbols);\n        let digits = getValue(cur.nSystem + '._digits', numberSystem);\n\n        if (!isUndefined(digits)) {\n          for (let i of latnNumberSystem) {\n            ret.mapper[i] = digits[i];\n          }\n        }\n      }\n\n      return ret;\n    }\n\n  }\n\n  ParserBase.nPair = 'numericPair';\n  ParserBase.nRegex = 'numericRegex';\n  ParserBase.numberingSystems = defaultNumberingSystem;\n  /**\n   * @private\n   */\n\n  return ParserBase;\n})();\nconst blazorCurrencyData = {\n  'DJF': 'Fdj',\n  'ERN': 'Nfk',\n  'ETB': 'Br',\n  'NAD': '$',\n  'ZAR': 'R',\n  'XAF': 'FCFA',\n  'GHS': 'GH₵',\n  'XDR': 'XDR',\n  'AED': 'د.إ.‏',\n  'BHD': 'د.ب.‏',\n  'DZD': 'د.ج.‏',\n  'EGP': 'ج.م.‏',\n  'ILS': '₪',\n  'IQD': 'د.ع.‏',\n  'JOD': 'د.ا.‏',\n  'KMF': 'CF',\n  'KWD': 'د.ك.‏',\n  'LBP': 'ل.ل.‏',\n  'LYD': 'د.ل.‏',\n  'MAD': 'د.م.‏',\n  'MRU': 'أ.م.',\n  'OMR': 'ر.ع.‏',\n  'QAR': 'ر.ق.‏',\n  'SAR': 'ر.س.‏',\n  'SDG': 'ج.س.',\n  'SOS': 'S',\n  'SSP': '£',\n  'SYP': 'ل.س.‏',\n  'TND': 'د.ت.‏',\n  'YER': 'ر.ي.‏',\n  'CLP': '$',\n  'INR': '₹',\n  'TZS': 'TSh',\n  'EUR': '€',\n  'AZN': '₼',\n  'RUB': '₽',\n  'BYN': 'Br',\n  'ZMW': 'K',\n  'BGN': 'лв.',\n  'NGN': '₦',\n  'XOF': 'CFA',\n  'BDT': '৳',\n  'CNY': '¥',\n  'BAM': 'КМ',\n  'UGX': 'USh',\n  'USD': '$',\n  'CZK': 'Kč',\n  'GBP': '£',\n  'DKK': 'kr.',\n  'KES': 'Ksh',\n  'CHF': 'CHF',\n  'MVR': 'ރ.',\n  'BTN': 'Nu.',\n  'XCD': 'EC$',\n  'AUD': '$',\n  'BBD': '$',\n  'BIF': 'FBu',\n  'BMD': '$',\n  'BSD': '$',\n  'BWP': 'P',\n  'BZD': '$',\n  'CAD': '$',\n  'NZD': '$',\n  'FJD': '$',\n  'FKP': '£',\n  'GIP': '£',\n  'GMD': 'D',\n  'GYD': '$',\n  'HKD': '$',\n  'IDR': 'Rp',\n  'JMD': '$',\n  'KYD': '$',\n  'LRD': '$',\n  'MGA': 'Ar',\n  'MOP': 'MOP$',\n  'MUR': 'Rs',\n  'MWK': 'MK',\n  'MYR': 'RM',\n  'PGK': 'K',\n  'PHP': '₱',\n  'PKR': 'Rs',\n  'RWF': 'RF',\n  'SBD': '$',\n  'SCR': 'SR',\n  'SEK': 'kr',\n  'SGD': '$',\n  'SHP': '£',\n  'SLL': 'Le',\n  'ANG': 'NAf.',\n  'SZL': 'E',\n  'TOP': 'T$',\n  'TTD': '$',\n  'VUV': 'VT',\n  'WST': 'WS$',\n  'ARS': '$',\n  'BOB': 'Bs',\n  'BRL': 'R$',\n  'COP': '$',\n  'CRC': '₡',\n  'CUP': '$',\n  'DOP': '$',\n  'GTQ': 'Q',\n  'HNL': 'L',\n  'MXN': '$',\n  'NIO': 'C$',\n  'PAB': 'B/.',\n  'PEN': 'S/',\n  'PYG': '₲',\n  'UYU': '$',\n  'VES': 'Bs.S',\n  'IRR': 'ريال',\n  'GNF': 'FG',\n  'CDF': 'FC',\n  'HTG': 'G',\n  'XPF': 'FCFP',\n  'HRK': 'kn',\n  'HUF': 'Ft',\n  'AMD': '֏',\n  'ISK': 'kr',\n  'JPY': '¥',\n  'GEL': '₾',\n  'CVE': '​',\n  'KZT': '₸',\n  'KHR': '៛',\n  'KPW': '₩',\n  'KRW': '₩',\n  'KGS': 'сом',\n  'AOA': 'Kz',\n  'LAK': '₭',\n  'MZN': 'MTn',\n  'MKD': 'ден',\n  'MNT': '₮',\n  'BND': '$',\n  'MMK': 'K',\n  'NOK': 'kr',\n  'NPR': 'रु',\n  'AWG': 'Afl.',\n  'SRD': '$',\n  'PLN': 'zł',\n  'AFN': '؋',\n  'STN': 'Db',\n  'MDL': 'L',\n  'RON': 'lei',\n  'UAH': '₴',\n  'LKR': 'රු.',\n  'ALL': 'Lekë',\n  'RSD': 'дин.',\n  'TJS': 'смн',\n  'THB': '฿',\n  'TMT': 'm.',\n  'TRY': '₺',\n  'UZS': 'сўм',\n  'VND': '₫',\n  'TWD': 'NT$'\n};\n\nfunction getBlazorCurrencySymbol(currencyCode) {\n  return getValue(currencyCode || '', blazorCurrencyData);\n}\n/***\n * Hijri parser\n */\n\n\nvar HijriParser;\n\n(function (HijriParser) {\n  /* tslint:disable */\n  const dateCorrection = [28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167, 29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759, 29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348, 30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939, 30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530, 31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120, 32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711, 32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302, 33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893, 33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483, 34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074, 35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665, 35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254, 36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845, 36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436, 37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027, 38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617, 38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208, 39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798, 39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389, 40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980, 41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570, 41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161, 42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751, 42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342, 43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932, 43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523, 44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114, 45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704, 45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295, 46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885, 46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476, 47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066, 48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657, 48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248, 49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838, 49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429, 50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019, 51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611, 51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200, 52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792, 52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383, 53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973, 54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564, 54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154, 55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745, 55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335, 56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926, 56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517, 57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107, 58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698, 58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288, 59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879, 59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469, 60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061, 61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651, 61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242, 62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832, 62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423, 63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014, 64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603, 64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195, 65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785, 65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376, 66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967, 66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557, 67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148, 68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738, 68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330, 69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919, 69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510, 70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101, 71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691, 71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282, 72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872, 72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464, 73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053, 74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645, 74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235, 75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826, 75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416, 76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007, 77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598, 77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188, 78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779, 78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369, 79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960, 79990];\n  /* tslint:enable */\n\n  function getHijriDate(gDate) {\n    let day = gDate.getDate();\n    let month = gDate.getMonth();\n    let year = gDate.getFullYear();\n    let tMonth = month + 1;\n    let tYear = year;\n\n    if (tMonth < 3) {\n      tYear -= 1;\n      tMonth += 12;\n    }\n\n    let yPrefix = Math.floor(tYear / 100.);\n    let julilanOffset = yPrefix - Math.floor(yPrefix / 4.) - 2;\n    let julianNumber = Math.floor(365.25 * (tYear + 4716)) + Math.floor(30.6001 * (tMonth + 1)) + day - julilanOffset - 1524;\n    yPrefix = Math.floor((julianNumber - 1867216.25) / 36524.25);\n    julilanOffset = yPrefix - Math.floor(yPrefix / 4.) + 1;\n    let b = julianNumber + julilanOffset + 1524;\n    let c = Math.floor((b - 122.1) / 365.25);\n    let d = Math.floor(365.25 * c);\n    let tempMonth = Math.floor((b - d) / 30.6001);\n    day = b - d - Math.floor(30.6001 * tempMonth);\n    month = Math.floor((b - d) / 20.6001);\n\n    if (month > 13) {\n      c += 1;\n      month -= 12;\n    }\n\n    month -= 1;\n    year = c - 4716;\n    let modifiedJulianDate = julianNumber - 2400000; // date calculation for year after 2077\n\n    let iyear = 10631. / 30.;\n    let z = julianNumber - 1948084;\n    let cyc = Math.floor(z / 10631.);\n    z = z - 10631 * cyc;\n    let j = Math.floor((z - 0.1335) / iyear);\n    let iy = 30 * cyc + j;\n    z = z - Math.floor(j * iyear + 0.1335);\n    let im = Math.floor((z + 28.5001) / 29.5);\n    /* istanbul ignore next */\n\n    if (im === 13) {\n      im = 12;\n    }\n\n    let tempDay = z - Math.floor(29.5001 * im - 29);\n    let i = 0;\n\n    for (; i < dateCorrection.length; i++) {\n      if (dateCorrection[i] > modifiedJulianDate) {\n        break;\n      }\n    }\n\n    let iln = i + 16260;\n    let ii = Math.floor((iln - 1) / 12);\n    let hYear = ii + 1;\n    let hmonth = iln - 12 * ii;\n    let hDate = modifiedJulianDate - dateCorrection[i - 1] + 1;\n\n    if ((hDate + '').length > 2) {\n      hDate = tempDay;\n      hmonth = im;\n      hYear = iy;\n    }\n\n    return {\n      year: hYear,\n      month: hmonth,\n      date: hDate\n    };\n  }\n\n  HijriParser.getHijriDate = getHijriDate;\n\n  function toGregorian(year, month, day) {\n    let iy = year;\n    let im = month;\n    let id = day;\n    let ii = iy - 1;\n    let iln = ii * 12 + 1 + (im - 1);\n    let i = iln - 16260;\n    let mcjdn = id + dateCorrection[i - 1] - 1;\n    let julianDate = mcjdn + 2400000;\n    let z = Math.floor(julianDate + 0.5);\n    let a = Math.floor((z - 1867216.25) / 36524.25);\n    a = z + 1 + a - Math.floor(a / 4);\n    let b = a + 1524;\n    let c = Math.floor((b - 122.1) / 365.25);\n    let d = Math.floor(365.25 * c);\n    let e = Math.floor((b - d) / 30.6001);\n    let gDay = b - d - Math.floor(e * 30.6001);\n    let gMonth = e - (e > 13.5 ? 13 : 1);\n    let gYear = c - (gMonth > 2.5 ? 4716 : 4715);\n    /* istanbul ignore next */\n\n    if (gYear <= 0) {\n      gMonth--;\n    } // No year zero\n\n\n    return new Date(gYear + '/' + gMonth + '/' + gDay);\n  }\n\n  HijriParser.toGregorian = toGregorian;\n})(HijriParser || (HijriParser = {}));\n\nconst abbreviateRegexGlobal = /\\/MMMMM|MMMM|MMM|a|LLLL|LLL|EEEEE|EEEE|E|K|cccc|ccc|WW|W|G+|z+/gi;\nconst standalone = 'stand-alone';\nconst weekdayKey = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\nconst timeSetter = {\n  m: 'getMinutes',\n  h: 'getHours',\n  H: 'getHours',\n  s: 'getSeconds',\n  d: 'getDate',\n  f: 'getMilliseconds'\n};\nconst datePartMatcher = {\n  'M': 'month',\n  'd': 'day',\n  'E': 'weekday',\n  'c': 'weekday',\n  'y': 'year',\n  'm': 'minute',\n  'h': 'hour',\n  'H': 'hour',\n  's': 'second',\n  'L': 'month',\n  'a': 'designator',\n  'z': 'timeZone',\n  'Z': 'timeZone',\n  'G': 'era',\n  'f': 'milliseconds'\n};\nconst timeSeparator = 'timeSeparator';\n/* tslint:disable no-any */\n\n/**\n * Date Format is a framework provides support for date formatting.\n * @private\n */\n\nclass DateFormat {\n  /**\n   * Returns the formatter function for given skeleton.\n   * @param {string} -  Specifies the culture name to be which formatting.\n   * @param {DateFormatOptions} - Specific the format in which date  will format.\n   * @param {cldr} - Specifies the global cldr data collection.\n   * @return Function.\n   */\n  static dateFormat(culture, option, cldr) {\n    let dependable = IntlBase.getDependables(cldr, culture, option.calendar);\n    let numObject = getValue('parserObject.numbers', dependable);\n    let dateObject = dependable.dateObject;\n    let formatOptions = {\n      isIslamic: IntlBase.islamicRegex.test(option.calendar)\n    };\n\n    if (isBlazor() && option.isServerRendered) {\n      option = IntlBase.compareBlazorDateFormats(option, culture);\n    }\n\n    let resPattern = option.format || IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');\n    formatOptions.dateSeperator = isBlazor() ? getValue('dateSeperator', dateObject) : IntlBase.getDateSeparator(dependable.dateObject);\n\n    if (isUndefined(resPattern)) {\n      throwError('Format options or type given must be invalid');\n    } else {\n      resPattern = IntlBase.ConvertDateToWeekFormat(resPattern);\n\n      if (isBlazor()) {\n        resPattern = resPattern.replace(/tt/, 'a');\n      }\n\n      formatOptions.pattern = resPattern;\n      formatOptions.numMapper = isBlazor() ? extend({}, numObject) : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));\n      let patternMatch = resPattern.match(abbreviateRegexGlobal) || [];\n\n      for (let str of patternMatch) {\n        let len = str.length;\n        let char = str[0];\n\n        if (char === 'K') {\n          char = 'h';\n        }\n        /* tslint:disable no-any */\n\n\n        switch (char) {\n          case 'E':\n          case 'c':\n            if (isBlazor()) {\n              formatOptions.weekday = getValue('days.' + IntlBase.monthIndex[len], dateObject);\n            } else {\n              formatOptions.weekday = dependable.dateObject[IntlBase.days][standalone][IntlBase.monthIndex[len]];\n            }\n\n            break;\n\n          case 'M':\n          case 'L':\n            if (isBlazor()) {\n              formatOptions.month = getValue('months.' + IntlBase.monthIndex[len], dateObject);\n            } else {\n              formatOptions.month = dependable.dateObject[IntlBase.month][standalone][IntlBase.monthIndex[len]];\n            }\n\n            break;\n\n          case 'a':\n            formatOptions.designator = isBlazor() ? getValue('dayPeriods', dateObject) : getValue('dayPeriods.format.wide', dateObject);\n            break;\n\n          case 'G':\n            let eText = len <= 3 ? 'eraAbbr' : len === 4 ? 'eraNames' : 'eraNarrow';\n            formatOptions.era = isBlazor() ? getValue('eras', dateObject) : getValue('eras.' + eText, dependable.dateObject);\n            break;\n\n          case 'z':\n            formatOptions.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n            break;\n        }\n      }\n    }\n\n    return value => {\n      if (isNaN(value.getDate())) {\n        return null;\n      }\n\n      return this.intDateFormatter(value, formatOptions);\n    };\n  }\n  /**\n   * Returns formatted date string based on options passed.\n   * @param {Date} value\n   * @param {FormatOptions} options\n   */\n  // tslint:disable-next-line:max-func-body-length\n\n\n  static intDateFormatter(value, options) {\n    let pattern = options.pattern;\n    let ret = '';\n    let matches = pattern.match(IntlBase.dateParseRegex);\n    let dObject = this.getCurrentDateValue(value, options.isIslamic);\n\n    for (let match of matches) {\n      let length = match.length;\n      let char = match[0];\n\n      if (char === 'K') {\n        char = 'h';\n      }\n\n      let curval;\n      let curvalstr = '';\n      let isNumber;\n      let processNumber;\n      let curstr = '';\n\n      switch (char) {\n        case 'M':\n        case 'L':\n          curval = dObject.month;\n\n          if (length > 2) {\n            ret += options.month[curval];\n          } else {\n            isNumber = true;\n          }\n\n          break;\n\n        case 'E':\n        case 'c':\n          ret += options.weekday[weekdayKey[value.getDay()]];\n          break;\n\n        case 'H':\n        case 'h':\n        case 'm':\n        case 's':\n        case 'd':\n        case 'f':\n          isNumber = true;\n\n          if (char === 'd') {\n            curval = dObject.date;\n          } else if (char === 'f') {\n            isNumber = false;\n            processNumber = true;\n            curvalstr = value[timeSetter[char]]().toString();\n            curvalstr = curvalstr.substring(0, length);\n            let curlength = curvalstr.length;\n\n            if (length !== curlength) {\n              if (length > 3) {\n                continue;\n              }\n\n              for (let i = 0; i < length - curlength; i++) {\n                curvalstr = '0' + curvalstr.toString();\n              }\n            }\n\n            curstr += curvalstr;\n          } else {\n            curval = value[timeSetter[char]]();\n          }\n\n          if (char === 'h') {\n            curval = curval % 12 || 12;\n          }\n\n          break;\n\n        case 'y':\n          processNumber = true;\n          curstr += dObject.year;\n\n          if (length === 2) {\n            curstr = curstr.substr(curstr.length - 2);\n          }\n\n          break;\n\n        case 'a':\n          let desig = value.getHours() < 12 ? 'am' : 'pm';\n          ret += options.designator[desig];\n          break;\n\n        case 'G':\n          let dec = value.getFullYear() < 0 ? 0 : 1;\n          let retu = options.era[dec];\n\n          if (isNullOrUndefined(retu)) {\n            retu = options.era[dec ? 0 : 1];\n          }\n\n          ret += retu || '';\n          break;\n\n        case '\\'':\n          ret += match === '\\'\\'' ? '\\'' : match.replace(/\\'/g, '');\n          break;\n\n        case 'z':\n          let timezone = value.getTimezoneOffset();\n          let pattern = length < 4 ? '+H;-H' : options.timeZone.hourFormat;\n          pattern = pattern.replace(/:/g, options.numMapper.timeSeparator);\n\n          if (timezone === 0) {\n            ret += options.timeZone.gmtZeroFormat;\n          } else {\n            processNumber = true;\n            curstr = this.getTimeZoneValue(timezone, pattern);\n          }\n\n          curstr = options.timeZone.gmtFormat.replace(/\\{0\\}/, curstr);\n          break;\n\n        case ':':\n          ret += options.numMapper.numberSymbols[timeSeparator];\n          /* tslint:enable no-any */\n\n          break;\n\n        case '/':\n          ret += options.dateSeperator;\n          break;\n\n        case 'W':\n          isNumber = true;\n          curval = IntlBase.getWeekOfYear(value);\n          break;\n\n        default:\n          ret += match;\n      }\n\n      if (isNumber) {\n        processNumber = true;\n        curstr = this.checkTwodigitNumber(curval, length);\n      }\n\n      if (processNumber) {\n        ret += ParserBase.convertValueParts(curstr, IntlBase.latnParseRegex, options.numMapper.mapper);\n      }\n    }\n\n    return ret;\n  }\n\n  static getCurrentDateValue(value, isIslamic) {\n    if (isIslamic) {\n      return HijriParser.getHijriDate(value);\n    }\n\n    return {\n      year: value.getFullYear(),\n      month: value.getMonth() + 1,\n      date: value.getDate()\n    };\n  }\n  /**\n   * Returns two digit numbers for given value and length\n   */\n\n\n  static checkTwodigitNumber(val, len) {\n    let ret = val + '';\n\n    if (len === 2 && ret.length !== 2) {\n      return '0' + ret;\n    }\n\n    return ret;\n  }\n  /**\n   * Returns the value of the Time Zone.\n   * @param {number} tVal\n   * @param {string} pattern\n   * @private\n   */\n\n\n  static getTimeZoneValue(tVal, pattern) {\n    let splt = pattern.split(';');\n    let curPattern = splt[tVal > 0 ? 1 : 0];\n    let no = Math.abs(tVal);\n    return curPattern = curPattern.replace(/HH?|mm/g, str => {\n      let len = str.length;\n      let ishour = str.indexOf('H') !== -1;\n      return this.checkTwodigitNumber(Math.floor(ishour ? no / 60 : no % 60), len);\n    });\n  }\n\n}\n\nconst errorText = {\n  'ms': 'minimumSignificantDigits',\n  'ls': 'maximumSignificantDigits',\n  'mf': 'minimumFractionDigits',\n  'lf': 'maximumFractionDigits'\n};\nconst percentSign = 'percentSign';\nconst minusSign = 'minusSign';\nconst mapper$1 = ['infinity', 'nan', 'group', 'decimal', 'exponential'];\n/**\n * Module for number formatting.\n * @private\n */\n\nclass NumberFormat {\n  /**\n   * Returns the formatter function for given skeleton.\n   * @param {string} culture -  Specifies the culture name to be which formatting.\n   * @param {NumberFormatOptions} option - Specific the format in which number  will format.\n   * @param {Object} object- Specifies the global cldr data collection.\n   * @return Function.\n   */\n  static numberFormatter(culture, option, cldr) {\n    let fOptions = extend({}, option);\n    let cOptions = {};\n    let dOptions = {};\n    let symbolPattern;\n    let dependable = IntlBase.getDependables(cldr, culture, '', true);\n    let numObject = dependable.numericObject;\n    dOptions.numberMapper = isBlazor() ? extend({}, numObject) : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true);\n    dOptions.currencySymbol = isBlazor() ? getValue('currencySymbol', numObject) : IntlBase.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode, option.altSymbol);\n    /* tslint:disable no-any */\n\n    dOptions.percentSymbol = isBlazor() ? getValue('numberSymbols.percentSign', numObject) : dOptions.numberMapper.numberSymbols[percentSign];\n    dOptions.minusSymbol = isBlazor() ? getValue('numberSymbols.minusSign', numObject) : dOptions.numberMapper.numberSymbols[minusSign];\n    let symbols = dOptions.numberMapper.numberSymbols;\n\n    if (option.format && !IntlBase.formatRegex.test(option.format)) {\n      cOptions = IntlBase.customFormat(option.format, dOptions, dependable.numericObject);\n    } else {\n      extend(fOptions, IntlBase.getProperNumericSkeleton(option.format || 'N'));\n      fOptions.isCurrency = fOptions.type === 'currency';\n      fOptions.isPercent = fOptions.type === 'percent';\n\n      if (!isBlazor()) {\n        symbolPattern = IntlBase.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount);\n      }\n\n      fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, true);\n      this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, false, true);\n\n      if (!isUndefined(fOptions.fractionDigits)) {\n        fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits;\n      }\n\n      if (isUndefined(fOptions.useGrouping)) {\n        fOptions.useGrouping = true;\n      }\n\n      if (fOptions.isCurrency && !isBlazor()) {\n        symbolPattern = symbolPattern.replace(/\\u00A4/g, IntlBase.defaultCurrency);\n      }\n\n      if (!isBlazor()) {\n        let split = symbolPattern.split(';');\n        cOptions.nData = IntlBase.getFormatData(split[1] || '-' + split[0], true, dOptions.currencySymbol);\n        cOptions.pData = IntlBase.getFormatData(split[0], false, dOptions.currencySymbol);\n\n        if (fOptions.useGrouping) {\n          fOptions.groupSeparator = symbols[mapper$1[2]];\n          fOptions.groupData = this.getGroupingDetails(split[0]);\n        }\n      } else {\n        cOptions.nData = extend({}, {}, getValue(fOptions.type + 'nData', numObject));\n        cOptions.pData = extend({}, {}, getValue(fOptions.type + 'pData', numObject));\n\n        if (fOptions.type === 'currency' && option.currency) {\n          IntlBase.replaceBlazorCurrency([cOptions.pData, cOptions.nData], dOptions.currencySymbol, option.currency);\n        }\n      }\n\n      let minFrac = isUndefined(fOptions.minimumFractionDigits);\n\n      if (minFrac) {\n        fOptions.minimumFractionDigits = cOptions.nData.minimumFraction;\n      }\n\n      if (isUndefined(fOptions.maximumFractionDigits)) {\n        let mval = cOptions.nData.maximumFraction;\n        fOptions.maximumFractionDigits = isUndefined(mval) && fOptions.isPercent ? 0 : mval;\n      }\n\n      let mfrac = fOptions.minimumFractionDigits;\n      let lfrac = fOptions.maximumFractionDigits;\n\n      if (!isUndefined(mfrac) && !isUndefined(lfrac)) {\n        if (mfrac > lfrac) {\n          fOptions.maximumFractionDigits = mfrac;\n        }\n      }\n    }\n\n    extend(cOptions.nData, fOptions);\n    extend(cOptions.pData, fOptions);\n    return value => {\n      if (isNaN(value)) {\n        return symbols[mapper$1[1]];\n      } else if (!isFinite(value)) {\n        return symbols[mapper$1[0]];\n      }\n\n      return this.intNumberFormatter(value, cOptions, dOptions);\n    };\n  }\n  /**\n   * Returns grouping details for the pattern provided\n   * @param {string} pattern\n   * @returns {GroupDetails}\n   */\n\n\n  static getGroupingDetails(pattern) {\n    let ret = {};\n    let match = pattern.match(IntlBase.negativeDataRegex);\n\n    if (match && match[4]) {\n      let pattern = match[4];\n      let p = pattern.lastIndexOf(',');\n\n      if (p !== -1) {\n        let temp = pattern.split('.')[0];\n        ret.primary = temp.length - p - 1;\n        let s = pattern.lastIndexOf(',', p - 1);\n\n        if (s !== -1) {\n          ret.secondary = p - 1 - s;\n        }\n      }\n    }\n\n    return ret;\n  }\n  /**\n   * Returns if the provided integer range is valid.\n   * @param {number} val1\n   * @param {number} val2\n   * @param {boolean} checkbothExist\n   * @param {boolean} isFraction\n   * @returns {boolean}\n   */\n\n\n  static checkValueRange(val1, val2, checkbothExist, isFraction) {\n    let decide = isFraction ? 'f' : 's';\n    let dint = 0;\n    let str1 = errorText['l' + decide];\n    let str2 = errorText['m' + decide];\n\n    if (!isUndefined(val1)) {\n      this.checkRange(val1, str1, isFraction);\n      dint++;\n    }\n\n    if (!isUndefined(val2)) {\n      this.checkRange(val2, str2, isFraction);\n      dint++;\n    }\n\n    if (dint === 2) {\n      if (val1 < val2) {\n        throwError(str2 + 'specified must be less than the' + str1);\n      } else {\n        return true;\n      }\n    } else if (checkbothExist && dint === 1) {\n      throwError('Both' + str2 + 'and' + str2 + 'must be present');\n    }\n\n    return false;\n  }\n  /**\n   * Check if the provided fraction range is valid\n   * @param {number} val\n   * @param {string} text\n   * @param {boolean} isFraction\n   * @returns {void}\n   */\n\n\n  static checkRange(val, text, isFraction) {\n    let range = isFraction ? [0, 20] : [1, 21];\n\n    if (val < range[0] || val > range[1]) {\n      throwError(text + 'value must be within the range' + range[0] + 'to' + range[1]);\n    }\n  }\n  /**\n   * Returns formatted numeric string for provided formatting options\n   * @param {number} value\n   * @param {base.GenericFormatOptions} fOptions\n   * @param {CommonOptions} dOptions\n   * @returns {string}\n   */\n\n\n  static intNumberFormatter(value, fOptions, dOptions) {\n    let curData;\n\n    if (isUndefined(fOptions.nData.type)) {\n      return undefined;\n    } else {\n      if (value < 0) {\n        value = value * -1;\n        curData = fOptions.nData;\n      } else if (value === 0) {\n        curData = fOptions.zeroData || fOptions.pData;\n      } else {\n        curData = fOptions.pData;\n      }\n\n      let fValue = '';\n\n      if (curData.isPercent) {\n        value = value * 100;\n      }\n\n      if (curData.groupOne) {\n        fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits);\n      } else {\n        fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits);\n\n        if (curData.minimumIntegerDigits) {\n          fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits);\n        }\n      }\n\n      if (curData.type === 'scientific') {\n        fValue = value.toExponential(curData.maximumFractionDigits);\n        fValue = fValue.replace('e', dOptions.numberMapper.numberSymbols[mapper$1[4]]);\n      }\n\n      fValue = fValue.replace('.', dOptions.numberMapper.numberSymbols[mapper$1[3]]);\n\n      if (curData.useGrouping) {\n        fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ',', dOptions.numberMapper.numberSymbols[mapper$1[3]] || '.', curData.groupData.secondary);\n      }\n\n      fValue = ParserBase.convertValueParts(fValue, IntlBase.latnParseRegex, dOptions.numberMapper.mapper);\n\n      if (curData.nlead === 'N/A') {\n        return curData.nlead;\n      } else {\n        return curData.nlead + fValue + curData.nend;\n      }\n    }\n  }\n  /**\n   * Returns significant digits processed numeric string\n   * @param {number} value\n   * @param {number} min\n   * @param {number} max\n   * @returns {string}\n   */\n\n\n  static processSignificantDigits(value, min, max) {\n    let temp = value + '';\n    let tn;\n    let length = temp.length;\n\n    if (length < min) {\n      return value.toPrecision(min);\n    } else {\n      temp = value.toPrecision(max);\n      tn = +temp;\n      return tn + '';\n    }\n  }\n  /**\n   * Returns grouped numeric string\n   * @param {string} val\n   * @param {number} level1\n   * @param {string} sep\n   * @param {string} decimalSymbol\n   * @param {number} level2\n   * @returns {string}\n   */\n\n\n  static groupNumbers(val, level1, sep, decimalSymbol, level2) {\n    let flag = !isNullOrUndefined(level2) && level2 !== 0;\n    let split = val.split(decimalSymbol);\n    let prefix = split[0];\n    let length = prefix.length;\n    let str = '';\n\n    while (length > level1) {\n      str = prefix.slice(length - level1, length) + (str.length ? sep + str : '');\n      length -= level1;\n\n      if (flag) {\n        level1 = level2;\n        flag = false;\n      }\n    }\n\n    split[0] = prefix.slice(0, length) + (str.length ? sep : '') + str;\n    return split.join(decimalSymbol);\n  }\n  /**\n   * Returns fraction processed numeric string\n   * @param {number} value\n   * @param {number} min\n   * @param {number} max\n   * @returns {string}\n   */\n\n\n  static processFraction(value, min, max) {\n    let temp = (value + '').split('.')[1];\n    let length = temp ? temp.length : 0;\n\n    if (min && length < min) {\n      let ret = '';\n\n      if (length === 0) {\n        ret = value.toFixed(min);\n      } else {\n        ret += value;\n\n        for (let j = 0; j < min - length; j++) {\n          ret += '0';\n        }\n\n        return ret;\n      }\n\n      return value.toFixed(min);\n    } else if (!isNullOrUndefined(max) && (length > max || max === 0)) {\n      return value.toFixed(max);\n    }\n\n    return value + '';\n  }\n  /**\n   * Returns integer processed numeric string\n   * @param {string} value\n   * @param {number} min\n   * @returns {string}\n   */\n\n\n  static processMinimumIntegers(value, min) {\n    let temp = value.split('.');\n    let lead = temp[0];\n    let len = lead.length;\n\n    if (len < min) {\n      for (let i = 0; i < min - len; i++) {\n        lead = '0' + lead;\n      }\n\n      temp[0] = lead;\n    }\n\n    return temp.join('.');\n  }\n\n}\n\nconst standalone$1 = 'stand-alone';\nconst latnRegex$1 = /^[0-9]*$/;\nconst timeSetter$1 = {\n  minute: 'setMinutes',\n  hour: 'setHours',\n  second: 'setSeconds',\n  day: 'setDate',\n  month: 'setMonth',\n  milliseconds: 'setMilliseconds'\n};\nconst month = 'months';\n/* tslint:disable no-any */\n\n/**\n * Date Parser.\n * @private\n */\n\nclass DateParser {\n  /**\n   * Returns the parser function for given skeleton.\n   * @param {string} -  Specifies the culture name to be which formatting.\n   * @param {DateFormatOptions} - Specific the format in which string date  will be parsed.\n   * @param {cldr} - Specifies the global cldr data collection.\n   *  @return Function.\n   */\n  // tslint:disable-next-line:max-func-body-length\n  static dateParser(culture, option, cldr) {\n    let dependable = IntlBase.getDependables(cldr, culture, option.calendar); // tslint:disable-next-line\n\n    let numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), false, isBlazor());\n    let parseOptions = {};\n\n    if (isBlazor() && option.isServerRendered) {\n      option = IntlBase.compareBlazorDateFormats(option, culture);\n    }\n\n    let resPattern = option.format || IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : '');\n    let regexString = '';\n    let hourOnly;\n\n    if (isUndefined(resPattern)) {\n      throwError('Format options or type given must be invalid');\n    } else {\n      resPattern = IntlBase.ConvertDateToWeekFormat(resPattern);\n      parseOptions = {\n        isIslamic: IntlBase.islamicRegex.test(option.calendar),\n        pattern: resPattern,\n        evalposition: {},\n        culture: culture\n      };\n      let patternMatch = resPattern.match(IntlBase.dateParseRegex) || [];\n      let length = patternMatch.length;\n      let gmtCorrection = 0;\n      let zCorrectTemp = 0;\n      let isgmtTraversed = false;\n      let nRegx = numOptions.numericRegex; // tslint:disable-next-line\n\n      let numMapper = isBlazor() ? dependable.parserObject.numbers : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));\n\n      for (let i = 0; i < length; i++) {\n        let str = patternMatch[i];\n        let len = str.length;\n        let char = str[0] === 'K' ? 'h' : str[0];\n        let isNumber;\n        let canUpdate; // tslint:disable-next-line\n\n        let charKey = datePartMatcher[char];\n        let optional = len === 2 ? '' : '?';\n\n        if (isgmtTraversed) {\n          gmtCorrection = zCorrectTemp;\n          isgmtTraversed = false;\n        }\n\n        switch (char) {\n          case 'E':\n          case 'c':\n            // tslint:disable\n            let weekData;\n\n            if (isBlazor()) {\n              weekData = getValue('days.' + IntlBase.monthIndex[len], dependable.dateObject);\n            } else {\n              weekData = dependable.dateObject[IntlBase.days][standalone$1][IntlBase.monthIndex[len]];\n            }\n\n            let weekObject = ParserBase.reverseObject(weekData); // tslint:enable\n\n            regexString += '(' + Object.keys(weekObject).join('|') + ')';\n            break;\n\n          case 'M':\n          case 'L':\n          case 'd':\n          case 'm':\n          case 's':\n          case 'h':\n          case 'H':\n          case 'f':\n            canUpdate = true;\n\n            if ((char === 'M' || char === 'L') && len > 2) {\n              let monthData;\n\n              if (isBlazor()) {\n                /* tslint:disable no-any */\n                monthData = getValue('months.' + IntlBase.monthIndex[len], dependable.dateObject);\n              } else {\n                /* tslint:disable no-any */\n                monthData = dependable.dateObject[month][standalone$1][IntlBase.monthIndex[len]];\n              } // tslint:disable-next-line\n\n\n              parseOptions[charKey] = ParserBase.reverseObject(monthData);\n              /* tslint:disable no-any */\n\n              regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';\n            } else if (char === 'f') {\n              if (len > 3) {\n                continue;\n              }\n\n              isNumber = true;\n              regexString += '(' + nRegx + nRegx + '?' + nRegx + '?' + ')';\n            } else {\n              isNumber = true;\n              regexString += '(' + nRegx + nRegx + optional + ')';\n            }\n\n            if (char === 'h') {\n              parseOptions.hour12 = true;\n            }\n\n            break;\n\n          case 'W':\n            let opt = len === 1 ? '?' : '';\n            regexString += '(' + nRegx + opt + nRegx + ')';\n            break;\n\n          case 'y':\n            canUpdate = isNumber = true;\n\n            if (len === 2) {\n              regexString += '(' + nRegx + nRegx + ')';\n            } else {\n              regexString += '(' + nRegx + '{' + len + ',})';\n            }\n\n            break;\n\n          case 'a':\n            canUpdate = true;\n            let periodValur = isBlazor() ? getValue('dayPeriods', dependable.dateObject) : getValue('dayPeriods.format.wide', dependable.dateObject);\n            parseOptions[charKey] = ParserBase.reverseObject(periodValur);\n            regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + ')';\n            break;\n\n          case 'G':\n            canUpdate = true;\n            let eText = len <= 3 ? 'eraAbbr' : len === 4 ? 'eraNames' : 'eraNarrow';\n            parseOptions[charKey] = ParserBase.reverseObject(isBlazor() ? getValue('eras', dependable.dateObject) : getValue('eras.' + eText, dependable.dateObject));\n            regexString += '(' + Object.keys(parseOptions[charKey]).join('|') + '?)';\n            break;\n\n          case 'z':\n            let tval = new Date().getTimezoneOffset();\n            canUpdate = tval !== 0;\n            parseOptions[charKey] = getValue('dates.timeZoneNames', dependable.parserObject);\n            let tzone = parseOptions[charKey];\n            hourOnly = len < 4;\n            let hpattern = hourOnly ? '+H;-H' : tzone.hourFormat;\n            hpattern = hpattern.replace(/:/g, numMapper.timeSeparator);\n            regexString += '(' + this.parseTimeZoneRegx(hpattern, tzone, nRegx) + ')?';\n            isgmtTraversed = true;\n            zCorrectTemp = hourOnly ? 6 : 12;\n            break;\n\n          case '\\'':\n            let iString = str.replace(/\\'/g, '');\n            regexString += '(' + iString + ')?';\n            break;\n\n          default:\n            regexString += '([\\\\D])';\n            break;\n        }\n\n        if (canUpdate) {\n          parseOptions.evalposition[charKey] = {\n            isNumber: isNumber,\n            pos: i + 1 + gmtCorrection,\n            hourOnly: hourOnly\n          };\n        }\n\n        if (i === length - 1 && !isNullOrUndefined(regexString)) {\n          parseOptions.parserRegex = new RegExp('^' + regexString + '$', 'i');\n        }\n      }\n    }\n\n    return value => {\n      let parsedDateParts = this.internalDateParse(value, parseOptions, numOptions);\n\n      if (isNullOrUndefined(parsedDateParts) || !Object.keys(parsedDateParts).length) {\n        return null;\n      }\n\n      if (parseOptions.isIslamic) {\n        let dobj = {};\n        let tYear = parsedDateParts.year;\n        let tDate = parsedDateParts.day;\n        let tMonth = parsedDateParts.month;\n        let ystrig = tYear ? tYear + '' : '';\n        let is2DigitYear = ystrig.length === 2;\n\n        if (!tYear || !tMonth || !tDate || is2DigitYear) {\n          dobj = HijriParser.getHijriDate(new Date());\n        }\n\n        if (is2DigitYear) {\n          tYear = parseInt((dobj.year + '').slice(0, 2) + ystrig, 10);\n        } // tslint:disable-next-line\n\n\n        let dateObject = HijriParser.toGregorian(tYear || dobj.year, tMonth || dobj.month, tDate || dobj.date);\n        parsedDateParts.year = dateObject.getFullYear();\n        parsedDateParts.month = dateObject.getMonth() + 1;\n        parsedDateParts.day = dateObject.getDate();\n      }\n\n      return this.getDateObject(parsedDateParts);\n    };\n  }\n  /* tslint:disable */\n\n  /**\n   * Returns date object for provided date options\n   * @param {DateParts} options\n   * @param {Date} value\n   * @returns {Date}\n   */\n\n\n  static getDateObject(options, value) {\n    let res = value || new Date();\n    res.setMilliseconds(0);\n    let tKeys = ['hour', 'minute', 'second', 'milliseconds', 'month', 'day'];\n    let y = options.year;\n    let desig = options.designator;\n    let tzone = options.timeZone;\n\n    if (!isUndefined(y)) {\n      let len = (y + '').length;\n\n      if (len <= 2) {\n        let century = Math.floor(res.getFullYear() / 100) * 100;\n        y += century;\n      }\n\n      res.setFullYear(y);\n    }\n\n    for (let key of tKeys) {\n      let tValue = options[key];\n\n      if (isUndefined(tValue) && key === \"day\") {\n        res.setDate(1);\n      }\n\n      if (!isUndefined(tValue)) {\n        if (key === 'month') {\n          tValue -= 1;\n\n          if (tValue < 0 || tValue > 11) {\n            return new Date('invalid');\n          }\n\n          let pDate = res.getDate();\n          res.setDate(1);\n          res[timeSetter$1[key]](tValue);\n          let lDate = new Date(res.getFullYear(), tValue + 1, 0).getDate();\n          res.setDate(pDate < lDate ? pDate : lDate);\n        } else {\n          if (key === 'day') {\n            let lastDay = new Date(res.getFullYear(), res.getMonth() + 1, 0).getDate();\n\n            if (tValue < 1 || tValue > lastDay) {\n              return null;\n            }\n          }\n\n          res[timeSetter$1[key]](tValue);\n        }\n      }\n    }\n\n    if (!isUndefined(desig)) {\n      let hour = res.getHours();\n\n      if (desig === 'pm') {\n        res.setHours(hour + (hour === 12 ? 0 : 12));\n      } else if (hour === 12) {\n        res.setHours(0);\n      }\n    }\n\n    if (!isUndefined(tzone)) {\n      let tzValue = tzone - res.getTimezoneOffset();\n\n      if (tzValue !== 0) {\n        res.setMinutes(res.getMinutes() + tzValue);\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Returns date parsing options for provided value along with parse and numeric options\n   * @param {string} value\n   * @param {ParseOptions} parseOptions\n   * @param {NumericOptions} num\n   * @returns {DateParts}\n   */\n\n\n  static internalDateParse(value, parseOptions, num) {\n    let matches = value.match(parseOptions.parserRegex);\n    let retOptions = {\n      'hour': 0,\n      'minute': 0,\n      'second': 0\n    };\n    let nRegx = num.numericRegex;\n\n    if (isNullOrUndefined(matches)) {\n      return null;\n    } else {\n      let props = Object.keys(parseOptions.evalposition);\n\n      for (let prop of props) {\n        let curObject = parseOptions.evalposition[prop];\n        let matchString = matches[curObject.pos];\n\n        if (curObject.isNumber) {\n          retOptions[prop] = this.internalNumberParser(matchString, num);\n        } else {\n          if (prop === 'timeZone' && !isUndefined(matchString)) {\n            let pos = curObject.pos;\n            let val;\n            let tmatch = matches[pos + 1];\n            let flag = !isUndefined(tmatch);\n\n            if (curObject.hourOnly) {\n              val = this.getZoneValue(flag, tmatch, matches[pos + 4], num) * 60;\n            } else {\n              val = this.getZoneValue(flag, tmatch, matches[pos + 7], num) * 60;\n              val += this.getZoneValue(flag, matches[pos + 4], matches[pos + 10], num);\n            }\n\n            if (!isNullOrUndefined(val)) {\n              retOptions[prop] = val;\n            }\n          } else {\n            matchString = prop === 'month' && !parseOptions.isIslamic && (parseOptions.culture === 'en' || parseOptions.culture === 'en-GB' || parseOptions.culture === 'en-US') ? matchString[0].toUpperCase() + matchString.substring(1).toLowerCase() : matchString;\n            retOptions[prop] = parseOptions[prop][matchString];\n          }\n        }\n      }\n\n      if (parseOptions.hour12) {\n        retOptions.hour12 = true;\n      }\n    }\n\n    return retOptions;\n  }\n  /**\n   * Returns parsed number for provided Numeric string and Numeric Options\n   * @param {string} value\n   * @param {NumericOptions} option\n   * @returns {number}\n   */\n\n\n  static internalNumberParser(value, option) {\n    value = ParserBase.convertValueParts(value, option.numberParseRegex, option.numericPair);\n\n    if (latnRegex$1.test(value)) {\n      return +value;\n    }\n\n    return null;\n  }\n  /**\n   * Returns parsed time zone RegExp for provided hour format and time zone\n   * @param {string} hourFormat\n   * @param {base.TimeZoneOptions} tZone\n   * @param {string} nRegex\n   * @returns {string}\n   */\n\n\n  static parseTimeZoneRegx(hourFormat, tZone, nRegex) {\n    let pattern = tZone.gmtFormat;\n    let ret;\n    let cRegex = '(' + nRegex + ')' + '(' + nRegex + ')';\n    let splitStr;\n    ret = hourFormat.replace('+', '\\\\+');\n\n    if (hourFormat.indexOf('HH') !== -1) {\n      ret = ret.replace(/HH|mm/g, '(' + cRegex + ')');\n    } else {\n      ret = ret.replace(/H|m/g, '(' + cRegex + '?)');\n    }\n\n    splitStr = ret.split(';').map(str => {\n      return pattern.replace('{0}', str);\n    });\n    ret = splitStr.join('|') + '|' + tZone.gmtZeroFormat;\n    return ret;\n  }\n  /**\n   * Returns zone based value.\n   * @param {boolean} flag\n   * @param {string} val1\n   * @param {string} val2\n   * @param {NumericOptions} num\n   * @returns {number}\n   */\n\n\n  static getZoneValue(flag, val1, val2, num) {\n    let ival = flag ? val1 : val2;\n\n    if (!ival) {\n      return 0;\n    }\n\n    let value = this.internalNumberParser(ival, num);\n\n    if (flag) {\n      return -value;\n    }\n\n    return value;\n  }\n\n}\n/* tslint:enable */\n\n\nconst parseRegex = /^([^0-9]*)(([0-9,]*[0-9]+)(\\.[0-9]+)?)([Ee][+-]?[0-9]+)?([^0-9]*)$/;\nconst groupRegex = /,/g;\nconst keys = ['minusSign', 'infinity'];\n/**\n * Module for Number Parser.\n * @private\n */\n\nclass NumberParser {\n  /**\n   * Returns the parser function for given skeleton.\n   * @param {string} -  Specifies the culture name to be which formatting.\n   * @param {NumberFormatOptions} - Specific the format in which number  will parsed.\n   * @param {cldr} - Specifies the global cldr data collection.\n   * @return Function.\n   */\n  static numberParser(culture, option, cldr) {\n    let dependable = IntlBase.getDependables(cldr, culture, '', true);\n    let parseOptions = {\n      custom: true\n    };\n    let numOptions;\n\n    if (IntlBase.formatRegex.test(option.format) || !option.format) {\n      extend(parseOptions, IntlBase.getProperNumericSkeleton(option.format || 'N'));\n      parseOptions.custom = false;\n\n      if (!parseOptions.fractionDigits) {\n        if (option.maximumFractionDigits) {\n          parseOptions.maximumFractionDigits = option.maximumFractionDigits;\n        }\n      }\n    } else {\n      extend(parseOptions, IntlBase.customFormat(option.format, null, null));\n    }\n\n    let numbers = getValue('numbers', dependable.parserObject);\n    numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true, isBlazor());\n    parseOptions.symbolRegex = ParserBase.getSymbolRegex(Object.keys(numOptions.symbolMatch)); // tslint:disable-next-line:no-any\n\n    parseOptions.infinity = numOptions.symbolNumberSystem[keys[1]];\n    let symbolpattern;\n\n    if (!isBlazor()) {\n      symbolpattern = IntlBase.getSymbolPattern(parseOptions.type, numOptions.numberSystem, dependable.numericObject, parseOptions.isAccount);\n\n      if (symbolpattern) {\n        symbolpattern = symbolpattern.replace(/\\u00A4/g, IntlBase.defaultCurrency);\n        let split = symbolpattern.split(';');\n        parseOptions.nData = IntlBase.getFormatData(split[1] || '-' + split[0], true, '');\n        parseOptions.pData = IntlBase.getFormatData(split[0], true, '');\n      }\n    } else {\n      parseOptions.nData = extend({}, {}, getValue(parseOptions.type + 'nData', numbers));\n      parseOptions.pData = extend({}, {}, getValue(parseOptions.type + 'pData', numbers));\n\n      if (parseOptions.type === 'currency' && option.currency) {\n        IntlBase.replaceBlazorCurrency([parseOptions.pData, parseOptions.nData], getValue('currencySymbol', numbers), option.currency);\n      }\n    }\n\n    return value => {\n      return this.getParsedNumber(value, parseOptions, numOptions);\n    };\n  }\n  /**\n   * Returns parsed number for the provided formatting options\n   * @param {string} value\n   * @param {NumericParts} options\n   * @param {NumericOptions} numOptions\n   * @returns {number}\n   */\n\n\n  static getParsedNumber(value, options, numOptions) {\n    let isNegative;\n    let isPercent;\n    let tempValue;\n    let lead;\n    let end;\n    let ret;\n\n    if (value.indexOf(options.infinity) !== -1) {\n      return Infinity;\n    } else {\n      value = ParserBase.convertValueParts(value, options.symbolRegex, numOptions.symbolMatch);\n      value = ParserBase.convertValueParts(value, numOptions.numberParseRegex, numOptions.numericPair);\n      value = value.indexOf('-') !== -1 ? value.replace('-.', '-0.') : value;\n\n      if (value.indexOf('.') === 0) {\n        value = '0' + value;\n      }\n\n      let matches = value.match(parseRegex);\n\n      if (isNullOrUndefined(matches)) {\n        return NaN;\n      }\n\n      lead = matches[1];\n      tempValue = matches[2];\n      let exponent = matches[5];\n      end = matches[6];\n      isNegative = options.custom ? lead === options.nData.nlead && end === options.nData.nend : lead.indexOf(options.nData.nlead) !== -1 && end.indexOf(options.nData.nend) !== -1;\n      isPercent = isNegative ? options.nData.isPercent : options.pData.isPercent;\n      tempValue = tempValue.replace(groupRegex, '');\n\n      if (exponent) {\n        tempValue += exponent;\n      }\n\n      ret = +tempValue;\n\n      if (options.type === 'percent' || isPercent) {\n        ret = ret / 100;\n      }\n\n      if (options.custom || options.fractionDigits) {\n        ret = parseFloat(ret.toFixed(options.custom ? isNegative ? options.nData.maximumFractionDigits : options.pData.maximumFractionDigits : options.fractionDigits));\n      }\n\n      if (options.maximumFractionDigits) {\n        ret = this.convertMaxFracDigits(tempValue, options, ret, isNegative);\n      }\n\n      if (isNegative) {\n        ret *= -1;\n      }\n\n      return ret;\n    }\n  }\n\n  static convertMaxFracDigits(value, options, ret, isNegative) {\n    let decimalSplitValue = value.split('.');\n\n    if (decimalSplitValue[1] && decimalSplitValue[1].length > options.maximumFractionDigits) {\n      ret = +ret.toFixed(options.custom ? isNegative ? options.nData.maximumFractionDigits : options.pData.maximumFractionDigits : options.maximumFractionDigits);\n    }\n\n    return ret;\n  }\n\n}\n\nclass Observer {\n  constructor(context) {\n    this.ranArray = [];\n    this.boundedEvents = {};\n\n    if (isNullOrUndefined(context)) {\n      return;\n    }\n\n    this.context = context;\n  }\n\n  /**\n   * To attach handler for given property in current context.\n   * @param {string} property - specifies the name of the event.\n   * @param {Function} handler - Specifies the handler function to be called while event notified.\n   * @param {Object} context - Specifies the context binded to the handler.\n   * @param {string} id - specifies the random generated id.\n   * @return {void}\n   */\n  on(property, handler, context, id) {\n    if (isNullOrUndefined(handler)) {\n      return;\n    }\n\n    let cntxt = context || this.context;\n\n    if (this.notExist(property)) {\n      this.boundedEvents[property] = [{\n        handler: handler,\n        context: cntxt\n      }];\n      return;\n    }\n\n    if (!isNullOrUndefined(id)) {\n      if (this.ranArray.indexOf(id) === -1) {\n        this.ranArray.push(id);\n        this.boundedEvents[property].push({\n          handler: handler,\n          context: cntxt,\n          id: id\n        });\n      }\n    } else if (!this.isHandlerPresent(this.boundedEvents[property], handler)) {\n      this.boundedEvents[property].push({\n        handler: handler,\n        context: cntxt\n      });\n    }\n  }\n  /**\n   * To remove handlers from a event attached using on() function.\n   * @param {string} eventName - specifies the name of the event.\n   * @param {Function} handler - Optional argument specifies the handler function to be called while event notified.\n   * @param {string} id - specifies the random generated id.\n   * @return {void}\n   */\n\n\n  off(property, handler, id) {\n    if (this.notExist(property)) {\n      return;\n    }\n\n    let curObject = getValue(property, this.boundedEvents);\n\n    if (handler) {\n      for (let i = 0; i < curObject.length; i++) {\n        if (id) {\n          if (curObject[i].id === id) {\n            curObject.splice(i, 1);\n            let indexLocation = this.ranArray.indexOf(id);\n\n            if (indexLocation !== -1) {\n              this.ranArray.splice(indexLocation, 1);\n            }\n\n            break;\n          }\n        } else if (handler === curObject[i].handler) {\n          curObject.splice(i, 1);\n          break;\n        }\n      }\n    } else {\n      delete this.boundedEvents[property];\n    }\n  }\n  /**\n   * To notify the handlers in the specified event.\n   * @param {string} property - Specifies the event to be notify.\n   * @param {Object} args - Additional parameters to pass while calling the handler.\n   * @param {Function} successHandler - this function will invoke after event successfully triggered\n   * @param {Function} errorHandler - this function will invoke after event if it was failure to call.\n   * @return {void}\n   */\n\n\n  notify(property, argument, successHandler, errorHandler) {\n    if (this.notExist(property)) {\n      if (successHandler) {\n        successHandler.call(this, argument);\n      }\n\n      return;\n    }\n\n    if (argument) {\n      argument.name = property;\n    }\n\n    let blazor = 'Blazor';\n    let curObject = getValue(property, this.boundedEvents).slice(0);\n\n    if (window[blazor]) {\n      return this.blazorCallback(curObject, argument, successHandler, errorHandler, 0);\n    } else {\n      for (let cur of curObject) {\n        cur.handler.call(cur.context, argument);\n      }\n\n      if (successHandler) {\n        successHandler.call(this, argument);\n      }\n    }\n  }\n\n  blazorCallback(objs, argument, successHandler, errorHandler, index) {\n    let isTrigger = index === objs.length - 1;\n\n    if (index < objs.length) {\n      let obj = objs[index];\n      let promise = obj.handler.call(obj.context, argument);\n\n      if (promise && typeof promise.then === 'function') {\n        if (!successHandler) {\n          return promise;\n        }\n\n        promise.then(data => {\n          data = typeof data === 'string' && this.isJson(data) ? JSON.parse(data, this.dateReviver) : data;\n          extend(argument, argument, data, true);\n\n          if (successHandler && isTrigger) {\n            successHandler.call(obj.context, argument);\n          } else {\n            return this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);\n          }\n        }).catch(data => {\n          if (errorHandler) {\n            errorHandler.call(obj.context, typeof data === 'string' && this.isJson(data) ? JSON.parse(data, this.dateReviver) : data);\n          }\n        });\n      } else if (successHandler && isTrigger) {\n        successHandler.call(obj.context, argument);\n      } else {\n        return this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);\n      }\n    }\n  } // tslint:disable-next-line:no-any\n\n\n  dateReviver(key, value) {\n    let dPattern = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/;\n\n    if (isBlazor && typeof value === 'string' && value.match(dPattern) !== null) {\n      return new Date(value);\n    }\n\n    return value;\n  }\n\n  isJson(value) {\n    try {\n      JSON.parse(value);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * To destroy handlers in the event\n   */\n\n\n  destroy() {\n    this.boundedEvents = this.context = undefined;\n  }\n  /**\n   * Returns if the property exists.\n   */\n\n\n  notExist(prop) {\n    return this.boundedEvents.hasOwnProperty(prop) === false || this.boundedEvents[prop].length <= 0;\n  }\n  /**\n   * Returns if the handler is present.\n   */\n\n\n  isHandlerPresent(boundedEvents, handler) {\n    for (let cur of boundedEvents) {\n      if (cur.handler === handler) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n/**\n * Specifies the observer used for external change detection.\n */\n\n\nlet onIntlChange = new Observer();\n/**\n * Specifies the default rtl status for EJ2 components.\n */\n\nlet rightToLeft = false;\n/**\n * Specifies the CLDR data loaded for internationalization functionalities.\n * @private\n */\n\nlet cldrData = {};\n/**\n * Specifies the default culture value to be considered.\n * @private\n */\n\nlet defaultCulture = 'en-US';\n/**\n * Specifies default currency code to be considered\n * @private\n */\n\nlet defaultCurrencyCode = 'USD';\nconst mapper = ['numericObject', 'dateObject'];\n/**\n * Internationalization class provides support to parse and format the number and date object to the desired format.\n * ```typescript\n * // To set the culture globally\n * setCulture('en-GB');\n *\n * // To set currency code globally\n * setCurrencyCode('EUR');\n *\n * //Load cldr data\n * loadCldr(gregorainData);\n * loadCldr(timeZoneData);\n * loadCldr(numbersData);\n * loadCldr(numberSystemData);\n *\n * // To use formatter in component side\n * let Intl:Internationalization = new Internationalization();\n *\n * // Date formatting\n * let dateFormatter: Function = Intl.getDateFormat({skeleton:'long',type:'dateTime'});\n * dateFormatter(new Date('11/2/2016'));\n * dateFormatter(new Date('25/2/2030'));\n * Intl.formatDate(new Date(),{skeleton:'E'});\n *\n * //Number formatting\n * let numberFormatter: Function = Intl.getNumberFormat({skeleton:'C5'})\n * numberFormatter(24563334);\n * Intl.formatNumber(123123,{skeleton:'p2'});\n *\n * // Date parser\n * let dateParser: Function = Intl.getDateParser({skeleton:'short',type:'time'});\n * dateParser('10:30 PM');\n * Intl.parseDate('10',{skeleton:'H'});\n * ```\n */\n\nclass Internationalization {\n  constructor(cultureName) {\n    if (cultureName) {\n      this.culture = cultureName;\n    }\n  }\n  /**\n   * Returns the format function for given options.\n   * @param {DateFormatOptions} options - Specifies the format options in which the format function will return.\n   * @returns {Function}\n   */\n\n\n  getDateFormat(options) {\n    return DateFormat.dateFormat(this.getCulture(), options || {\n      type: 'date',\n      skeleton: 'short'\n    }, cldrData);\n  }\n  /**\n   * Returns the format function for given options.\n   * @param {NumberFormatOptions} options - Specifies the format options in which the format function will return.\n   * @returns {Function}\n   */\n\n\n  getNumberFormat(options) {\n    if (options && !options.currency) {\n      options.currency = defaultCurrencyCode;\n    }\n\n    if (isBlazor() && options && !options.format) {\n      options.minimumFractionDigits = 0;\n    }\n\n    return NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);\n  }\n  /**\n   * Returns the parser function for given options.\n   * @param {DateFormatOptions} options - Specifies the format options in which the parser function will return.\n   * @returns {Function}\n   */\n\n\n  getDateParser(options) {\n    return DateParser.dateParser(this.getCulture(), options || {\n      skeleton: 'short',\n      type: 'date'\n    }, cldrData);\n  }\n  /**\n   * Returns the parser function for given options.\n   * @param {NumberFormatOptions} options - Specifies the format options in which the parser function will return.\n   * @returns {Function}\n   */\n\n\n  getNumberParser(options) {\n    if (isBlazor() && options && !options.format) {\n      options.minimumFractionDigits = 0;\n    }\n\n    return NumberParser.numberParser(this.getCulture(), options || {\n      format: 'N'\n    }, cldrData);\n  }\n  /**\n   * Returns the formatted string based on format options.\n   * @param {Number} value - Specifies the number to format.\n   * @param {NumberFormatOptions} option - Specifies the format options in which the number will be formatted.\n   * @returns {string}\n   */\n\n\n  formatNumber(value, option) {\n    return this.getNumberFormat(option)(value);\n  }\n  /**\n   * Returns the formatted date string based on format options.\n   * @param {Number} value - Specifies the number to format.\n   * @param {DateFormatOptions} option - Specifies the format options in which the number will be formatted.\n   * @returns {string}\n   */\n\n\n  formatDate(value, option) {\n    return this.getDateFormat(option)(value);\n  }\n  /**\n   * Returns the date object for given date string and options.\n   * @param {string} value - Specifies the string to parse.\n   * @param {DateFormatOptions} option - Specifies the parse options in which the date string will be parsed.\n   * @returns {Date}\n   */\n\n\n  parseDate(value, option) {\n    return this.getDateParser(option)(value);\n  }\n  /**\n   * Returns the number object from the given string value and options.\n   * @param {string} value - Specifies the string to parse.\n   * @param {NumberFormatOptions} option - Specifies the parse options in which the  string number  will be parsed.\n   * @returns {number}\n   */\n\n\n  parseNumber(value, option) {\n    return this.getNumberParser(option)(value);\n  }\n  /**\n   * Returns Native Date Time Pattern\n   * @param {DateFormatOptions} option - Specifies the parse options for resultant date time pattern.\n   * @param {boolean} isExcelFormat - Specifies format value to be converted to excel pattern.\n   * @returns {string}\n   * @private\n   */\n\n\n  getDatePattern(option, isExcelFormat) {\n    return IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);\n  }\n  /**\n   * Returns Native Number Pattern\n   * @param {NumberFormatOptions} option - Specifies the parse options for resultant number pattern.\n   * @returns {string}\n   * @private\n   */\n\n\n  getNumberPattern(option, isExcel) {\n    return IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData, isExcel);\n  }\n  /**\n   * Returns the First Day of the Week\n   * @returns {number}\n   */\n\n\n  getFirstDayOfWeek() {\n    return IntlBase.getWeekData(this.getCulture(), cldrData);\n  }\n\n  getCulture() {\n    return this.culture || defaultCulture;\n  }\n\n}\n/**\n * Set the default culture to all EJ2 components\n * @param {string} cultureName - Specifies the culture name to be set as default culture.\n */\n\n\nfunction setCulture(cultureName) {\n  defaultCulture = cultureName;\n  onIntlChange.notify('notifyExternalChange', {\n    'locale': defaultCulture\n  });\n}\n/**\n * Set the default currency code to all EJ2 components\n * @param {string} currencyCode Specifies the culture name to be set as default culture.\n * @returns {void}\n */\n\n\nfunction setCurrencyCode(currencyCode) {\n  defaultCurrencyCode = currencyCode;\n  onIntlChange.notify('notifyExternalChange', {\n    'currencyCode': defaultCurrencyCode\n  });\n}\n/**\n * Load the CLDR data into context\n * @param {Object[]} obj Specifies the CLDR data's to be used for formatting and parser.\n * @returns {void}\n */\n\n\nfunction loadCldr(...data) {\n  for (let obj of data) {\n    extend(cldrData, obj, {}, true);\n  }\n}\n/**\n * To enable or disable RTL functionality for all components globally.\n * @param {boolean} status - Optional argument Specifies the status value to enable or disable rtl option.\n * @returns {void}\n */\n\n\nfunction enableRtl(status = true) {\n  rightToLeft = status;\n  onIntlChange.notify('notifyExternalChange', {\n    enableRtl: rightToLeft\n  });\n}\n/**\n * To get the numeric CLDR object for given culture\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\n * @ignore\n * @private\n */\n\n\nfunction getNumericObject(locale, type) {\n  /* tslint:disable no-any */\n  let numObject = IntlBase.getDependables(cldrData, locale, '', true)[mapper[0]];\n  let dateObject = IntlBase.getDependables(cldrData, locale, '')[mapper[1]];\n  let numSystem = getValue('defaultNumberingSystem', numObject);\n  let symbPattern = isBlazor() ? getValue('numberSymbols', numObject) : getValue('symbols-numberSystem-' + numSystem, numObject);\n  let pattern = IntlBase.getSymbolPattern(type || 'decimal', numSystem, numObject, false);\n  return extend(symbPattern, IntlBase.getFormatData(pattern, true, '', true), {\n    'dateSeparator': IntlBase.getDateSeparator(dateObject)\n  });\n}\n/**\n * To get the numeric CLDR  number base object for given culture\n * @param {string} locale - Specifies the locale for which numericObject to be returned.\n * @param {string} currency - Specifies the currency for which numericObject to be returned.\n * @ignore\n * @private\n */\n\n\nfunction getNumberDependable(locale, currency) {\n  let numObject = IntlBase.getDependables(cldrData, locale, '', true);\n  return IntlBase.getCurrencySymbol(numObject.numericObject, currency);\n}\n/**\n * To get the default date CLDR object.\n * @ignore\n * @private\n */\n\n\nfunction getDefaultDateObject(mode) {\n  return IntlBase.getDependables(cldrData, '', mode, false)[mapper[1]];\n}\n\nconst blazorCultureFormats = {\n  'en-US': {\n    'd': 'M/d/y',\n    'D': 'EEEE, MMMM d, y',\n    'f': 'EEEE, MMMM d, y h:mm a',\n    'F': 'EEEE, MMMM d, y h:mm:s a',\n    'g': 'M/d/y h:mm a',\n    'G': 'M/d/yyyy h:mm:ss tt',\n    'm': 'MMMM d',\n    'M': 'MMMM d',\n    'r': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n    'R': 'ddd, dd MMM yyyy HH\\':\\'mm\\':\\'ss \\'GMT\\'',\n    's': 'yyyy\\'-\\'MM\\'-\\'dd\\'T\\'HH\\':\\'mm\\':\\'ss',\n    't': 'h:mm tt',\n    'T': 'h:m:s tt',\n    'u': 'yyyy\\'-\\'MM\\'-\\'dd HH\\':\\'mm\\':\\'ss\\'Z\\'',\n    'U': 'dddd, MMMM d, yyyy h:mm:ss tt',\n    'y': 'MMMM yyyy',\n    'Y': 'MMMM yyyy'\n  }\n};\n/**\n * Date base common constants and function for date parser and formatter.\n */\n\nvar IntlBase;\n\n(function (IntlBase) {\n  // tslint:disable-next-line:max-line-length\n  IntlBase.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\\*.)?((([#,]*[0,]*0+)(\\.0*[0-9]*#*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n  IntlBase.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\\*.)?((([0#,]*[0,]*[0#]*)(\\.[0#]*)?)|([#,]*@+#*))(E\\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;\n  IntlBase.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;\n  const fractionRegex = /[0-9]/g;\n  IntlBase.defaultCurrency = '$';\n  const mapper = ['infinity', 'nan', 'group', 'decimal'];\n  const patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g;\n  const patternMatch = {\n    'G': '',\n    'M': 'm',\n    'L': 'm',\n    'H': 'h',\n    'c': 'd',\n    '\\'': '\"',\n    ' a': ' AM/PM',\n    'yy': 'yy',\n    'y': 'yyyy',\n    'EEEE': 'dddd',\n    'E': 'ddd'\n  };\n  IntlBase.dateConverterMapper = /dddd|ddd/ig;\n  const defaultFirstDay = 'sun';\n  IntlBase.islamicRegex = /^islamic/;\n  const firstDayMapper = {\n    'sun': 0,\n    'mon': 1,\n    'tue': 2,\n    'wed': 3,\n    'thu': 4,\n    'fri': 5,\n    'sat': 6\n  };\n  IntlBase.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;\n  IntlBase.currencyFormatRegex = /(^[ca]{1})([0-1]?[0-9]|20)?$/i;\n  IntlBase.curWithoutNumberRegex = /(c|a)$/ig;\n  const typeMapper = {\n    '$': 'isCurrency',\n    '%': 'isPercent',\n    '-': 'isNegative',\n    0: 'nlead',\n    1: 'nend'\n  };\n  IntlBase.dateParseRegex = /([a-z])\\1*|'([^']|'')+'|''|./gi;\n  IntlBase.basicPatterns = ['short', 'medium', 'long', 'full'];\n  /* tslint:disable:quotemark */\n\n  IntlBase.defaultObject = {\n    'dates': {\n      'calendars': {\n        'gregorian': {\n          'months': {\n            'stand-alone': {\n              'abbreviated': {\n                '1': 'Jan',\n                '2': 'Feb',\n                '3': 'Mar',\n                '4': 'Apr',\n                '5': 'May',\n                '6': 'Jun',\n                '7': 'Jul',\n                '8': 'Aug',\n                '9': 'Sep',\n                '10': 'Oct',\n                '11': 'Nov',\n                '12': 'Dec'\n              },\n              'narrow': {\n                '1': 'J',\n                '2': 'F',\n                '3': 'M',\n                '4': 'A',\n                '5': 'M',\n                '6': 'J',\n                '7': 'J',\n                '8': 'A',\n                '9': 'S',\n                '10': 'O',\n                '11': 'N',\n                '12': 'D'\n              },\n              'wide': {\n                '1': 'January',\n                '2': 'February',\n                '3': 'March',\n                '4': 'April',\n                '5': 'May',\n                '6': 'June',\n                '7': 'July',\n                '8': 'August',\n                '9': 'September',\n                '10': 'October',\n                '11': 'November',\n                '12': 'December'\n              }\n            }\n          },\n          \"days\": {\n            \"stand-alone\": {\n              \"abbreviated\": {\n                \"sun\": \"Sun\",\n                \"mon\": \"Mon\",\n                \"tue\": \"Tue\",\n                \"wed\": \"Wed\",\n                \"thu\": \"Thu\",\n                \"fri\": \"Fri\",\n                \"sat\": \"Sat\"\n              },\n              \"narrow\": {\n                \"sun\": \"S\",\n                \"mon\": \"M\",\n                \"tue\": \"T\",\n                \"wed\": \"W\",\n                \"thu\": \"T\",\n                \"fri\": \"F\",\n                \"sat\": \"S\"\n              },\n              \"short\": {\n                \"sun\": \"Su\",\n                \"mon\": \"Mo\",\n                \"tue\": \"Tu\",\n                \"wed\": \"We\",\n                \"thu\": \"Th\",\n                \"fri\": \"Fr\",\n                \"sat\": \"Sa\"\n              },\n              \"wide\": {\n                \"sun\": \"Sunday\",\n                \"mon\": \"Monday\",\n                \"tue\": \"Tuesday\",\n                \"wed\": \"Wednesday\",\n                \"thu\": \"Thursday\",\n                \"fri\": \"Friday\",\n                \"sat\": \"Saturday\"\n              }\n            }\n          },\n          \"dayPeriods\": {\n            \"format\": {\n              \"wide\": {\n                \"am\": \"AM\",\n                \"pm\": \"PM\"\n              }\n            }\n          },\n          'eras': {\n            'eraNames': {\n              '0': 'Before Christ',\n              '0-alt-variant': 'Before Common Era',\n              '1': 'Anno Domini',\n              \"1-alt-variant\": \"Common Era\"\n            },\n            'eraAbbr': {\n              '0': 'BC',\n              '0-alt-variant': 'BCE',\n              '1': 'AD',\n              '1-alt-variant': 'CE'\n            },\n            'eraNarrow': {\n              '0': 'B',\n              '0-alt-variant': 'BCE',\n              '1': 'A',\n              '1-alt-variant': 'CE'\n            }\n          },\n          'dateFormats': {\n            'full': 'EEEE, MMMM d, y',\n            'long': 'MMMM d, y',\n            'medium': 'MMM d, y',\n            'short': 'M/d/yy'\n          },\n          'timeFormats': {\n            'full': 'h:mm:ss a zzzz',\n            'long': 'h:mm:ss a z',\n            'medium': 'h:mm:ss a',\n            'short': 'h:mm a'\n          },\n          'dateTimeFormats': {\n            'full': \"{1} 'at' {0}\",\n            'long': \"{1} 'at' {0}\",\n            'medium': '{1}, {0}',\n            'short': '{1}, {0}',\n            'availableFormats': {\n              'd': 'd',\n              'E': 'ccc',\n              'Ed': 'd E',\n              'Ehm': 'E h:mm a',\n              'EHm': 'E HH:mm',\n              'Ehms': 'E h:mm:ss a',\n              'EHms': 'E HH:mm:ss',\n              'Gy': 'y G',\n              'GyMMM': 'MMM y G',\n              'GyMMMd': 'MMM d, y G',\n              'GyMMMEd': 'E, MMM d, y G',\n              'h': 'h a',\n              'H': 'HH',\n              'hm': 'h:mm a',\n              'Hm': 'HH:mm',\n              'hms': 'h:mm:ss a',\n              'Hms': 'HH:mm:ss',\n              'hmsv': 'h:mm:ss a v',\n              'Hmsv': 'HH:mm:ss v',\n              'hmv': 'h:mm a v',\n              'Hmv': 'HH:mm v',\n              'M': 'L',\n              'Md': 'M/d',\n              'MEd': 'E, M/d',\n              'MMM': 'LLL',\n              'MMMd': 'MMM d',\n              'MMMEd': 'E, MMM d',\n              'MMMMd': 'MMMM d',\n              'ms': 'mm:ss',\n              'y': 'y',\n              'yM': 'M/y',\n              'yMd': 'M/d/y',\n              'yMEd': 'E, M/d/y',\n              'yMMM': 'MMM y',\n              'yMMMd': 'MMM d, y',\n              'yMMMEd': 'E, MMM d, y',\n              'yMMMM': 'MMMM y'\n            }\n          }\n        },\n        \"islamic\": {\n          \"months\": {\n            \"stand-alone\": {\n              \"abbreviated\": {\n                \"1\": \"Muh.\",\n                \"2\": \"Saf.\",\n                \"3\": \"Rab. I\",\n                \"4\": \"Rab. II\",\n                \"5\": \"Jum. I\",\n                \"6\": \"Jum. II\",\n                \"7\": \"Raj.\",\n                \"8\": \"Sha.\",\n                \"9\": \"Ram.\",\n                \"10\": \"Shaw.\",\n                \"11\": \"Dhuʻl-Q.\",\n                \"12\": \"Dhuʻl-H.\"\n              },\n              \"narrow\": {\n                \"1\": \"1\",\n                \"2\": \"2\",\n                \"3\": \"3\",\n                \"4\": \"4\",\n                \"5\": \"5\",\n                \"6\": \"6\",\n                \"7\": \"7\",\n                \"8\": \"8\",\n                \"9\": \"9\",\n                \"10\": \"10\",\n                \"11\": \"11\",\n                \"12\": \"12\"\n              },\n              \"wide\": {\n                \"1\": \"Muharram\",\n                \"2\": \"Safar\",\n                \"3\": \"Rabiʻ I\",\n                \"4\": \"Rabiʻ II\",\n                \"5\": \"Jumada I\",\n                \"6\": \"Jumada II\",\n                \"7\": \"Rajab\",\n                \"8\": \"Shaʻban\",\n                \"9\": \"Ramadan\",\n                \"10\": \"Shawwal\",\n                \"11\": \"Dhuʻl-Qiʻdah\",\n                \"12\": \"Dhuʻl-Hijjah\"\n              }\n            }\n          },\n          \"days\": {\n            \"stand-alone\": {\n              \"abbreviated\": {\n                \"sun\": \"Sun\",\n                \"mon\": \"Mon\",\n                \"tue\": \"Tue\",\n                \"wed\": \"Wed\",\n                \"thu\": \"Thu\",\n                \"fri\": \"Fri\",\n                \"sat\": \"Sat\"\n              },\n              \"narrow\": {\n                \"sun\": \"S\",\n                \"mon\": \"M\",\n                \"tue\": \"T\",\n                \"wed\": \"W\",\n                \"thu\": \"T\",\n                \"fri\": \"F\",\n                \"sat\": \"S\"\n              },\n              \"short\": {\n                \"sun\": \"Su\",\n                \"mon\": \"Mo\",\n                \"tue\": \"Tu\",\n                \"wed\": \"We\",\n                \"thu\": \"Th\",\n                \"fri\": \"Fr\",\n                \"sat\": \"Sa\"\n              },\n              \"wide\": {\n                \"sun\": \"Sunday\",\n                \"mon\": \"Monday\",\n                \"tue\": \"Tuesday\",\n                \"wed\": \"Wednesday\",\n                \"thu\": \"Thursday\",\n                \"fri\": \"Friday\",\n                \"sat\": \"Saturday\"\n              }\n            }\n          },\n          \"dayPeriods\": {\n            \"format\": {\n              \"wide\": {\n                \"am\": \"AM\",\n                \"pm\": \"PM\"\n              }\n            }\n          },\n          \"eras\": {\n            \"eraNames\": {\n              \"0\": \"AH\"\n            },\n            \"eraAbbr\": {\n              \"0\": \"AH\"\n            },\n            \"eraNarrow\": {\n              \"0\": \"AH\"\n            }\n          },\n          \"dateFormats\": {\n            \"full\": \"EEEE, MMMM d, y G\",\n            \"long\": \"MMMM d, y G\",\n            \"medium\": \"MMM d, y G\",\n            \"short\": \"M/d/y GGGGG\"\n          },\n          \"timeFormats\": {\n            \"full\": \"h:mm:ss a zzzz\",\n            \"long\": \"h:mm:ss a z\",\n            \"medium\": \"h:mm:ss a\",\n            \"short\": \"h:mm a\"\n          },\n          \"dateTimeFormats\": {\n            \"full\": \"{1} 'at' {0}\",\n            \"long\": \"{1} 'at' {0}\",\n            \"medium\": \"{1}, {0}\",\n            \"short\": \"{1}, {0}\",\n            \"availableFormats\": {\n              \"d\": \"d\",\n              \"E\": \"ccc\",\n              \"Ed\": \"d E\",\n              \"Ehm\": \"E h:mm a\",\n              \"EHm\": \"E HH:mm\",\n              \"Ehms\": \"E h:mm:ss a\",\n              \"EHms\": \"E HH:mm:ss\",\n              \"Gy\": \"y G\",\n              \"GyMMM\": \"MMM y G\",\n              \"GyMMMd\": \"MMM d, y G\",\n              \"GyMMMEd\": \"E, MMM d, y G\",\n              \"h\": \"h a\",\n              \"H\": \"HH\",\n              \"hm\": \"h:mm a\",\n              \"Hm\": \"HH:mm\",\n              \"hms\": \"h:mm:ss a\",\n              \"Hms\": \"HH:mm:ss\",\n              \"M\": \"L\",\n              \"Md\": \"M/d\",\n              \"MEd\": \"E, M/d\",\n              \"MMM\": \"LLL\",\n              \"MMMd\": \"MMM d\",\n              \"MMMEd\": \"E, MMM d\",\n              \"MMMMd\": \"MMMM d\",\n              \"ms\": \"mm:ss\",\n              \"y\": \"y G\",\n              \"yyyy\": \"y G\",\n              \"yyyyM\": \"M/y GGGGG\",\n              \"yyyyMd\": \"M/d/y GGGGG\",\n              \"yyyyMEd\": \"E, M/d/y GGGGG\",\n              \"yyyyMMM\": \"MMM y G\",\n              \"yyyyMMMd\": \"MMM d, y G\",\n              \"yyyyMMMEd\": \"E, MMM d, y G\",\n              \"yyyyMMMM\": \"MMMM y G\",\n              \"yyyyQQQ\": \"QQQ y G\",\n              \"yyyyQQQQ\": \"QQQQ y G\"\n            }\n          }\n        }\n      },\n      'timeZoneNames': {\n        \"hourFormat\": \"+HH:mm;-HH:mm\",\n        \"gmtFormat\": \"GMT{0}\",\n        \"gmtZeroFormat\": \"GMT\"\n      }\n    },\n    'numbers': {\n      'currencies': {\n        'USD': {\n          'displayName': 'US Dollar',\n          'symbol': '$',\n          'symbol-alt-narrow': '$'\n        },\n        'EUR': {\n          'displayName': 'Euro',\n          'symbol': '€',\n          'symbol-alt-narrow': '€'\n        },\n        'GBP': {\n          'displayName': 'British Pound',\n          'symbol-alt-narrow': '£'\n        }\n      },\n      'defaultNumberingSystem': 'latn',\n      'minimumGroupingDigits': '1',\n      'symbols-numberSystem-latn': {\n        'decimal': '.',\n        'group': ',',\n        'list': ';',\n        'percentSign': '%',\n        'plusSign': '+',\n        'minusSign': '-',\n        'exponential': 'E',\n        'superscriptingExponent': '×',\n        'perMille': '‰',\n        'infinity': '∞',\n        'nan': 'NaN',\n        'timeSeparator': ':'\n      },\n      'decimalFormats-numberSystem-latn': {\n        'standard': '#,##0.###'\n      },\n      'percentFormats-numberSystem-latn': {\n        'standard': '#,##0%'\n      },\n      'currencyFormats-numberSystem-latn': {\n        'standard': '¤#,##0.00',\n        'accounting': '¤#,##0.00;(¤#,##0.00)'\n      },\n      'scientificFormats-numberSystem-latn': {\n        'standard': '#E0'\n      }\n    }\n  };\n  IntlBase.blazorDefaultObject = {\n    \"numbers\": {\n      \"mapper\": {\n        \"0\": \"0\",\n        \"1\": \"1\",\n        \"2\": \"2\",\n        \"3\": \"3\",\n        \"4\": \"4\",\n        \"5\": \"5\",\n        \"6\": \"6\",\n        \"7\": \"7\",\n        \"8\": \"8\",\n        \"9\": \"9\"\n      },\n      \"mapperDigits\": \"0123456789\",\n      \"numberSymbols\": {\n        \"decimal\": \".\",\n        \"group\": \",\",\n        \"plusSign\": \"+\",\n        \"minusSign\": \"-\",\n        \"percentSign\": \"%\",\n        \"nan\": \"NaN\",\n        \"timeSeparator\": \":\",\n        \"infinity\": \"∞\"\n      },\n      \"timeSeparator\": \":\",\n      \"currencySymbol\": \"$\",\n      \"currencypData\": {\n        \"nlead\": \"$\",\n        \"nend\": \"\",\n        \"groupSeparator\": \",\",\n        \"groupData\": {\n          \"primary\": 3\n        },\n        \"maximumFraction\": 2,\n        \"minimumFraction\": 2\n      },\n      \"percentpData\": {\n        \"nlead\": \"\",\n        \"nend\": \"%\",\n        \"groupSeparator\": \",\",\n        \"groupData\": {\n          \"primary\": 3\n        },\n        \"maximumFraction\": 2,\n        \"minimumFraction\": 2\n      },\n      \"percentnData\": {\n        \"nlead\": \"-\",\n        \"nend\": \"%\",\n        \"groupSeparator\": \",\",\n        \"groupData\": {\n          \"primary\": 3\n        },\n        \"maximumFraction\": 2,\n        \"minimumFraction\": 2\n      },\n      \"currencynData\": {\n        \"nlead\": \"($\",\n        \"nend\": \")\",\n        \"groupSeparator\": \",\",\n        \"groupData\": {\n          \"primary\": 3\n        },\n        \"maximumFraction\": 2,\n        \"minimumFraction\": 2\n      },\n      \"decimalnData\": {\n        \"nlead\": \"-\",\n        \"nend\": \"\",\n        \"groupData\": {\n          \"primary\": 3\n        },\n        \"maximumFraction\": 2,\n        \"minimumFraction\": 2\n      },\n      \"decimalpData\": {\n        \"nlead\": \"\",\n        \"nend\": \"\",\n        \"groupData\": {\n          \"primary\": 3\n        },\n        \"maximumFraction\": 2,\n        \"minimumFraction\": 2\n      }\n    },\n    \"dates\": {\n      \"dayPeriods\": {\n        \"am\": \"AM\",\n        \"pm\": \"PM\"\n      },\n      \"dateSeperator\": \"/\",\n      \"days\": {\n        \"abbreviated\": {\n          \"sun\": \"Sun\",\n          \"mon\": \"Mon\",\n          \"tue\": \"Tue\",\n          \"wed\": \"Wed\",\n          \"thu\": \"Thu\",\n          \"fri\": \"Fri\",\n          \"sat\": \"Sat\"\n        },\n        \"short\": {\n          \"sun\": \"Su\",\n          \"mon\": \"Mo\",\n          \"tue\": \"Tu\",\n          \"wed\": \"We\",\n          \"thu\": \"Th\",\n          \"fri\": \"Fr\",\n          \"sat\": \"Sa\"\n        },\n        \"wide\": {\n          \"sun\": \"Sunday\",\n          \"mon\": \"Monday\",\n          \"tue\": \"Tuesday\",\n          \"wed\": \"Wednesday\",\n          \"thu\": \"Thursday\",\n          \"fri\": \"Friday\",\n          \"sat\": \"Saturday\"\n        }\n      },\n      \"months\": {\n        \"abbreviated\": {\n          \"1\": \"Jan\",\n          \"2\": \"Feb\",\n          \"3\": \"Mar\",\n          \"4\": \"Apr\",\n          \"5\": \"May\",\n          \"6\": \"Jun\",\n          \"7\": \"Jul\",\n          \"8\": \"Aug\",\n          \"9\": \"Sep\",\n          \"10\": \"Oct\",\n          \"11\": \"Nov\",\n          \"12\": \"Dec\"\n        },\n        \"wide\": {\n          \"1\": \"January\",\n          \"2\": \"February\",\n          \"3\": \"March\",\n          \"4\": \"April\",\n          \"5\": \"May\",\n          \"6\": \"June\",\n          \"7\": \"July\",\n          \"8\": \"August\",\n          \"9\": \"September\",\n          \"10\": \"October\",\n          \"11\": \"November\",\n          \"12\": \"December\"\n        }\n      },\n      \"eras\": {\n        \"1\": \"AD\"\n      }\n    }\n  };\n  /* tslint:enable:quotemark */\n\n  IntlBase.monthIndex = {\n    3: 'abbreviated',\n    4: 'wide',\n    5: 'narrow',\n    1: 'abbreviated'\n  };\n  /**\n   *\n   */\n\n  IntlBase.month = 'months';\n  IntlBase.days = 'days';\n  /**\n   * Default numerber Object\n   */\n\n  IntlBase.patternMatcher = {\n    C: 'currency',\n    P: 'percent',\n    N: 'decimal',\n    A: 'currency',\n    E: 'scientific'\n  };\n  /**\n   * Returns the resultant pattern based on the skeleton, dateObject and the type provided\n   * @private\n   * @param {string} skeleton\n   * @param {Object} dateObject\n   * @param {string} type\n   * @returns {string}\n   */\n\n  function getResultantPattern(skeleton, dateObject, type, isIslamic, blazorCulture) {\n    let resPattern;\n    let iType = type || 'date';\n\n    if (blazorCulture) {\n      resPattern = compareBlazorDateFormats({\n        skeleton: skeleton\n      }, blazorCulture).format || compareBlazorDateFormats({\n        skeleton: 'd'\n      }, 'en-US').format;\n    } else {\n      if (IntlBase.basicPatterns.indexOf(skeleton) !== -1) {\n        resPattern = getValue(iType + 'Formats.' + skeleton, dateObject);\n\n        if (iType === 'dateTime') {\n          let dPattern = getValue('dateFormats.' + skeleton, dateObject);\n          let tPattern = getValue('timeFormats.' + skeleton, dateObject);\n          resPattern = resPattern.replace('{1}', dPattern).replace('{0}', tPattern);\n        }\n      } else {\n        resPattern = getValue('dateTimeFormats.availableFormats.' + skeleton, dateObject);\n      }\n\n      if (isUndefined(resPattern) && skeleton === 'yMd') {\n        resPattern = 'M/d/y';\n      }\n    }\n\n    return resPattern;\n  }\n\n  IntlBase.getResultantPattern = getResultantPattern;\n  /**\n   * Returns the dependable object for provided cldr data and culture\n   * @private\n   * @param {Object} cldr\n   * @param {string} culture\n   * @param {boolean} isNumber\n   * @returns {Dependables}\n   */\n\n  function getDependables(cldr, culture, mode, isNumber) {\n    let ret = {};\n    let calendartype = mode || 'gregorian';\n    ret.parserObject = ParserBase.getMainObject(cldr, culture) || (isBlazor() ? IntlBase.blazorDefaultObject : IntlBase.defaultObject);\n\n    if (isNumber) {\n      ret.numericObject = getValue('numbers', ret.parserObject);\n    } else {\n      let dateString = isBlazor() ? 'dates' : 'dates.calendars.' + calendartype;\n      ret.dateObject = getValue(dateString, ret.parserObject);\n    }\n\n    return ret;\n  }\n\n  IntlBase.getDependables = getDependables;\n  /**\n   * Returns the symbol pattern for provided parameters\n   * @private\n   * @param {string} type\n   * @param {string} numSystem\n   * @param {Object} obj\n   * @param {boolean} isAccount\n   * @returns {string}\n   */\n\n  function getSymbolPattern(type, numSystem, obj, isAccount) {\n    return getValue(type + 'Formats-numberSystem-' + numSystem + (isAccount ? '.accounting' : '.standard'), obj) || (isAccount ? getValue(type + 'Formats-numberSystem-' + numSystem + '.standard', obj) : '');\n  }\n\n  IntlBase.getSymbolPattern = getSymbolPattern;\n\n  function ConvertDateToWeekFormat(format) {\n    let convertMapper = format.match(IntlBase.dateConverterMapper);\n\n    if (convertMapper && isBlazor()) {\n      let tempString = convertMapper[0].length === 3 ? 'EEE' : 'EEEE';\n      return format.replace(IntlBase.dateConverterMapper, tempString);\n    }\n\n    return format;\n  }\n\n  IntlBase.ConvertDateToWeekFormat = ConvertDateToWeekFormat;\n\n  function compareBlazorDateFormats(formatOptions, culture) {\n    let format = formatOptions.format || formatOptions.skeleton;\n    let curFormatMapper = getValue((culture || 'en-US') + '.' + format, blazorCultureFormats);\n\n    if (!curFormatMapper) {\n      curFormatMapper = getValue('en-US.' + format, blazorCultureFormats);\n    }\n\n    if (curFormatMapper) {\n      curFormatMapper = ConvertDateToWeekFormat(curFormatMapper);\n      formatOptions.format = curFormatMapper.replace(/tt/, 'a');\n    }\n\n    return formatOptions;\n  }\n\n  IntlBase.compareBlazorDateFormats = compareBlazorDateFormats;\n  /**\n   * Returns proper numeric skeleton\n   * @private\n   * @param {string} skeleton\n   * @returns {NumericSkeleton}\n   */\n\n  function getProperNumericSkeleton(skeleton) {\n    let matches = skeleton.match(IntlBase.formatRegex);\n    let ret = {};\n    let pattern = matches[1].toUpperCase();\n    ret.isAccount = pattern === 'A';\n    /* tslint:disable no-any */\n\n    ret.type = IntlBase.patternMatcher[pattern];\n\n    if (skeleton.length > 1) {\n      ret.fractionDigits = parseInt(matches[2], 10);\n    }\n\n    return ret;\n  }\n\n  IntlBase.getProperNumericSkeleton = getProperNumericSkeleton;\n  /**\n   * Returns format data for number formatting like minimum fraction, maximum fraction, etc..,\n   * @private\n   * @param {string} pattern\n   * @param {boolean} needFraction\n   * @param {string} cSymbol\n   * @param {boolean} fractionOnly\n   * @returns {NegativeData}\n   */\n\n  function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {\n    let nData = fractionOnly ? {} : {\n      nlead: '',\n      nend: ''\n    };\n    let match = pattern.match(IntlBase.customRegex);\n\n    if (match) {\n      if (!fractionOnly) {\n        nData.nlead = changeCurrencySymbol(match[1], cSymbol);\n        nData.nend = changeCurrencySymbol(match[10], cSymbol);\n        nData.groupPattern = match[4];\n      }\n\n      let fraction = match[7];\n\n      if (fraction && needFraction) {\n        let fmatch = fraction.match(fractionRegex);\n\n        if (!isNullOrUndefined(fmatch)) {\n          nData.minimumFraction = fmatch.length;\n        } else {\n          nData.minimumFraction = 0;\n        }\n\n        nData.maximumFraction = fraction.length - 1;\n      }\n    }\n\n    return nData;\n  }\n\n  IntlBase.getFormatData = getFormatData;\n  /**\n   * Changes currency symbol\n   * @private\n   * @param {string} val\n   * @param {string} sym\n   * @returns {string}\n   */\n\n  function changeCurrencySymbol(val, sym) {\n    if (val) {\n      return val.replace(IntlBase.defaultCurrency, sym);\n    }\n\n    return '';\n  }\n  /**\n   * Returns currency symbol based on currency code\n   * @private\n   * @param {Object} numericObject\n   * @param {string} currencyCode\n   * @returns {string}\n   */\n\n\n  function getCurrencySymbol(numericObject, currencyCode, altSymbol) {\n    let symbol = altSymbol ? '.' + altSymbol : '.symbol';\n    let getCurrency = getValue('currencies.' + currencyCode + symbol, numericObject) || getValue('currencies.' + currencyCode + '.symbol-alt-narrow', numericObject) || '$';\n    return getCurrency;\n  }\n\n  IntlBase.getCurrencySymbol = getCurrencySymbol;\n  /**\n   * Returns formatting options for custom number format\n   * @private\n   * @param {string} format\n   * @param {CommonOptions} dOptions\n   * @param {Dependables} obj\n   * @returns {GenericFormatOptions}\n   */\n\n  function customFormat(format, dOptions, obj) {\n    let options = {};\n    let formatSplit = format.split(';');\n    let data = ['pData', 'nData', 'zeroData'];\n\n    for (let i = 0; i < formatSplit.length; i++) {\n      options[data[i]] = customNumberFormat(formatSplit[i], dOptions, obj);\n    }\n\n    if (isNullOrUndefined(options.nData)) {\n      options.nData = extend({}, options.pData);\n      options.nData.nlead = isNullOrUndefined(dOptions) ? '-' + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead;\n    }\n\n    return options;\n  }\n\n  IntlBase.customFormat = customFormat;\n  /**\n   * Returns custom formatting options\n   * @private\n   * @param {string} format\n   * @param {CommonOptions} dOptions\n   * @param {Object} numObject\n   * @returns {NegativeData}\n   */\n\n  function customNumberFormat(format, dOptions, numObject) {\n    let cOptions = {\n      type: 'decimal',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    };\n    let pattern = format.match(IntlBase.customRegex);\n\n    if (isNullOrUndefined(pattern) || pattern[5] === '' && format !== 'N/A') {\n      cOptions.type = undefined;\n      return cOptions;\n    }\n\n    cOptions.nlead = pattern[1];\n    cOptions.nend = pattern[10];\n    let integerPart = pattern[6];\n    cOptions.useGrouping = integerPart.indexOf(',') !== -1;\n    integerPart = integerPart.replace(/,/g, '');\n    let fractionPart = pattern[7];\n\n    if (integerPart.indexOf('0') !== -1) {\n      cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf('0');\n    }\n\n    if (!isNullOrUndefined(fractionPart)) {\n      cOptions.minimumFractionDigits = fractionPart.lastIndexOf('0');\n      cOptions.maximumFractionDigits = fractionPart.lastIndexOf('#');\n\n      if (cOptions.minimumFractionDigits === -1) {\n        cOptions.minimumFractionDigits = 0;\n      }\n\n      if (cOptions.maximumFractionDigits === -1 || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) {\n        cOptions.maximumFractionDigits = cOptions.minimumFractionDigits;\n      }\n    }\n\n    if (!isNullOrUndefined(dOptions)) {\n      extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '$', dOptions.currencySymbol));\n\n      if (!cOptions.isCurrency) {\n        extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', dOptions.percentSymbol));\n      }\n    } else {\n      extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], '%', '%'));\n    }\n\n    if (!isNullOrUndefined(numObject)) {\n      let symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, false);\n\n      if (cOptions.useGrouping) {\n        cOptions.groupSeparator = dOptions.numberMapper.numberSymbols[mapper[2]];\n        cOptions.groupData = NumberFormat.getGroupingDetails(symbolPattern.split(';')[0]);\n      }\n\n      cOptions.nlead = cOptions.nlead.replace(/\\'/g, '');\n      cOptions.nend = cOptions.nend.replace(/\\'/g, '');\n    }\n\n    return cOptions;\n  }\n  /**\n   * Returns formatting options for currency or percent type\n   * @private\n   * @param {string[]} parts\n   * @param {string} actual\n   * @param {string} symbol\n   * @returns {NegativeData}\n   */\n\n\n  function isCurrencyPercent(parts, actual, symbol) {\n    let options = {\n      nlead: parts[0],\n      nend: parts[1]\n    };\n\n    for (let i = 0; i < 2; i++) {\n      let part = parts[i];\n      let loc = part.indexOf(actual);\n\n      if (loc !== -1 && (loc < part.indexOf('\\'') || loc > part.lastIndexOf('\\''))) {\n        options[typeMapper[i]] = part.substr(0, loc) + symbol + part.substr(loc + 1);\n        options[typeMapper[actual]] = true;\n        options.type = options.isCurrency ? 'currency' : 'percent';\n        break;\n      }\n    }\n\n    return options;\n  }\n\n  IntlBase.isCurrencyPercent = isCurrencyPercent;\n  /**\n   * Returns culture based date separator\n   * @private\n   * @param {Object} dateObj\n   * @returns {string}\n   */\n\n  function getDateSeparator(dateObj) {\n    let value = (getValue('dateFormats.short', dateObj) || '').match(/[d‏M‏]([^d‏M])[d‏M‏]/i);\n    return value ? value[1] : '/';\n  }\n\n  IntlBase.getDateSeparator = getDateSeparator;\n  /**\n   * Returns Native Date Time pattern\n   * @private\n   * @param {string} culture\n   * @param {DateFormatOptions} options\n   * @param {Object} cldr\n   * @returns {string}\n   */\n\n  function getActualDateTimeFormat(culture, options, cldr, isExcelFormat) {\n    let dependable = getDependables(cldr, culture, options.calendar);\n\n    if (isBlazor()) {\n      options = compareBlazorDateFormats(options, culture);\n    }\n\n    let actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);\n\n    if (isExcelFormat) {\n      actualPattern = actualPattern.replace(patternRegex, pattern => {\n        return patternMatch[pattern];\n      });\n\n      if (actualPattern.indexOf('z') !== -1) {\n        let tLength = actualPattern.match(/z/g).length;\n        let timeZonePattern;\n        let options = {\n          'timeZone': {}\n        };\n        options.numMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));\n        options.timeZone = getValue('dates.timeZoneNames', dependable.parserObject);\n        let value = new Date();\n        let timezone = value.getTimezoneOffset();\n        let pattern = tLength < 4 ? '+H;-H' : options.timeZone.hourFormat;\n        pattern = pattern.replace(/:/g, options.numMapper.timeSeparator);\n\n        if (timezone === 0) {\n          timeZonePattern = options.timeZone.gmtZeroFormat;\n        } else {\n          timeZonePattern = DateFormat.getTimeZoneValue(timezone, pattern);\n          timeZonePattern = options.timeZone.gmtFormat.replace(/\\{0\\}/, timeZonePattern);\n        }\n\n        actualPattern = actualPattern.replace(/[z]+/, '\"' + timeZonePattern + '\"');\n      }\n\n      actualPattern = actualPattern.replace(/ $/, '');\n    }\n\n    return actualPattern;\n  }\n\n  IntlBase.getActualDateTimeFormat = getActualDateTimeFormat; // tslint:disable-next-line:no-any\n\n  function processSymbol(actual, option) {\n    if (actual.indexOf(',') !== -1) {\n      // tslint:disable-next-line:no-any\n      let split = actual.split(',');\n      actual = split[0] + getValue('numberMapper.numberSymbols.group', option) + split[1].replace('.', getValue('numberMapper.numberSymbols.decimal', option));\n    } else {\n      actual = actual.replace('.', getValue('numberMapper.numberSymbols.decimal', option));\n    }\n\n    return actual;\n  }\n  /**\n   * Returns Native Number pattern\n   * @private\n   * @param {string} culture\n   * @param {NumberFormatOptions} options\n   * @param {Object} cldr\n   * @returns {string}\n   */\n\n\n  function getActualNumberFormat(culture, options, cldr, isExcel) {\n    let dependable = getDependables(cldr, culture, '', true);\n    let parseOptions = {\n      custom: true\n    };\n    let numrericObject = dependable.numericObject;\n    let minFrac;\n    let curObj = {};\n    let curMatch = (options.format || '').match(IntlBase.currencyFormatRegex);\n    let type = IntlBase.formatRegex.test(options.format) ? getProperNumericSkeleton(options.format || 'N') : {};\n    let dOptions = {};\n\n    if (curMatch) {\n      dOptions.numberMapper = isBlazor() ? extend({}, dependable.numericObject) : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true);\n      let curCode = isBlazor() ? getValue('currencySymbol', dependable.numericObject) : getCurrencySymbol(dependable.numericObject, options.currency || defaultCurrencyCode, options.altSymbol);\n      let symbolPattern = getSymbolPattern('currency', dOptions.numberMapper.numberSystem, dependable.numericObject, /a/i.test(options.format));\n      symbolPattern = symbolPattern.replace(/\\u00A4/g, curCode);\n      let split = symbolPattern.split(';');\n      curObj.hasNegativePattern = isBlazor() ? true : split.length > 1;\n      curObj.nData = isBlazor() ? getValue(type.type + 'nData', numrericObject) : getFormatData(split[1] || '-' + split[0], true, curCode);\n      curObj.pData = isBlazor() ? getValue(type.type + 'pData', numrericObject) : getFormatData(split[0], false, curCode);\n\n      if (!curMatch[2] && !options.minimumFractionDigits && !options.maximumFractionDigits) {\n        minFrac = getFormatData(symbolPattern.split(';')[0], true, '', true).minimumFraction;\n      }\n    }\n\n    let actualPattern;\n\n    if (IntlBase.formatRegex.test(options.format) || !options.format) {\n      extend(parseOptions, getProperNumericSkeleton(options.format || 'N'));\n      parseOptions.custom = false;\n      actualPattern = '###0';\n\n      if (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) {\n        let defaultMinimum = 0;\n\n        if (parseOptions.fractionDigits) {\n          options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits;\n        }\n\n        actualPattern = fractionDigitsPattern(actualPattern, minFrac || parseOptions.fractionDigits || options.minimumFractionDigits || defaultMinimum, options.maximumFractionDigits || defaultMinimum);\n      }\n\n      if (options.minimumIntegerDigits) {\n        actualPattern = minimumIntegerPattern(actualPattern, options.minimumIntegerDigits);\n      }\n\n      if (options.useGrouping) {\n        actualPattern = groupingPattern(actualPattern);\n      }\n\n      if (parseOptions.type === 'currency' || parseOptions.type && isBlazor()) {\n        if (isBlazor() && parseOptions.type !== 'currency') {\n          curObj.pData = getValue(parseOptions.type + 'pData', numrericObject);\n          curObj.nData = getValue(parseOptions.type + 'nData', numrericObject);\n        }\n\n        let cPattern = actualPattern;\n        actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend;\n\n        if (curObj.hasNegativePattern || isBlazor()) {\n          actualPattern += ';' + curObj.nData.nlead + cPattern + curObj.nData.nend;\n        }\n      }\n\n      if (parseOptions.type === 'percent' && !isBlazor()) {\n        actualPattern += ' %';\n      }\n    } else {\n      actualPattern = options.format.replace(/\\'/g, '\"');\n    }\n\n    if (Object.keys(dOptions).length > 0) {\n      actualPattern = !isExcel ? processSymbol(actualPattern, dOptions) : actualPattern;\n    }\n\n    return actualPattern;\n  }\n\n  IntlBase.getActualNumberFormat = getActualNumberFormat;\n\n  function fractionDigitsPattern(pattern, minDigits, maxDigits) {\n    pattern += '.';\n\n    for (let a = 0; a < minDigits; a++) {\n      pattern += '0';\n    }\n\n    if (minDigits < maxDigits) {\n      let diff = maxDigits - minDigits;\n\n      for (let b = 0; b < diff; b++) {\n        pattern += '#';\n      }\n    }\n\n    return pattern;\n  }\n\n  function minimumIntegerPattern(pattern, digits) {\n    let temp = pattern.split('.');\n    let integer = '';\n\n    for (let x = 0; x < digits; x++) {\n      integer += '0';\n    }\n\n    return temp[1] ? integer + '.' + temp[1] : integer;\n  }\n\n  function groupingPattern(pattern) {\n    let temp = pattern.split('.');\n    let integer = temp[0];\n    let no = 3 - integer.length % 3;\n    let hash = no && no === 1 ? '#' : no === 2 ? '##' : '';\n    integer = hash + integer;\n    pattern = '';\n\n    for (let x = integer.length - 1; x > 0; x = x - 3) {\n      pattern = ',' + integer[x - 2] + integer[x - 1] + integer[x] + pattern;\n    }\n\n    pattern = pattern.slice(1);\n    return temp[1] ? pattern + '.' + temp[1] : pattern;\n  }\n\n  function getWeekData(culture, cldr) {\n    let firstDay = defaultFirstDay;\n    let mapper = getValue('supplemental.weekData.firstDay', cldr);\n    let iCulture = culture;\n\n    if (/en-/.test(iCulture)) {\n      iCulture = iCulture.slice(3);\n    }\n\n    iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2);\n\n    if (mapper) {\n      firstDay = mapper[iCulture] || defaultFirstDay;\n    }\n\n    return firstDayMapper[firstDay];\n  }\n\n  IntlBase.getWeekData = getWeekData;\n  /**\n   * @private\n   * @param pData\n   * @param aCurrency\n   * @param rCurrency\n   */\n\n  function replaceBlazorCurrency(pData, aCurrency, rCurrency) {\n    let iCurrency = getBlazorCurrencySymbol(rCurrency);\n\n    if (aCurrency !== iCurrency) {\n      for (let data of pData) {\n        data.nend = data.nend.replace(aCurrency, iCurrency);\n        data.nlead = data.nlead.replace(aCurrency, iCurrency);\n      }\n    }\n  }\n\n  IntlBase.replaceBlazorCurrency = replaceBlazorCurrency;\n  /**\n   * @private\n   */\n\n  function getWeekOfYear(date) {\n    let newYear = new Date(date.getFullYear(), 0, 1);\n    let day = newYear.getDay();\n    let weeknum;\n    day = day >= 0 ? day : day + 7;\n    let daynum = Math.floor((date.getTime() - newYear.getTime() - (date.getTimezoneOffset() - newYear.getTimezoneOffset()) * 60000) / 86400000) + 1;\n\n    if (day < 4) {\n      weeknum = Math.floor((daynum + day - 1) / 7) + 1;\n\n      if (weeknum > 52) {\n        let nYear = new Date(date.getFullYear() + 1, 0, 1);\n        let nday = nYear.getDay();\n        nday = nday >= 0 ? nday : nday + 7;\n        weeknum = nday < 4 ? 1 : 53;\n      }\n    } else {\n      weeknum = Math.floor((daynum + day - 1) / 7);\n    }\n\n    return weeknum;\n  }\n\n  IntlBase.getWeekOfYear = getWeekOfYear;\n})(IntlBase || (IntlBase = {}));\n\nconst headerRegex = /^(.*?):[ \\t]*([^\\r\\n]*)$/gm;\nconst defaultType = 'GET';\n/**\n * Ajax class provides ability to make asynchronous HTTP request to the server\n * ```typescript\n *   var ajax = new Ajax(\"index.html\", \"GET\", true);\n *   ajax.send().then(\n *               function (value) {\n *                   console.log(value);\n *               },\n *               function (reason) {\n *                   console.log(reason);\n *               });\n * ```\n */\n\nclass Ajax {\n  /**\n   * Constructor for Ajax class\n   * @param  {string|Object} options?\n   * @param  {string} type?\n   * @param  {boolean} async?\n   * @returns defaultType\n   */\n  constructor(options, type, async, contentType) {\n    /**\n     * A boolean value indicating whether the request should be sent asynchronous or not.\n     * @default true\n     */\n    this.mode = true;\n    /**\n     * A boolean value indicating whether to ignore the promise reject.\n     * @private\n     * @default true\n     */\n\n    this.emitError = true;\n    this.options = {};\n\n    if (typeof options === 'string') {\n      this.url = options;\n      this.type = type ? type.toUpperCase() : defaultType;\n      this.mode = !isNullOrUndefined(async) ? async : true;\n    } else if (typeof options === 'object') {\n      this.options = options;\n      merge(this, this.options);\n    }\n\n    this.type = this.type ? this.type.toUpperCase() : defaultType;\n    this.contentType = this.contentType !== undefined ? this.contentType : contentType;\n  }\n  /**\n   * Send the request to server.\n   * @param {any} data - To send the user data\n   * @return {Promise}\n   */\n\n\n  send(data) {\n    this.data = isNullOrUndefined(data) ? this.data : data;\n    let eventArgs = {\n      cancel: false,\n      httpRequest: null\n    };\n    let promise = new Promise((resolve, reject) => {\n      this.httpRequest = new XMLHttpRequest();\n\n      this.httpRequest.onreadystatechange = () => {\n        this.stateChange(resolve, reject);\n      };\n\n      if (!isNullOrUndefined(this.onLoad)) {\n        this.httpRequest.onload = this.onLoad;\n      }\n\n      if (!isNullOrUndefined(this.onProgress)) {\n        this.httpRequest.onprogress = this.onProgress;\n      }\n      /* istanbul ignore next */\n\n\n      if (!isNullOrUndefined(this.onAbort)) {\n        this.httpRequest.onabort = this.onAbort;\n      }\n      /* istanbul ignore next */\n\n\n      if (!isNullOrUndefined(this.onError)) {\n        this.httpRequest.onerror = this.onError;\n      } //** Upload Events **/\n\n      /* istanbul ignore next */\n\n\n      if (!isNullOrUndefined(this.onUploadProgress)) {\n        this.httpRequest.upload.onprogress = this.onUploadProgress;\n      }\n\n      this.httpRequest.open(this.type, this.url, this.mode); // Set default headers\n\n      if (!isNullOrUndefined(this.data) && this.contentType !== null) {\n        this.httpRequest.setRequestHeader('Content-Type', this.contentType || 'application/json; charset=utf-8');\n      }\n\n      if (this.beforeSend) {\n        eventArgs.httpRequest = this.httpRequest;\n        this.beforeSend(eventArgs);\n      }\n\n      if (!eventArgs.cancel) {\n        this.httpRequest.send(!isNullOrUndefined(this.data) ? this.data : null);\n      }\n    });\n    return promise;\n  }\n\n  successHandler(data) {\n    if (this.onSuccess) {\n      this.onSuccess(data, this);\n    }\n\n    return data;\n  }\n\n  failureHandler(reason) {\n    if (this.onFailure) {\n      this.onFailure(this.httpRequest);\n    }\n\n    return reason;\n  }\n\n  stateChange(resolve, reject) {\n    let data = this.httpRequest.responseText;\n\n    if (this.dataType && this.dataType.toLowerCase() === 'json') {\n      if (data === '') {\n        data = undefined;\n      } else {\n        try {\n          data = JSON.parse(data);\n        } catch (error) {// no exception handle\n        }\n      }\n    }\n\n    if (this.httpRequest.readyState === 4) {\n      //success range should be 200 to 299\n      if (this.httpRequest.status >= 200 && this.httpRequest.status <= 299 || this.httpRequest.status === 304) {\n        resolve(this.successHandler(data));\n      } else {\n        if (this.emitError) {\n          reject(new Error(this.failureHandler(this.httpRequest.statusText)));\n        } else {\n          resolve();\n        }\n      }\n    }\n  }\n  /**\n   * To get the response header from XMLHttpRequest\n   * @param  {string} key Key to search in the response header\n   * @returns {string}\n   */\n\n\n  getResponseHeader(key) {\n    let responseHeaders;\n    let header;\n    responseHeaders = {};\n    let headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n\n    while (headers) {\n      responseHeaders[headers[1].toLowerCase()] = headers[2];\n      headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());\n    }\n\n    header = responseHeaders[key.toLowerCase()];\n    return isNullOrUndefined(header) ? null : header;\n  }\n\n}\n\nconst REGX_MOBILE = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile/i;\nconst REGX_IE = /msie|trident/i;\nconst REGX_IE11 = /Trident\\/7\\./;\nconst REGX_IOS = /(ipad|iphone|ipod touch)/i;\nconst REGX_IOS7 = /(ipad|iphone|ipod touch);.*os 7_\\d|(ipad|iphone|ipod touch);.*os 8_\\d/i;\nconst REGX_ANDROID = /android/i;\nconst REGX_WINDOWS = /trident|windows phone|edge/i;\nconst REGX_VERSION = /(version)[ \\/]([\\w.]+)/i;\nconst REGX_BROWSER = {\n  OPERA: /(opera|opr)(?:.*version|)[ \\/]([\\w.]+)/i,\n  EDGE: /(edge)(?:.*version|)[ \\/]([\\w.]+)/i,\n  CHROME: /(chrome|crios)[ \\/]([\\w.]+)/i,\n  PANTHOMEJS: /(phantomjs)[ \\/]([\\w.]+)/i,\n  SAFARI: /(safari)[ \\/]([\\w.]+)/i,\n  WEBKIT: /(webkit)[ \\/]([\\w.]+)/i,\n  MSIE: /(msie|trident) ([\\w.]+)/i,\n  MOZILLA: /(mozilla)(?:.*? rv:([\\w.]+)|)/i\n};\n/* istanbul ignore else  */\n\nif (typeof window !== 'undefined') {\n  window.browserDetails = window.browserDetails || {};\n}\n/**\n * Get configuration details for Browser\n * @private\n */\n\n\nclass Browser {\n  static extractBrowserDetail() {\n    let browserInfo = {\n      culture: {}\n    };\n    let keys = Object.keys(REGX_BROWSER);\n    let clientInfo = [];\n\n    for (let key of keys) {\n      clientInfo = Browser.userAgent.match(REGX_BROWSER[key]);\n\n      if (clientInfo) {\n        browserInfo.name = clientInfo[1].toLowerCase() === 'opr' ? 'opera' : clientInfo[1].toLowerCase();\n        browserInfo.name = clientInfo[1].toLowerCase() === 'crios' ? 'chrome' : browserInfo.name;\n        browserInfo.version = clientInfo[2];\n        browserInfo.culture.name = browserInfo.culture.language = navigator.language;\n\n        if (!!Browser.userAgent.match(REGX_IE11)) {\n          browserInfo.name = 'msie';\n          break;\n        }\n\n        let version = Browser.userAgent.match(REGX_VERSION);\n\n        if (browserInfo.name === 'safari' && version) {\n          browserInfo.version = version[2];\n        }\n\n        break;\n      }\n    }\n\n    return browserInfo;\n  }\n  /**\n   * To get events from the browser\n   * @param {string} event - type of event triggered.\n   * @returns {Boolean}\n   */\n\n\n  static getEvent(event) {\n    // tslint:disable-next-line:no-any\n    let events = {\n      start: {\n        isPointer: 'pointerdown',\n        isTouch: 'touchstart',\n        isDevice: 'mousedown'\n      },\n      move: {\n        isPointer: 'pointermove',\n        isTouch: 'touchmove',\n        isDevice: 'mousemove'\n      },\n      end: {\n        isPointer: 'pointerup',\n        isTouch: 'touchend',\n        isDevice: 'mouseup'\n      },\n      cancel: {\n        isPointer: 'pointercancel',\n        isTouch: 'touchcancel',\n        isDevice: 'mouseleave'\n      }\n    };\n    return Browser.isPointer && !Browser.isWindows ? events[event].isPointer : Browser.isTouch ? events[event].isTouch + (!Browser.isDevice ? ' ' + events[event].isDevice : '') : events[event].isDevice;\n  }\n  /**\n   * To get the Touch start event from browser\n   * @returns {string}\n   */\n\n\n  static getTouchStartEvent() {\n    return Browser.getEvent('start');\n  }\n  /**\n   * To get the Touch end event from browser\n   * @returns {string}\n   */\n\n\n  static getTouchEndEvent() {\n    return Browser.getEvent('end');\n  }\n  /**\n   * To get the Touch move event from browser\n   * @returns {string}\n   */\n\n\n  static getTouchMoveEvent() {\n    return Browser.getEvent('move');\n  }\n  /**\n   * To cancel the touch event from browser\n   * @returns {string}\n   */\n\n\n  static getTouchCancelEvent() {\n    return Browser.getEvent('cancel');\n  }\n  /**\n   * To get the value based on provided key and regX\n   * @param {string} key\n   * @param {RegExp} regX\n   * @returns {Object}\n   */\n\n\n  static getValue(key, regX) {\n    let browserDetails = window.browserDetails;\n\n    if ('undefined' === typeof browserDetails[key]) {\n      return browserDetails[key] = regX.test(Browser.userAgent);\n    }\n\n    return browserDetails[key];\n  } //Properties \n\n  /**\n   * Property specifies the userAgent of the browser. Default userAgent value is based on the browser.\n   * Also we can set our own userAgent.\n   */\n\n\n  static set userAgent(uA) {\n    Browser.uA = uA;\n    window.browserDetails = {};\n  }\n\n  static get userAgent() {\n    return Browser.uA;\n  } //Read Only Properties\n\n  /**\n   * Property is to get the browser information like Name, Version and Language\n   * @returns BrowserInfo\n   */\n\n\n  static get info() {\n    if (isUndefined(window.browserDetails.info)) {\n      return window.browserDetails.info = Browser.extractBrowserDetail();\n    }\n\n    return window.browserDetails.info;\n  }\n  /**\n   * Property is to get whether the userAgent is based IE.\n   */\n\n\n  static get isIE() {\n    return Browser.getValue('isIE', REGX_IE);\n  }\n  /**\n   * Property is to get whether the browser has touch support.\n   */\n\n\n  static get isTouch() {\n    if (isUndefined(window.browserDetails.isTouch)) {\n      return window.browserDetails.isTouch = 'ontouchstart' in window.navigator || window && window.navigator && window.navigator.maxTouchPoints > 0 || 'ontouchstart' in window;\n    }\n\n    return window.browserDetails.isTouch;\n  }\n  /**\n   * Property is to get whether the browser has Pointer support.\n   */\n\n\n  static get isPointer() {\n    if (isUndefined(window.browserDetails.isPointer)) {\n      return window.browserDetails.isPointer = 'pointerEnabled' in window.navigator;\n    }\n\n    return window.browserDetails.isPointer;\n  }\n  /**\n   * Property is to get whether the browser has MSPointer support.\n   */\n\n\n  static get isMSPointer() {\n    if (isUndefined(window.browserDetails.isMSPointer)) {\n      return window.browserDetails.isMSPointer = 'msPointerEnabled' in window.navigator;\n    }\n\n    return window.browserDetails.isMSPointer;\n  }\n  /**\n   * Property is to get whether the userAgent is device based.\n   */\n\n\n  static get isDevice() {\n    return Browser.getValue('isDevice', REGX_MOBILE);\n  }\n  /**\n   * Property is to get whether the userAgent is IOS.\n   */\n\n\n  static get isIos() {\n    return Browser.getValue('isIos', REGX_IOS);\n  }\n  /**\n   * Property is to get whether the userAgent is Ios7.\n   */\n\n\n  static get isIos7() {\n    return Browser.getValue('isIos7', REGX_IOS7);\n  }\n  /**\n   * Property is to get whether the userAgent is Android.\n   */\n\n\n  static get isAndroid() {\n    return Browser.getValue('isAndroid', REGX_ANDROID);\n  }\n  /**\n   * Property is to identify whether application ran in web view.\n   */\n\n\n  static get isWebView() {\n    if (isUndefined(window.browserDetails.isWebView)) {\n      window.browserDetails.isWebView = !(isUndefined(window.cordova) && isUndefined(window.PhoneGap) && isUndefined(window.phonegap) && window.forge !== 'object');\n      return window.browserDetails.isWebView;\n    }\n\n    return window.browserDetails.isWebView;\n  }\n  /**\n   * Property is to get whether the userAgent is Windows.\n   */\n\n\n  static get isWindows() {\n    return Browser.getValue('isWindows', REGX_WINDOWS);\n  }\n  /**\n   * Property is to get the touch start event. It returns event name based on browser.\n   */\n\n\n  static get touchStartEvent() {\n    if (isUndefined(window.browserDetails.touchStartEvent)) {\n      return window.browserDetails.touchStartEvent = Browser.getTouchStartEvent();\n    }\n\n    return window.browserDetails.touchStartEvent;\n  }\n  /**\n   * Property is to get the touch move event. It returns event name based on browser.\n   */\n\n\n  static get touchMoveEvent() {\n    if (isUndefined(window.browserDetails.touchMoveEvent)) {\n      return window.browserDetails.touchMoveEvent = Browser.getTouchMoveEvent();\n    }\n\n    return window.browserDetails.touchMoveEvent;\n  }\n  /**\n   * Property is to get the touch end event. It returns event name based on browser.\n   */\n\n\n  static get touchEndEvent() {\n    if (isUndefined(window.browserDetails.touchEndEvent)) {\n      return window.browserDetails.touchEndEvent = Browser.getTouchEndEvent();\n    }\n\n    return window.browserDetails.touchEndEvent;\n  }\n  /**\n   * Property is to cancel the touch end event.\n   */\n\n\n  static get touchCancelEvent() {\n    if (isUndefined(window.browserDetails.touchCancelEvent)) {\n      return window.browserDetails.touchCancelEvent = Browser.getTouchCancelEvent();\n    }\n\n    return window.browserDetails.touchCancelEvent;\n  }\n\n}\n/* istanbul ignore next */\n\n\nBrowser.uA = typeof navigator !== 'undefined' ? navigator.userAgent : '';\n/**\n * EventHandler class provides option to add, remove, clear and trigger events to a HTML DOM element\n * @private\n * ```html\n * <div id=\"Eventdiv\">  </div>\n * <script>\n *   let node: HTMLElement = document.querySelector(\"#Eventdiv\");\n *   EventHandler.addEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   EventHandler.addEventListener(node, \"onmouseover\", function(){\n *       // mouseover handler function code\n *   });\n *   EventHandler.removeEventListener(node, \"click\", function(){\n *       // click handler function code\n *   });\n *   eventObj.clearEvents();\n * </script>\n * ```\n */\n\nclass EventHandler {\n  // to get the event data based on element\n  static addOrGetEventData(element) {\n    if ('__eventList' in element) {\n      return element.__eventList.events;\n    } else {\n      element.__eventList = {};\n      return element.__eventList.events = [];\n    }\n  }\n  /**\n   * Add an event to the specified DOM element.\n   * @param {any} element - Target HTML DOM element\n   * @param {string} eventName - A string that specifies the name of the event\n   * @param {Function} listener - Specifies the function to run when the event occurs\n   * @param {Object} bindTo - A object that binds 'this' variable in the event handler\n   * @param {number} debounce - Specifies at what interval given event listener should be triggered.\n   * @return {Function}\n   */\n\n\n  static add(element, eventName, listener, bindTo, intDebounce) {\n    let eventData = EventHandler.addOrGetEventData(element);\n    let debounceListener;\n\n    if (intDebounce) {\n      debounceListener = debounce(listener, intDebounce);\n    } else {\n      debounceListener = listener;\n    }\n\n    if (bindTo) {\n      debounceListener = debounceListener.bind(bindTo);\n    }\n\n    let event = eventName.split(' ');\n\n    for (let i = 0; i < event.length; i++) {\n      eventData.push({\n        name: event[i],\n        listener: listener,\n        debounce: debounceListener\n      });\n\n      if (Browser.isIE) {\n        element.addEventListener(event[i], debounceListener);\n      } else {\n        element.addEventListener(event[i], debounceListener, {\n          passive: false\n        });\n      }\n    }\n\n    return debounceListener;\n  }\n  /**\n   * Remove an event listener that has been attached before.\n   * @param {any} element - Specifies the target html element to remove the event\n   * @param {string} eventName - A string that specifies the name of the event to remove\n   * @param {Function} listener - Specifies the function to remove\n   * @return {void}\n   */\n\n\n  static remove(element, eventName, listener) {\n    let eventData = EventHandler.addOrGetEventData(element);\n    let event = eventName.split(' ');\n\n    for (let j = 0; j < event.length; j++) {\n      let index = -1;\n      let debounceListener;\n\n      if (eventData && eventData.length !== 0) {\n        eventData.some((x, i) => {\n          return x.name === event[j] && x.listener === listener ? (index = i, debounceListener = x.debounce, true) : false;\n        });\n      }\n\n      if (index !== -1) {\n        eventData.splice(index, 1);\n      }\n\n      if (debounceListener) {\n        element.removeEventListener(event[j], debounceListener);\n      }\n    }\n  }\n  /**\n   * Clear all the event listeners that has been previously attached to the element.\n   * @param {any} element - Specifies the target html element to clear the events\n   * @return {void}\n   */\n\n\n  static clearEvents(element) {\n    let eventData;\n    let copyData;\n    eventData = EventHandler.addOrGetEventData(element);\n    copyData = extend([], copyData, eventData);\n\n    for (let i = 0; i < copyData.length; i++) {\n      element.removeEventListener(copyData[i].name, copyData[i].debounce);\n      eventData.shift();\n    }\n  }\n  /**\n   * Trigger particular event of the element.\n   * @param {any} element - Specifies the target html element to trigger the events\n   * @param {string} eventName - Specifies the event to trigger for the specified element.\n   * Can be a custom event, or any of the standard events.\n   * @param {any} eventProp - Additional parameters to pass on to the event properties\n   * @return {void}\n   */\n\n\n  static trigger(element, eventName, eventProp) {\n    let eventData = EventHandler.addOrGetEventData(element);\n\n    for (let event of eventData) {\n      if (event.name === eventName) {\n        event.debounce.call(this, eventProp);\n      }\n    }\n  }\n\n}\n/**\n * Template Engine\n */\n\n\nconst LINES = new RegExp('\\\\n|\\\\r|\\\\s\\\\s+', 'g');\nconst QUOTES = new RegExp(/'|\"/g);\nconst IF_STMT = new RegExp('if ?\\\\(');\nconst ELSEIF_STMT = new RegExp('else if ?\\\\(');\nconst ELSE_STMT = new RegExp('else');\nconst FOR_STMT = new RegExp('for ?\\\\(');\nconst IF_OR_FOR = new RegExp('(\\/if|\\/for)');\nconst CALL_FUNCTION = new RegExp('\\\\((.*)\\\\)', '');\nconst NOT_NUMBER = new RegExp('^[0-9]+$', 'g');\nconst WORD = new RegExp('[\\\\w\"\\'.\\\\s+]+', 'g');\nconst DBL_QUOTED_STR = new RegExp('\"(.*?)\"', 'g');\nconst WORDIF = new RegExp('[\\\\w\"\\'@#$.\\\\s-+]+', 'g');\nlet exp = new RegExp('\\\\${([^}]*)}', 'g'); // let cachedTemplate: Object = {};\n\nlet ARR_OBJ = /^\\..*/gm;\nlet SINGLE_SLASH = /\\\\/gi;\nlet DOUBLE_SLASH = /\\\\\\\\/gi;\nconst WORDFUNC = new RegExp('[\\\\w\"\\'@#$.\\\\s+]+', 'g');\nconst WINDOWFUNC = /\\window\\./gm;\n/**\n * The function to set regular expression for template expression string.\n * @param  {RegExp} value - Value expression.\n * @private\n */\n// /**\n//  * To render the template string from the given data.\n//  * @param  {string} template - String Template.\n//  * @param  {Object[]|JSON} data - DataSource for the template.\n//  * @param  {Object} helper? - custom helper object.\n//  */\n// export function template(template: string, data: JSON, helper?: Object): string {\n//     let hash: string = hashCode(template);\n//     let tmpl: Function;\n//     if (!cachedTemplate[hash]) {\n//         tmpl = cachedTemplate[hash] = compile(template, helper);\n//     } else {\n//         tmpl = cachedTemplate[hash];\n//     }\n//     return tmpl(data);\n// }\n\n/**\n * Compile the template string into template function.\n * @param  {string} template - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\n\nfunction compile$1(template, helper, ignorePrefix) {\n  let argName = 'data';\n  let evalExpResult = evalExp(template, argName, helper, ignorePrefix);\n  let condtion = `var valueRegEx = (/value=\\\\'([A-Za-z0-9 _]*)((.)([\\\\w)(!-;?-■\\\\s]+)['])/g);\n    var hrefRegex = (/(?:href)([\\\\s='\"./]+)([\\\\w-./?=&\\\\\\\\#\"]+)((.)([\\\\w)(!-;/?-■\\\\s]+)['])/g);\n    if(str.match(valueRegEx)){\n        var check = str.match(valueRegEx);\n        var str1 = str;\n        for (var i=0; i < check.length; i++) {\n            var check1 = str.match(valueRegEx)[i].split('value=')[1];\n            var change = check1.match(/^'/) !== null ? check1.replace(/^'/, '\\\"') : check1;\n            change =change.match(/.$/)[0] === '\\\\'' ? change.replace(/.$/,'\\\"') : change;\n            str1 = str1.replace(check1, change);\n        }\n        str = str.replace(str, str1);\n    }\n    else if (str.match(/(?:href='')/) === null) {\n        if(str.match(hrefRegex)) {\n            var check = str.match(hrefRegex);\n            var str1 = str;\n            for (var i=0; i < check.length; i++) {\n                var check1 = str.match(hrefRegex)[i].split('href=')[1];\n                var change = check1.match(/^'/) !== null ? check1.replace(/^'/, '\\\"') : check1;\n                change =change.match(/.$/)[0] === '\\\\'' ? change.replace(/.$/,'\\\"') : change;\n                str1 = str1.replace(check1, change);\n            }\n            str = str.replace(str, str1);\n        }\n    }\n    `;\n  let fnCode = \"var str=\\\"\" + evalExpResult + \"\\\";\" + condtion + \" return str;\"; //let fnCode: string = `var str=\"${evalExpResult}\"; return str;`;\n  // tslint:disable-next-line:no-function-constructor-with-string-args\n\n  let fn = new Function(argName, fnCode);\n  return fn.bind(helper);\n} // function used to evaluate the function expression\n\n\nfunction evalExp(str, nameSpace, helper, ignorePrefix) {\n  let varCOunt = 0;\n  /**\n   * Variable containing Local Keys\n   */\n\n  let localKeys = [];\n  let isClass = str.match(/class=\"([^\\\"]+|)\\s{2}/g);\n  let singleSpace = '';\n\n  if (isClass) {\n    isClass.forEach(value => {\n      singleSpace = value.replace(/\\s\\s+/g, ' ');\n      str = str.replace(value, singleSpace);\n    });\n  }\n\n  return str.replace(LINES, '').replace(DBL_QUOTED_STR, '\\'$1\\'').replace(exp, (match, cnt, offset, matchStr) => {\n    const SPECIAL_CHAR = /\\@|\\#|\\$/gm;\n    let matches = cnt.match(CALL_FUNCTION); // matches to detect any function calls\n\n    if (matches) {\n      let rlStr = matches[1];\n\n      if (ELSEIF_STMT.test(cnt)) {\n        //handling else-if condition\n        cnt = '\";} ' + cnt.replace(matches[1], rlStr.replace(WORD, str => {\n          str = str.trim();\n          return addNameSpace(str, !QUOTES.test(str) && localKeys.indexOf(str) === -1, nameSpace, localKeys, ignorePrefix);\n        })) + '{ \\n str = str + \"';\n      } else if (IF_STMT.test(cnt)) {\n        //handling if condition\n        cnt = '\"; ' + cnt.replace(matches[1], rlStr.replace(WORDIF, strs => {\n          return HandleSpecialCharArrObj(strs, nameSpace, localKeys, ignorePrefix);\n        })) + '{ \\n str = str + \"';\n      } else if (FOR_STMT.test(cnt)) {\n        //handling for condition\n        let rlStr = matches[1].split(' of '); // replace for each into actual JavaScript\n\n        cnt = '\"; ' + cnt.replace(matches[1], mtc => {\n          localKeys.push(rlStr[0]);\n          localKeys.push(rlStr[0] + 'Index');\n          varCOunt = varCOunt + 1; // tslint:disable-next-line\n\n          return 'var i' + varCOunt + '=0; i' + varCOunt + ' < ' + addNameSpace(rlStr[1], true, nameSpace, localKeys, ignorePrefix) + '.length; i' + varCOunt + '++';\n        }) + '{ \\n ' + rlStr[0] + '= ' + addNameSpace(rlStr[1], true, nameSpace, localKeys, ignorePrefix) + '[i' + varCOunt + ']; \\n var ' + rlStr[0] + 'Index=i' + varCOunt + '; \\n str = str + \"';\n      } else {\n        //helper function handling\n        let fnStr = cnt.split('(');\n        let fNameSpace = helper && helper.hasOwnProperty(fnStr[0]) ? 'this.' : 'global';\n        fNameSpace = /\\./.test(fnStr[0]) ? '' : fNameSpace;\n        let ftArray = matches[1].split(',');\n\n        if (matches[1].length !== 0 && !/data/.test(ftArray[0]) && !/window./.test(ftArray[0])) {\n          matches[1] = fNameSpace === 'global' ? nameSpace + '.' + matches[1] : matches[1];\n        }\n\n        let splRegexp = /\\@|\\$|\\#/gm;\n        let arrObj = /\\]\\./gm;\n\n        if (WINDOWFUNC.test(cnt) && arrObj.test(cnt) || splRegexp.test(cnt)) {\n          let splArrRegexp = /\\@|\\$|\\#|\\]\\./gm;\n\n          if (splArrRegexp.test(cnt)) {\n            // tslint:disable-next-line\n            cnt = '\"+ ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(matches[1], rlStr.replace(WORDFUNC, strs => {\n              return HandleSpecialCharArrObj(strs, nameSpace, localKeys, ignorePrefix);\n            })) + '+ \"';\n          }\n        } else {\n          cnt = '\" + ' + (fNameSpace === 'global' ? '' : fNameSpace) + cnt.replace(rlStr, addNameSpace(matches[1].replace(/,( |)data.|,/gi, ',' + nameSpace + '.').replace(/,( |)data.window/gi, ',window'), fNameSpace === 'global' ? false : true, nameSpace, localKeys, ignorePrefix)) + '+\"';\n        }\n      }\n    } else if (ELSE_STMT.test(cnt)) {\n      // handling else condition\n      cnt = '\"; ' + cnt.replace(ELSE_STMT, '} else { \\n str = str + \"');\n    } else if (!!cnt.match(IF_OR_FOR)) {\n      // close condition \n      cnt = cnt.replace(IF_OR_FOR, '\"; \\n } \\n str = str + \"');\n    } else if (SPECIAL_CHAR.test(cnt)) {\n      // template string with double slash with special character\n      if (cnt.match(SINGLE_SLASH)) {\n        cnt = SlashReplace(cnt);\n      }\n\n      cnt = '\"+' + NameSpaceForspecialChar(cnt, localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '\"]+\"';\n    } else {\n      // template string with double slash\n      if (cnt.match(SINGLE_SLASH)) {\n        cnt = SlashReplace(cnt);\n        cnt = '\"+' + NameSpaceForspecialChar(cnt, localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '\"]+\"';\n      } else {\n        // evaluate normal expression\n        cnt = '\"+' + addNameSpace(cnt.replace(/\\,/gi, '+' + nameSpace + '.'), localKeys.indexOf(cnt) === -1, nameSpace, localKeys, ignorePrefix) + '+\"';\n      }\n    }\n\n    return cnt;\n  });\n}\n\nfunction addNameSpace(str, addNS, nameSpace, ignoreList, ignorePrefix) {\n  return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 && !ignorePrefix ? nameSpace + '.' + str : str;\n}\n\nfunction NameSpaceArrObj(str, addNS, nameSpace, ignoreList) {\n  let arrObjReg = /^\\..*/gm;\n  return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 && !arrObjReg.test(str) ? nameSpace + '.' + str : str;\n} // // Create hashCode for template string to storeCached function\n// function hashCode(str: string): string {\n//     return str.split('').reduce((a: number, b: string) => { a = ((a << 5) - a) + b.charCodeAt(0); return a & a; }, 0).toString();\n// }\n\n\nfunction NameSpaceForspecialChar(str, addNS, nameSpace, ignoreList) {\n  return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split('.')[0]) === -1 ? nameSpace + '[\"' + str : str;\n} // tslint:disable-next-line\n\n\nfunction SlashReplace(tempStr) {\n  // tslint:disable-next-line\n  let double = `\\\\\\\\`;\n\n  if (tempStr.match(DOUBLE_SLASH)) {\n    tempStr = tempStr;\n  } else {\n    tempStr = tempStr.replace(SINGLE_SLASH, double);\n  }\n\n  return tempStr;\n}\n\nfunction HandleSpecialCharArrObj(str, nameSpaceNew, keys, ignorePrefix) {\n  str = str.trim();\n  let windowFunc = /\\window\\./gm;\n\n  if (!windowFunc.test(str)) {\n    let quotes = /'|\"/gm;\n    let splRegexp = /\\@|\\$|\\#/gm;\n\n    if (splRegexp.test(str)) {\n      str = NameSpaceForspecialChar(str, keys.indexOf(str) === -1, nameSpaceNew, keys) + '\"]';\n    }\n\n    if (ARR_OBJ.test(str)) {\n      return NameSpaceArrObj(str, !quotes.test(str) && keys.indexOf(str) === -1, nameSpaceNew, keys);\n    } else {\n      return addNameSpace(str, !quotes.test(str) && keys.indexOf(str) === -1, nameSpaceNew, keys, ignorePrefix);\n    }\n  } else {\n    return str;\n  }\n}\n/**\n * Template Engine Bridge\n */\n\n\nconst HAS_ROW = /^[\\n\\r.]+\\<tr|^\\<tr/;\nconst HAS_SVG = /^[\\n\\r.]+\\<svg|^\\<path|^\\<g/;\nlet blazorTemplates = {};\n\nfunction getRandomId() {\n  return '-' + Math.random().toString(36).substr(2, 5);\n}\n/**\n * Compile the template string into template function.\n * @param  {string} templateString - The template string which is going to convert.\n * @param  {Object} helper? - Helper functions as an object.\n * @private\n */\n//tslint:disable-next-line\n\n\nfunction compile$$1(templateString, helper, ignorePrefix) {\n  let compiler = engineObj.compile(templateString, helper, ignorePrefix); //tslint:disable-next-line\n\n  return (data, component, propName, templateId, isStringTemplate, index, element) => {\n    let result = compiler(data, component, propName, element);\n    let blazorTemplateId = 'BlazorTemplateId';\n\n    if (isBlazor() && !isStringTemplate) {\n      let randomId = getRandomId();\n      let blazorId = templateId + randomId;\n\n      if (!blazorTemplates[templateId]) {\n        blazorTemplates[templateId] = [];\n      }\n\n      if (!isNullOrUndefined(index)) {\n        let keys = Object.keys(blazorTemplates[templateId][index]);\n\n        for (let key of keys) {\n          if (key !== blazorTemplateId && data[key]) {\n            blazorTemplates[templateId][index][key] = data[key];\n          }\n\n          if (key === blazorTemplateId) {\n            blazorId = blazorTemplates[templateId][index][key];\n          }\n        }\n      } else {\n        data[blazorTemplateId] = blazorId;\n        blazorTemplates[templateId].push(data);\n      } // tslint:disable-next-line:no-any\n\n\n      return propName === 'rowTemplate' ? [createElement('tr', {\n        id: blazorId,\n        className: 'e-blazor-template'\n      })] : // tslint:disable-next-line:no-any\n      [createElement('div', {\n        id: blazorId,\n        className: 'e-blazor-template'\n      })];\n    }\n\n    if (typeof result === 'string') {\n      if (HAS_SVG.test(result)) {\n        let ele = createElement('svg', {\n          innerHTML: result\n        });\n        return ele.childNodes;\n      } else {\n        let ele = createElement(HAS_ROW.test(result) ? 'table' : 'div', {\n          innerHTML: result\n        });\n        return ele.childNodes;\n      }\n    } else {\n      return result;\n    }\n  };\n}\n\nfunction updateBlazorTemplate(templateId, templateName, comp, isEmpty, callBack) {\n  if (isBlazor()) {\n    let ejsIntrop = 'sfBlazor';\n    window[ejsIntrop].updateTemplate(templateName, blazorTemplates[templateId], templateId, comp, callBack);\n\n    if (isEmpty !== false) {\n      blazorTemplates[templateId] = [];\n    }\n  }\n}\n\nfunction resetBlazorTemplate(templateId, templateName, index) {\n  let templateDiv = document.getElementById(templateId);\n\n  if (templateDiv) {\n    // tslint:disable-next-line:no-any\n    let innerTemplates = templateDiv.getElementsByClassName('blazor-inner-template');\n\n    for (let i = 0; i < innerTemplates.length; i++) {\n      let tempId = ' ';\n\n      if (!isNullOrUndefined(index)) {\n        tempId = innerTemplates[index].getAttribute('data-templateId');\n      } else {\n        tempId = innerTemplates[i].getAttribute('data-templateId');\n      }\n\n      let tempElement = document.getElementById(tempId);\n\n      if (tempElement) {\n        let length = tempElement.childNodes.length;\n\n        for (let j = 0; j < length; j++) {\n          if (!isNullOrUndefined(index)) {\n            innerTemplates[index].appendChild(tempElement.childNodes[0]);\n            i = innerTemplates.length;\n          } else {\n            innerTemplates[i].appendChild(tempElement.childNodes[0]);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Set your custom template engine for template rendering.\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @private\n */\n\n\nfunction setTemplateEngine(classObj) {\n  engineObj.compile = classObj.compile;\n}\n/**\n * Get current template engine for template rendering\n * @param  {ITemplateEngine} classObj - Class object for custom template.\n * @private\n */\n\n\nfunction getTemplateEngine() {\n  return engineObj.compile;\n} //Default Engine Class\n\n\nclass Engine {\n  compile(templateString, helper = {}, ignorePrefix) {\n    return compile$1(templateString, helper);\n  }\n\n}\n\nlet engineObj = {\n  compile: new Engine().compile\n};\nconst simpleRegex = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/;\nconst multipleSplitRegex = /(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))/g;\nconst idClassSelector = /^(\\.|#)/;\nconst selectMapper = {\n  '.': 'className',\n  '#': 'id'\n};\nconst classRegexString = '(?=.*?\\\\b{value}\\\\b)';\nconst assigner = {\n  className: 'attributes.className',\n  id: 'attributes.id',\n  tagName: 'tagName'\n};\nconst emptyElements = ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'link', 'meta', 'param', 'embed', 'command', 'keygen', 'source', 'track', 'wbr'];\nconst blockElements = ['a', 'address', 'article', 'applet', 'aside', 'audio', 'blockquote', 'button', 'canvas', 'center', 'dd', 'del', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'iframe', 'ins', 'isindex', 'li', 'map', 'menu', 'noframes', 'noscript', 'object', 'ol', 'output', 'p', 'pre', 'section', 'script', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];\nconst inlineElement = ['abbr', 'acronym', 'applet', 'b', 'basefont', 'bdo', 'big', 'br', 'button', 'cite', 'code', 'del', 'dfn', 'em', 'font', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'label', 'map', 'object', 'q', 's', 'samp', 'script', 'select', 'small', 'span', 'strike', 'strong', 'sub', 'sup', 'textarea', 'tt', 'u', 'var'];\nconst selfClosingElements = ['colgroup', 'dd', 'dt', 'li', 'options', 'p', 'td', 'tfoot', 'th', 'thead', 'tr'];\nconst fillAttrs = ['checked', 'compact', 'declare', 'defer', 'disabled', 'ismap', 'multiple', 'nohref', 'noresize', 'noshade', 'nowrap', 'readonly', 'selected'];\nconst cspElement = ['Script', 'style'];\nconst nameMapper = {\n  'tabindex': 'tabIndex'\n};\nconst startRegex = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\nconst endRegex = /^<\\/([-A-Za-z0-9_]+)[^>]*>/;\nconst attributeRegex = /([a-zA-Z_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\n/**\n * Namespace for VirtualDOM\n * @private\n */\n\nvar VirtualDOM;\n\n(function (VirtualDOM) {\n  //tslint:disable:no-any\n  function createElement(tagName, properties) {\n    let children = [];\n    let extended = extend({}, {}, properties, true);\n\n    if (!isNullOrUndefined(properties)) {\n      let keys = Object.keys(properties);\n\n      if (keys.length) {\n        if (extended.innerHTML) {\n          children = ConvertHTMLToJSon(extended.innerHTML);\n          delete extended.innerHTML;\n        }\n\n        if (extended.attrs) {\n          extend(extended, extended.attrs);\n          delete extended.attrs;\n        }\n\n        if (extended.styles) {\n          let valArr = extended.styles.split(';');\n          let vObj = {};\n\n          for (let i = 0, length = valArr.length; i < length; i++) {\n            let cVal = valArr[i];\n            let styleSplit = cVal.split(':');\n            vObj[styleSplit[0]] = styleSplit[1];\n          }\n\n          delete extended.styles;\n          extended.style = vObj;\n        }\n      }\n    }\n\n    return {\n      tagName: tagName,\n      attributes: extended || {},\n      children: children\n    };\n  }\n\n  VirtualDOM.createElement = createElement;\n\n  function assignParent(childrens, parent) {\n    if (parent && childrens) {\n      childrens.forEach(child => {\n        if (isObject(child)) {\n          if (child.parent) {\n            detach(child);\n          }\n\n          child.parent = parent;\n        }\n\n        return child;\n      });\n    }\n  }\n\n  VirtualDOM.assignParent = assignParent;\n\n  function append(fromElements, toElement) {\n    assignParent(fromElements, toElement);\n\n    if (toElement.children) {\n      toElement.children = toElement.children.concat(fromElements);\n    } else {\n      toElement.children = [].concat(fromElements);\n    }\n  }\n\n  VirtualDOM.append = append;\n\n  function prepend(child, toElement) {\n    assignParent(child, toElement);\n\n    if (!toElement.children || !toElement.children.length) {\n      toElement.children = [];\n      toElement.children.concat(child);\n    } else {\n      for (let i = child.length - 1; i >= 0; i--) {\n        toElement.children.unshift(child[i]);\n      }\n    }\n  }\n\n  VirtualDOM.prepend = prepend;\n\n  function detach(element) {\n    let parent = element.parent;\n\n    if (parent) {\n      let index = parent.children.indexOf(element);\n\n      if (index !== -1) {\n        parent.children.splice(index);\n      }\n    }\n\n    return parent;\n  }\n\n  VirtualDOM.detach = detach; //tslint:disable-next-line\n\n  function vDomSelector({\n    ele,\n    selector,\n    selectAll,\n    immediateParent\n  }) {\n    let iSelector = selector.split(' ');\n    let curColl = ele;\n\n    for (let i = 0, length = iSelector.length; i < length; i++) {\n      let isDescendant = false;\n      let parent = curColl;\n      let curSelector = iSelector[i];\n      let mapper = [];\n\n      if (simpleRegex.test(curSelector)) {\n        processSelector(curSelector, mapper);\n      } else if (curSelector.indexOf('>') === -1) {\n        let splitSelector = curSelector.match(multipleSplitRegex);\n\n        for (let curMap of splitSelector) {\n          processSelector(curMap, mapper);\n        }\n      } else if (curSelector.indexOf('>') !== -1) {\n        isDescendant = true;\n        let dSelector = curSelector.split('>'); //tslint:disable-next-line\n\n        let dParent = ele;\n        let descendent;\n        let flag = 0;\n\n        for (let sel of dSelector) {\n          if (!dParent) {\n            break;\n          }\n\n          if (dParent.length) {\n            let descendentChild = [];\n\n            for (let child of dParent) {\n              descendentChild = descendentChild.concat(vDomSelector({\n                ele: child,\n                selector: sel,\n                selectAll,\n                immediateParent: !!flag\n              }));\n            }\n\n            descendent = descendentChild;\n          } else {\n            descendent = vDomSelector({\n              ele: dParent,\n              selector: sel,\n              selectAll,\n              immediateParent: !!flag\n            });\n          }\n\n          flag++;\n          dParent = descendent;\n        }\n\n        if (descendent) {\n          curColl = descendent;\n        }\n      }\n\n      if (!isDescendant) {\n        if (parent.length) {\n          let iCurSelector = [];\n\n          for (let curParent of parent) {\n            iCurSelector = iCurSelector.concat(accessElement(curParent, mapper, selectAll, immediateParent));\n          }\n\n          curColl = iCurSelector;\n        } else {\n          curColl = accessElement(parent, mapper, selectAll, immediateParent);\n        }\n      }\n    }\n\n    if (selectAll) {\n      return curColl;\n    } else {\n      return curColl[0] || null;\n    }\n  }\n\n  VirtualDOM.vDomSelector = vDomSelector;\n\n  function processSelector(selector, mapper) {\n    let match = selector.match(idClassSelector);\n    let obj = {};\n\n    if (match) {\n      let curMapper = selectMapper[match[0]];\n\n      if (curMapper === 'className') {\n        let curObj = mapper.filter(obj => {\n          return obj.hasOwnProperty('className');\n        })[0];\n        let canPush = false;\n\n        if (!curObj) {\n          canPush = true;\n          curObj = {};\n        }\n\n        let existValue = curObj[curMapper] || '';\n        curObj[curMapper] = existValue + classRegexString.replace('{value}', selector.replace('.', ''));\n\n        if (canPush) {\n          mapper.push(curObj);\n        }\n      } else {\n        obj[curMapper] = selector.replace(match[0], '');\n        mapper.push(obj);\n      }\n    } else {\n      mapper.push({\n        tagName: selector\n      });\n    }\n  } //tslint:disable-next-line\n\n\n  function accessElement(ele, mapper, selectAll, immediateParent) {\n    if (ele.children) {\n      //tslint:disable-next-line\n      let temp = ele.children.filter(function (child) {\n        if (typeof child !== 'string') {\n          let matched = true;\n\n          for (let map of mapper) {\n            let key = Object.keys(map)[0];\n            let expected = map[key];\n            let actualValue = getValue(assigner[key], child);\n\n            if (key === 'className') {\n              if (!new RegExp('^' + expected + '.*$').test(actualValue)) {\n                matched = false;\n                break;\n              }\n            } else if (actualValue !== expected) {\n              matched = false;\n              break;\n            }\n          }\n\n          return matched;\n        } else {\n          return false;\n        }\n      });\n\n      if (!immediateParent && (!temp.length || selectAll)) {\n        ele.children.forEach(child => {\n          if (isObject(child)) {\n            temp = temp.concat(accessElement(child, mapper, selectAll));\n          }\n        });\n      }\n\n      return temp;\n    } else {\n      return [];\n    }\n  }\n\n  VirtualDOM.accessElement = accessElement;\n\n  function ConvertHTMLToJSon(htmlString) {\n    let results = [];\n    let isText;\n    let tagArray = [];\n    let nodeArray = [];\n\n    while (htmlString) {\n      isText = true;\n      let lastVal = getLastValue(tagArray);\n\n      if (!lastVal || !contains(cspElement, lastVal)) {\n        if (htmlString.indexOf('</') === 0) {\n          let match = htmlString.match(endRegex);\n\n          if (match) {\n            htmlString = htmlString.substring(match[0].length); //tslint:disable-next-line\n\n            match[0].replace(endRegex, iterateEndTag);\n          }\n\n          isText = false;\n        } else if (htmlString.indexOf('<') === 0) {\n          let match = htmlString.match(startRegex);\n\n          if (match) {\n            htmlString = htmlString.substring(match[0].length); //tslint:disable-next-line\n\n            match[0].replace(startRegex, iterateStartTag);\n          }\n\n          isText = false;\n        }\n\n        if (isText) {\n          let tagIndex = htmlString.indexOf('<');\n          let text = tagIndex < 0 ? htmlString : htmlString.substring(0, tagIndex);\n          htmlString = tagIndex < 0 ? '' : htmlString.substring(tagIndex);\n          iterateText(text);\n        }\n      } else {\n        //tslint:disable-next-line\n        htmlString = htmlString.replace(new RegExp('([\\\\s\\\\S]*?)<\\/' + getLastValue(nodeArray) + '[^>]*>'), (all, text) => {\n          text = text.replace(/<!--([\\s\\S]*?)-->|<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1$2');\n          iterateText(text);\n          return '';\n        });\n        iterateEndTag('', getLastValue(tagArray));\n      }\n    }\n\n    function iterateStartTag(start, tagName, rest) {\n      tagName = tagName.toLowerCase();\n\n      if (contains(blockElements, tagName)) {\n        while (getLastValue(tagArray) && contains(inlineElement, getLastValue(tagArray))) {\n          iterateEndTag('', getLastValue(tagArray));\n        }\n      }\n\n      if (contains(selfClosingElements, tagName) && getLastValue(tagArray)) {\n        iterateEndTag('', tagName);\n      }\n\n      let isSelfTag = contains(emptyElements, tagName);\n\n      if (!isSelfTag) {\n        tagArray.push(tagName);\n      }\n\n      let attrs = {}; //tslint:disable-next-line\n\n      rest.replace(attributeRegex, function (match, name, ...names) {\n        //tslint:disable-next-line\n        let val = names[2] ? names[2] : names[3] ? names[3] : names[4] ? names[4] : contains(fillAttrs, name) ? name : '';\n\n        if (name === 'style') {\n          let valArr = val.split(';');\n          let vObj = {};\n\n          for (let i = 0, length = valArr.length; i < length; i++) {\n            let cVal = valArr[i];\n            let styleSplit = cVal.split(':');\n            vObj[styleSplit[0]] = styleSplit[1];\n          }\n\n          val = vObj;\n        }\n\n        name = nameMapper[name] || name;\n        attrs[name] = val; //tslint:disable-next-line\n      });\n      attrs['data-id'] = getRandomId();\n      let tagObject = {\n        tagName: tagName,\n        attributes: attrs\n      };\n\n      if (isSelfTag) {\n        let parent = nodeArray[0] || results;\n\n        if (parent.children === undefined) {\n          parent.children = [];\n        }\n\n        tagObject.parent = parent;\n        parent.children.push(tagObject);\n      } else {\n        nodeArray.unshift(tagObject);\n      }\n    }\n\n    function iterateEndTag(start, tagName) {\n      let pos;\n\n      if (!tagName) {\n        pos = 0;\n      } else {\n        for (pos = tagArray.length - 1; pos >= 0; pos--) {\n          if (tagArray[pos] === tagName) {\n            break;\n          }\n        }\n      }\n\n      if (pos >= 0) {\n        for (let j = nodeArray.length - 1; j >= pos; j--) {\n          //tslint:disable-next-line\n          let node = nodeArray.shift();\n\n          if (nodeArray.length === 0) {\n            results.push(node);\n          } else {\n            let parent = nodeArray[0];\n\n            if (parent.children === undefined) {\n              parent.children = [];\n            }\n\n            node.parent = parent;\n            parent.children.push(node);\n          }\n        }\n\n        tagArray.length = pos;\n      }\n    }\n\n    function iterateText(text) {\n      if (nodeArray.length === 0) {\n        results.push(text);\n      } else {\n        let parent = nodeArray[0];\n\n        if (parent.children === undefined) {\n          parent.children = [];\n        }\n\n        parent.children.push(text);\n      }\n    }\n\n    return results;\n  }\n\n  VirtualDOM.ConvertHTMLToJSon = ConvertHTMLToJSon; //tslint:disable-next-line \n\n  function getLastValue(arr) {\n    return arr[arr.length - 1];\n  }\n\n  function contains(arr, key) {\n    return arr.indexOf(key) !== -1;\n  } //tslint:disable-next-line\n\n\n  function cloneNode(ele, deep) {\n    if (isObject(ele)) {\n      if (deep) {\n        return extend({}, {}, ele, true);\n      } else {\n        return {\n          tagName: ele.tagName,\n          attributes: ele.attributes\n        };\n      }\n    } else {\n      return ele.cloneNode(deep);\n    }\n  }\n\n  VirtualDOM.cloneNode = cloneNode;\n\n  function setStyleAttribute(element, attrs) {\n    if (element.attributes.style) {\n      element.attributes.style = extend({}, attrs);\n    } else {\n      element.attributes.style = extend(element.attributes.style, attrs);\n    }\n  }\n\n  VirtualDOM.setStyleAttribute = setStyleAttribute; //tslint:enable:no-any\n})(VirtualDOM || (VirtualDOM = {}));\n/**\n * Functions related to dom operations.\n */\n\n\nconst SVG_REG = /^svg|^path|^g/;\n/**\n * Function to create Html element.\n * @param tagName - Name of the tag, id and class names.\n * @param properties - Object to set properties in the element.\n * @param properties.id - To set the id to the created element.\n * @param properties.className - To add classes to the element.\n * @param properties.innerHTML - To set the innerHTML to element.\n * @param properties.styles - To set the some custom styles to element.\n * @param properties.attrs - To set the attributes to element.\n * @private\n */\n\nfunction createElement(tagName, properties) {\n  //tslint:disable-next-line\n  let element = SVG_REG.test(tagName) ? document.createElementNS('http://www.w3.org/2000/svg', tagName) : document.createElement(tagName);\n\n  if (typeof properties === 'undefined') {\n    return element;\n  }\n\n  element.innerHTML = properties.innerHTML ? properties.innerHTML : '';\n\n  if (properties.className !== undefined) {\n    element.className = properties.className;\n  }\n\n  if (properties.id !== undefined) {\n    element.id = properties.id;\n  }\n\n  if (properties.styles !== undefined) {\n    element.setAttribute('style', properties.styles);\n  }\n\n  if (properties.attrs !== undefined) {\n    attributes(element, properties.attrs);\n  }\n\n  return element;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to add a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\n\n\nfunction addClass(elements, classes) {\n  let classList = getClassList(classes);\n\n  for (let ele of elements) {\n    for (let className of classList) {\n      if (isObject(ele)) {\n        let curClass = getValue('attributes.className', ele);\n\n        if (isNullOrUndefined(curClass)) {\n          setValue('attributes.className', className, ele);\n        } else if (!new RegExp('\\\\b' + className + '\\\\b', 'i').test(curClass)) {\n          setValue('attributes.className', curClass + ' ' + className, ele);\n        }\n      } else {\n        if (!ele.classList.contains(className)) {\n          ele.classList.add(className);\n        }\n      }\n    }\n  }\n\n  return elements;\n}\n/**\n * The function used to add the classes to array of elements\n * @param  {Element[]|NodeList} elements - An array of elements that need to remove a list of classes\n * @param  {string|string[]} classes - String or array of string that need to add an individual element as a class\n * @private\n */\n\n\nfunction removeClass(elements, classes) {\n  let classList = getClassList(classes);\n\n  for (let ele of elements) {\n    let flag = isObject(ele);\n    let canRemove = flag ? getValue('attributes.className', ele) : ele.className !== '';\n\n    if (canRemove) {\n      for (let className of classList) {\n        /* istanbul ignore next */\n        if (flag) {\n          let classes = getValue('attributes.className', ele);\n          let classArr = classes.split(' ');\n          let index = classArr.indexOf(className);\n\n          if (index !== -1) {\n            classArr.splice(index, 1);\n          }\n\n          setValue('attributes.className', classArr.join(' '), ele);\n        } else {\n          ele.classList.remove(className);\n        }\n      }\n    }\n  }\n\n  return elements;\n}\n\nfunction getClassList(classes) {\n  let classList = [];\n\n  if (typeof classes === 'string') {\n    classList.push(classes);\n  } else {\n    classList = classes;\n  }\n\n  return classList;\n}\n/**\n * The function used to check element is visible or not.\n * @param  {Element|Node} element - An element the need to check visibility\n * @private\n */\n\n\nfunction isVisible(element) {\n  let ele = element;\n  return ele.style.visibility === '' && ele.offsetWidth > 0;\n}\n/**\n * The function used to insert an array of elements into a first of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to prepend.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\n\n\nfunction prepend(fromElements, toElement, isEval) {\n  //tslint:disable:no-any\n  if (isObject(toElement)) {\n    VirtualDOM.prepend(fromElements, toElement);\n  } else {\n    let docFrag = document.createDocumentFragment();\n\n    for (let ele of fromElements) {\n      docFrag.appendChild(ele);\n    }\n\n    toElement.insertBefore(docFrag, toElement.firstElementChild);\n\n    if (isEval) {\n      executeScript(toElement);\n    }\n  }\n\n  return fromElements;\n}\n/**\n * The function used to insert an array of elements into last of the element.\n * @param  {Element[]|NodeList} fromElements - An array of elements that need to append.\n * @param  {Element} toElement - An element that is going to prepend.\n * @private\n */\n\n\nfunction append(fromElements, toElement, isEval) {\n  if (isObject(toElement)) {\n    VirtualDOM.append(fromElements, toElement);\n  } else {\n    let docFrag = document.createDocumentFragment();\n\n    for (let ele of fromElements) {\n      docFrag.appendChild(ele);\n    }\n\n    toElement.appendChild(docFrag);\n\n    if (isEval) {\n      executeScript(toElement);\n    }\n  }\n\n  return fromElements;\n}\n/**\n * The function is used to evaluate script from Ajax request\n * @param ele - An element is going to evaluate the script\n */\n\n\nfunction executeScript(ele) {\n  let eleArray = ele.querySelectorAll('script');\n  eleArray.forEach(element => {\n    let script = document.createElement('script');\n    script.text = element.innerHTML;\n    document.head.appendChild(script);\n    detach(script);\n  });\n}\n/**\n * The function used to remove the element from the\n * @param  {Element|Node|HTMLElement} element - An element that is going to detach from the Dom\n * @private\n */\n\n\nfunction detach(element) {\n  if (isObject(element)) {\n    return VirtualDOM.detach(element);\n  } else {\n    let parentNode = element.parentNode;\n\n    if (parentNode) {\n      return parentNode.removeChild(element);\n    }\n  }\n} //tslint: enable:no-any\n\n/**\n * The function used to remove the element from Dom also clear the bounded events\n * @param  {Element|Node|HTMLElement} element - An element remove from the Dom\n * @private\n */\n\n\nfunction remove(element) {\n  if (isObject(element)) {\n    VirtualDOM.detach(element);\n  } else {\n    let parentNode = element.parentNode;\n    EventHandler.clearEvents(element);\n    parentNode.removeChild(element);\n  }\n}\n/**\n * The function helps to set multiple attributes to an element\n * @param  {Element|Node} element - An element that need to set attributes.\n * @param  {{[key:string]:string}} attributes - JSON Object that is going to as attributes.\n * @private\n */\n\n\nfunction attributes(element, attributes) {\n  let keys = Object.keys(attributes);\n  let ele = element;\n\n  for (let key of keys) {\n    /* istanbul ignore next */\n    if (isObject(ele)) {\n      let iKey = key;\n\n      if (key === 'tabindex') {\n        iKey = 'tabIndex';\n      }\n\n      ele.attributes[iKey] = attributes[key];\n    } else {\n      ele.setAttribute(key, attributes[key]);\n    }\n  }\n\n  return ele;\n}\n/**\n * The function selects the element from giving context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n//tslint:disable-next-line\n\n\nfunction select(selector, context = document, needsVDOM) {\n  if (isObject(context) && needsVDOM) {\n    //tslint:disable-next-line\n    return VirtualDOM.vDomSelector({\n      ele: context,\n      selector,\n      selectAll: false\n    });\n  } else {\n    selector = querySelectId(selector);\n    return context.querySelector(selector);\n  }\n}\n/**\n * The function selects an array of element from the given context.\n * @param  {string} selector - Selector string need fetch element from the\n * @param  {Document|Element=document} context - It is an optional type, That specifies a Dom context.\n * @private\n */\n\n\nfunction selectAll(selector, context = document, needsVDOM) {\n  if (isObject(context) && !needsVDOM) {\n    //tslint:disable-next-line\n    return VirtualDOM.vDomSelector({\n      ele: context,\n      selector,\n      selectAll: true\n    });\n  } else {\n    selector = querySelectId(selector);\n    let nodeList = context.querySelectorAll(selector);\n    return nodeList;\n  }\n}\n\nfunction querySelectId(selector) {\n  const charRegex = /(!|\"|\\$|%|&|'|\\(|\\)|\\*|\\/|:|;|<|=|\\?|@|\\]|\\^|`|{|}|\\||\\+|~)/g;\n\n  if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {\n    let idList = selector.split(',');\n\n    for (let i = 0; i < idList.length; i++) {\n      let list = idList[i].split(' ');\n\n      for (let j = 0; j < list.length; j++) {\n        if (list[j].indexOf('#') > -1) {\n          if (!list[j].match(/\\[.*\\]/)) {\n            let splitId = list[j].split('#');\n\n            if (splitId[1].match(/^\\d/) || splitId[1].match(charRegex)) {\n              let setId = list[j].split('.');\n              setId[0] = setId[0].replace(/#/, '[id=\\'') + '\\']';\n              list[j] = setId.join('.');\n            }\n          }\n        }\n      }\n\n      idList[i] = list.join(' ');\n    }\n\n    return idList.join(',');\n  }\n\n  return selector;\n}\n/**\n * Returns single closest parent element based on class selector.\n * @param  {Element} element - An element that need to find the closest element.\n * @param  {string} selector - A classSelector of closest element.\n * @private\n */\n\n\nfunction closest(element, selector) {\n  let el = element;\n\n  if (typeof el.closest === 'function') {\n    return el.closest(selector);\n  }\n  /* istanbul ignore next */\n\n\n  while (el && el.nodeType === 1) {\n    if (matches(el, selector)) {\n      return el;\n    }\n\n    el = el.parentNode;\n  }\n\n  return null;\n}\n/**\n * Returns all sibling elements of the given element.\n * @param  {Element|Node} element - An element that need to get siblings.\n * @private\n */\n\n\nfunction siblings(element) {\n  let siblings = [];\n  let childNodes = Array.prototype.slice.call(element.parentNode.childNodes);\n\n  for (let curNode of childNodes) {\n    if (curNode.nodeType === Node.ELEMENT_NODE && element !== curNode) {\n      siblings.push(curNode);\n    }\n  }\n\n  return siblings;\n}\n/**\n * set the value if not exist. Otherwise set the existing value\n * @param  {HTMLElement} element - An element to which we need to set value.\n * @param  {string} property - Property need to get or set.\n * @param  {string} value - value need to set.\n * @private\n */\n\n/* istanbul ignore next */\n\n\nfunction getAttributeOrDefault(element, property, value) {\n  let attrVal;\n  let isObj = isObject(element);\n\n  if (isObj) {\n    attrVal = getValue('attributes.' + property, element);\n  } else {\n    attrVal = element.getAttribute(property);\n  }\n\n  if (isNullOrUndefined(attrVal) && value) {\n    if (!isObj) {\n      element.setAttribute(property, value.toString());\n    } else {\n      element.attributes[property] = value;\n    }\n\n    attrVal = value;\n  }\n\n  return attrVal;\n}\n/**\n * Set the style attributes to Html element.\n * @param {HTMLElement} element - Element which we want to set attributes\n * @param {any} attrs - Set the given attributes to element\n * @return {void}\n * @private\n */\n\n\nfunction setStyleAttribute(element, attrs) {\n  if (attrs !== undefined) {\n    if (isObject(element)) {\n      // tslint:disable-next-line:no-any\n      VirtualDOM.setStyleAttribute(element, attrs);\n    } else {\n      Object.keys(attrs).forEach(key => {\n        // tslint:disable-next-line:no-any\n        element.style[key] = attrs[key];\n      });\n    }\n  }\n}\n/**\n * Method for add and remove classes to a dom element.\n * @param {Element} element - Element for add and remove classes\n * @param {string[]} addClasses - List of classes need to be add to the element\n * @param {string[]} removeClasses - List of classes need to be remove from the element\n * @return {void}\n * @private\n */\n\n\nfunction classList(element, addClasses, removeClasses) {\n  addClass([element], addClasses);\n  removeClass([element], removeClasses);\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {Element} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {void}\n * @private\n */\n\n\nfunction matches(element, selector) {\n  //tslint:disable-next-line\n  let matches = element.matches || element.msMatchesSelector || element.webkitMatchesSelector;\n\n  if (matches) {\n    return matches.call(element, selector);\n  } else {\n    return [].indexOf.call(document.querySelectorAll(selector), element) !== -1;\n  }\n}\n/* istanbul ignore next */\n\n\nfunction includeInnerHTML(ele, innerHTML) {\n  if (isObject(ele)) {\n    if (innerHTML === '') {\n      ele.children = [];\n    } else {\n      let res = VirtualDOM.ConvertHTMLToJSon(innerHTML);\n\n      if (res.length) {\n        VirtualDOM.assignParent(res, ele);\n        ele.children = res;\n      }\n    }\n  } else {\n    ele.innerHTML = innerHTML;\n  }\n}\n/* istanbul ignore next */\n//tslint:disable-next-line\n\n\nfunction containsClass(ele, className) {\n  if (isObject(ele)) {\n    // tslint:disable-next-line:no-any\n    return new RegExp('\\\\b' + className + '\\\\b', 'i').test(ele.attributes.className);\n  } else {\n    return ele.classList.contains(className);\n  }\n}\n/**\n * Method to check whether the element matches the given selector.\n * @param {} element - Element to compare with the selector.\n * @param {string} selector - String selector which element will satisfy.\n * @return {Element | VirtualObject}\n * @private\n */\n\n/* istanbul ignore next */\n//tslint:disable:no-any\n\n\nfunction cloneNode(element, deep) {\n  if (isObject(element)) {\n    if (deep) {\n      return extend({}, {}, element, true);\n    } else {\n      return {\n        tagName: element.tagName,\n        attributes: element.attributes\n      };\n    }\n  } else {\n    return element.cloneNode(deep);\n  }\n}\n\nconst isColEName = new RegExp('\\]');\n/* tslint:enable:no-any */\n\n/**\n * Base library module is common module for Framework modules like touch,keyboard and etc.,\n * @private\n */\n\nclass Base {\n  /**\n   * Base constructor accept options and element\n   */\n  constructor(options, element) {\n    this.isRendered = false;\n    this.isComplexArraySetter = false;\n    this.isServerRendered = false;\n    this.allowServerDataBinding = true;\n    this.isProtectedOnChange = true;\n    this.properties = {};\n    this.changedProperties = {};\n    this.oldProperties = {};\n    this.bulkChanges = {};\n    this.refreshing = false;\n    this.ignoreCollectionWatch = false; // tslint:disable-next-line:no-empty\n\n    this.finalUpdate = () => {};\n\n    this.childChangedProperties = {};\n    this.modelObserver = new Observer(this);\n\n    if (!isUndefined(element)) {\n      if ('string' === typeof element) {\n        this.element = document.querySelector(element);\n      } else {\n        this.element = element;\n      }\n\n      if (!isNullOrUndefined(this.element)) {\n        this.isProtectedOnChange = false;\n        this.addInstance();\n      }\n    }\n\n    if (!isUndefined(options)) {\n      this.setProperties(options, true);\n    }\n\n    this.isDestroyed = false;\n  }\n  /** Property base section */\n\n  /**\n   * Function used to set bunch of property at a time.\n   * @private\n   * @param  {Object} prop - JSON object which holds components properties.\n   * @param  {boolean} muteOnChange? - Specifies to true when we set properties.\n   */\n\n\n  setProperties(prop, muteOnChange) {\n    let prevDetection = this.isProtectedOnChange;\n    this.isProtectedOnChange = !!muteOnChange;\n    merge(this, prop);\n\n    if (muteOnChange !== true) {\n      merge(this.changedProperties, prop);\n      this.dataBind();\n    } else if (isBlazor() && this.isRendered) {\n      this.serverDataBind(prop);\n    }\n\n    this.finalUpdate();\n    this.changedProperties = {};\n    this.oldProperties = {};\n    this.isProtectedOnChange = prevDetection;\n  }\n\n  /**\n   * Calls for child element data bind\n   * @param {Object} obj\n   * @param {Object} parent\n   * @returns {void}\n   */\n  // tslint:disable-next-line:no-any\n  static callChildDataBind(obj, parent) {\n    let keys = Object.keys(obj);\n\n    for (let key of keys) {\n      if (parent[key] instanceof Array) {\n        for (let obj of parent[key]) {\n          if (obj.dataBind !== undefined) {\n            obj.dataBind();\n          }\n        }\n      } else {\n        parent[key].dataBind();\n      }\n    }\n  }\n\n  clearChanges() {\n    this.finalUpdate();\n    this.changedProperties = {};\n    this.oldProperties = {};\n    this.childChangedProperties = {};\n  }\n  /**\n   * Bind property changes immediately to components\n   */\n\n\n  dataBind() {\n    Base.callChildDataBind(this.childChangedProperties, this);\n\n    if (Object.getOwnPropertyNames(this.changedProperties).length) {\n      let prevDetection = this.isProtectedOnChange;\n      let newChanges = this.changedProperties;\n      let oldChanges = this.oldProperties;\n      this.clearChanges();\n      this.isProtectedOnChange = true;\n      this.onPropertyChanged(newChanges, oldChanges);\n      this.isProtectedOnChange = prevDetection;\n    }\n  }\n\n  /* tslint:disable:no-any */\n  serverDataBind(newChanges) {\n    if (!isBlazor()) {\n      return;\n    }\n\n    newChanges = newChanges ? newChanges : {};\n    extend(this.bulkChanges, {}, newChanges, true);\n    let sfBlazor = 'sfBlazor';\n\n    if (this.allowServerDataBinding && window[sfBlazor].updateModel) {\n      window[sfBlazor].updateModel(this);\n      this.bulkChanges = {};\n    }\n  }\n  /* tslint:enable:no-any */\n\n\n  saveChanges(key, newValue, oldValue) {\n    if (isBlazor()) {\n      // tslint:disable-next-line:no-any\n      let newChanges = {};\n      newChanges[key] = newValue;\n      this.serverDataBind(newChanges);\n    }\n\n    if (this.isProtectedOnChange) {\n      return;\n    }\n\n    this.oldProperties[key] = oldValue;\n    this.changedProperties[key] = newValue;\n    this.finalUpdate();\n    this.finalUpdate = setImmediate(this.dataBind.bind(this));\n  }\n\n  /** Event Base Section */\n\n  /**\n   * Adds the handler to the given event listener.\n   * @param {string} eventName - A String that specifies the name of the event\n   * @param {Function} listener - Specifies the call to run when the event occurs.\n   * @return {void}\n   */\n  addEventListener(eventName, handler) {\n    this.modelObserver.on(eventName, handler);\n  }\n  /**\n   * Removes the handler from the given event listener.\n   * @param {string} eventName - A String that specifies the name of the event to remove\n   * @param {Function} listener - Specifies the function to remove\n   * @return {void}\n   */\n\n\n  removeEventListener(eventName, handler) {\n    this.modelObserver.off(eventName, handler);\n  }\n  /**\n   * Triggers the handlers in the specified event.\n   * @private\n   * @param {string} eventName - Specifies the event to trigger for the specified component properties.\n   * Can be a custom event, or any of the standard events.\n   * @param {Event} eventProp - Additional parameters to pass on to the event properties\n   * @param {Function} successHandler - this function will invoke after event successfully triggered\n   * @param {Function} errorHandler - this function will invoke after event if it failured to call.\n   * @return {void}\n   */\n\n\n  trigger(eventName, eventProp, successHandler, errorHandler) {\n    if (this.isDestroyed !== true) {\n      let prevDetection = this.isProtectedOnChange;\n      this.isProtectedOnChange = false;\n      let data = this.modelObserver.notify(eventName, eventProp, successHandler, errorHandler);\n\n      if (isColEName.test(eventName)) {\n        let handler = getValue(eventName, this);\n\n        if (handler) {\n          let blazor = 'Blazor';\n\n          if (window[blazor]) {\n            let promise = handler.call(this, eventProp);\n\n            if (promise && typeof promise.then === 'function') {\n              if (!successHandler) {\n                data = promise;\n              } else {\n                promise.then(data => {\n                  if (successHandler) {\n                    data = typeof data === 'string' && this.modelObserver.isJson(data) ? JSON.parse(data) : data;\n                    successHandler.call(this, data);\n                  }\n                }).catch(data => {\n                  if (errorHandler) {\n                    data = typeof data === 'string' && this.modelObserver.isJson(data) ? JSON.parse(data) : data;\n                    errorHandler.call(this, data);\n                  }\n                });\n              }\n            } else if (successHandler) {\n              successHandler.call(this, eventProp);\n            }\n          } else {\n            handler.call(this, eventProp);\n\n            if (successHandler) {\n              successHandler.call(this, eventProp);\n            }\n          }\n        } else if (successHandler) {\n          successHandler.call(this, eventProp);\n        }\n      }\n\n      this.isProtectedOnChange = prevDetection;\n      return data;\n    }\n  }\n  /**\n   * To maintain instance in base class\n   */\n\n\n  addInstance() {\n    // Add module class to the root element\n    let moduleClass = 'e-' + this.getModuleName().toLowerCase();\n    addClass([this.element], ['e-lib', moduleClass]);\n\n    if (!isNullOrUndefined(this.element.ej2_instances)) {\n      this.element.ej2_instances.push(this);\n    } else {\n      setValue('ej2_instances', [this], this.element);\n    }\n  }\n  /**\n   * To remove the instance from the element\n   */\n\n\n  destroy() {\n    this.element.ej2_instances = this.element.ej2_instances.filter(i => {\n      return i !== this;\n    });\n    removeClass([this.element], ['e-' + this.getModuleName()]);\n\n    if (this.element.ej2_instances.length === 0) {\n      // Remove module class from the root element\n      removeClass([this.element], ['e-lib']);\n    }\n\n    this.clearChanges();\n    this.modelObserver.destroy();\n    this.isDestroyed = true;\n  }\n\n}\n/**\n * Global function to get the component instance from the rendered element.\n * @param elem Specifies the HTMLElement or element id string.\n * @param comp Specifies the component module name or Component.\n */\n// tslint:disable-next-line:no-any\n\n\nfunction getComponent(elem, comp) {\n  let instance;\n  let i;\n  let ele = typeof elem === 'string' ? document.getElementById(elem) : elem;\n\n  for (i = 0; i < ele.ej2_instances.length; i++) {\n    instance = ele.ej2_instances[i];\n\n    if (typeof comp === 'string') {\n      let compName = instance.getModuleName();\n\n      if (comp === compName) {\n        return instance;\n      }\n    } else {\n      // tslint:disable-next-line:no-any\n      if (instance instanceof comp) {\n        return instance;\n      }\n    }\n  }\n\n  return undefined;\n}\n/**\n * Function to remove the child instances.\n * @return {void}\n * @private\n */\n// tslint:disable-next-line:no-any\n\n\nfunction removeChildInstance(element) {\n  // tslint:disable-next-line:no-any\n  let childEle = [].slice.call(element.getElementsByClassName('e-control'));\n\n  for (let i = 0; i < childEle.length; i++) {\n    let compName = childEle[i].classList[1].split('e-')[1]; // tslint:disable-next-line:no-any\n\n    let compInstance = getComponent(childEle[i], compName);\n\n    if (!isUndefined(compInstance)) {\n      compInstance.destroy();\n    }\n  }\n}\n/**\n * Returns the Class Object\n * @param {ClassObject} instance - instance of ClassObject\n * @param {string} curKey - key of the current instance\n * @param {Object} defaultValue - default Value\n * @param {Object[]} type\n */\n\n\nfunction getObject(instance, curKey, defaultValue, type) {\n  if (!instance.properties.hasOwnProperty(curKey) || !(instance.properties[curKey] instanceof type)) {\n    instance.properties[curKey] = createInstance(type, [instance, curKey, defaultValue]);\n  }\n\n  return instance.properties[curKey];\n}\n/**\n * Returns object array\n * @param {ClassObject} instance\n * @param {string} curKey\n * @param {Object[]} defaultValue\n * @param type\n * @param {boolean} isSetter\n * @returns {Object[]}\n */\n\n\nfunction getObjectArray(instance, curKey, defaultValue, type, isSetter, isFactory) {\n  let result = [];\n  let len = defaultValue ? defaultValue.length : 0;\n\n  for (let i = 0; i < len; i++) {\n    let curType = type;\n\n    if (isFactory) {\n      curType = type(defaultValue[i], instance);\n    }\n\n    if (isSetter) {\n      let inst = createInstance(curType, [instance, curKey, {}, true]);\n      inst.setProperties(defaultValue[i], true);\n      result.push(inst);\n    } else {\n      result.push(createInstance(curType, [instance, curKey, defaultValue[i], false]));\n    }\n  }\n\n  return result;\n}\n/**\n * Returns the properties of the object\n * @param {Object} defaultValue\n * @param {string} curKey\n */\n\n\nfunction propertyGetter(defaultValue, curKey) {\n  return function () {\n    if (!this.properties.hasOwnProperty(curKey)) {\n      this.properties[curKey] = defaultValue;\n    }\n\n    return this.properties[curKey];\n  };\n}\n/**\n * Set the properties for the object\n * @param {Object} defaultValue\n * @param {string} curKey\n */\n\n\nfunction propertySetter(defaultValue, curKey) {\n  return function (newValue) {\n    if (this.properties[curKey] !== newValue) {\n      let oldVal = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;\n      this.saveChanges(curKey, newValue, oldVal);\n      this.properties[curKey] = newValue;\n    }\n  };\n}\n/**\n * Returns complex objects\n */\n\n\nfunction complexGetter(defaultValue, curKey, type) {\n  return function () {\n    return getObject(this, curKey, defaultValue, type);\n  };\n}\n/**\n * Sets complex objects\n */\n\n\nfunction complexSetter(defaultValue, curKey, type) {\n  return function (newValue) {\n    getObject(this, curKey, defaultValue, type).setProperties(newValue);\n  };\n}\n\nfunction complexFactoryGetter(defaultValue, curKey, type) {\n  return function () {\n    let curType = type({});\n\n    if (this.properties.hasOwnProperty(curKey)) {\n      return this.properties[curKey];\n    } else {\n      return getObject(this, curKey, defaultValue, curType);\n    }\n  };\n}\n\nfunction complexFactorySetter(defaultValue, curKey, type) {\n  return function (newValue) {\n    let curType = type(newValue, this);\n    getObject(this, curKey, defaultValue, curType).setProperties(newValue);\n  };\n}\n\nfunction complexArrayGetter(defaultValue, curKey, type) {\n  return function () {\n    if (!this.properties.hasOwnProperty(curKey)) {\n      let defCollection = getObjectArray(this, curKey, defaultValue, type, false);\n      this.properties[curKey] = defCollection;\n    }\n\n    let ignore = this.controlParent !== undefined && this.controlParent.ignoreCollectionWatch || this.ignoreCollectionWatch;\n\n    if (!this.properties[curKey].hasOwnProperty('push') && !ignore) {\n      ['push', 'pop'].forEach(extendFunc => {\n        let descriptor = {\n          value: complexArrayDefinedCallback(extendFunc, curKey, type, this.properties[curKey]).bind(this),\n          configurable: true\n        };\n        Object.defineProperty(this.properties[curKey], extendFunc, descriptor);\n      });\n    }\n\n    if (!this.properties[curKey].hasOwnProperty('isComplexArray')) {\n      Object.defineProperty(this.properties[curKey], 'isComplexArray', {\n        value: true\n      });\n    }\n\n    return this.properties[curKey];\n  };\n}\n\nfunction complexArraySetter(defaultValue, curKey, type) {\n  return function (newValue) {\n    this.isComplexArraySetter = true;\n    let oldValueCollection = getObjectArray(this, curKey, defaultValue, type, false);\n    let newValCollection = getObjectArray(this, curKey, newValue, type, true);\n    this.isComplexArraySetter = false;\n    this.saveChanges(curKey, newValCollection, oldValueCollection);\n    this.properties[curKey] = newValCollection;\n  };\n}\n\nfunction complexArrayFactorySetter(defaultValue, curKey, type) {\n  return function (newValue) {\n    let oldValueCollection = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;\n    let newValCollection = getObjectArray(this, curKey, newValue, type, true, true);\n    this.saveChanges(curKey, newValCollection, oldValueCollection);\n    this.properties[curKey] = newValCollection;\n  };\n}\n\nfunction complexArrayFactoryGetter(defaultValue, curKey, type) {\n  return function () {\n    let curType = type({});\n\n    if (!this.properties.hasOwnProperty(curKey)) {\n      let defCollection = getObjectArray(this, curKey, defaultValue, curType, false);\n      this.properties[curKey] = defCollection;\n    }\n\n    return this.properties[curKey];\n  };\n}\n\nfunction complexArrayDefinedCallback(dFunc, curKey, type, prop) {\n  /* tslint:disable no-function-expression */\n  return function (...newValue) {\n    let keyString = this.propName ? this.getParentKey() + '.' + curKey + '-' : curKey + '-';\n\n    switch (dFunc) {\n      case 'push':\n        for (let i = 0; i < newValue.length; i++) {\n          Array.prototype[dFunc].apply(prop, [newValue[i]]);\n          let model = getArrayModel(keyString + (prop.length - 1), newValue[i], !this.controlParent, dFunc);\n          this.serverDataBind(model, newValue[i], false, dFunc);\n        }\n\n        break;\n\n      case 'pop':\n        Array.prototype[dFunc].apply(prop);\n        let model = getArrayModel(keyString + prop.length, null, !this.controlParent, dFunc);\n        this.serverDataBind(model, {\n          ejsAction: 'pop'\n        }, false, dFunc);\n        break;\n    }\n\n    return prop;\n  };\n  /* tslint:enable no-function-expression */\n}\n\nfunction getArrayModel(keyString, value, isControlParent, arrayFunction) {\n  let modelObject = keyString;\n\n  if (isControlParent) {\n    modelObject = {};\n    modelObject[keyString] = value;\n\n    if (value && typeof value === 'object') {\n      let action = 'ejsAction';\n      modelObject[keyString][action] = arrayFunction;\n    }\n  }\n\n  return modelObject;\n}\n/**\n * Method used to create property. General syntax below.\n * @param  {T} defaultValue? - Specifies the default value of property.\n * ```\n * @Property('TypeScript')\n * propertyName: Type;\n * ```\n * @private\n */\n\n\nfunction Property(defaultValue) {\n  return (target, key) => {\n    let propertyDescriptor = {\n      set: propertySetter(defaultValue, key),\n      get: propertyGetter(defaultValue, key),\n      enumerable: true,\n      configurable: true\n    }; //new property creation\n\n    Object.defineProperty(target, key, propertyDescriptor);\n    addPropertyCollection(target, key, 'prop', defaultValue);\n  };\n}\n/**\n * Method used to create complex property. General syntax below.\n * @param  {T} defaultValue - Specifies the default value of property.\n * @param  {Function} type - Specifies the class type of complex object.\n * ```\n * @Complex<Type>({},Type)\n * propertyName: Type;\n * ```\n * @private\n */\n\n\nfunction Complex(defaultValue, type) {\n  return (target, key) => {\n    let propertyDescriptor = {\n      set: complexSetter(defaultValue, key, type),\n      get: complexGetter(defaultValue, key, type),\n      enumerable: true,\n      configurable: true\n    }; //new property creation\n\n    Object.defineProperty(target, key, propertyDescriptor);\n    addPropertyCollection(target, key, 'complexProp', defaultValue, type);\n  };\n}\n/**\n * Method used to create complex Factory property. General syntax below.\n * @param  {Function} defaultType - Specifies the default value of property.\n * @param  {Function} type - Specifies the class factory type of complex object.\n * ```\n * @ComplexFactory(defaultType, factoryFunction)\n * propertyName: Type1 | Type2;\n * ```\n * @private\n */\n\n\nfunction ComplexFactory(type) {\n  return (target, key) => {\n    let propertyDescriptor = {\n      set: complexFactorySetter({}, key, type),\n      get: complexFactoryGetter({}, key, type),\n      enumerable: true,\n      configurable: true\n    }; //new property creation\n\n    Object.defineProperty(target, key, propertyDescriptor);\n    addPropertyCollection(target, key, 'complexProp', {}, type);\n  };\n}\n/**\n * Method used to create complex array property. General syntax below.\n * @param  {T[]} defaultValue - Specifies the default value of property.\n * @param  {Function} type - Specifies the class type of complex object.\n * ```\n * @Collection([], Type);\n * propertyName: Type;\n * ```\n * @private\n */\n\n\nfunction Collection(defaultValue, type) {\n  return (target, key) => {\n    let propertyDescriptor = {\n      set: complexArraySetter(defaultValue, key, type),\n      get: complexArrayGetter(defaultValue, key, type),\n      enumerable: true,\n      configurable: true\n    }; //new property creation\n\n    Object.defineProperty(target, key, propertyDescriptor);\n    addPropertyCollection(target, key, 'colProp', defaultValue, type);\n  };\n}\n/**\n * Method used to create complex factory array property. General syntax below.\n * @param  {T[]} defaultType - Specifies the default type of property.\n * @param  {Function} type - Specifies the class type of complex object.\n * ```\n * @Collection([], Type);\n * propertyName: Type;\n * ```\n * @private\n */\n\n\nfunction CollectionFactory(type) {\n  return (target, key) => {\n    let propertyDescriptor = {\n      set: complexArrayFactorySetter([], key, type),\n      get: complexArrayFactoryGetter([], key, type),\n      enumerable: true,\n      configurable: true\n    }; //new property creation\n\n    Object.defineProperty(target, key, propertyDescriptor);\n    addPropertyCollection(target, key, 'colProp', {}, type);\n  };\n}\n/**\n * Method used to create event property. General syntax below.\n * @param  {Function} defaultValue? - Specifies the default value of property.\n * @param  {boolean} isComplex? - Specifies the whether it is complex object.\n * ```\n * @Event(()=>{return true;})\n * ```\n * @private\n */\n\n\nfunction Event$1() {\n  return (target, key) => {\n    let eventDescriptor = {\n      set: function (newValue) {\n        let oldValue = this.properties[key];\n\n        if (oldValue !== newValue) {\n          let finalContext = getParentContext(this, key);\n\n          if (isUndefined(oldValue) === false) {\n            finalContext.context.removeEventListener(finalContext.prefix, oldValue);\n          }\n\n          finalContext.context.addEventListener(finalContext.prefix, newValue);\n          this.properties[key] = newValue;\n        }\n      },\n      get: propertyGetter(undefined, key),\n      enumerable: true,\n      configurable: true\n    };\n    Object.defineProperty(target, key, eventDescriptor);\n    addPropertyCollection(target, key, 'event');\n  };\n}\n/**\n * NotifyPropertyChanges is triggers the call back when the property has been changed.\n *\n * ```\n *  @NotifyPropertyChanges\n * class DemoClass implements INotifyPropertyChanged {\n *\n *     @Property()\n *     property1: string;\n *\n *     dataBind: () => void;\n *\n *     constructor() { }\n *\n *     onPropertyChanged(newProp: any, oldProp: any) {\n *         // Called when property changed\n *     }\n * }\n * ```\n * @private\n */\n\n\nfunction NotifyPropertyChanges(classConstructor) {\n  /** Need to code */\n}\n/**\n * Method  used to create the builderObject for the target component.\n * @private\n */\n\n\nfunction addPropertyCollection(target, key, propertyType, defaultValue, type) {\n  if (isUndefined(target.propList)) {\n    target.propList = {\n      props: [],\n      complexProps: [],\n      colProps: [],\n      events: [],\n      propNames: [],\n      complexPropNames: [],\n      colPropNames: [],\n      eventNames: []\n    };\n  }\n  /* tslint:disable no-any */\n\n\n  target.propList[propertyType + 's'].push({\n    propertyName: key,\n    defaultValue: defaultValue,\n    type: type\n  });\n  target.propList[propertyType + 'Names'].push(key);\n  /* tslint:enable no-any */\n}\n/**\n * Returns an object containing the builder properties\n * @param {Function} component\n * @private\n */\n\n\nfunction getBuilderProperties(component) {\n  if (isUndefined(component.prototype.builderObject)) {\n    component.prototype.builderObject = {\n      properties: {},\n      propCollections: [],\n      add: function () {\n        this.isPropertyArray = true;\n        this.propCollections.push(extend({}, this.properties, {}));\n      }\n    };\n    let rex = /complex/;\n\n    for (let key of Object.keys(component.prototype.propList)) {\n      for (let prop of component.prototype.propList[key]) {\n        if (rex.test(key)) {\n          component.prototype.builderObject[prop.propertyName] = function (value) {\n            let childType = {};\n            merge(childType, getBuilderProperties(prop.type));\n            value(childType);\n            let tempValue;\n\n            if (!childType.isPropertyArray) {\n              tempValue = extend({}, childType.properties, {});\n            } else {\n              tempValue = childType.propCollections;\n            }\n\n            this.properties[prop.propertyName] = tempValue;\n            childType.properties = {};\n            childType.propCollections = [];\n            childType.isPropertyArray = false;\n            return this;\n          };\n        } else {\n          component.prototype.builderObject[prop.propertyName] = function (value) {\n            this.properties[prop.propertyName] = value;\n            return this;\n          };\n        }\n      }\n    }\n  }\n\n  return component.prototype.builderObject;\n}\n/**\n * Method used to create builder for the components\n * @param {any} component -specifies the target component for which builder to be created.\n * @private\n */\n\n\nfunction CreateBuilder(component) {\n  let builderFunction = function (element) {\n    this.element = element;\n    return this;\n  };\n\n  let instanceFunction = element => {\n    if (!builderFunction.prototype.hasOwnProperty('create')) {\n      builderFunction.prototype = getBuilderProperties(component);\n\n      builderFunction.prototype.create = function () {\n        let temp = extend({}, {}, this.properties);\n        this.properties = {};\n        return new component(temp, this.element);\n      };\n    }\n\n    return new builderFunction(element);\n  };\n\n  return instanceFunction;\n}\n/**\n * Returns parent options for the object\n * @param {Object} context\n * @param {string} prefix\n * @private\n */\n\n\nfunction getParentContext(context, prefix) {\n  if (context.hasOwnProperty('parentObj') === false) {\n    return {\n      context: context,\n      prefix: prefix\n    };\n  } else {\n    let curText = getValue('propName', context);\n\n    if (curText) {\n      prefix = curText + '-' + prefix;\n    }\n\n    return getParentContext(getValue('parentObj', context), prefix);\n  }\n}\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Animation_1;\n/**\n * The Animation framework provide options to animate the html DOM elements\n * ```typescript\n *   let animeObject = new Animation({\n *      name: 'SlideLeftIn',\n *      duration: 1000\n *   });\n *   animeObject.animate('#anime1');\n *   animeObject.animate('#anime2', { duration: 500 });\n * ```\n */\n\nlet Animation = Animation_1 = class Animation extends Base {\n  constructor(options) {\n    super(options, undefined);\n    /**\n     * @private\n     */\n\n    this.easing = {\n      ease: 'cubic-bezier(0.250, 0.100, 0.250, 1.000)',\n      linear: 'cubic-bezier(0.250, 0.250, 0.750, 0.750)',\n      easeIn: 'cubic-bezier(0.420, 0.000, 1.000, 1.000)',\n      easeOut: 'cubic-bezier(0.000, 0.000, 0.580, 1.000)',\n      easeInOut: 'cubic-bezier(0.420, 0.000, 0.580, 1.000)',\n      elasticInOut: 'cubic-bezier(0.5,-0.58,0.38,1.81)',\n      elasticIn: 'cubic-bezier(0.17,0.67,0.59,1.81)',\n      elasticOut: 'cubic-bezier(0.7,-0.75,0.99,1.01)'\n    };\n  }\n  /**\n   * Applies animation to the current element.\n   * @param {string | HTMLElement} element - Element which needs to be animated.\n   * @param {AnimationModel} options - Overriding default animation settings.\n   * @return {void}\n   */\n\n\n  animate(element, options) {\n    options = !options ? {} : options;\n    let model = this.getModel(options);\n\n    if (typeof element === 'string') {\n      let elements = Array.prototype.slice.call(selectAll(element, document));\n\n      for (let element of elements) {\n        model.element = element;\n        Animation_1.delayAnimation(model);\n      }\n    } else {\n      model.element = element;\n      Animation_1.delayAnimation(model);\n    }\n  }\n  /**\n   * Stop the animation effect on animated element.\n   * @param {HTMLElement} element - Element which needs to be stop the animation.\n   * @param {AnimationOptions} model - Handling the animation model at stop function.\n   * @return {void}\n   */\n\n\n  static stop(element, model) {\n    element.style.animation = '';\n    element.removeAttribute('e-animate');\n    let animationId = element.getAttribute('e-animation-id');\n\n    if (animationId) {\n      let frameId = parseInt(animationId, 10);\n      cancelAnimationFrame(frameId);\n      element.removeAttribute('e-animation-id');\n    }\n\n    if (model && model.end) {\n      model.end.call(this, model);\n    }\n  }\n  /**\n   * Set delay to animation element\n   * @param {AnimationModel} model\n   * @returns {void}\n   */\n\n\n  static delayAnimation(model) {\n    if (model.delay) {\n      setTimeout(() => {\n        Animation_1.applyAnimation(model);\n      }, model.delay);\n    } else {\n      Animation_1.applyAnimation(model);\n    }\n  }\n  /**\n   * Triggers animation\n   * @param {AnimationModel} model\n   * @returns {void}\n   */\n\n\n  static applyAnimation(model) {\n    model.timeStamp = 0;\n    let step = 0;\n    let timerId = 0;\n    let startTime = 0;\n    let prevTimeStamp = 0;\n    let duration = model.duration;\n    model.element.setAttribute('e-animate', 'true');\n\n    let startAnimation = timeStamp => {\n      try {\n        if (timeStamp) {\n          // let step: number = model.timeStamp = timeStamp - startTime;\n\n          /** phantomjs workaround for timestamp fix */\n          prevTimeStamp = prevTimeStamp === 0 ? timeStamp : prevTimeStamp;\n          model.timeStamp = timeStamp + model.timeStamp - prevTimeStamp;\n          prevTimeStamp = timeStamp;\n          /** phantomjs workaround end */\n          // trigger animation begin event\n\n          if (!step && model.begin) {\n            model.begin.call(this, model);\n          }\n\n          step = step + 1;\n          let avg = model.timeStamp / step;\n\n          if (model.timeStamp < duration && model.timeStamp + avg < duration && model.element.getAttribute('e-animate')) {\n            // apply animation effect to the current element                \n            model.element.style.animation = model.name + ' ' + model.duration + 'ms ' + model.timingFunction;\n\n            if (model.progress) {\n              model.progress.call(this, model);\n            } // repeat requestAnimationFrame \n\n\n            requestAnimationFrame(startAnimation);\n          } else {\n            // clear requestAnimationFrame\n            cancelAnimationFrame(timerId);\n            model.element.removeAttribute('e-animation-id');\n            model.element.removeAttribute('e-animate');\n            model.element.style.animation = '';\n\n            if (model.end) {\n              model.end.call(this, model);\n            }\n          }\n        } else {\n          startTime = performance.now(); // set initial requestAnimationFrame\n\n          timerId = requestAnimationFrame(startAnimation);\n          model.element.setAttribute('e-animation-id', timerId.toString());\n        }\n      } catch (e) {\n        cancelAnimationFrame(timerId);\n        model.element.removeAttribute('e-animation-id');\n\n        if (model.fail) {\n          model.fail.call(this, e);\n        }\n      }\n    };\n\n    startAnimation();\n  }\n  /**\n   * Returns Animation Model\n   * @param {AnimationModel} options\n   * @returns {AnimationModel}\n   */\n\n\n  getModel(options) {\n    return {\n      name: options.name || this.name,\n      delay: options.delay || this.delay,\n      duration: options.duration !== undefined ? options.duration : this.duration,\n      begin: options.begin || this.begin,\n      end: options.end || this.end,\n      fail: options.fail || this.fail,\n      progress: options.progress || this.progress,\n      timingFunction: this.easing[options.timingFunction] ? this.easing[options.timingFunction] : options.timingFunction || this.easing[this.timingFunction]\n    };\n  }\n  /**\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {// no code needed\n  }\n  /**\n   * Returns module name as animation\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'animation';\n  }\n  /**\n   * @private\n   */\n\n\n  destroy() {//Override base destroy;\n  }\n\n};\n\n__decorate([Property('FadeIn')], Animation.prototype, \"name\", void 0);\n\n__decorate([Property(400)], Animation.prototype, \"duration\", void 0);\n\n__decorate([Property('ease')], Animation.prototype, \"timingFunction\", void 0);\n\n__decorate([Property(0)], Animation.prototype, \"delay\", void 0);\n\n__decorate([Event$1()], Animation.prototype, \"progress\", void 0);\n\n__decorate([Event$1()], Animation.prototype, \"begin\", void 0);\n\n__decorate([Event$1()], Animation.prototype, \"end\", void 0);\n\n__decorate([Event$1()], Animation.prototype, \"fail\", void 0);\n\nAnimation = Animation_1 = __decorate([NotifyPropertyChanges], Animation);\n/**\n * Ripple provides material theme's wave effect when an element is clicked\n * ```html\n * <div id='ripple'></div>\n * <script>\n *   rippleEffect(document.getElementById('ripple'));\n * </script>\n * ```\n * @private\n * @param HTMLElement element - Target element\n * @param RippleOptions rippleOptions - Ripple options .\n */\n\nfunction rippleEffect(element, rippleOptions, done) {\n  let rippleModel = getRippleModel(rippleOptions);\n\n  if (rippleModel.rippleFlag === false || rippleModel.rippleFlag === undefined && !isRippleEnabled) {\n    return () => {};\n  }\n\n  element.setAttribute('data-ripple', 'true');\n  EventHandler.add(element, 'mousedown', rippleHandler, {\n    parent: element,\n    rippleOptions: rippleModel\n  });\n  EventHandler.add(element, 'mouseup', rippleUpHandler, {\n    parent: element,\n    rippleOptions: rippleModel,\n    done: done\n  });\n  EventHandler.add(element, 'mouseleave', rippleLeaveHandler, {\n    parent: element,\n    rippleOptions: rippleModel\n  });\n\n  if (Browser.isPointer) {\n    EventHandler.add(element, 'transitionend', rippleLeaveHandler, {\n      parent: element,\n      rippleOptions: rippleModel\n    });\n  }\n\n  return () => {\n    element.removeAttribute('data-ripple');\n    EventHandler.remove(element, 'mousedown', rippleHandler);\n    EventHandler.remove(element, 'mouseup', rippleUpHandler);\n    EventHandler.remove(element, 'mouseleave', rippleLeaveHandler);\n    EventHandler.remove(element, 'transitionend', rippleLeaveHandler);\n  };\n}\n\nfunction getRippleModel(rippleOptions) {\n  let rippleModel = {\n    selector: rippleOptions && rippleOptions.selector ? rippleOptions.selector : null,\n    ignore: rippleOptions && rippleOptions.ignore ? rippleOptions.ignore : null,\n    rippleFlag: rippleOptions && rippleOptions.rippleFlag,\n    isCenterRipple: rippleOptions && rippleOptions.isCenterRipple,\n    duration: rippleOptions && rippleOptions.duration ? rippleOptions.duration : 350\n  };\n  return rippleModel;\n}\n/**\n * Handler for ripple event\n * @param {MouseEvent} e\n * @returns {void}\n * @private\n */\n\n\nfunction rippleHandler(e) {\n  let target = e.target;\n  let selector = this.rippleOptions.selector;\n  let element = selector ? closest(target, selector) : target;\n\n  if (!element || this.rippleOptions && closest(target, this.rippleOptions.ignore)) {\n    return;\n  }\n\n  let offset = element.getBoundingClientRect();\n  let offsetX = e.pageX - document.body.scrollLeft;\n  let offsetY = e.pageY - (!document.body.scrollTop && document.documentElement ? document.documentElement.scrollTop : document.body.scrollTop);\n  let pageX = Math.max(Math.abs(offsetX - offset.left), Math.abs(offsetX - offset.right));\n  let pageY = Math.max(Math.abs(offsetY - offset.top), Math.abs(offsetY - offset.bottom));\n  let radius = Math.sqrt(pageX * pageX + pageY * pageY);\n  let diameter = radius * 2 + 'px';\n  let x = offsetX - offset.left - radius;\n  let y = offsetY - offset.top - radius;\n\n  if (this.rippleOptions && this.rippleOptions.isCenterRipple) {\n    x = 0;\n    y = 0;\n    diameter = '100%';\n  }\n\n  element.classList.add('e-ripple');\n  let duration = this.rippleOptions.duration.toString();\n  let styles = 'width: ' + diameter + ';height: ' + diameter + ';left: ' + x + 'px;top: ' + y + 'px;' + 'transition-duration: ' + duration + 'ms;';\n  let rippleElement = createElement('div', {\n    className: 'e-ripple-element',\n    styles: styles\n  });\n  element.appendChild(rippleElement);\n  window.getComputedStyle(rippleElement).getPropertyValue('opacity');\n  rippleElement.style.transform = 'scale(1)';\n\n  if (element !== this.parent) {\n    EventHandler.add(element, 'mouseleave', rippleLeaveHandler, {\n      parent: this.parent,\n      rippleOptions: this.rippleOptions\n    });\n  }\n}\n/**\n * Handler for ripple element mouse up event\n * @param {MouseEvent} e\n * @returns {void}\n * @private\n */\n\n\nfunction rippleUpHandler(e) {\n  removeRipple(e, this);\n}\n/**\n * Handler for ripple element mouse move event\n * @param {MouseEvent} e\n * @returns {void}\n * @private\n */\n\n\nfunction rippleLeaveHandler(e) {\n  removeRipple(e, this);\n}\n/**\n * Handler for removing ripple element\n * @param {MouseEvent} e\n * @param {rippleArgs} eventArgs\n * @returns {void}\n * @private\n */\n\n\nfunction removeRipple(e, eventArgs) {\n  let duration = eventArgs.rippleOptions.duration;\n  let target = e.target;\n  let selector = eventArgs.rippleOptions.selector;\n  let element = selector ? closest(target, selector) : target;\n\n  if (!element || element && element.className.indexOf('e-ripple') === -1) {\n    return;\n  }\n\n  let rippleElements = selectAll('.e-ripple-element', element);\n  let rippleElement = rippleElements[rippleElements.length - 1];\n\n  if (rippleElement) {\n    rippleElement.style.opacity = '0.5';\n  }\n\n  if (eventArgs.parent !== element) {\n    EventHandler.remove(element, 'mouseleave', rippleLeaveHandler);\n  }\n  /* tslint:disable:align */\n\n\n  setTimeout(() => {\n    if (rippleElement && rippleElement.parentNode) {\n      rippleElement.parentNode.removeChild(rippleElement);\n    }\n\n    if (!element.getElementsByClassName('e-ripple-element').length) {\n      element.classList.remove('e-ripple');\n    }\n\n    if (eventArgs.done) {\n      eventArgs.done(e);\n    }\n  }, duration);\n}\n\nlet isRippleEnabled = false;\n/**\n * Animation Module provides support to enable ripple effect functionality to Essential JS 2 components.\n * @param {boolean} isRipple Specifies the boolean value to enable or disable ripple effect.\n * @returns {boolean}\n */\n\nfunction enableRipple(isRipple) {\n  isRippleEnabled = isRipple;\n  return isRippleEnabled;\n}\n/**\n * Module loading operations\n */\n\n\nconst MODULE_SUFFIX = 'Module';\n\nclass ModuleLoader {\n  constructor(parent) {\n    this.loadedModules = [];\n    this.parent = parent;\n  }\n\n  /**\n   * Inject required modules in component library\n   * @return {void}\n   * @param {ModuleDeclaration[]} requiredModules - Array of modules to be required\n   * @param {Function[]} moduleList - Array of modules to be injected from sample side\n   */\n  inject(requiredModules, moduleList) {\n    let reqLength = requiredModules.length;\n\n    if (reqLength === 0) {\n      this.clean();\n      return;\n    }\n\n    if (this.loadedModules.length) {\n      this.clearUnusedModule(requiredModules);\n    }\n\n    for (let i = 0; i < reqLength; i++) {\n      let modl = requiredModules[i];\n\n      for (let module of moduleList) {\n        let modName = modl.member;\n\n        if (module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {\n          let moduleObject = createInstance(module, modl.args);\n          let memberName = this.getMemberName(modName);\n\n          if (modl.isProperty) {\n            setValue(memberName, module, this.parent);\n          } else {\n            setValue(memberName, moduleObject, this.parent);\n          }\n\n          let loadedModule = modl;\n          loadedModule.member = memberName;\n          this.loadedModules.push(loadedModule);\n        }\n      }\n    }\n  }\n  /**\n   * To remove the created object while destroying the control\n   * @return {void}\n   */\n\n\n  clean() {\n    for (let modules of this.loadedModules) {\n      if (!modules.isProperty) {\n        getValue(modules.member, this.parent).destroy();\n      }\n    }\n\n    this.loadedModules = [];\n  }\n  /**\n   * Removes all unused modules\n   * @param {ModuleDeclaration[]} moduleList\n   * @returns {void}\n   */\n\n\n  clearUnusedModule(moduleList) {\n    let usedModules = moduleList.map(arg => {\n      return this.getMemberName(arg.member);\n    });\n    let removableModule = this.loadedModules.filter(module => {\n      return usedModules.indexOf(module.member) === -1;\n    });\n\n    for (let mod of removableModule) {\n      if (!mod.isProperty) {\n        getValue(mod.member, this.parent).destroy();\n      }\n\n      this.loadedModules.splice(this.loadedModules.indexOf(mod), 1);\n      deleteObject(this.parent, mod.member);\n    }\n  }\n  /**\n   * To get the name of the member.\n   * @param {string} name\n   * @returns {string}\n   */\n\n\n  getMemberName(name) {\n    return name[0].toLowerCase() + name.substring(1) + MODULE_SUFFIX;\n  }\n  /**\n   * Returns boolean based on whether the module specified is loaded or not\n   * @param {string} modName\n   * @returns {boolean}\n   */\n\n\n  isModuleLoaded(modName) {\n    for (let mod of this.loadedModules) {\n      if (mod.member === this.getMemberName(modName)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n/**\n * To detect the changes for inner properties.\n * @private\n */\n\n\nclass ChildProperty {\n  constructor(parent, propName, defaultValue, isArray) {\n    this.isComplexArraySetter = false;\n    this.properties = {};\n    this.changedProperties = {};\n    this.childChangedProperties = {};\n    this.oldProperties = {}; // tslint:disable-next-line:no-empty\n\n    this.finalUpdate = () => {};\n\n    this.callChildDataBind = getValue('callChildDataBind', Base);\n    this.parentObj = parent;\n    this.controlParent = this.parentObj.controlParent || this.parentObj;\n    this.propName = propName;\n    this.isParentArray = isArray;\n    this.setProperties(defaultValue, true);\n  }\n  /**\n   * Updates the property changes\n   * @param {boolean} val\n   * @param {string} propName\n   * @returns {void}\n   */\n\n\n  updateChange(val, propName) {\n    if (val === true) {\n      this.parentObj.childChangedProperties[propName] = val;\n    } else {\n      delete this.parentObj.childChangedProperties[propName];\n    }\n\n    if (this.parentObj.updateChange) {\n      this.parentObj.updateChange(val, this.parentObj.propName);\n    }\n  }\n  /**\n   * Updates time out duration\n   */\n\n\n  updateTimeOut() {\n    if (this.parentObj.updateTimeOut) {\n      this.parentObj.finalUpdate();\n      this.parentObj.updateTimeOut();\n    } else {\n      let changeTime = setTimeout(this.parentObj.dataBind.bind(this.parentObj));\n\n      let clearUpdate = () => {\n        clearTimeout(changeTime);\n      };\n\n      this.finalUpdate = clearUpdate;\n    }\n  }\n  /**\n   * Clears changed properties\n   */\n\n\n  clearChanges() {\n    this.finalUpdate();\n    this.updateChange(false, this.propName);\n    this.oldProperties = {};\n    this.changedProperties = {};\n  }\n  /**\n   * Set property changes\n   * @param {Object} prop\n   * @param {boolean} muteOnChange\n   * {void}\n   */\n\n\n  setProperties(prop, muteOnChange) {\n    if (muteOnChange === true) {\n      merge(this, prop);\n      this.updateChange(false, this.propName);\n      this.clearChanges();\n    } else {\n      merge(this, prop);\n    }\n  }\n  /**\n   * Binds data\n   */\n\n\n  dataBind() {\n    this.callChildDataBind(this.childChangedProperties, this);\n\n    if (this.isParentArray) {\n      let curIndex = this.parentObj[this.propName].indexOf(this);\n\n      if (Object.keys(this.changedProperties).length) {\n        setValue(this.propName + '.' + curIndex, this.changedProperties, this.parentObj.changedProperties);\n        setValue(this.propName + '.' + curIndex, this.oldProperties, this.parentObj.oldProperties);\n      }\n    } else {\n      this.parentObj.changedProperties[this.propName] = this.changedProperties;\n      this.parentObj.oldProperties[this.propName] = this.oldProperties;\n    }\n\n    this.clearChanges();\n  }\n  /**\n   * Saves changes to newer values\n   * @param {string} key\n   * @param {Object} newValue\n   * @param {Object} oldValue\n   * @returns {void}\n   */\n\n\n  saveChanges(key, newValue, oldValue, restrictServerDataBind) {\n    if (this.controlParent.isProtectedOnChange) {\n      return;\n    }\n\n    if (!restrictServerDataBind) {\n      this.serverDataBind(key, newValue, true);\n    }\n\n    this.oldProperties[key] = oldValue;\n    this.changedProperties[key] = newValue;\n    this.updateChange(true, this.propName);\n    this.finalUpdate();\n    this.updateTimeOut();\n  }\n\n  serverDataBind(key, value, isSaveChanges, action) {\n    if (isBlazor() && !this.parentObj.isComplexArraySetter) {\n      // tslint:disable-next-line:no-any\n      let parent;\n      let newChanges = {};\n      let parentKey = isSaveChanges ? this.getParentKey(true) + '.' + key : key;\n      /* istanbul ignore else  */\n\n      if (parentKey.indexOf('.') !== -1) {\n        let complexKeys = parentKey.split('.');\n        parent = newChanges;\n\n        for (let i = 0; i < complexKeys.length; i++) {\n          let isFinal = i === complexKeys.length - 1;\n          parent[complexKeys[i]] = isFinal ? value : {};\n          parent = isFinal ? parent : parent[complexKeys[i]];\n        }\n      } else {\n        newChanges[parentKey] = {};\n        parent = newChanges[parentKey];\n        newChanges[parentKey][key] = value;\n      }\n      /* istanbul ignore next */\n\n\n      if (this.isParentArray) {\n        let actionProperty = 'ejsAction';\n        parent[actionProperty] = action ? action : 'none';\n      }\n\n      this.controlParent.serverDataBind(newChanges);\n    }\n  }\n\n  getParentKey(isSaveChanges) {\n    // tslint:disable-next-line:no-any\n    let index = '';\n    let propName = this.propName;\n    /* istanbul ignore next */\n\n    if (this.isParentArray) {\n      index = this.parentObj[this.propName].indexOf(this);\n      let valueLength = this.parentObj[this.propName].length;\n      valueLength = isSaveChanges ? valueLength : valueLength > 0 ? valueLength - 1 : 0;\n      index = index !== -1 ? '-' + index : '-' + valueLength;\n      propName = propName + index;\n    }\n\n    if (this.controlParent !== this.parentObj) {\n      propName = this.parentObj.getParentKey() + '.' + this.propName + index;\n    }\n\n    return propName;\n  }\n\n}\n\nvar __decorate$1 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nlet componentCount = 0;\nlet lastPageID;\nlet lastHistoryLen = 0;\nlet versionBasedStatePersistence = false;\n/**\n * To enable or disable version based statePersistence functionality for all components globally.\n * @param {boolean} status - Optional argument Specifies the status value to enable or disable versionBasedStatePersistence option.\n * @returns {void}\n */\n\n/* istanbul ignore next */\n\nfunction enableVersionBasedPersistence(status) {\n  versionBasedStatePersistence = status;\n}\n/**\n * Base class for all Essential JavaScript components\n */\n\n\nlet Component = class Component extends Base {\n  /**\n   * Initialize the constructor for component base\n   */\n  constructor(options, selector) {\n    super(options, selector);\n    this.randomId = uniqueID();\n    /**\n     * string template option for Blazor template rendering\n     * @private\n     */\n\n    this.isStringTemplate = false;\n    this.needsID = false;\n    this.isReactHybrid = false;\n\n    if (isNullOrUndefined(this.enableRtl)) {\n      this.setProperties({\n        'enableRtl': rightToLeft\n      }, true);\n    }\n\n    if (isNullOrUndefined(this.locale)) {\n      this.setProperties({\n        'locale': defaultCulture\n      }, true);\n    }\n\n    this.moduleLoader = new ModuleLoader(this);\n    this.localObserver = new Observer(this); // tslint:disable-next-line:no-function-constructor-with-string-args\n\n    onIntlChange.on('notifyExternalChange', this.detectFunction, this, this.randomId);\n\n    if (!isUndefined(selector)) {\n      this.appendTo();\n    }\n  }\n\n  requiredModules() {\n    return [];\n  }\n\n  /**\n   * Destroys the sub modules while destroying the widget\n   */\n  destroy() {\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.enablePersistence) {\n      this.setPersistData();\n    }\n\n    this.localObserver.destroy();\n\n    if (this.refreshing) {\n      return;\n    }\n\n    removeClass([this.element], ['e-control']);\n    this.trigger('destroyed', {\n      cancel: false\n    });\n    super.destroy();\n    this.moduleLoader.clean();\n    onIntlChange.off('notifyExternalChange', this.detectFunction, this.randomId);\n  }\n  /**\n   * Applies all the pending property changes and render the component again.\n   */\n\n\n  refresh() {\n    this.refreshing = true;\n    this.moduleLoader.clean();\n    this.destroy();\n    this.clearChanges();\n    this.localObserver = new Observer(this);\n    this.preRender();\n    this.injectModules();\n    this.render();\n    this.refreshing = false;\n  }\n  /* istanbul ignore next */\n\n\n  accessMount() {\n    if (this.mount && !this.isReactHybrid) {\n      this.mount();\n    }\n  }\n  /**\n   * Returns the route element of the component\n   */\n\n  /* istanbul ignore next */\n\n\n  getRootElement() {\n    if (this.isReactHybrid) {\n      return this.actualElement;\n    } else {\n      return this.element;\n    }\n  }\n  /**\n   * Returns the persistence data for component\n   */\n\n  /* istanbul ignore next */\n  //tslint:disable:no-any\n\n\n  getLocalData() {\n    let eleId = this.getModuleName() + this.element.id;\n\n    if (versionBasedStatePersistence) {\n      return window.localStorage.getItem(eleId + this.ej2StatePersistenceVersion);\n    } else {\n      return window.localStorage.getItem(eleId);\n    }\n  }\n  /**\n   * Appends the control within the given HTML element\n   * @param {string | HTMLElement} selector - Target element where control needs to be appended\n   */\n\n\n  appendTo(selector) {\n    if (!isNullOrUndefined(selector) && typeof selector === 'string') {\n      this.element = select(selector, document);\n    } else if (!isNullOrUndefined(selector)) {\n      this.element = selector;\n    }\n\n    if (!isNullOrUndefined(this.element)) {\n      let moduleClass = 'e-' + this.getModuleName().toLowerCase();\n      addClass([this.element], ['e-control', moduleClass]);\n      this.isProtectedOnChange = false;\n\n      if (this.needsID && !this.element.id) {\n        this.element.id = this.getUniqueID(this.getModuleName());\n      }\n\n      if (this.enablePersistence) {\n        this.mergePersistData();\n        window.addEventListener('unload', this.setPersistData.bind(this));\n      }\n\n      let inst = getValue('ej2_instances', this.element);\n\n      if (!inst || inst.indexOf(this) === -1) {\n        super.addInstance();\n      }\n\n      this.preRender();\n      this.injectModules();\n      this.render();\n\n      if (!this.mount) {\n        this.trigger('created');\n      } else {\n        this.accessMount();\n      }\n    }\n  }\n  /**\n   * It is used to process the post rendering functionalities to a component.\n   */\n\n\n  renderComplete(wrapperElement) {\n    if (isBlazor()) {\n      let sfBlazor = 'sfBlazor'; // tslint:disable-next-line:no-any\n\n      window[sfBlazor].renderComplete(this.element, wrapperElement);\n    }\n\n    this.isRendered = true;\n  }\n  /**\n   * When invoked, applies the pending property changes immediately to the component.\n   */\n\n\n  dataBind() {\n    this.injectModules();\n    super.dataBind();\n  }\n\n  /**\n   * Attach one or more  event handler to the current component context.\n   * It is used for internal handling event internally within the component only.\n   * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.\n   * @param {Function} handler - optional parameter Specifies the handler to run when the event occurs\n   * @param {Object} context - optional parameter Specifies the context to be bind in the handler.\n   * @return {void}\n   * @private\n   */\n  on(event, handler, context) {\n    if (typeof event === 'string') {\n      this.localObserver.on(event, handler, context);\n    } else {\n      for (let arg of event) {\n        this.localObserver.on(arg.event, arg.handler, arg.context);\n      }\n    }\n  }\n  /**\n   * To remove one or more event handler that has been attached with the on() method.\n   * @param {BoundOptions[]| string} event - It is  optional type either to  Set the collection of event list or the eventName.\n   * @param {Function} handler - optional parameter Specifies the function to run when the event occurs\n   * @return {void}\n   * @private\n   */\n\n\n  off(event, handler) {\n    if (typeof event === 'string') {\n      this.localObserver.off(event, handler);\n    } else {\n      for (let arg of event) {\n        this.localObserver.off(arg.event, arg.handler);\n      }\n    }\n  }\n  /**\n   * To notify the handlers in the specified event.\n   * @param {string} property - Specifies the event to be notify.\n   * @param {Object} argument - Additional parameters to pass while calling the handler.\n   * @return {void}\n   * @private\n   */\n\n\n  notify(property, argument) {\n    if (this.isDestroyed !== true) {\n      this.localObserver.notify(property, argument);\n    }\n  }\n  /**\n   * Get injected modules\n   * @private\n   */\n\n\n  getInjectedModules() {\n    return this.injectedModules;\n  }\n\n  /**\n   * Dynamically injects the required modules to the component.\n   */\n  static Inject(...moduleList) {\n    if (!this.prototype.injectedModules) {\n      this.prototype.injectedModules = [];\n    }\n\n    for (let i = 0; i < moduleList.length; i++) {\n      if (this.prototype.injectedModules.indexOf(moduleList[i]) === -1) {\n        this.prototype.injectedModules.push(moduleList[i]);\n      }\n    }\n  }\n  /**\n   * This is a instance method to create an element.\n   * @private\n   */\n\n  /* istanbul ignore next */\n  //tslint:disable:no-any\n\n\n  createElement(tagName, prop, isVDOM) {\n    if (isVDOM && this.isReactHybrid) {\n      if (prop) {\n        prop = {};\n      }\n\n      prop['data-id'] = getRandomId();\n      return VirtualDOM.createElement(tagName, prop);\n    } else {\n      return createElement(tagName, prop);\n    }\n  }\n  /**\n   *\n   * @param handler - handler to be triggered after state Updated.\n   * @param argument - Arguments to be passed to caller.\n   * @private\n   */\n\n  /* istanbul ignore next */\n  //tslint:disable:no-any\n\n\n  triggerStateChange(handler, argument) {\n    if (this.isReactHybrid) {\n      //tslint:disable:no-any\n      this.setState();\n      this.currentContext = {\n        calls: handler,\n        args: argument\n      };\n    }\n  } // tslint: enable: no-any\n\n\n  injectModules() {\n    if (this.injectedModules && this.injectedModules.length) {\n      this.moduleLoader.inject(this.requiredModules(), this.injectedModules);\n    }\n  }\n\n  detectFunction(args) {\n    let prop = Object.keys(args);\n\n    if (prop.length) {\n      this[prop[0]] = args[prop[0]];\n    }\n  }\n\n  mergePersistData() {\n    let data;\n\n    if (versionBasedStatePersistence) {\n      data = window.localStorage.getItem(this.getModuleName() + this.element.id + this.ej2StatePersistenceVersion);\n    } else {\n      data = window.localStorage.getItem(this.getModuleName() + this.element.id);\n    }\n\n    if (!(isNullOrUndefined(data) || data === '')) {\n      this.setProperties(JSON.parse(data), true);\n    }\n  }\n\n  setPersistData() {\n    if (!this.isDestroyed) {\n      if (versionBasedStatePersistence) {\n        window.localStorage.setItem(this.getModuleName() + this.element.id + this.ej2StatePersistenceVersion, this.getPersistData());\n      } else {\n        window.localStorage.setItem(this.getModuleName() + this.element.id, this.getPersistData());\n      }\n    }\n  } //tslint:disable-next-line\n\n\n  renderReactTemplates() {//No Code\n  } //tslint:disable-next-line\n\n\n  clearTemplate(templateName, index) {//No Code\n  }\n\n  getUniqueID(definedName) {\n    if (this.isHistoryChanged()) {\n      componentCount = 0;\n    }\n\n    lastPageID = this.pageID(location.href);\n    lastHistoryLen = history.length;\n    return definedName + '_' + lastPageID + '_' + componentCount++;\n  }\n\n  pageID(url) {\n    let hash = 0;\n\n    if (url.length === 0) {\n      return hash;\n    }\n\n    for (let i = 0; i < url.length; i++) {\n      let char = url.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n\n    return Math.abs(hash);\n  }\n\n  isHistoryChanged() {\n    return lastPageID !== this.pageID(location.href) || lastHistoryLen !== history.length;\n  }\n\n  addOnPersist(options) {\n    let persistObj = {};\n\n    for (let key of options) {\n      let objValue;\n      objValue = getValue(key, this);\n\n      if (!isUndefined(objValue)) {\n        setValue(key, this.getActualProperties(objValue), persistObj);\n      }\n    }\n\n    return JSON.stringify(persistObj, (key, value) => {\n      return this.getActualProperties(value);\n    });\n  }\n\n  getActualProperties(obj) {\n    if (obj instanceof ChildProperty) {\n      return getValue('properties', obj);\n    } else {\n      return obj;\n    }\n  }\n\n  ignoreOnPersist(options) {\n    return JSON.stringify(this.iterateJsonProperties(this.properties, options));\n  }\n\n  iterateJsonProperties(obj, ignoreList) {\n    let newObj = {};\n\n    for (let key of Object.keys(obj)) {\n      if (ignoreList.indexOf(key) === -1) {\n        // tslint:disable-next-line:no-any\n        let value = obj[key];\n\n        if (typeof value === 'object' && !(value instanceof Array)) {\n          let newList = ignoreList.filter(str => {\n            return new RegExp(key + '.').test(str);\n          }).map(str => {\n            return str.replace(key + '.', '');\n          });\n          newObj[key] = this.iterateJsonProperties(this.getActualProperties(value), newList);\n        } else {\n          newObj[key] = value;\n        }\n      }\n    }\n\n    return newObj;\n  }\n\n};\n\n__decorate$1([Property(false)], Component.prototype, \"enablePersistence\", void 0);\n\n__decorate$1([Property()], Component.prototype, \"enableRtl\", void 0);\n\n__decorate$1([Property()], Component.prototype, \"locale\", void 0);\n\nComponent = __decorate$1([NotifyPropertyChanges], Component); //Function handling for page navigation detection \n\n/* istanbul ignore next */\n\n(() => {\n  if (typeof window !== 'undefined') {\n    window.addEventListener('popstate',\n    /* istanbul ignore next */\n    () => {\n      componentCount = 0;\n    });\n  }\n})();\n\nvar __decorate$2 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Draggable_1;\nconst defaultPosition = {\n  left: 0,\n  top: 0,\n  bottom: 0,\n  right: 0\n};\nconst isDraggedObject = {\n  isDragged: false\n};\n/**\n * Specifies the position coordinates\n */\n\nclass Position extends ChildProperty {}\n\n__decorate$2([Property(0)], Position.prototype, \"left\", void 0);\n\n__decorate$2([Property(0)], Position.prototype, \"top\", void 0);\n/**\n * Draggable Module provides support to enable draggable functionality in Dom Elements.\n * ```html\n * <div id='drag'>Draggable</div>\n * <script>\n * var ele = document.getElementById('drag');\n * var drag:Draggable = new Draggable(ele,{\n *     clone:false,\n *     drag: function(e) {\n *      //drag handler code.\n *      },\n *     handle:'.class'\n * });\n * </script>\n * ```\n */\n\n\nlet Draggable = Draggable_1 = class Draggable extends Base {\n  constructor(element, options) {\n    super(options, element);\n    this.dragLimit = Draggable_1.getDefaultPosition();\n    this.borderWidth = Draggable_1.getDefaultPosition();\n    this.padding = Draggable_1.getDefaultPosition();\n    this.diffX = 0;\n    this.prevLeft = 0;\n    this.prevTop = 0;\n    this.dragProcessStarted = false;\n    /* tslint:disable no-any */\n\n    this.tapHoldTimer = 0;\n    this.enableScrollHandler = false;\n    this.externalInitialize = false;\n    this.diffY = 0;\n    this.parentScrollX = 0;\n    this.parentScrollY = 0;\n    this.droppables = {};\n    this.bind();\n  }\n\n  bind() {\n    this.toggleEvents();\n\n    if (Browser.isIE) {\n      addClass([this.element], 'e-block-touch');\n    }\n\n    this.droppables[this.scope] = {};\n  }\n\n  static getDefaultPosition() {\n    return extend({}, defaultPosition);\n  }\n\n  toggleEvents(isUnWire) {\n    let ele;\n\n    if (!isUndefined(this.handle)) {\n      ele = select(this.handle, this.element);\n    }\n\n    let handler = this.enableTapHold && Browser.isDevice && Browser.isTouch ? this.mobileInitialize : this.initialize;\n\n    if (isUnWire) {\n      EventHandler.remove(ele || this.element, Browser.touchStartEvent, handler);\n    } else {\n      EventHandler.add(ele || this.element, Browser.touchStartEvent, handler, this);\n    }\n  }\n  /* istanbul ignore next */\n\n\n  mobileInitialize(evt) {\n    let target = evt.currentTarget;\n    this.tapHoldTimer = setTimeout(() => {\n      this.externalInitialize = true;\n      this.removeTapholdTimer();\n      this.initialize(evt, target);\n    }, this.tapHoldThreshold);\n    EventHandler.add(document, Browser.touchMoveEvent, this.removeTapholdTimer, this);\n    EventHandler.add(document, Browser.touchEndEvent, this.removeTapholdTimer, this);\n  }\n  /* istanbul ignore next */\n\n\n  removeTapholdTimer() {\n    clearTimeout(this.tapHoldTimer);\n    EventHandler.remove(document, Browser.touchMoveEvent, this.removeTapholdTimer);\n    EventHandler.remove(document, Browser.touchEndEvent, this.removeTapholdTimer);\n  }\n  /* istanbul ignore next */\n\n\n  getScrollableParent(element, axis) {\n    let scroll = {\n      'vertical': 'scrollHeight',\n      'horizontal': 'scrollWidth'\n    };\n    let client = {\n      'vertical': 'clientHeight',\n      'horizontal': 'clientWidth'\n    };\n\n    if (isNullOrUndefined(element)) {\n      return null;\n    }\n\n    if (element[scroll[axis]] > element[client[axis]]) {\n      if (axis === 'vertical' ? element.scrollTop > 0 : element.scrollLeft > 0) {\n        if (axis === 'vertical') {\n          this.parentScrollY = this.parentScrollY + (this.parentScrollY === 0 ? element.scrollTop : element.scrollTop - this.parentScrollY);\n          this.tempScrollHeight = element.scrollHeight;\n        } else {\n          this.parentScrollX = this.parentScrollX + (this.parentScrollX === 0 ? element.scrollLeft : element.scrollLeft - this.parentScrollX);\n          this.tempScrollWidth = element.scrollWidth;\n        }\n\n        if (!isNullOrUndefined(element)) {\n          return this.getScrollableParent(element.parentNode, axis);\n        } else {\n          return element;\n        }\n      } else {\n        return this.getScrollableParent(element.parentNode, axis);\n      }\n    } else {\n      return this.getScrollableParent(element.parentNode, axis);\n    }\n  }\n\n  getScrollableValues() {\n    this.parentScrollX = 0;\n    this.parentScrollY = 0;\n    let isModalDialog = this.element.classList.contains('e-dialog') && this.element.classList.contains('e-dlg-modal');\n    let verticalScrollParent = this.getScrollableParent(this.element.parentNode, 'vertical');\n    let horizontalScrollParent = this.getScrollableParent(this.element.parentNode, 'horizontal');\n  }\n\n  initialize(evt, curTarget) {\n    this.currentStateTarget = evt.target;\n\n    if (this.isDragStarted()) {\n      return;\n    } else {\n      this.isDragStarted(true);\n      this.externalInitialize = false;\n    }\n\n    this.target = evt.currentTarget || curTarget;\n    this.dragProcessStarted = false;\n\n    if (this.abort) {\n      /* tslint:disable no-any */\n      let abortSelectors = this.abort;\n\n      if (typeof abortSelectors === 'string') {\n        abortSelectors = [abortSelectors];\n      }\n\n      for (let i = 0; i < abortSelectors.length; i++) {\n        if (!isNullOrUndefined(closest(evt.target, abortSelectors[i]))) {\n          /* istanbul ignore next */\n          if (this.isDragStarted()) {\n            this.isDragStarted(true);\n          }\n\n          return;\n        }\n      }\n    }\n\n    if (this.preventDefault && !isUndefined(evt.changedTouches) && evt.type !== 'touchstart') {\n      evt.preventDefault();\n    }\n\n    this.element.setAttribute('aria-grabbed', 'true');\n    let intCoord = this.getCoordinates(evt);\n    this.initialPosition = {\n      x: intCoord.pageX,\n      y: intCoord.pageY\n    };\n\n    if (!this.clone) {\n      let pos = this.element.getBoundingClientRect();\n      this.getScrollableValues();\n\n      if (evt.clientX === evt.pageX) {\n        this.parentScrollX = 0;\n      }\n\n      if (evt.clientY === evt.pageY) {\n        this.parentScrollY = 0;\n      }\n\n      this.relativeXPosition = intCoord.pageX - (pos.left + this.parentScrollX);\n      this.relativeYPosition = intCoord.pageY - (pos.top + this.parentScrollY);\n    }\n\n    if (this.externalInitialize) {\n      this.intDragStart(evt);\n    } else {\n      EventHandler.add(document, Browser.touchMoveEvent, this.intDragStart, this);\n      EventHandler.add(document, Browser.touchEndEvent, this.intDestroy, this);\n    }\n\n    this.toggleEvents(true);\n\n    if (evt.type !== 'touchstart' && this.isPreventSelect) {\n      document.body.classList.add('e-prevent-select');\n    }\n\n    this.externalInitialize = false;\n    EventHandler.trigger(document.documentElement, Browser.touchStartEvent, evt);\n  }\n\n  intDragStart(evt) {\n    this.removeTapholdTimer();\n    let isChangeTouch = !isUndefined(evt.changedTouches);\n\n    if (isChangeTouch && evt.changedTouches.length !== 1) {\n      return;\n    }\n\n    if (isChangeTouch) {\n      evt.preventDefault();\n    }\n\n    let intCordinate = this.getCoordinates(evt);\n    let pos;\n    let styleProp = getComputedStyle(this.element);\n    this.margin = {\n      left: parseInt(styleProp.marginLeft, 10),\n      top: parseInt(styleProp.marginTop, 10),\n      right: parseInt(styleProp.marginRight, 10),\n      bottom: parseInt(styleProp.marginBottom, 10)\n    };\n    let element = this.element;\n\n    if (this.clone && this.dragTarget) {\n      let intClosest = closest(evt.target, this.dragTarget);\n\n      if (!isNullOrUndefined(intClosest)) {\n        element = intClosest;\n      }\n    }\n    /* istanbul ignore next */\n\n\n    if (this.isReplaceDragEle) {\n      element = this.currentStateCheck(evt.target, element);\n    }\n\n    this.offset = this.calculateParentPosition(element);\n    this.position = this.getMousePosition(evt, this.isDragScroll);\n    let x = this.initialPosition.x - intCordinate.pageX;\n    let y = this.initialPosition.y - intCordinate.pageY;\n    let distance = Math.sqrt(x * x + y * y);\n\n    if (distance >= this.distance || this.externalInitialize) {\n      let ele = this.getHelperElement(evt);\n\n      if (!ele || isNullOrUndefined(ele)) {\n        return;\n      }\n\n      let dragTargetElement = this.helperElement = ele;\n      this.parentClientRect = this.calculateParentPosition(dragTargetElement.offsetParent);\n\n      if (this.dragStart) {\n        let curTarget = this.getProperTargetElement(evt);\n        let args = {\n          event: evt,\n          element: element,\n          target: curTarget,\n          bindEvents: isBlazor() ? this.bindDragEvents.bind(this) : null,\n          dragElement: dragTargetElement\n        };\n        this.trigger('dragStart', args);\n      }\n\n      if (this.dragArea) {\n        this.setDragArea();\n      } else {\n        this.dragLimit = {\n          left: 0,\n          right: 0,\n          bottom: 0,\n          top: 0\n        };\n        this.borderWidth = {\n          top: 0,\n          left: 0\n        };\n      }\n\n      pos = {\n        left: this.position.left - this.parentClientRect.left,\n        top: this.position.top - this.parentClientRect.top\n      };\n\n      if (this.clone && !this.enableTailMode) {\n        this.diffX = this.position.left - this.offset.left;\n        this.diffY = this.position.top - this.offset.top;\n      }\n\n      this.getScrollableValues(); // when drag element has margin-top\n\n      let styles = getComputedStyle(element);\n      let marginTop = parseFloat(styles.marginTop);\n      /* istanbul ignore next */\n\n      if (this.clone && marginTop !== 0) {\n        pos.top += marginTop;\n      }\n\n      let posValue = this.getProcessedPositionValue({\n        top: pos.top - this.diffY + 'px',\n        left: pos.left - this.diffX + 'px'\n      });\n      this.dragElePosition = {\n        top: pos.top,\n        left: pos.left\n      };\n      setStyleAttribute(dragTargetElement, this.getDragPosition({\n        position: 'absolute',\n        left: posValue.left,\n        top: posValue.top\n      }));\n      EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);\n      EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);\n\n      if (!isBlazor()) {\n        this.bindDragEvents(dragTargetElement);\n      }\n    }\n  }\n\n  bindDragEvents(dragTargetElement) {\n    if (isVisible(dragTargetElement)) {\n      EventHandler.add(document, Browser.touchMoveEvent, this.intDrag, this);\n      EventHandler.add(document, Browser.touchEndEvent, this.intDragStop, this);\n      this.setGlobalDroppables(false, this.element, dragTargetElement);\n    } else {\n      this.toggleEvents();\n      document.body.classList.remove('e-prevent-select');\n    }\n  }\n\n  elementInViewport(el) {\n    this.top = el.offsetTop;\n    this.left = el.offsetLeft;\n    this.width = el.offsetWidth;\n    this.height = el.offsetHeight;\n\n    while (el.offsetParent) {\n      el = el.offsetParent;\n      this.top += el.offsetTop;\n      this.left += el.offsetLeft;\n    }\n\n    return this.top >= window.pageYOffset && this.left >= window.pageXOffset && this.top + this.height <= window.pageYOffset + window.innerHeight && this.left + this.width <= window.pageXOffset + window.innerWidth;\n  }\n\n  getProcessedPositionValue(value) {\n    if (this.queryPositionInfo) {\n      return this.queryPositionInfo(value);\n    }\n\n    return value;\n  }\n\n  calculateParentPosition(ele) {\n    if (isNullOrUndefined(ele)) {\n      return {\n        left: 0,\n        top: 0\n      };\n    }\n\n    let rect = ele.getBoundingClientRect();\n    let style = getComputedStyle(ele);\n    return {\n      left: rect.left + window.pageXOffset - parseInt(style.marginLeft, 10),\n      top: rect.top + window.pageYOffset - parseInt(style.marginTop, 10)\n    };\n  } // tslint:disable-next-line:max-func-body-length\n\n\n  intDrag(evt) {\n    if (!isUndefined(evt.changedTouches) && evt.changedTouches.length !== 1) {\n      return;\n    }\n\n    let left;\n    let top;\n    this.position = this.getMousePosition(evt, this.isDragScroll);\n    let docHeight = this.getDocumentWidthHeight('Height');\n\n    if (docHeight < this.position.top) {\n      this.position.top = docHeight;\n    }\n\n    let docWidth = this.getDocumentWidthHeight('Width');\n\n    if (docWidth < this.position.left) {\n      this.position.left = docWidth;\n    }\n\n    if (this.drag) {\n      let curTarget = this.getProperTargetElement(evt);\n      this.trigger('drag', {\n        event: evt,\n        element: this.element,\n        target: curTarget\n      });\n    }\n\n    let eleObj = this.checkTargetElement(evt);\n\n    if (eleObj.target && eleObj.instance) {\n      /* tslint:disable no-any */\n      let flag = true;\n\n      if (this.hoverObject) {\n        if (this.hoverObject.instance !== eleObj.instance) {\n          this.triggerOutFunction(evt, eleObj);\n        } else {\n          flag = false;\n        }\n      }\n\n      if (flag) {\n        eleObj.instance.dragData[this.scope] = this.droppables[this.scope];\n        eleObj.instance.intOver(evt, eleObj.target);\n        this.hoverObject = eleObj;\n      }\n    } else if (this.hoverObject) {\n      this.triggerOutFunction(evt, eleObj);\n    }\n\n    let helperElement = this.droppables[this.scope].helper;\n    this.parentClientRect = this.calculateParentPosition(this.helperElement.offsetParent);\n    let tLeft = this.parentClientRect.left;\n    let tTop = this.parentClientRect.top;\n    let intCoord = this.getCoordinates(evt);\n    let pagex = intCoord.pageX;\n    let pagey = intCoord.pageY;\n    let dLeft = this.position.left - this.diffX;\n    let dTop = this.position.top - this.diffY;\n    let styles = getComputedStyle(helperElement);\n    let marginTop = parseFloat(styles.marginTop);\n\n    if (this.dragArea) {\n      if (this.pageX !== pagex || this.skipDistanceCheck) {\n        let helperWidth = helperElement.offsetWidth + (parseFloat(styles.marginLeft) + parseFloat(styles.marginRight));\n\n        if (this.dragLimit.left > dLeft && dLeft > 0) {\n          left = this.dragLimit.left;\n        } else if (this.dragLimit.right + window.pageXOffset < dLeft + helperWidth && dLeft > 0) {\n          left = dLeft - (dLeft - this.dragLimit.right) + window.pageXOffset - helperWidth;\n        } else {\n          left = dLeft < 0 ? this.dragLimit.left : dLeft;\n        }\n      }\n\n      if (this.pageY !== pagey || this.skipDistanceCheck) {\n        let helperHeight = helperElement.offsetHeight + (parseFloat(styles.marginTop) + parseFloat(styles.marginBottom));\n\n        if (this.dragLimit.top > dTop && dTop > 0) {\n          top = this.dragLimit.top;\n        } else if (this.dragLimit.bottom + window.pageYOffset < dTop + helperHeight && dTop > 0) {\n          top = dTop - (dTop - this.dragLimit.bottom) + window.pageYOffset - helperHeight;\n        } else {\n          top = dTop < 0 ? this.dragLimit.top : dTop;\n        }\n      }\n    } else {\n      left = dLeft;\n      top = dTop;\n    }\n\n    let iTop = tTop + this.borderWidth.top;\n    let iLeft = tLeft + this.borderWidth.left;\n\n    if (this.dragProcessStarted) {\n      if (isNullOrUndefined(top)) {\n        top = this.prevTop;\n      }\n\n      if (isNullOrUndefined(left)) {\n        left = this.prevLeft;\n      }\n    }\n\n    let draEleTop;\n    let draEleLeft;\n\n    if (this.dragArea) {\n      this.dragLimit.top = this.clone ? this.dragLimit.top : 0;\n      draEleTop = top - iTop < 0 ? this.dragLimit.top : top - iTop;\n      draEleLeft = left - iLeft < 0 ? this.dragElePosition.left : left - iLeft; // when drag-element has margin-top\n\n      /* istanbul ignore next */\n\n      if (marginTop > 0) {\n        if (this.clone) {\n          draEleTop += this.element.offsetTop;\n\n          if (dTop < 0) {\n            if (this.element.offsetTop + dTop >= 0) {\n              draEleTop = this.element.offsetTop + dTop;\n            } else {\n              draEleTop -= this.element.offsetTop;\n            }\n          }\n\n          draEleTop = this.dragLimit.bottom < draEleTop ? this.dragLimit.bottom : draEleTop;\n        }\n\n        if (top - iTop < 0) {\n          if (dTop + marginTop + (helperElement.offsetHeight - iTop) >= 0) {\n            let tempDraEleTop = this.dragLimit.top + dTop - iTop;\n\n            if (tempDraEleTop + marginTop + iTop < 0) {\n              draEleTop -= marginTop + iTop;\n            } else {\n              draEleTop = tempDraEleTop;\n            }\n          } else {\n            draEleTop -= marginTop + iTop;\n          }\n        }\n      }\n    } else {\n      draEleTop = top - iTop;\n      draEleLeft = left - iLeft;\n    }\n\n    if (this.enableScrollHandler && !this.clone) {\n      draEleTop -= this.parentScrollY;\n      draEleLeft -= this.parentScrollX;\n    }\n\n    let dragValue = this.getProcessedPositionValue({\n      top: draEleTop + 'px',\n      left: draEleLeft + 'px'\n    });\n    setStyleAttribute(helperElement, this.getDragPosition(dragValue));\n\n    if (!this.elementInViewport(helperElement) && this.enableAutoScroll) {\n      this.helperElement.scrollIntoView();\n    }\n\n    this.dragProcessStarted = true;\n    this.prevLeft = left;\n    this.prevTop = top;\n    this.position.left = left;\n    this.position.top = top;\n    this.pageX = pagex;\n    this.pageY = pagey;\n  }\n\n  triggerOutFunction(evt, eleObj) {\n    this.hoverObject.instance.intOut(evt, eleObj.target);\n    this.hoverObject.instance.dragData[this.scope] = null;\n    this.hoverObject = null;\n  }\n\n  getDragPosition(dragValue) {\n    let temp = extend({}, dragValue);\n\n    if (this.axis) {\n      if (this.axis === 'x') {\n        delete temp.top;\n      } else if (this.axis === 'y') {\n        delete temp.left;\n      }\n    }\n\n    return temp;\n  }\n\n  getDocumentWidthHeight(str) {\n    let docBody = document.body;\n    let docEle = document.documentElement;\n    let returnValue = Math.max(docBody['scroll' + str], docEle['scroll' + str], docBody['offset' + str], docEle['offset' + str], docEle['client' + str]);\n    return returnValue;\n  }\n\n  intDragStop(evt) {\n    this.dragProcessStarted = false;\n\n    if (!isUndefined(evt.changedTouches) && evt.changedTouches.length !== 1) {\n      return;\n    }\n\n    let type = ['touchend', 'pointerup', 'mouseup'];\n\n    if (type.indexOf(evt.type) !== -1) {\n      if (this.dragStop) {\n        let curTarget = this.getProperTargetElement(evt);\n        this.trigger('dragStop', {\n          event: evt,\n          element: this.element,\n          target: curTarget,\n          helper: this.helperElement\n        });\n      }\n\n      this.intDestroy(evt);\n    } else {\n      this.element.setAttribute('aria-grabbed', 'false');\n    }\n\n    let eleObj = this.checkTargetElement(evt);\n\n    if (eleObj.target && eleObj.instance) {\n      eleObj.instance.dragStopCalled = true;\n      eleObj.instance.dragData[this.scope] = this.droppables[this.scope];\n      eleObj.instance.intDrop(evt, eleObj.target);\n    }\n\n    this.setGlobalDroppables(true);\n    document.body.classList.remove('e-prevent-select');\n  }\n  /**\n   * @private\n   */\n\n\n  intDestroy(evt) {\n    this.dragProcessStarted = false;\n    this.toggleEvents();\n    document.body.classList.remove('e-prevent-select');\n    this.element.setAttribute('aria-grabbed', 'false');\n    EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);\n    EventHandler.remove(document, Browser.touchEndEvent, this.intDragStop);\n    EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);\n    EventHandler.remove(document, Browser.touchMoveEvent, this.intDrag);\n\n    if (this.isDragStarted()) {\n      this.isDragStarted(true);\n    }\n  } // triggers when property changed\n\n\n  onPropertyChanged(newProp, oldProp) {//No Code to handle\n  }\n\n  getModuleName() {\n    return 'draggable';\n  }\n\n  isDragStarted(change) {\n    if (change) {\n      isDraggedObject.isDragged = !isDraggedObject.isDragged;\n    }\n\n    return isDraggedObject.isDragged;\n  }\n\n  setDragArea() {\n    let eleWidthBound;\n    let eleHeightBound;\n    let top = 0;\n    let left = 0;\n    let ele;\n    let type = typeof this.dragArea;\n\n    if (type === 'string') {\n      ele = select(this.dragArea);\n    } else {\n      ele = this.dragArea;\n    }\n\n    if (ele) {\n      let elementArea = ele.getBoundingClientRect();\n      eleWidthBound = ele.scrollWidth ? ele.scrollWidth : elementArea.right - elementArea.left;\n      eleHeightBound = ele.scrollHeight ? ele.scrollHeight : elementArea.bottom - elementArea.top;\n      let keys = ['Top', 'Left', 'Bottom', 'Right'];\n      let styles = getComputedStyle(ele);\n\n      for (let i = 0; i < keys.length; i++) {\n        let key = keys[i];\n        let tborder = styles['border' + key + 'Width'];\n        let tpadding = styles['padding' + key];\n        let lowerKey = key.toLowerCase();\n        this.borderWidth[lowerKey] = isNaN(parseFloat(tborder)) ? 0 : parseFloat(tborder);\n        this.padding[lowerKey] = isNaN(parseFloat(tpadding)) ? 0 : parseFloat(tpadding);\n      }\n\n      top = elementArea.top;\n      left = elementArea.left;\n      this.dragLimit.left = left + this.borderWidth.left + this.padding.left;\n      this.dragLimit.top = ele.offsetTop + this.borderWidth.top + this.padding.top;\n      this.dragLimit.right = left + eleWidthBound - (this.borderWidth.right + this.padding.right);\n      this.dragLimit.bottom = top + eleHeightBound - (this.borderWidth.bottom + this.padding.bottom);\n    }\n  }\n\n  getProperTargetElement(evt) {\n    let intCoord = this.getCoordinates(evt);\n    let ele;\n    let prevStyle = this.helperElement.style.pointerEvents || '';\n\n    if (compareElementParent(evt.target, this.helperElement) || evt.type.indexOf('touch') !== -1) {\n      this.helperElement.style.pointerEvents = 'none';\n      ele = document.elementFromPoint(intCoord.clientX, intCoord.clientY);\n      this.helperElement.style.pointerEvents = prevStyle;\n    } else {\n      ele = evt.target;\n    }\n\n    return ele;\n  }\n  /* istanbul ignore next */\n\n\n  currentStateCheck(ele, oldEle) {\n    let elem;\n\n    if (!isNullOrUndefined(this.currentStateTarget) && this.currentStateTarget !== ele) {\n      elem = this.currentStateTarget;\n    } else {\n      elem = !isNullOrUndefined(oldEle) ? oldEle : ele;\n    }\n\n    return elem;\n  }\n\n  getMousePosition(evt, isdragscroll) {\n    /* tslint:disable no-any */\n    let dragEle = evt.srcElement !== undefined ? evt.srcElement : evt.target;\n    let intCoord = this.getCoordinates(evt);\n    let pageX;\n    let pageY;\n    let isOffsetParent = isNullOrUndefined(dragEle.offsetParent);\n    /* istanbul ignore next */\n\n    if (isdragscroll) {\n      pageX = this.clone ? intCoord.pageX : intCoord.pageX + (isOffsetParent ? 0 : dragEle.offsetParent.scrollLeft) - this.relativeXPosition;\n      pageY = this.clone ? intCoord.pageY : intCoord.pageY + (isOffsetParent ? 0 : dragEle.offsetParent.scrollTop) - this.relativeYPosition;\n    } else {\n      pageX = this.clone ? intCoord.pageX : intCoord.pageX + window.pageXOffset - this.relativeXPosition;\n      pageY = this.clone ? intCoord.pageY : intCoord.pageY + window.pageYOffset - this.relativeYPosition;\n    }\n\n    if (!this.clone && this.dragArea) {\n      this.getScrollableValues();\n      pageY -= this.tempScrollHeight ? this.parentScrollY : 0;\n      pageX -= this.tempScrollWidth ? this.parentScrollX : 0;\n    }\n\n    return {\n      left: pageX - (this.margin.left + this.cursorAt.left),\n      top: pageY - (this.margin.top + this.cursorAt.top)\n    };\n  }\n\n  getCoordinates(evt) {\n    if (evt.type.indexOf('touch') > -1) {\n      return evt.changedTouches[0];\n    }\n\n    return evt;\n  }\n\n  getHelperElement(evt) {\n    let element;\n\n    if (this.clone) {\n      if (this.helper) {\n        element = this.helper({\n          sender: evt,\n          element: this.target\n        });\n      } else {\n        element = createElement('div', {\n          className: 'e-drag-helper e-block-touch',\n          innerHTML: 'Draggable'\n        });\n        document.body.appendChild(element);\n      }\n    } else {\n      element = this.element;\n    }\n\n    return element;\n  }\n\n  setGlobalDroppables(reset, drag, helper) {\n    this.droppables[this.scope] = reset ? null : {\n      draggable: drag,\n      helper: helper,\n      draggedElement: this.element\n    };\n  }\n\n  checkTargetElement(evt) {\n    let target = this.getProperTargetElement(evt);\n    let dropIns = this.getDropInstance(target);\n\n    if (!dropIns && target && !isNullOrUndefined(target.parentNode)) {\n      let parent = closest(target.parentNode, '.e-droppable') || target.parentElement;\n\n      if (parent) {\n        dropIns = this.getDropInstance(parent);\n      }\n    }\n\n    return {\n      target: target,\n      instance: dropIns\n    };\n  }\n\n  getDropInstance(ele) {\n    let name = 'getModuleName';\n    let drop;\n    let eleInst = ele && ele.ej2_instances;\n\n    if (eleInst) {\n      for (let inst of eleInst) {\n        if (inst[name]() === 'droppable') {\n          drop = inst;\n          break;\n        }\n      }\n    }\n\n    return drop;\n  }\n\n  destroy() {\n    this.toggleEvents(true);\n    super.destroy();\n  }\n\n};\n\n__decorate$2([Complex({}, Position)], Draggable.prototype, \"cursorAt\", void 0);\n\n__decorate$2([Property(true)], Draggable.prototype, \"clone\", void 0);\n\n__decorate$2([Property()], Draggable.prototype, \"dragArea\", void 0);\n\n__decorate$2([Property()], Draggable.prototype, \"isDragScroll\", void 0);\n\n__decorate$2([Property()], Draggable.prototype, \"isReplaceDragEle\", void 0);\n\n__decorate$2([Property(true)], Draggable.prototype, \"isPreventSelect\", void 0);\n\n__decorate$2([Event$1()], Draggable.prototype, \"drag\", void 0);\n\n__decorate$2([Event$1()], Draggable.prototype, \"dragStart\", void 0);\n\n__decorate$2([Event$1()], Draggable.prototype, \"dragStop\", void 0);\n\n__decorate$2([Property(1)], Draggable.prototype, \"distance\", void 0);\n\n__decorate$2([Property()], Draggable.prototype, \"handle\", void 0);\n\n__decorate$2([Property()], Draggable.prototype, \"abort\", void 0);\n\n__decorate$2([Property()], Draggable.prototype, \"helper\", void 0);\n\n__decorate$2([Property('default')], Draggable.prototype, \"scope\", void 0);\n\n__decorate$2([Property('')], Draggable.prototype, \"dragTarget\", void 0);\n\n__decorate$2([Property()], Draggable.prototype, \"axis\", void 0);\n\n__decorate$2([Property()], Draggable.prototype, \"queryPositionInfo\", void 0);\n\n__decorate$2([Property(false)], Draggable.prototype, \"enableTailMode\", void 0);\n\n__decorate$2([Property(false)], Draggable.prototype, \"skipDistanceCheck\", void 0);\n\n__decorate$2([Property(true)], Draggable.prototype, \"preventDefault\", void 0);\n\n__decorate$2([Property(false)], Draggable.prototype, \"enableAutoScroll\", void 0);\n\n__decorate$2([Property(false)], Draggable.prototype, \"enableTapHold\", void 0);\n\n__decorate$2([Property(750)], Draggable.prototype, \"tapHoldThreshold\", void 0);\n\nDraggable = Draggable_1 = __decorate$2([NotifyPropertyChanges], Draggable);\n\nvar __decorate$3 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * Droppable Module provides support to enable droppable functionality in Dom Elements.\n * ```html\n * <div id='drop'>Droppable</div>\n * <script>\n * let ele:HTMLElement = document.getElementById('drop');\n * var drag:Droppable = new Droppable(ele,{\n *     accept:'.drop',\n *     drop: function(e) {\n *      //drop handler code.\n *     }\n * });\n * </script>\n * ```\n */\n\n\nlet Droppable = class Droppable extends Base {\n  constructor(element, options) {\n    super(options, element);\n    this.mouseOver = false;\n    this.dragData = {};\n    this.dragStopCalled = false;\n    this.bind();\n  }\n\n  bind() {\n    this.wireEvents();\n  }\n\n  wireEvents() {\n    EventHandler.add(this.element, Browser.touchEndEvent, this.intDrop, this);\n  } // triggers when property changed\n\n\n  onPropertyChanged(newProp, oldProp) {//No Code to handle\n  }\n\n  getModuleName() {\n    return 'droppable';\n  }\n\n  intOver(event, element) {\n    if (!this.mouseOver) {\n      let drag = this.dragData[this.scope];\n      this.trigger('over', {\n        event: event,\n        target: element,\n        dragData: drag\n      });\n      this.mouseOver = true;\n    }\n  }\n\n  intOut(event, element) {\n    if (this.mouseOver) {\n      this.trigger('out', {\n        evt: event,\n        target: element\n      });\n      this.mouseOver = false;\n    }\n  }\n\n  intDrop(evt, element) {\n    if (!this.dragStopCalled) {\n      return;\n    } else {\n      this.dragStopCalled = false;\n    }\n\n    let accept = true;\n    let drag = this.dragData[this.scope];\n    let isDrag = drag ? drag.helper && isVisible(drag.helper) : false;\n    let area;\n\n    if (isDrag) {\n      area = this.isDropArea(evt, drag.helper, element);\n\n      if (this.accept) {\n        accept = matches(drag.helper, this.accept);\n      }\n    }\n\n    if (isDrag && this.drop && area.canDrop && accept) {\n      this.trigger('drop', {\n        event: evt,\n        target: area.target,\n        droppedElement: drag.helper,\n        dragData: drag\n      });\n    }\n\n    this.mouseOver = false;\n  }\n\n  isDropArea(evt, helper, element) {\n    let area = {\n      canDrop: true,\n      target: element || evt.target\n    };\n    let isTouch = evt.type === 'touchend';\n\n    if (isTouch || area.target === helper) {\n      helper.style.display = 'none';\n      let coord = isTouch ? evt.changedTouches[0] : evt;\n      let ele = document.elementFromPoint(coord.clientX, coord.clientY);\n      area.canDrop = false;\n      area.canDrop = compareElementParent(ele, this.element);\n\n      if (area.canDrop) {\n        area.target = ele;\n      }\n\n      helper.style.display = '';\n    }\n\n    return area;\n  }\n\n  destroy() {\n    EventHandler.remove(this.element, Browser.touchEndEvent, this.intDrop);\n    super.destroy();\n  }\n\n};\n\n__decorate$3([Property()], Droppable.prototype, \"accept\", void 0);\n\n__decorate$3([Property('default')], Droppable.prototype, \"scope\", void 0);\n\n__decorate$3([Event$1()], Droppable.prototype, \"drop\", void 0);\n\n__decorate$3([Event$1()], Droppable.prototype, \"over\", void 0);\n\n__decorate$3([Event$1()], Droppable.prototype, \"out\", void 0);\n\nDroppable = __decorate$3([NotifyPropertyChanges], Droppable);\n\nvar __decorate$4 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar KeyboardEvents_1;\nlet keyCode = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'space': 32,\n  'escape': 27,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'leftarrow': 37,\n  'uparrow': 38,\n  'rightarrow': 39,\n  'downarrow': 40,\n  'insert': 45,\n  'delete': 46,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'semicolon': 186,\n  'plus': 187,\n  'comma': 188,\n  'minus': 189,\n  'dot': 190,\n  'forwardslash': 191,\n  'graveaccent': 192,\n  'openbracket': 219,\n  'backslash': 220,\n  'closebracket': 221,\n  'singlequote': 222\n};\n/**\n * KeyboardEvents class enables you to bind key action desired key combinations for ex., Ctrl+A, Delete, Alt+Space etc.\n * ```html\n * <div id='testEle'>  </div>;\n * <script>\n *   let node: HTMLElement = document.querySelector('#testEle');\n *   let kbInstance = new KeyboardEvents({\n *       element: node,\n *       keyConfigs:{ selectAll : 'ctrl+a' },\n *       keyAction: function (e:KeyboardEvent, action:string) {\n *           // handler function code\n *       }\n *   });\n * </script>\n * ```\n */\n\nlet KeyboardEvents = KeyboardEvents_1 = class KeyboardEvents extends Base {\n  /**\n   * Initializes the KeyboardEvents\n   * @param {HTMLElement} element\n   * @param {KeyboardEventsModel} options\n   */\n  constructor(element, options) {\n    super(options, element);\n    /**\n     * To handle a key press event returns null\n     */\n\n    this.keyPressHandler = e => {\n      let isAltKey = e.altKey;\n      let isCtrlKey = e.ctrlKey;\n      let isShiftKey = e.shiftKey;\n      let curkeyCode = e.which;\n      let keys = Object.keys(this.keyConfigs);\n\n      for (let key of keys) {\n        let configCollection = this.keyConfigs[key].split(',');\n\n        for (let rconfig of configCollection) {\n          let rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());\n\n          if (isAltKey === rKeyObj.altKey && isCtrlKey === rKeyObj.ctrlKey && isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode) {\n            e.action = key;\n\n            if (this.keyAction) {\n              this.keyAction(e);\n            }\n          }\n        }\n      }\n    };\n\n    this.bind();\n  }\n  /**\n   * Unwire bound events and destroy the instance.\n   * @return {void}\n   */\n\n\n  destroy() {\n    this.unwireEvents();\n    super.destroy();\n  }\n  /**\n   * Function can be used to specify certain action if a property is changed\n   * @param newProp\n   * @param oldProp\n   * @returns {void}\n   * @private\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {// No code are needed\n  }\n\n  bind() {\n    this.wireEvents();\n  }\n  /**\n   * To get the module name, returns 'keyboard'.\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'keyboard';\n  }\n  /**\n   * Wiring event handlers to events\n   */\n\n\n  wireEvents() {\n    this.element.addEventListener(this.eventName, this.keyPressHandler);\n  }\n  /**\n   * Unwiring event handlers to events\n   */\n\n\n  unwireEvents() {\n    this.element.removeEventListener(this.eventName, this.keyPressHandler);\n  }\n  /**\n   * To get the key configuration data\n   * @param {string} config - configuration data\n   * returns {KeyData}\n   */\n\n\n  static getKeyConfigData(config) {\n    if (config in this.configCache) {\n      return this.configCache[config];\n    }\n\n    let keys = config.toLowerCase().split('+');\n    let keyData = {\n      altKey: keys.indexOf('alt') !== -1 ? true : false,\n      ctrlKey: keys.indexOf('ctrl') !== -1 ? true : false,\n      shiftKey: keys.indexOf('shift') !== -1 ? true : false,\n      keyCode: null\n    };\n\n    if (keys[keys.length - 1].length > 1 && !!Number(keys[keys.length - 1])) {\n      keyData.keyCode = Number(keys[keys.length - 1]);\n    } else {\n      keyData.keyCode = KeyboardEvents_1.getKeyCode(keys[keys.length - 1]);\n    }\n\n    KeyboardEvents_1.configCache[config] = keyData;\n    return keyData;\n  } // Return the keycode value as string \n\n\n  static getKeyCode(keyVal) {\n    return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);\n  }\n\n};\nKeyboardEvents.configCache = {};\n\n__decorate$4([Property({})], KeyboardEvents.prototype, \"keyConfigs\", void 0);\n\n__decorate$4([Property('keyup')], KeyboardEvents.prototype, \"eventName\", void 0);\n\n__decorate$4([Event$1()], KeyboardEvents.prototype, \"keyAction\", void 0);\n\nKeyboardEvents = KeyboardEvents_1 = __decorate$4([NotifyPropertyChanges], KeyboardEvents);\n/**\n * L10n modules provides localized text for different culture.\n * ```typescript\n * import {setCulture} from '@syncfusion/ts-base-library';\n * //load global locale object common for all components.\n * L10n.load({\n *    'fr-BE': {\n *       'button': {\n *            'check': 'vérifié'\n *        }\n *    }\n * });\n * //set globale default locale culture.\n * setCulture('fr-BE');\n * let instance: L10n = new L10n('button', {\n *    check: 'checked'\n * });\n * //Get locale text for current property.\n * instance.getConstant('check');\n * //Change locale culture in a component.\n * instance.setLocale('en-US');\n * ```\n */\n\nlet L10n = /*#__PURE__*/(() => {\n  class L10n {\n    /**\n     * Constructor\n     */\n    constructor(controlName, localeStrings, locale) {\n      this.controlName = controlName;\n      this.localeStrings = localeStrings;\n      this.setLocale(locale || defaultCulture);\n    }\n    /**\n     * Sets the locale text\n     * @param {string} locale\n     * @returns {void}\n     */\n\n\n    setLocale(locale) {\n      let intLocale = this.intGetControlConstant(L10n.locale, locale);\n      this.currentLocale = intLocale || this.localeStrings;\n    }\n    /**\n     * Sets the global locale for all components.\n     * @param {Object} localeObject - specifies the localeObject to be set as global locale.\n     */\n\n\n    static load(localeObject) {\n      this.locale = extend(this.locale, localeObject, {}, true);\n    }\n    /**\n     * Returns current locale text for the property based on the culture name and control name.\n     * @param {string} propertyName - specifies the property for which localize text to be returned.\n     * @return string\n     */\n\n\n    getConstant(prop) {\n      // Removed conditional operator because this method does not return correct value when passing 0 as value in localization\n      if (!isNullOrUndefined(this.currentLocale[prop])) {\n        return this.currentLocale[prop];\n      } else {\n        return this.localeStrings[prop] || '';\n      }\n    }\n    /**\n     * Returns the control constant object for current object and the locale specified.\n     * @param {Object} curObject\n     * @param {string} locale\n     * @returns {Object}\n     */\n\n\n    intGetControlConstant(curObject, locale) {\n      if (curObject[locale]) {\n        return curObject[locale][this.controlName];\n      }\n\n      return null;\n    }\n\n  }\n\n  L10n.locale = {};\n  return L10n;\n})();\n\nvar __decorate$5 = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n/**\n * SwipeSettings is a framework module that provides support to handle swipe event like swipe up, swipe right, etc..,\n */\n\n\nclass SwipeSettings extends ChildProperty {}\n\n__decorate$5([Property(50)], SwipeSettings.prototype, \"swipeThresholdDistance\", void 0);\n\nconst swipeRegex = /(Up|Down)/;\n/**\n * Touch class provides support to handle the touch event like tap, double tap, tap hold, etc..,\n * ```typescript\n *    let node: HTMLElement;\n * let touchObj: Touch = new Touch({\n *    element: node,\n *    tap: function (e) {\n *        // tap handler function code\n *    }\n *    tapHold: function (e) {\n *        // tap hold handler function code\n *    }\n *    scroll: function (e) {\n *        // scroll handler function code\n *    }\n *    swipe: function (e) {\n *        // swipe handler function code\n *    }\n * });\n * ```\n */\n\nlet Touch = class Touch extends Base {\n  /* End-Properties */\n  constructor(element, options) {\n    super(options, element);\n    this.touchAction = true;\n    this.tapCount = 0;\n\n    this.startEvent = evt => {\n      if (this.touchAction === true) {\n        let point = this.updateChangeTouches(evt);\n\n        if (evt.changedTouches !== undefined) {\n          this.touchAction = false;\n        }\n\n        this.isTouchMoved = false;\n        this.movedDirection = '';\n        this.startPoint = this.lastMovedPoint = {\n          clientX: point.clientX,\n          clientY: point.clientY\n        };\n        this.startEventData = point;\n        this.hScrollLocked = this.vScrollLocked = false;\n        this.tStampStart = Date.now();\n        this.timeOutTapHold = setTimeout(() => {\n          this.tapHoldEvent(evt);\n        }, this.tapHoldThreshold);\n        EventHandler.add(this.element, Browser.touchMoveEvent, this.moveEvent, this);\n        EventHandler.add(this.element, Browser.touchEndEvent, this.endEvent, this);\n        EventHandler.add(this.element, Browser.touchCancelEvent, this.cancelEvent, this);\n      }\n    };\n\n    this.moveEvent = evt => {\n      let point = this.updateChangeTouches(evt);\n      this.movedPoint = point;\n      this.isTouchMoved = !(point.clientX === this.startPoint.clientX && point.clientY === this.startPoint.clientY);\n      let eScrollArgs = {};\n\n      if (this.isTouchMoved) {\n        clearTimeout(this.timeOutTapHold);\n        this.calcScrollPoints(evt);\n        let scrollArg = {\n          startEvents: this.startEventData,\n          originalEvent: evt,\n          startX: this.startPoint.clientX,\n          startY: this.startPoint.clientY,\n          distanceX: this.distanceX,\n          distanceY: this.distanceY,\n          scrollDirection: this.scrollDirection,\n          velocity: this.getVelocity(point)\n        };\n        eScrollArgs = extend(eScrollArgs, {}, scrollArg);\n        this.trigger('scroll', eScrollArgs);\n        this.lastMovedPoint = {\n          clientX: point.clientX,\n          clientY: point.clientY\n        };\n      }\n    };\n\n    this.cancelEvent = evt => {\n      clearTimeout(this.timeOutTapHold);\n      clearTimeout(this.timeOutTap);\n      this.tapCount = 0;\n      this.swipeFn(evt);\n      EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n    };\n\n    this.endEvent = evt => {\n      this.swipeFn(evt);\n\n      if (!this.isTouchMoved) {\n        if (typeof this.tap === 'function') {\n          this.trigger('tap', {\n            originalEvent: evt,\n            tapCount: ++this.tapCount\n          });\n          this.timeOutTap = setTimeout(() => {\n            this.tapCount = 0;\n          }, this.tapThreshold);\n        }\n      }\n\n      this.modeclear();\n    };\n\n    this.swipeFn = evt => {\n      clearTimeout(this.timeOutTapHold);\n      clearTimeout(this.timeOutTap);\n      let point = this.updateChangeTouches(evt);\n      let diffX = point.clientX - this.startPoint.clientX;\n      let diffY = point.clientY - this.startPoint.clientY;\n      diffX = Math.floor(diffX < 0 ? -1 * diffX : diffX);\n      diffY = Math.floor(diffY < 0 ? -1 * diffY : diffX);\n      this.isTouchMoved = diffX > 1 || diffY > 1; // tslint:disable-next-line:no-any\n\n      const isFirefox = /Mozilla|Firefox/.test(Browser.userAgent);\n\n      if (isFirefox && point.clientX === 0 && point.clientY === 0 && evt.type === 'mouseup') {\n        this.isTouchMoved = false;\n      }\n\n      this.endPoint = point;\n      this.calcPoints(evt);\n      let swipeArgs = {\n        originalEvent: evt,\n        startEvents: this.startEventData,\n        startX: this.startPoint.clientX,\n        startY: this.startPoint.clientY,\n        distanceX: this.distanceX,\n        distanceY: this.distanceY,\n        swipeDirection: this.movedDirection,\n        velocity: this.getVelocity(point)\n      };\n\n      if (this.isTouchMoved) {\n        let eSwipeArgs;\n        let tDistance = this.swipeSettings.swipeThresholdDistance;\n        eSwipeArgs = extend(eSwipeArgs, this.defaultArgs, swipeArgs);\n        let canTrigger = false;\n        let ele = this.element;\n        let scrollBool = this.isScrollable(ele);\n        let moved = swipeRegex.test(this.movedDirection);\n\n        if (tDistance < this.distanceX && !moved || tDistance < this.distanceY && moved) {\n          if (!scrollBool) {\n            canTrigger = true;\n          } else {\n            canTrigger = this.checkSwipe(ele, moved);\n          }\n        }\n\n        if (canTrigger) {\n          this.trigger('swipe', eSwipeArgs);\n        }\n      }\n\n      this.modeclear();\n    };\n\n    this.modeclear = () => {\n      this.modeClear = setTimeout(() => {\n        this.touchAction = true;\n      }, typeof this.tap !== 'function' ? 0 : 20);\n      this.lastTapTime = new Date().getTime();\n      EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent);\n      EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent);\n      EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n    };\n\n    this.bind();\n  } // triggers when property changed \n\n  /**\n   * @private\n   * @param newProp\n   * @param oldProp\n   */\n\n\n  onPropertyChanged(newProp, oldProp) {//No Code to handle\n  }\n\n  bind() {\n    this.wireEvents();\n\n    if (Browser.isIE) {\n      this.element.classList.add('e-block-touch');\n    }\n  }\n  /**\n   * To destroy the touch instance.\n   * @return {void}\n   */\n\n\n  destroy() {\n    this.unwireEvents();\n    super.destroy();\n  } // Need to changes the event binding once we updated the event handler.\n\n\n  wireEvents() {\n    EventHandler.add(this.element, Browser.touchStartEvent, this.startEvent, this);\n  }\n\n  unwireEvents() {\n    EventHandler.remove(this.element, Browser.touchStartEvent, this.startEvent);\n  }\n  /**\n   * Returns module name as touch\n   * @returns {string}\n   * @private\n   */\n\n\n  getModuleName() {\n    return 'touch';\n  }\n  /**\n   * Returns if the HTML element is Scrollable.\n   * @param {HTMLElement} element - HTML Element to check if Scrollable.\n   * @returns {boolean}\n   */\n\n\n  isScrollable(element) {\n    let eleStyle = getComputedStyle(element);\n    let style = eleStyle.overflow + eleStyle.overflowX + eleStyle.overflowY;\n\n    if (/(auto|scroll)/.test(style)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  tapHoldEvent(evt) {\n    this.tapCount = 0;\n    this.touchAction = true;\n    let eTapArgs;\n    EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent);\n    EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent);\n    eTapArgs = {\n      originalEvent: evt\n    };\n    this.trigger('tapHold', eTapArgs);\n    EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);\n  }\n\n  calcPoints(evt) {\n    let point = this.updateChangeTouches(evt);\n    this.defaultArgs = {\n      originalEvent: evt\n    };\n    this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.startPoint.clientX));\n    this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.startPoint.clientY));\n\n    if (this.distanceX > this.distanceY) {\n      this.movedDirection = point.clientX > this.startPoint.clientX ? 'Right' : 'Left';\n    } else {\n      this.movedDirection = point.clientY < this.startPoint.clientY ? 'Up' : 'Down';\n    }\n  }\n\n  calcScrollPoints(evt) {\n    let point = this.updateChangeTouches(evt);\n    this.defaultArgs = {\n      originalEvent: evt\n    };\n    this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.lastMovedPoint.clientX));\n    this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.lastMovedPoint.clientY));\n\n    if ((this.distanceX > this.distanceY || this.hScrollLocked === true) && this.vScrollLocked === false) {\n      this.scrollDirection = point.clientX > this.lastMovedPoint.clientX ? 'Right' : 'Left';\n      this.hScrollLocked = true;\n    } else {\n      this.scrollDirection = point.clientY < this.lastMovedPoint.clientY ? 'Up' : 'Down';\n      this.vScrollLocked = true;\n    }\n  }\n\n  getVelocity(pnt) {\n    let newX = pnt.clientX;\n    let newY = pnt.clientY;\n    let newT = Date.now();\n    let xDist = newX - this.startPoint.clientX;\n    let yDist = newY - this.startPoint.clientX;\n    let interval = newT - this.tStampStart;\n    return Math.sqrt(xDist * xDist + yDist * yDist) / interval;\n  } // tslint:disable-next-line:no-any\n\n\n  checkSwipe(ele, flag) {\n    let keys = ['scroll', 'offset'];\n    let temp = flag ? ['Height', 'Top'] : ['Width', 'Left'];\n\n    if (ele[keys[0] + temp[0]] <= ele[keys[1] + temp[0]]) {\n      return true;\n    }\n\n    return ele[keys[0] + temp[1]] === 0 || ele[keys[1] + temp[0]] + ele[keys[0] + temp[1]] >= ele[keys[0] + temp[0]];\n  }\n\n  updateChangeTouches(evt) {\n    // tslint:disable-next-line:max-line-length\n    let point = evt.changedTouches && evt.changedTouches.length !== 0 ? evt.changedTouches[0] : evt;\n    return point;\n  }\n\n};\n\n__decorate$5([Event$1()], Touch.prototype, \"tap\", void 0);\n\n__decorate$5([Event$1()], Touch.prototype, \"tapHold\", void 0);\n\n__decorate$5([Event$1()], Touch.prototype, \"swipe\", void 0);\n\n__decorate$5([Event$1()], Touch.prototype, \"scroll\", void 0);\n\n__decorate$5([Property(350)], Touch.prototype, \"tapThreshold\", void 0);\n\n__decorate$5([Property(750)], Touch.prototype, \"tapHoldThreshold\", void 0);\n\n__decorate$5([Complex({}, SwipeSettings)], Touch.prototype, \"swipeSettings\", void 0);\n\nTouch = __decorate$5([NotifyPropertyChanges], Touch);\n/**\n * SanitizeHtmlHelper for sanitize the value.\n */\n\nconst removeTags = ['script', 'style', 'iframe[src]', 'link[href*=\"javascript:\"]', 'object[type=\"text/x-scriptlet\"]', 'object[data^=\"data:text/html;base64\"]', 'img[src^=\"data:text/html;base64\"]', '[src^=\"javascript:\"]', '[dynsrc^=\"javascript:\"]', '[lowsrc^=\"javascript:\"]', '[type^=\"application/x-shockwave-flash\"]'];\nconst removeAttrs = [{\n  attribute: 'href',\n  selector: '[href*=\"javascript:\"]'\n}, {\n  attribute: 'background',\n  selector: '[background^=\"javascript:\"]'\n}, {\n  attribute: 'style',\n  selector: '[style*=\"javascript:\"]'\n}, {\n  attribute: 'style',\n  selector: '[style*=\"expression(\"]'\n}, {\n  attribute: 'href',\n  selector: 'a[href^=\"data:text/html;base64\"]'\n}];\nconst jsEvents = ['onchange', 'onclick', 'onmouseover', 'onmouseout', 'onkeydown', 'onload', 'onerror', 'onblur', 'onfocus', 'onbeforeload', 'onbeforeunload', 'onkeyup', 'onsubmit', 'onafterprint', 'onbeforeonload', 'onbeforeprint', 'onblur', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'oncontextmenu', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onemptied', 'onended', 'onerror', 'onerror', 'onfocus', 'onformchange', 'onforminput', 'onhaschange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'onoine', 'ononline', 'onpagehide', 'onpageshow', 'onpause', 'onplay', 'onplaying', 'onpopstate', 'onprogress', 'onratechange', 'onreadystatechange', 'onredo', 'onresize', 'onscroll', 'onseeked', 'onseeking', 'onselect', 'onstalled', 'onstorage', 'onsubmit', 'onsuspend', 'ontimeupdate', 'onundo', 'onunload', 'onvolumechange', 'onwaiting', 'onmouseenter', 'onmouseleave', 'onmousewheel', 'onstart', 'onpropertychange'];\n\nclass SanitizeHtmlHelper {\n  static beforeSanitize() {\n    return {\n      selectors: {\n        tags: removeTags,\n        attributes: removeAttrs\n      }\n    };\n  }\n\n  static sanitize(value) {\n    let item = this.beforeSanitize();\n    let output = this.serializeValue(item, value);\n    return output;\n  }\n\n  static serializeValue(item, value) {\n    this.removeAttrs = item.selectors.attributes;\n    this.removeTags = item.selectors.tags;\n    this.wrapElement = document.createElement('div');\n    this.wrapElement.innerHTML = value;\n    this.removeXssTags();\n    this.removeJsEvents();\n    this.removeXssAttrs();\n    let tempEleValue = this.wrapElement.innerHTML;\n    this.removeElement();\n    return tempEleValue;\n  }\n\n  static removeElement() {\n    // Removes an element's attibute to avoid html tag validation\n    let nodes = this.wrapElement.children;\n\n    for (let j = 0; j < nodes.length; j++) {\n      let attribute = nodes[j].attributes;\n\n      for (let i = 0; i < attribute.length; i++) {\n        this.wrapElement.children[j].removeAttribute(attribute[i].localName);\n      }\n    }\n  }\n\n  static removeXssTags() {\n    let elements = this.wrapElement.querySelectorAll(this.removeTags.join(','));\n\n    if (elements.length > 0) {\n      elements.forEach(element => {\n        detach(element);\n      });\n    } else {\n      return;\n    }\n  }\n\n  static removeJsEvents() {\n    let elements = this.wrapElement.querySelectorAll('[' + jsEvents.join('],[') + ']');\n\n    if (elements.length > 0) {\n      elements.forEach(element => {\n        jsEvents.forEach(attr => {\n          if (element.hasAttribute(attr)) {\n            element.removeAttribute(attr);\n          }\n        });\n      });\n    } else {\n      return;\n    }\n  }\n\n  static removeXssAttrs() {\n    this.removeAttrs.forEach((item, index) => {\n      let elements = this.wrapElement.querySelectorAll(item.selector);\n\n      if (elements.length > 0) {\n        elements.forEach(element => {\n          element.removeAttribute(item.attribute);\n        });\n      }\n    });\n  }\n\n}\n/**\n * Base modules\n */\n\n\nexport { blazorCultureFormats, IntlBase, Ajax, Animation, rippleEffect, isRippleEnabled, enableRipple, Base, getComponent, removeChildInstance, Browser, versionBasedStatePersistence, enableVersionBasedPersistence, Component, ChildProperty, Position, Draggable, Droppable, EventHandler, onIntlChange, rightToLeft, cldrData, defaultCulture, defaultCurrencyCode, Internationalization, setCulture, setCurrencyCode, loadCldr, enableRtl, getNumericObject, getNumberDependable, getDefaultDateObject, KeyboardEvents, L10n, ModuleLoader, Property, Complex, ComplexFactory, Collection, CollectionFactory, Event$1 as Event, NotifyPropertyChanges, CreateBuilder, SwipeSettings, Touch, HijriParser, blazorTemplates, getRandomId, compile$$1 as compile, updateBlazorTemplate, resetBlazorTemplate, setTemplateEngine, getTemplateEngine, disableBlazorMode, createInstance, setImmediate, getValue, setValue, deleteObject, isObject, getEnumValue, merge, extend, isNullOrUndefined, isUndefined, getUniqueID, debounce, queryParams, isObjectArray, compareElementParent, throwError, print, formatUnit, enableBlazorMode, isBlazor, getElement, getInstance, addInstance, uniqueID, createElement, addClass, removeClass, isVisible, prepend, append, detach, remove, attributes, select, selectAll, closest, siblings, getAttributeOrDefault, setStyleAttribute, classList, matches, includeInnerHTML, containsClass, cloneNode, Observer, SanitizeHtmlHelper }; //# sourceMappingURL=ej2-base.es2015.js.map","map":null,"metadata":{},"sourceType":"module"}