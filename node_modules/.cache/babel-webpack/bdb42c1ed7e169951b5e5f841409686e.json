{"ast":null,"code":"import { Ajax, extend, getValue, isNullOrUndefined, merge, setValue } from '@syncfusion/ej2-base';\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\n\nclass Query {\n  /**\n   * Constructor for Query class.\n   * @param  {string|string[]} from?\n   * @hidden\n   */\n  constructor(from) {\n    /** @hidden */\n    this.subQuery = null;\n    /** @hidden */\n\n    this.isChild = false;\n    /** @hidden */\n\n    this.distincts = [];\n    this.queries = [];\n    this.key = '';\n    this.fKey = '';\n\n    if (typeof from === 'string') {\n      this.fromTable = from;\n    } else if (from && from instanceof Array) {\n      this.lookups = from;\n    }\n\n    this.expands = [];\n    this.sortedColumns = [];\n    this.groupedColumns = [];\n    this.subQuery = null;\n    this.isChild = false;\n    this.params = [];\n    this.lazyLoad = [];\n    return this;\n  }\n  /**\n   * Sets the primary key.\n   * @param  {string} field - Defines the column field.\n   */\n\n\n  setKey(field) {\n    this.key = field;\n    return this;\n  }\n  /**\n   * Sets default DataManager to execute query.\n   * @param  {DataManager} dataManager - Defines the DataManager.\n   */\n\n\n  using(dataManager) {\n    this.dataManager = dataManager;\n    return this;\n  }\n  /**\n   * Executes query with the given DataManager.\n   * @param  {DataManager} dataManager - Defines the DataManager.\n   * @param  {Function} done - Defines the success callback.\n   * @param  {Function} fail - Defines the failure callback.\n   * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n   *\n   * <pre>\n   * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n   * let query: Query = new Query();\n   * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n   * let promise: Promise< Object > = query.execute(dataManager);\n   * promise.then((e: { result: Object }) => { });\n   * </pre>\n   */\n\n\n  execute(dataManager, done, fail, always) {\n    dataManager = dataManager || this.dataManager;\n\n    if (dataManager) {\n      return dataManager.executeQuery(this, done, fail, always);\n    }\n\n    return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n  }\n  /**\n   * Executes query with the local datasource.\n   * @param  {DataManager} dataManager - Defines the DataManager.\n   */\n\n\n  executeLocal(dataManager) {\n    dataManager = dataManager || this.dataManager;\n\n    if (dataManager) {\n      return dataManager.executeLocal(this);\n    }\n\n    return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n  }\n  /**\n   * Creates deep copy of the Query object.\n   */\n\n\n  clone() {\n    let cloned = new Query();\n    cloned.queries = this.queries.slice(0);\n    cloned.key = this.key;\n    cloned.isChild = this.isChild;\n    cloned.dataManager = this.dataManager;\n    cloned.fromTable = this.fromTable;\n    cloned.params = this.params.slice(0);\n    cloned.expands = this.expands.slice(0);\n    cloned.sortedColumns = this.sortedColumns.slice(0);\n    cloned.groupedColumns = this.groupedColumns.slice(0);\n    cloned.subQuerySelector = this.subQuerySelector;\n    cloned.subQuery = this.subQuery;\n    cloned.fKey = this.fKey;\n    cloned.isCountRequired = this.isCountRequired;\n    cloned.distincts = this.distincts.slice(0);\n    cloned.lazyLoad = this.lazyLoad.slice(0);\n    return cloned;\n  }\n  /**\n   * Specifies the name of table to retrieve data in query execution.\n   * @param  {string} tableName - Defines the table name.\n   */\n\n\n  from(tableName) {\n    this.fromTable = tableName;\n    return this;\n  }\n  /**\n   * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n   * @param  {string} key - Defines the key of additional parameter.\n   * @param  {Function|string} value - Defines the value for the key.\n   */\n\n\n  addParams(key, value) {\n    if (typeof value === 'function') {\n      this.params.push({\n        key: key,\n        fn: value\n      });\n    } else {\n      this.params.push({\n        key: key,\n        value: value\n      });\n    }\n\n    return this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  distinct(fields) {\n    if (typeof fields === 'string') {\n      this.distincts = [].slice.call([fields], 0);\n    } else {\n      this.distincts = fields.slice(0);\n    }\n\n    return this;\n  }\n  /**\n   * Expands the related table.\n   * @param  {string|Object[]} tables\n   */\n\n\n  expand(tables) {\n    if (typeof tables === 'string') {\n      this.expands = [].slice.call([tables], 0);\n    } else {\n      this.expands = tables.slice(0);\n    }\n\n    return this;\n  }\n  /**\n   * Filter data with given filter criteria.\n   * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n   * @param  {string} operator - Defines the operator how to filter data.\n   * @param  {string|number|boolean} value - Defines the values to match with data.\n   * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   */\n\n\n  where(fieldName, operator, value, ignoreCase, ignoreAccent) {\n    operator = operator ? operator.toLowerCase() : null;\n    let predicate = null;\n\n    if (typeof fieldName === 'string') {\n      predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n    } else if (fieldName instanceof Predicate) {\n      predicate = fieldName;\n    }\n\n    this.queries.push({\n      fn: 'onWhere',\n      e: predicate\n    });\n    return this;\n  }\n  /**\n   * Search data with given search criteria.\n   * @param  {string|number|boolean} searchKey - Defines the search key.\n   * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n   * @param  {string} operator - Defines the operator how to search data.\n   * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   */\n\n\n  search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n    if (typeof fieldNames === 'string') {\n      fieldNames = [fieldNames];\n    }\n\n    if (!operator || operator === 'none') {\n      operator = 'contains';\n    }\n\n    let comparer = DataUtil.fnOperators[operator];\n    this.queries.push({\n      fn: 'onSearch',\n      e: {\n        fieldNames: fieldNames,\n        operator: operator,\n        searchKey: searchKey,\n        ignoreCase: ignoreCase,\n        ignoreAccent: ignoreAccent,\n        comparer: comparer\n      }\n    });\n    return this;\n  }\n  /**\n   * Sort the data with given sort criteria.\n   * By default, sort direction is ascending.\n   * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n   * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n   */\n\n\n  sortBy(fieldName, comparer, isFromGroup) {\n    return this.sortByForeignKey(fieldName, comparer, isFromGroup);\n  }\n  /**\n   * Sort the data with given sort criteria.\n   * By default, sort direction is ascending.\n   * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n   * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n   * @param  {string} direction - Defines the sort direction .\n   */\n\n\n  sortByForeignKey(fieldName, comparer, isFromGroup, direction) {\n    let order = !isNullOrUndefined(direction) ? direction : 'ascending';\n    let sorts;\n    let temp;\n\n    if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n      fieldName = fieldName.replace(/ desc$/i, '');\n      comparer = 'descending';\n    }\n\n    if (!comparer || typeof comparer === 'string') {\n      order = comparer ? comparer.toLowerCase() : 'ascending';\n      comparer = DataUtil.fnSort(comparer);\n    }\n\n    if (isFromGroup) {\n      sorts = Query.filterQueries(this.queries, 'onSortBy');\n\n      for (let i = 0; i < sorts.length; i++) {\n        temp = sorts[i].e.fieldName;\n\n        if (typeof temp === 'string') {\n          if (temp === fieldName) {\n            return this;\n          }\n        } else if (temp instanceof Array) {\n          for (let j = 0; j < temp.length; j++) {\n            if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n              return this;\n            }\n          }\n        }\n      }\n    }\n\n    this.queries.push({\n      fn: 'onSortBy',\n      e: {\n        fieldName: fieldName,\n        comparer: comparer,\n        direction: order\n      }\n    });\n    return this;\n  }\n  /**\n   * Sorts data in descending order.\n   * @param  {string} fieldName - Defines the column field.\n   */\n\n\n  sortByDesc(fieldName) {\n    return this.sortBy(fieldName, 'descending');\n  }\n  /**\n   * Groups data with the given field name.\n   * @param  {string} fieldName - Defines the column field.\n   */\n\n\n  group(fieldName, fn, format) {\n    this.sortBy(fieldName, null, true);\n    this.queries.push({\n      fn: 'onGroup',\n      e: {\n        fieldName: fieldName,\n        comparer: fn ? fn : null,\n        format: format ? format : null\n      }\n    });\n    return this;\n  }\n  /**\n   * Gets data based on the given page index and size.\n   * @param  {number} pageIndex - Defines the current page index.\n   * @param  {number} pageSize - Defines the no of records per page.\n   */\n\n\n  page(pageIndex, pageSize) {\n    this.queries.push({\n      fn: 'onPage',\n      e: {\n        pageIndex: pageIndex,\n        pageSize: pageSize\n      }\n    });\n    return this;\n  }\n  /**\n   * Gets data based on the given start and end index.\n   * @param  {number} start - Defines the start index of the datasource.\n   * @param  {number} end - Defines the end index of the datasource.\n   */\n\n\n  range(start, end) {\n    this.queries.push({\n      fn: 'onRange',\n      e: {\n        start: start,\n        end: end\n      }\n    });\n    return this;\n  }\n  /**\n   * Gets data from the top of the data source based on given number of records count.\n   * @param  {number} nos - Defines the no of records to retrieve from datasource.\n   */\n\n\n  take(nos) {\n    this.queries.push({\n      fn: 'onTake',\n      e: {\n        nos: nos\n      }\n    });\n    return this;\n  }\n  /**\n   * Skips data with given number of records count from the top of the data source.\n   * @param  {number} nos - Defines the no of records skip in the datasource.\n   */\n\n\n  skip(nos) {\n    this.queries.push({\n      fn: 'onSkip',\n      e: {\n        nos: nos\n      }\n    });\n    return this;\n  }\n  /**\n   * Selects specified columns from the data source.\n   * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n   */\n\n\n  select(fieldNames) {\n    if (typeof fieldNames === 'string') {\n      fieldNames = [].slice.call([fieldNames], 0);\n    }\n\n    this.queries.push({\n      fn: 'onSelect',\n      e: {\n        fieldNames: fieldNames\n      }\n    });\n    return this;\n  }\n  /**\n   * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n   * @param  {Query} query - Defines the query to relate two tables.\n   * @param  {Function} selectorFn - Defines the custom function to select records.\n   */\n\n\n  hierarchy(query, selectorFn) {\n    this.subQuerySelector = selectorFn;\n    this.subQuery = query;\n    return this;\n  }\n  /**\n   * Sets the foreign key which is used to get data from the related table.\n   * @param  {string} key - Defines the foreign key.\n   */\n\n\n  foreignKey(key) {\n    this.fKey = key;\n    return this;\n  }\n  /**\n   * It is used to get total number of records in the DataManager execution result.\n   */\n\n\n  requiresCount() {\n    this.isCountRequired = true;\n    return this;\n  } //type - sum, avg, min, max\n\n  /**\n   * Aggregate the data with given type and field name.\n   * @param  {string} type - Defines the aggregate type.\n   * @param  {string} field - Defines the column field to aggregate.\n   */\n\n\n  aggregate(type, field) {\n    this.queries.push({\n      fn: 'onAggregates',\n      e: {\n        field: field,\n        type: type\n      }\n    });\n    return this;\n  }\n  /**\n   * Pass array of filterColumn query for performing filter operation.\n   * @param  {QueryOptions[]} queries\n   * @param  {string} name\n   * @hidden\n   */\n\n\n  static filterQueries(queries, name) {\n    return queries.filter(q => {\n      return q.fn === name;\n    });\n  }\n  /**\n   * To get the list of queries which is already filtered in current data source.\n   * @param  {Object[]} queries\n   * @param  {string[]} singles\n   * @hidden\n   */\n\n\n  static filterQueryLists(queries, singles) {\n    let filtered = queries.filter(q => {\n      return singles.indexOf(q.fn) !== -1;\n    });\n    let res = {};\n\n    for (let i = 0; i < filtered.length; i++) {\n      if (!res[filtered[i].fn]) {\n        res[filtered[i].fn] = filtered[i].e;\n      }\n    }\n\n    return res;\n  }\n\n}\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\n\n\nclass Predicate {\n  /**\n   * Constructor for Predicate class.\n   * @param  {string|Predicate} field\n   * @param  {string} operator\n   * @param  {string|number|boolean|Predicate|Predicate[]} value\n   * @param  {boolean=false} ignoreCase\n   * @hidden\n   */\n  constructor(field, operator, value, ignoreCase = false, ignoreAccent) {\n    /** @hidden */\n    this.ignoreAccent = false;\n    /** @hidden */\n\n    this.isComplex = false;\n\n    if (typeof field === 'string') {\n      this.field = field;\n      this.operator = operator.toLowerCase();\n      this.value = value;\n      this.ignoreCase = ignoreCase;\n      this.ignoreAccent = ignoreAccent;\n      this.isComplex = false;\n      this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n    } else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n      this.isComplex = true;\n      this.condition = operator.toLowerCase();\n      this.predicates = [field];\n\n      if (value instanceof Array) {\n        [].push.apply(this.predicates, value);\n      } else {\n        this.predicates.push(value);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Adds n-number of new predicates on existing predicate with “and” condition.\n   * @param  {Object[]} args - Defines the collection of predicates.\n   */\n\n\n  static and(...args) {\n    return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n  }\n  /**\n   * Adds new predicate on existing predicate with “and” condition.\n   * @param  {string} field - Defines the column field.\n   * @param  {string} operator - Defines the operator how to filter data.\n   * @param  {string} value - Defines the values to match with data.\n   * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   */\n\n\n  and(field, operator, value, ignoreCase, ignoreAccent) {\n    return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n  }\n  /**\n   * Adds n-number of new predicates on existing predicate with “or” condition.\n   * @param  {Object[]} args - Defines the collection of predicates.\n   */\n\n\n  static or(...args) {\n    return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n  }\n  /**\n   * Adds new predicate on existing predicate with “or” condition.\n   * @param  {string} field - Defines the column field.\n   * @param  {string} operator - Defines the operator how to filter data.\n   * @param  {string} value - Defines the values to match with data.\n   * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n   * filter data with case insensitive.\n   */\n\n\n  or(field, operator, value, ignoreCase, ignoreAccent) {\n    return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n  }\n  /**\n   * Converts plain JavaScript object to Predicate object.\n   * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n   */\n\n\n  static fromJson(json) {\n    if (json instanceof Array) {\n      let res = [];\n\n      for (let i = 0, len = json.length; i < len; i++) {\n        res.push(this.fromJSONData(json[i]));\n      }\n\n      return res;\n    }\n\n    let pred = json;\n    return this.fromJSONData(pred);\n  }\n  /**\n   * Validate the record based on the predicates.\n   * @param  {Object} record - Defines the datasource record.\n   */\n\n\n  validate(record) {\n    let predicate = this.predicates ? this.predicates : [];\n    let isAnd;\n    let ret;\n\n    if (!this.isComplex && this.comparer) {\n      return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n    }\n\n    isAnd = this.condition === 'and';\n\n    for (let i = 0; i < predicate.length; i++) {\n      ret = predicate[i].validate(record);\n\n      if (isAnd) {\n        if (!ret) {\n          return false;\n        }\n      } else {\n        if (ret) {\n          return true;\n        }\n      }\n    }\n\n    return isAnd;\n  }\n  /**\n   * Converts predicates to plain JavaScript.\n   * This method is uses Json stringify when serializing Predicate object.\n   */\n\n\n  toJson() {\n    let predicates;\n    let p;\n\n    if (this.isComplex) {\n      predicates = [];\n      p = this.predicates;\n\n      for (let i = 0; i < p.length; i++) {\n        predicates.push(p[i].toJson());\n      }\n    }\n\n    return {\n      isComplex: this.isComplex,\n      field: this.field,\n      operator: this.operator,\n      value: this.value,\n      ignoreCase: this.ignoreCase,\n      ignoreAccent: this.ignoreAccent,\n      condition: this.condition,\n      predicates: predicates\n    };\n  }\n\n  static combinePredicates(predicates, operator) {\n    if (predicates.length === 1) {\n      if (!(predicates[0] instanceof Array)) {\n        return predicates[0];\n      }\n\n      predicates = predicates[0];\n    }\n\n    return new Predicate(predicates[0], operator, predicates.slice(1));\n  }\n\n  static combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n    if (field instanceof Predicate) {\n      return Predicate[condition](pred, field);\n    }\n\n    if (typeof field === 'string') {\n      return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n    }\n\n    return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n  }\n\n  static fromJSONData(json) {\n    let preds = json.predicates || [];\n    let len = preds.length;\n    let predicates = [];\n    let result;\n\n    for (let i = 0; i < len; i++) {\n      predicates.push(this.fromJSONData(preds[i]));\n    }\n\n    if (!json.isComplex) {\n      result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n    } else {\n      result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n    }\n\n    return result;\n  }\n\n}\n\nconst consts = {\n  GroupGuid: '{271bbba0-1ee7}'\n};\n/**\n * Data manager common utility methods.\n * @hidden\n */\n\nclass DataUtil {\n  /**\n   * Returns the value by invoking the provided parameter function.\n   * If the paramater is not of type function then it will be returned as it is.\n   * @param  {Function|string|string[]|number} value\n   * @param  {Object} inst?\n   * @hidden\n   */\n  static getValue(value, inst) {\n    if (typeof value === 'function') {\n      return value.call(inst || {});\n    }\n\n    return value;\n  }\n  /**\n   * Returns true if the input string ends with given string.\n   * @param  {string} input\n   * @param  {string} substr\n   */\n\n\n  static endsWith(input, substr) {\n    return input.slice && input.slice(-substr.length) === substr;\n  }\n  /**\n   * Returns true if the input string starts with given string.\n   * @param  {string} str\n   * @param  {string} startstr\n   */\n\n\n  static startsWith(input, start) {\n    return input.slice(0, start.length) === start;\n  }\n  /**\n   * To return the sorting function based on the string.\n   * @param  {string} order\n   * @hidden\n   */\n\n\n  static fnSort(order) {\n    order = order ? DataUtil.toLowerCase(order) : 'ascending';\n\n    if (order === 'ascending') {\n      return this.fnAscending;\n    }\n\n    return this.fnDescending;\n  }\n  /**\n   * Comparer function which is used to sort the data in ascending order.\n   * @param  {string|number} x\n   * @param  {string|number} y\n   * @returns number\n   */\n\n\n  static fnAscending(x, y) {\n    if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n      return -1;\n    }\n\n    if (y === null || y === undefined) {\n      return -1;\n    }\n\n    if (typeof x === 'string') {\n      return x.localeCompare(y);\n    }\n\n    if (x === null || x === undefined) {\n      return 1;\n    }\n\n    return x - y;\n  }\n  /**\n   * Comparer function which is used to sort the data in descending order.\n   * @param  {string|number} x\n   * @param  {string|number} y\n   * @returns number\n   */\n\n\n  static fnDescending(x, y) {\n    if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n      return -1;\n    }\n\n    if (y === null || y === undefined) {\n      return 1;\n    }\n\n    if (typeof x === 'string') {\n      return x.localeCompare(y) * -1;\n    }\n\n    if (x === null || x === undefined) {\n      return -1;\n    }\n\n    return y - x;\n  }\n\n  static extractFields(obj, fields) {\n    let newObj = {};\n\n    for (let i = 0; i < fields.length; i++) {\n      newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);\n    }\n\n    return newObj;\n  }\n  /**\n   * Select objects by given fields from jsonArray.\n   * @param  {Object[]} jsonArray\n   * @param  {string[]} fields\n   */\n\n\n  static select(jsonArray, fields) {\n    let newData = [];\n\n    for (let i = 0; i < jsonArray.length; i++) {\n      newData.push(this.extractFields(jsonArray[i], fields));\n    }\n\n    return newData;\n  }\n  /**\n   * Group the input data based on the field name.\n   * It also performs aggregation of the grouped records based on the aggregates paramater.\n   * @param  {Object[]} jsonArray\n   * @param  {string} field?\n   * @param  {Object[]} agg?\n   * @param  {number} level?\n   * @param  {Object[]} groupDs?\n   */\n\n\n  static group(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {\n    level = level || 1;\n    let jsonData = jsonArray;\n    let guid = 'GroupGuid';\n\n    if (jsonData.GroupGuid === consts[guid]) {\n      for (let j = 0; j < jsonData.length; j++) {\n        if (!isNullOrUndefined(groupDs)) {\n          let indx = -1;\n          let temp = groupDs.filter(e => {\n            return e.key === jsonData[j].key;\n          });\n          indx = groupDs.indexOf(temp[0]);\n          jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);\n          jsonData[j].count = groupDs[indx].count;\n        } else {\n          jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);\n          jsonData[j].count = jsonData[j].items.length;\n        }\n      }\n\n      jsonData.childLevels += 1;\n      return jsonData;\n    }\n\n    let grouped = {};\n    let groupedArray = [];\n    groupedArray.GroupGuid = consts[guid];\n    groupedArray.level = level;\n    groupedArray.childLevels = 0;\n    groupedArray.records = jsonData;\n\n    for (let i = 0; i < jsonData.length; i++) {\n      let val = this.getVal(jsonData, i, field);\n\n      if (!isNullOrUndefined(format)) {\n        val = format(val, field);\n      }\n\n      if (!grouped[val]) {\n        grouped[val] = {\n          key: val,\n          count: 0,\n          items: [],\n          aggregates: {},\n          field: field\n        };\n        groupedArray.push(grouped[val]);\n\n        if (!isNullOrUndefined(groupDs)) {\n          let tempObj = groupDs.filter(e => {\n            return e.key === grouped[val].key;\n          });\n          grouped[val].count = tempObj[0].count;\n        }\n      }\n\n      grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n\n      if (!isLazyLoad || isLazyLoad && aggregates.length) {\n        grouped[val].items.push(jsonData[i]);\n      }\n    }\n\n    if (aggregates && aggregates.length) {\n      for (let i = 0; i < groupedArray.length; i++) {\n        let res = {};\n        let fn;\n        let aggs = aggregates;\n\n        for (let j = 0; j < aggregates.length; j++) {\n          fn = DataUtil.aggregates[aggregates[j].type];\n\n          if (!isNullOrUndefined(groupDs)) {\n            let temp = groupDs.filter(e => {\n              return e.key === groupedArray[i].key;\n            });\n\n            if (fn) {\n              res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);\n            }\n          } else {\n            if (fn) {\n              res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);\n            }\n          }\n        }\n\n        groupedArray[i].aggregates = res;\n      }\n    }\n\n    if (isLazyLoad && groupedArray.length && aggregates.length) {\n      for (let i = 0; i < groupedArray.length; i++) {\n        groupedArray[i].items = [];\n      }\n    }\n\n    return jsonData.length && groupedArray || jsonData;\n  }\n  /**\n   * It is used to categorize the multiple items based on a specific field in jsonArray.\n   * The hierarchical queries are commonly required when you use foreign key binding.\n   * @param  {string} fKey\n   * @param  {string} from\n   * @param  {Object[]} source\n   * @param  {Group} lookup?\n   * @param  {string} pKey?\n   * @hidden\n   */\n\n\n  static buildHierarchy(fKey, from, source, lookup, pKey) {\n    let i;\n    let grp = {};\n    let temp;\n\n    if (lookup.result) {\n      lookup = lookup.result;\n    }\n\n    if (lookup.GroupGuid) {\n      this.throwError('DataManager: Do not have support Grouping in hierarchy');\n    }\n\n    for (i = 0; i < lookup.length; i++) {\n      let fKeyData = this.getObject(fKey, lookup[i]);\n      temp = grp[fKeyData] || (grp[fKeyData] = []);\n      temp.push(lookup[i]);\n    }\n\n    for (i = 0; i < source.length; i++) {\n      let fKeyData = this.getObject(pKey || fKey, source[i]);\n      source[i][from] = grp[fKeyData];\n    }\n  }\n  /**\n   * The method used to get the field names which started with specified characters.\n   * @param  {Object} obj\n   * @param  {string[]} fields?\n   * @param  {string} prefix?\n   * @hidden\n   */\n\n\n  static getFieldList(obj, fields, prefix) {\n    if (prefix === undefined) {\n      prefix = '';\n    }\n\n    if (fields === undefined || fields === null) {\n      return this.getFieldList(obj, [], prefix);\n    }\n\n    let copyObj = obj;\n    let keys = Object.keys(obj);\n\n    for (let prop of keys) {\n      if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n        this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n      } else {\n        fields.push(prefix + prop);\n      }\n    }\n\n    return fields;\n  }\n  /**\n   * Gets the value of the property in the given object.\n   * The complex object can be accessed by providing the field names concatenated with dot(.).\n   * @param  {string} nameSpace - The name of the property to be accessed.\n   * @param  {Object} from - Defines the source object.\n   */\n\n\n  static getObject(nameSpace, from) {\n    if (!nameSpace) {\n      return from;\n    }\n\n    if (!from) {\n      return undefined;\n    }\n\n    if (nameSpace.indexOf('.') === -1) {\n      return from[nameSpace];\n    }\n\n    let value = from;\n    let splits = nameSpace.split('.');\n\n    for (let i = 0; i < splits.length; i++) {\n      if (value == null) {\n        break;\n      }\n\n      value = value[splits[i]];\n    }\n\n    return value;\n  }\n  /**\n   * To set value for the nameSpace in desired object.\n   * @param {string} nameSpace - String value to the get the inner object.\n   * @param {Object} value - Value that you need to set.\n   * @param {Object} obj - Object to get the inner object value.\n   * @return { [key: string]: Object; } | Object\n   * @hidden\n   */\n\n\n  static setValue(nameSpace, value, obj) {\n    let keys = nameSpace.toString().split('.');\n    let start = obj || {};\n    let fromObj = start;\n    let i;\n    let length = keys.length;\n    let key;\n\n    for (i = 0; i < length; i++) {\n      key = keys[i];\n\n      if (i + 1 === length) {\n        fromObj[key] = value === undefined ? undefined : value;\n      } else if (isNullOrUndefined(fromObj[key])) {\n        fromObj[key] = {};\n      }\n\n      fromObj = fromObj[key];\n    }\n\n    return start;\n  }\n  /**\n   * Sort the given data based on the field and comparer.\n   * @param  {Object[]} ds - Defines the input data.\n   * @param  {string} field - Defines the field to be sorted.\n   * @param  {Function} comparer - Defines the comparer function used to sort the records.\n   */\n\n\n  static sort(ds, field, comparer) {\n    if (ds.length <= 1) {\n      return ds;\n    }\n\n    let middle = parseInt((ds.length / 2).toString(), 10);\n    let left = ds.slice(0, middle);\n    let right = ds.slice(middle);\n    left = this.sort(left, field, comparer);\n    right = this.sort(right, field, comparer);\n    return this.merge(left, right, field, comparer);\n  }\n\n  static ignoreDiacritics(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    let result = value.split('');\n    let newValue = result.map(temp => temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp);\n    return newValue.join('');\n  }\n\n  static merge(left, right, fieldName, comparer) {\n    let result = [];\n    let current;\n\n    while (left.length > 0 || right.length > 0) {\n      if (left.length > 0 && right.length > 0) {\n        if (comparer) {\n          current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;\n        } else {\n          current = left[0][fieldName] < left[0][fieldName] ? left : right;\n        }\n      } else {\n        current = left.length > 0 ? left : right;\n      }\n\n      result.push(current.shift());\n    }\n\n    return result;\n  }\n\n  static getVal(array, index, field) {\n    return field ? this.getObject(field, array[index]) : array[index];\n  }\n\n  static toLowerCase(val) {\n    return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : val === 0 || val === false ? val.toString() : '';\n  }\n  /**\n   * To perform the filter operation with specified adaptor and returns the result.\n   * @param  {Object} adaptor\n   * @param  {string} fnName\n   * @param  {Object} param1?\n   * @param  {Object} param2?\n   * @hidden\n   */\n\n\n  static callAdaptorFunction(adaptor, fnName, param1, param2) {\n    if (fnName in adaptor) {\n      let res = adaptor[fnName](param1, param2);\n\n      if (!isNullOrUndefined(res)) {\n        param1 = res;\n      }\n    }\n\n    return param1;\n  }\n\n  static getAddParams(adp, dm, query) {\n    let req = {};\n    DataUtil.callAdaptorFunction(adp, 'addParams', {\n      dm: dm,\n      query: query,\n      params: query.params,\n      reqParams: req\n    });\n    return req;\n  }\n  /**\n   * Checks wheather the given input is a plain object or not.\n   * @param  {Object|Object[]} obj\n   */\n\n\n  static isPlainObject(obj) {\n    return !!obj && obj.constructor === Object;\n  }\n  /**\n   * Returns true when the browser cross origin request.\n   */\n\n\n  static isCors() {\n    let xhr = null;\n    let request = 'XMLHttpRequest';\n\n    try {\n      xhr = new window[request]();\n    } catch (e) {// No exception handling\n    }\n\n    return !!xhr && 'withCredentials' in xhr;\n  }\n  /**\n   * Generate random GUID value which will be prefixed with the given value.\n   * @param  {string} prefix\n   */\n\n\n  static getGuid(prefix) {\n    let hexs = '0123456789abcdef';\n    let rand;\n    return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, (val, i) => {\n      if ('crypto' in window && 'getRandomValues' in crypto) {\n        let arr = new Uint8Array(1);\n        window.crypto.getRandomValues(arr);\n        rand = arr[0] % 16 | 0;\n      } else {\n        rand = Math.random() * 16 | 0;\n      }\n\n      return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n    });\n  }\n  /**\n   * Checks wheather the given value is null or not.\n   * @param  {string|Object} val\n   * @returns boolean\n   */\n\n\n  static isNull(val) {\n    return val === undefined || val === null;\n  }\n  /**\n   * To get the required items from collection of objects.\n   * @param  {Object[]} array\n   * @param  {string} field\n   * @param  {Function} comparer\n   * @returns Object\n   * @hidden\n   */\n\n\n  static getItemFromComparer(array, field, comparer) {\n    let keyVal;\n    let current;\n    let key;\n    let i = 0;\n    let castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n\n    if (array.length) {\n      while (isNullOrUndefined(keyVal) && i < array.length) {\n        keyVal = DataUtil.getVal(array, i, field);\n        key = array[i++];\n      }\n    }\n\n    for (; i < array.length; i++) {\n      current = DataUtil.getVal(array, i, field);\n\n      if (isNullOrUndefined(current)) {\n        continue;\n      }\n\n      if (castRequired) {\n        keyVal = +keyVal;\n        current = +current;\n      }\n\n      if (comparer(keyVal, current) > 0) {\n        keyVal = current;\n        key = array[i];\n      }\n    }\n\n    return key;\n  }\n  /**\n   * To get distinct values of Array or Array of Objects.\n   * @param  {Object[]} json\n   * @param  {string} field\n   * @param  {boolean} requiresCompleteRecord\n   * @returns Object[]\n   * * distinct array of objects is return when requiresCompleteRecord set as true.\n   * @hidden\n   */\n\n\n  static distinct(json, fieldName, requiresCompleteRecord) {\n    requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n    let result = [];\n    let val;\n    let tmp = {};\n    json.forEach((data, index) => {\n      val = typeof json[index] === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];\n\n      if (!(val in tmp)) {\n        result.push(!requiresCompleteRecord ? val : json[index]);\n        tmp[val] = 1;\n      }\n    });\n    return result;\n  }\n  /**\n   * Process the given records based on the datamanager string.\n   * @param  {string} datamanager\n   * @param  {Object[]} records\n   */\n\n\n  static processData(dm, records) {\n    let query = this.prepareQuery(dm);\n    let sampledata = new DataManager(records);\n\n    if (dm.requiresCounts) {\n      query.requiresCount();\n    }\n\n    let result = sampledata.executeLocal(query);\n    let returnValue = {\n      result: dm.requiresCounts ? result.result : result,\n      count: result.count,\n      aggregates: JSON.stringify(result.aggregates)\n    };\n    return dm.requiresCounts ? returnValue : result;\n  }\n\n  static prepareQuery(dm) {\n    let query = new Query();\n\n    if (dm.select) {\n      query.select(dm.select);\n    }\n\n    if (dm.where) {\n      let where = DataUtil.parse.parseJson(dm.where);\n      where.filter(pred => {\n        if (isNullOrUndefined(pred.condition)) {\n          query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);\n        } else {\n          let predicateList = [];\n\n          if (pred.field) {\n            predicateList.push(new Predicate(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));\n          } else {\n            predicateList = predicateList.concat(this.getPredicate(pred.predicates));\n          }\n\n          if (pred.condition == 'or') {\n            query.where(Predicate.or(predicateList));\n          } else if (pred.condition == 'and') {\n            query.where(Predicate.and(predicateList));\n          }\n        }\n      });\n    }\n\n    if (dm.search) {\n      let search = DataUtil.parse.parseJson(dm.search);\n      search.filter(e => query.search(e.key, e.fields, e['operator'], e['ignoreCase'], e['ignoreAccent']));\n    }\n\n    if (dm.aggregates) {\n      dm.aggregates.filter(e => query.aggregate(e.type, e.field));\n    }\n\n    if (dm.sorted) {\n      dm.sorted.filter(e => query.sortBy(e.name, e.direction));\n    }\n\n    if (dm.skip) {\n      query.skip(dm.skip);\n    }\n\n    if (dm.take) {\n      query.take(dm.take);\n    }\n\n    if (dm.group) {\n      dm.group.filter(grp => query.group(grp));\n    }\n\n    return query;\n  }\n\n  static getPredicate(pred) {\n    let mainPred = [];\n\n    for (let i = 0; i < pred.length; i++) {\n      let e = pred[i];\n\n      if (e.field) {\n        mainPred.push(new Predicate(e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));\n      } else {\n        let childPred = [];\n        let cpre = this.getPredicate(e.predicates);\n\n        for (const prop of Object.keys(cpre)) {\n          childPred.push(cpre[prop]);\n        }\n\n        mainPred.push(e.condition == 'or' ? Predicate.or(childPred) : Predicate.and(childPred));\n      }\n    }\n\n    return mainPred;\n  }\n\n}\n/**\n * Specifies the value which will be used to adjust the date value to server timezone.\n * @default null\n */\n\n\nDataUtil.serverTimezoneOffset = null;\n/**\n * Species whether are not to be parsed with serverTimezoneOffset value.\n * @hidden\n */\n\nDataUtil.timeZoneHandling = true;\n/**\n * Throw error with the given string as message.\n * @param  {string} er\n */\n\nDataUtil.throwError = error => {\n  try {\n    throw new Error(error);\n  } catch (e) {\n    throw e.message + '\\n' + e.stack;\n  }\n};\n\nDataUtil.aggregates = {\n  /**\n   * Calculate sum of the given field in the data.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  sum: (ds, field) => {\n    let result = 0;\n    let val;\n    let castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n\n    for (let i = 0; i < ds.length; i++) {\n      val = DataUtil.getVal(ds, i, field);\n\n      if (!isNaN(val) && val !== null) {\n        if (castRequired) {\n          val = +val;\n        }\n\n        result += val;\n      }\n    }\n\n    return result;\n  },\n\n  /**\n   * Calculate average value of the given field in the data.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  average: (ds, field) => {\n    return DataUtil.aggregates.sum(ds, field) / ds.length;\n  },\n\n  /**\n   * Returns the min value of the data based on the field.\n   * @param  {Object[]} ds\n   * @param  {string|Function} field\n   */\n  min: (ds, field) => {\n    let comparer;\n\n    if (typeof field === 'function') {\n      comparer = field;\n      field = null;\n    }\n\n    return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n  },\n\n  /**\n   * Returns the max value of the data based on the field.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   * @returns number\n   */\n  max: (ds, field) => {\n    let comparer;\n\n    if (typeof field === 'function') {\n      comparer = field;\n      field = null;\n    }\n\n    return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n  },\n\n  /**\n   * Returns the total number of true value present in the data based on the given boolean field name.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  truecount: (ds, field) => {\n    return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n  },\n\n  /**\n   * Returns the total number of false value present in the data based on the given boolean field name.\n   * @param  {Object[]} ds\n   * @param  {string} field\n   */\n  falsecount: (ds, field) => {\n    return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n  },\n\n  /**\n   * Returns the length of the given data.\n   * @param  {Object[]} ds\n   * @param  {string} field?\n   * @returns number\n   */\n  count: (ds, field) => {\n    return ds.length;\n  }\n};\n/**\n * Specifies the Object with filter operators.\n */\n\nDataUtil.operatorSymbols = {\n  '<': 'lessthan',\n  '>': 'greaterthan',\n  '<=': 'lessthanorequal',\n  '>=': 'greaterthanorequal',\n  '==': 'equal',\n  '!=': 'notequal',\n  '*=': 'contains',\n  '$=': 'endswith',\n  '^=': 'startswith'\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * * It will be used for date/number type filter query.\n */\n\nDataUtil.odBiOperator = {\n  '<': ' lt ',\n  '>': ' gt ',\n  '<=': ' le ',\n  '>=': ' ge ',\n  '==': ' eq ',\n  '!=': ' ne ',\n  'lessthan': ' lt ',\n  'lessthanorequal': ' le ',\n  'greaterthan': ' gt ',\n  'greaterthanorequal': ' ge ',\n  'equal': ' eq ',\n  'notequal': ' ne '\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * It will be used for string type filter query.\n */\n\nDataUtil.odUniOperator = {\n  '$=': 'endswith',\n  '^=': 'startswith',\n  '*=': 'substringof',\n  'endswith': 'endswith',\n  'startswith': 'startswith',\n  'contains': 'substringof'\n};\n/**\n * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n * It will be used for string type filter query.\n */\n\nDataUtil.odv4UniOperator = {\n  '$=': 'endswith',\n  '^=': 'startswith',\n  '*=': 'contains',\n  'endswith': 'endswith',\n  'startswith': 'startswith',\n  'contains': 'contains'\n};\nDataUtil.diacritics = {\n  '\\u24B6': 'A',\n  '\\uFF21': 'A',\n  '\\u00C0': 'A',\n  '\\u00C1': 'A',\n  '\\u00C2': 'A',\n  '\\u1EA6': 'A',\n  '\\u1EA4': 'A',\n  '\\u1EAA': 'A',\n  '\\u1EA8': 'A',\n  '\\u00C3': 'A',\n  '\\u0100': 'A',\n  '\\u0102': 'A',\n  '\\u1EB0': 'A',\n  '\\u1EAE': 'A',\n  '\\u1EB4': 'A',\n  '\\u1EB2': 'A',\n  '\\u0226': 'A',\n  '\\u01E0': 'A',\n  '\\u00C4': 'A',\n  '\\u01DE': 'A',\n  '\\u1EA2': 'A',\n  '\\u00C5': 'A',\n  '\\u01FA': 'A',\n  '\\u01CD': 'A',\n  '\\u0200': 'A',\n  '\\u0202': 'A',\n  '\\u1EA0': 'A',\n  '\\u1EAC': 'A',\n  '\\u1EB6': 'A',\n  '\\u1E00': 'A',\n  '\\u0104': 'A',\n  '\\u023A': 'A',\n  '\\u2C6F': 'A',\n  '\\uA732': 'AA',\n  '\\u00C6': 'AE',\n  '\\u01FC': 'AE',\n  '\\u01E2': 'AE',\n  '\\uA734': 'AO',\n  '\\uA736': 'AU',\n  '\\uA738': 'AV',\n  '\\uA73A': 'AV',\n  '\\uA73C': 'AY',\n  '\\u24B7': 'B',\n  '\\uFF22': 'B',\n  '\\u1E02': 'B',\n  '\\u1E04': 'B',\n  '\\u1E06': 'B',\n  '\\u0243': 'B',\n  '\\u0182': 'B',\n  '\\u0181': 'B',\n  '\\u24B8': 'C',\n  '\\uFF23': 'C',\n  '\\u0106': 'C',\n  '\\u0108': 'C',\n  '\\u010A': 'C',\n  '\\u010C': 'C',\n  '\\u00C7': 'C',\n  '\\u1E08': 'C',\n  '\\u0187': 'C',\n  '\\u023B': 'C',\n  '\\uA73E': 'C',\n  '\\u24B9': 'D',\n  '\\uFF24': 'D',\n  '\\u1E0A': 'D',\n  '\\u010E': 'D',\n  '\\u1E0C': 'D',\n  '\\u1E10': 'D',\n  '\\u1E12': 'D',\n  '\\u1E0E': 'D',\n  '\\u0110': 'D',\n  '\\u018B': 'D',\n  '\\u018A': 'D',\n  '\\u0189': 'D',\n  '\\uA779': 'D',\n  '\\u01F1': 'DZ',\n  '\\u01C4': 'DZ',\n  '\\u01F2': 'Dz',\n  '\\u01C5': 'Dz',\n  '\\u24BA': 'E',\n  '\\uFF25': 'E',\n  '\\u00C8': 'E',\n  '\\u00C9': 'E',\n  '\\u00CA': 'E',\n  '\\u1EC0': 'E',\n  '\\u1EBE': 'E',\n  '\\u1EC4': 'E',\n  '\\u1EC2': 'E',\n  '\\u1EBC': 'E',\n  '\\u0112': 'E',\n  '\\u1E14': 'E',\n  '\\u1E16': 'E',\n  '\\u0114': 'E',\n  '\\u0116': 'E',\n  '\\u00CB': 'E',\n  '\\u1EBA': 'E',\n  '\\u011A': 'E',\n  '\\u0204': 'E',\n  '\\u0206': 'E',\n  '\\u1EB8': 'E',\n  '\\u1EC6': 'E',\n  '\\u0228': 'E',\n  '\\u1E1C': 'E',\n  '\\u0118': 'E',\n  '\\u1E18': 'E',\n  '\\u1E1A': 'E',\n  '\\u0190': 'E',\n  '\\u018E': 'E',\n  '\\u24BB': 'F',\n  '\\uFF26': 'F',\n  '\\u1E1E': 'F',\n  '\\u0191': 'F',\n  '\\uA77B': 'F',\n  '\\u24BC': 'G',\n  '\\uFF27': 'G',\n  '\\u01F4': 'G',\n  '\\u011C': 'G',\n  '\\u1E20': 'G',\n  '\\u011E': 'G',\n  '\\u0120': 'G',\n  '\\u01E6': 'G',\n  '\\u0122': 'G',\n  '\\u01E4': 'G',\n  '\\u0193': 'G',\n  '\\uA7A0': 'G',\n  '\\uA77D': 'G',\n  '\\uA77E': 'G',\n  '\\u24BD': 'H',\n  '\\uFF28': 'H',\n  '\\u0124': 'H',\n  '\\u1E22': 'H',\n  '\\u1E26': 'H',\n  '\\u021E': 'H',\n  '\\u1E24': 'H',\n  '\\u1E28': 'H',\n  '\\u1E2A': 'H',\n  '\\u0126': 'H',\n  '\\u2C67': 'H',\n  '\\u2C75': 'H',\n  '\\uA78D': 'H',\n  '\\u24BE': 'I',\n  '\\uFF29': 'I',\n  '\\u00CC': 'I',\n  '\\u00CD': 'I',\n  '\\u00CE': 'I',\n  '\\u0128': 'I',\n  '\\u012A': 'I',\n  '\\u012C': 'I',\n  '\\u0130': 'I',\n  '\\u00CF': 'I',\n  '\\u1E2E': 'I',\n  '\\u1EC8': 'I',\n  '\\u01CF': 'I',\n  '\\u0208': 'I',\n  '\\u020A': 'I',\n  '\\u1ECA': 'I',\n  '\\u012E': 'I',\n  '\\u1E2C': 'I',\n  '\\u0197': 'I',\n  '\\u24BF': 'J',\n  '\\uFF2A': 'J',\n  '\\u0134': 'J',\n  '\\u0248': 'J',\n  '\\u24C0': 'K',\n  '\\uFF2B': 'K',\n  '\\u1E30': 'K',\n  '\\u01E8': 'K',\n  '\\u1E32': 'K',\n  '\\u0136': 'K',\n  '\\u1E34': 'K',\n  '\\u0198': 'K',\n  '\\u2C69': 'K',\n  '\\uA740': 'K',\n  '\\uA742': 'K',\n  '\\uA744': 'K',\n  '\\uA7A2': 'K',\n  '\\u24C1': 'L',\n  '\\uFF2C': 'L',\n  '\\u013F': 'L',\n  '\\u0139': 'L',\n  '\\u013D': 'L',\n  '\\u1E36': 'L',\n  '\\u1E38': 'L',\n  '\\u013B': 'L',\n  '\\u1E3C': 'L',\n  '\\u1E3A': 'L',\n  '\\u0141': 'L',\n  '\\u023D': 'L',\n  '\\u2C62': 'L',\n  '\\u2C60': 'L',\n  '\\uA748': 'L',\n  '\\uA746': 'L',\n  '\\uA780': 'L',\n  '\\u01C7': 'LJ',\n  '\\u01C8': 'Lj',\n  '\\u24C2': 'M',\n  '\\uFF2D': 'M',\n  '\\u1E3E': 'M',\n  '\\u1E40': 'M',\n  '\\u1E42': 'M',\n  '\\u2C6E': 'M',\n  '\\u019C': 'M',\n  '\\u24C3': 'N',\n  '\\uFF2E': 'N',\n  '\\u01F8': 'N',\n  '\\u0143': 'N',\n  '\\u00D1': 'N',\n  '\\u1E44': 'N',\n  '\\u0147': 'N',\n  '\\u1E46': 'N',\n  '\\u0145': 'N',\n  '\\u1E4A': 'N',\n  '\\u1E48': 'N',\n  '\\u0220': 'N',\n  '\\u019D': 'N',\n  '\\uA790': 'N',\n  '\\uA7A4': 'N',\n  '\\u01CA': 'NJ',\n  '\\u01CB': 'Nj',\n  '\\u24C4': 'O',\n  '\\uFF2F': 'O',\n  '\\u00D2': 'O',\n  '\\u00D3': 'O',\n  '\\u00D4': 'O',\n  '\\u1ED2': 'O',\n  '\\u1ED0': 'O',\n  '\\u1ED6': 'O',\n  '\\u1ED4': 'O',\n  '\\u00D5': 'O',\n  '\\u1E4C': 'O',\n  '\\u022C': 'O',\n  '\\u1E4E': 'O',\n  '\\u014C': 'O',\n  '\\u1E50': 'O',\n  '\\u1E52': 'O',\n  '\\u014E': 'O',\n  '\\u022E': 'O',\n  '\\u0230': 'O',\n  '\\u00D6': 'O',\n  '\\u022A': 'O',\n  '\\u1ECE': 'O',\n  '\\u0150': 'O',\n  '\\u01D1': 'O',\n  '\\u020C': 'O',\n  '\\u020E': 'O',\n  '\\u01A0': 'O',\n  '\\u1EDC': 'O',\n  '\\u1EDA': 'O',\n  '\\u1EE0': 'O',\n  '\\u1EDE': 'O',\n  '\\u1EE2': 'O',\n  '\\u1ECC': 'O',\n  '\\u1ED8': 'O',\n  '\\u01EA': 'O',\n  '\\u01EC': 'O',\n  '\\u00D8': 'O',\n  '\\u01FE': 'O',\n  '\\u0186': 'O',\n  '\\u019F': 'O',\n  '\\uA74A': 'O',\n  '\\uA74C': 'O',\n  '\\u01A2': 'OI',\n  '\\uA74E': 'OO',\n  '\\u0222': 'OU',\n  '\\u24C5': 'P',\n  '\\uFF30': 'P',\n  '\\u1E54': 'P',\n  '\\u1E56': 'P',\n  '\\u01A4': 'P',\n  '\\u2C63': 'P',\n  '\\uA750': 'P',\n  '\\uA752': 'P',\n  '\\uA754': 'P',\n  '\\u24C6': 'Q',\n  '\\uFF31': 'Q',\n  '\\uA756': 'Q',\n  '\\uA758': 'Q',\n  '\\u024A': 'Q',\n  '\\u24C7': 'R',\n  '\\uFF32': 'R',\n  '\\u0154': 'R',\n  '\\u1E58': 'R',\n  '\\u0158': 'R',\n  '\\u0210': 'R',\n  '\\u0212': 'R',\n  '\\u1E5A': 'R',\n  '\\u1E5C': 'R',\n  '\\u0156': 'R',\n  '\\u1E5E': 'R',\n  '\\u024C': 'R',\n  '\\u2C64': 'R',\n  '\\uA75A': 'R',\n  '\\uA7A6': 'R',\n  '\\uA782': 'R',\n  '\\u24C8': 'S',\n  '\\uFF33': 'S',\n  '\\u1E9E': 'S',\n  '\\u015A': 'S',\n  '\\u1E64': 'S',\n  '\\u015C': 'S',\n  '\\u1E60': 'S',\n  '\\u0160': 'S',\n  '\\u1E66': 'S',\n  '\\u1E62': 'S',\n  '\\u1E68': 'S',\n  '\\u0218': 'S',\n  '\\u015E': 'S',\n  '\\u2C7E': 'S',\n  '\\uA7A8': 'S',\n  '\\uA784': 'S',\n  '\\u24C9': 'T',\n  '\\uFF34': 'T',\n  '\\u1E6A': 'T',\n  '\\u0164': 'T',\n  '\\u1E6C': 'T',\n  '\\u021A': 'T',\n  '\\u0162': 'T',\n  '\\u1E70': 'T',\n  '\\u1E6E': 'T',\n  '\\u0166': 'T',\n  '\\u01AC': 'T',\n  '\\u01AE': 'T',\n  '\\u023E': 'T',\n  '\\uA786': 'T',\n  '\\uA728': 'TZ',\n  '\\u24CA': 'U',\n  '\\uFF35': 'U',\n  '\\u00D9': 'U',\n  '\\u00DA': 'U',\n  '\\u00DB': 'U',\n  '\\u0168': 'U',\n  '\\u1E78': 'U',\n  '\\u016A': 'U',\n  '\\u1E7A': 'U',\n  '\\u016C': 'U',\n  '\\u00DC': 'U',\n  '\\u01DB': 'U',\n  '\\u01D7': 'U',\n  '\\u01D5': 'U',\n  '\\u01D9': 'U',\n  '\\u1EE6': 'U',\n  '\\u016E': 'U',\n  '\\u0170': 'U',\n  '\\u01D3': 'U',\n  '\\u0214': 'U',\n  '\\u0216': 'U',\n  '\\u01AF': 'U',\n  '\\u1EEA': 'U',\n  '\\u1EE8': 'U',\n  '\\u1EEE': 'U',\n  '\\u1EEC': 'U',\n  '\\u1EF0': 'U',\n  '\\u1EE4': 'U',\n  '\\u1E72': 'U',\n  '\\u0172': 'U',\n  '\\u1E76': 'U',\n  '\\u1E74': 'U',\n  '\\u0244': 'U',\n  '\\u24CB': 'V',\n  '\\uFF36': 'V',\n  '\\u1E7C': 'V',\n  '\\u1E7E': 'V',\n  '\\u01B2': 'V',\n  '\\uA75E': 'V',\n  '\\u0245': 'V',\n  '\\uA760': 'VY',\n  '\\u24CC': 'W',\n  '\\uFF37': 'W',\n  '\\u1E80': 'W',\n  '\\u1E82': 'W',\n  '\\u0174': 'W',\n  '\\u1E86': 'W',\n  '\\u1E84': 'W',\n  '\\u1E88': 'W',\n  '\\u2C72': 'W',\n  '\\u24CD': 'X',\n  '\\uFF38': 'X',\n  '\\u1E8A': 'X',\n  '\\u1E8C': 'X',\n  '\\u24CE': 'Y',\n  '\\uFF39': 'Y',\n  '\\u1EF2': 'Y',\n  '\\u00DD': 'Y',\n  '\\u0176': 'Y',\n  '\\u1EF8': 'Y',\n  '\\u0232': 'Y',\n  '\\u1E8E': 'Y',\n  '\\u0178': 'Y',\n  '\\u1EF6': 'Y',\n  '\\u1EF4': 'Y',\n  '\\u01B3': 'Y',\n  '\\u024E': 'Y',\n  '\\u1EFE': 'Y',\n  '\\u24CF': 'Z',\n  '\\uFF3A': 'Z',\n  '\\u0179': 'Z',\n  '\\u1E90': 'Z',\n  '\\u017B': 'Z',\n  '\\u017D': 'Z',\n  '\\u1E92': 'Z',\n  '\\u1E94': 'Z',\n  '\\u01B5': 'Z',\n  '\\u0224': 'Z',\n  '\\u2C7F': 'Z',\n  '\\u2C6B': 'Z',\n  '\\uA762': 'Z',\n  '\\u24D0': 'a',\n  '\\uFF41': 'a',\n  '\\u1E9A': 'a',\n  '\\u00E0': 'a',\n  '\\u00E1': 'a',\n  '\\u00E2': 'a',\n  '\\u1EA7': 'a',\n  '\\u1EA5': 'a',\n  '\\u1EAB': 'a',\n  '\\u1EA9': 'a',\n  '\\u00E3': 'a',\n  '\\u0101': 'a',\n  '\\u0103': 'a',\n  '\\u1EB1': 'a',\n  '\\u1EAF': 'a',\n  '\\u1EB5': 'a',\n  '\\u1EB3': 'a',\n  '\\u0227': 'a',\n  '\\u01E1': 'a',\n  '\\u00E4': 'a',\n  '\\u01DF': 'a',\n  '\\u1EA3': 'a',\n  '\\u00E5': 'a',\n  '\\u01FB': 'a',\n  '\\u01CE': 'a',\n  '\\u0201': 'a',\n  '\\u0203': 'a',\n  '\\u1EA1': 'a',\n  '\\u1EAD': 'a',\n  '\\u1EB7': 'a',\n  '\\u1E01': 'a',\n  '\\u0105': 'a',\n  '\\u2C65': 'a',\n  '\\u0250': 'a',\n  '\\uA733': 'aa',\n  '\\u00E6': 'ae',\n  '\\u01FD': 'ae',\n  '\\u01E3': 'ae',\n  '\\uA735': 'ao',\n  '\\uA737': 'au',\n  '\\uA739': 'av',\n  '\\uA73B': 'av',\n  '\\uA73D': 'ay',\n  '\\u24D1': 'b',\n  '\\uFF42': 'b',\n  '\\u1E03': 'b',\n  '\\u1E05': 'b',\n  '\\u1E07': 'b',\n  '\\u0180': 'b',\n  '\\u0183': 'b',\n  '\\u0253': 'b',\n  '\\u24D2': 'c',\n  '\\uFF43': 'c',\n  '\\u0107': 'c',\n  '\\u0109': 'c',\n  '\\u010B': 'c',\n  '\\u010D': 'c',\n  '\\u00E7': 'c',\n  '\\u1E09': 'c',\n  '\\u0188': 'c',\n  '\\u023C': 'c',\n  '\\uA73F': 'c',\n  '\\u2184': 'c',\n  '\\u24D3': 'd',\n  '\\uFF44': 'd',\n  '\\u1E0B': 'd',\n  '\\u010F': 'd',\n  '\\u1E0D': 'd',\n  '\\u1E11': 'd',\n  '\\u1E13': 'd',\n  '\\u1E0F': 'd',\n  '\\u0111': 'd',\n  '\\u018C': 'd',\n  '\\u0256': 'd',\n  '\\u0257': 'd',\n  '\\uA77A': 'd',\n  '\\u01F3': 'dz',\n  '\\u01C6': 'dz',\n  '\\u24D4': 'e',\n  '\\uFF45': 'e',\n  '\\u00E8': 'e',\n  '\\u00E9': 'e',\n  '\\u00EA': 'e',\n  '\\u1EC1': 'e',\n  '\\u1EBF': 'e',\n  '\\u1EC5': 'e',\n  '\\u1EC3': 'e',\n  '\\u1EBD': 'e',\n  '\\u0113': 'e',\n  '\\u1E15': 'e',\n  '\\u1E17': 'e',\n  '\\u0115': 'e',\n  '\\u0117': 'e',\n  '\\u00EB': 'e',\n  '\\u1EBB': 'e',\n  '\\u011B': 'e',\n  '\\u0205': 'e',\n  '\\u0207': 'e',\n  '\\u1EB9': 'e',\n  '\\u1EC7': 'e',\n  '\\u0229': 'e',\n  '\\u1E1D': 'e',\n  '\\u0119': 'e',\n  '\\u1E19': 'e',\n  '\\u1E1B': 'e',\n  '\\u0247': 'e',\n  '\\u025B': 'e',\n  '\\u01DD': 'e',\n  '\\u24D5': 'f',\n  '\\uFF46': 'f',\n  '\\u1E1F': 'f',\n  '\\u0192': 'f',\n  '\\uA77C': 'f',\n  '\\u24D6': 'g',\n  '\\uFF47': 'g',\n  '\\u01F5': 'g',\n  '\\u011D': 'g',\n  '\\u1E21': 'g',\n  '\\u011F': 'g',\n  '\\u0121': 'g',\n  '\\u01E7': 'g',\n  '\\u0123': 'g',\n  '\\u01E5': 'g',\n  '\\u0260': 'g',\n  '\\uA7A1': 'g',\n  '\\u1D79': 'g',\n  '\\uA77F': 'g',\n  '\\u24D7': 'h',\n  '\\uFF48': 'h',\n  '\\u0125': 'h',\n  '\\u1E23': 'h',\n  '\\u1E27': 'h',\n  '\\u021F': 'h',\n  '\\u1E25': 'h',\n  '\\u1E29': 'h',\n  '\\u1E2B': 'h',\n  '\\u1E96': 'h',\n  '\\u0127': 'h',\n  '\\u2C68': 'h',\n  '\\u2C76': 'h',\n  '\\u0265': 'h',\n  '\\u0195': 'hv',\n  '\\u24D8': 'i',\n  '\\uFF49': 'i',\n  '\\u00EC': 'i',\n  '\\u00ED': 'i',\n  '\\u00EE': 'i',\n  '\\u0129': 'i',\n  '\\u012B': 'i',\n  '\\u012D': 'i',\n  '\\u00EF': 'i',\n  '\\u1E2F': 'i',\n  '\\u1EC9': 'i',\n  '\\u01D0': 'i',\n  '\\u0209': 'i',\n  '\\u020B': 'i',\n  '\\u1ECB': 'i',\n  '\\u012F': 'i',\n  '\\u1E2D': 'i',\n  '\\u0268': 'i',\n  '\\u0131': 'i',\n  '\\u24D9': 'j',\n  '\\uFF4A': 'j',\n  '\\u0135': 'j',\n  '\\u01F0': 'j',\n  '\\u0249': 'j',\n  '\\u24DA': 'k',\n  '\\uFF4B': 'k',\n  '\\u1E31': 'k',\n  '\\u01E9': 'k',\n  '\\u1E33': 'k',\n  '\\u0137': 'k',\n  '\\u1E35': 'k',\n  '\\u0199': 'k',\n  '\\u2C6A': 'k',\n  '\\uA741': 'k',\n  '\\uA743': 'k',\n  '\\uA745': 'k',\n  '\\uA7A3': 'k',\n  '\\u24DB': 'l',\n  '\\uFF4C': 'l',\n  '\\u0140': 'l',\n  '\\u013A': 'l',\n  '\\u013E': 'l',\n  '\\u1E37': 'l',\n  '\\u1E39': 'l',\n  '\\u013C': 'l',\n  '\\u1E3D': 'l',\n  '\\u1E3B': 'l',\n  '\\u017F': 'l',\n  '\\u0142': 'l',\n  '\\u019A': 'l',\n  '\\u026B': 'l',\n  '\\u2C61': 'l',\n  '\\uA749': 'l',\n  '\\uA781': 'l',\n  '\\uA747': 'l',\n  '\\u01C9': 'lj',\n  '\\u24DC': 'm',\n  '\\uFF4D': 'm',\n  '\\u1E3F': 'm',\n  '\\u1E41': 'm',\n  '\\u1E43': 'm',\n  '\\u0271': 'm',\n  '\\u026F': 'm',\n  '\\u24DD': 'n',\n  '\\uFF4E': 'n',\n  '\\u01F9': 'n',\n  '\\u0144': 'n',\n  '\\u00F1': 'n',\n  '\\u1E45': 'n',\n  '\\u0148': 'n',\n  '\\u1E47': 'n',\n  '\\u0146': 'n',\n  '\\u1E4B': 'n',\n  '\\u1E49': 'n',\n  '\\u019E': 'n',\n  '\\u0272': 'n',\n  '\\u0149': 'n',\n  '\\uA791': 'n',\n  '\\uA7A5': 'n',\n  '\\u01CC': 'nj',\n  '\\u24DE': 'o',\n  '\\uFF4F': 'o',\n  '\\u00F2': 'o',\n  '\\u00F3': 'o',\n  '\\u00F4': 'o',\n  '\\u1ED3': 'o',\n  '\\u1ED1': 'o',\n  '\\u1ED7': 'o',\n  '\\u1ED5': 'o',\n  '\\u00F5': 'o',\n  '\\u1E4D': 'o',\n  '\\u022D': 'o',\n  '\\u1E4F': 'o',\n  '\\u014D': 'o',\n  '\\u1E51': 'o',\n  '\\u1E53': 'o',\n  '\\u014F': 'o',\n  '\\u022F': 'o',\n  '\\u0231': 'o',\n  '\\u00F6': 'o',\n  '\\u022B': 'o',\n  '\\u1ECF': 'o',\n  '\\u0151': 'o',\n  '\\u01D2': 'o',\n  '\\u020D': 'o',\n  '\\u020F': 'o',\n  '\\u01A1': 'o',\n  '\\u1EDD': 'o',\n  '\\u1EDB': 'o',\n  '\\u1EE1': 'o',\n  '\\u1EDF': 'o',\n  '\\u1EE3': 'o',\n  '\\u1ECD': 'o',\n  '\\u1ED9': 'o',\n  '\\u01EB': 'o',\n  '\\u01ED': 'o',\n  '\\u00F8': 'o',\n  '\\u01FF': 'o',\n  '\\u0254': 'o',\n  '\\uA74B': 'o',\n  '\\uA74D': 'o',\n  '\\u0275': 'o',\n  '\\u01A3': 'oi',\n  '\\u0223': 'ou',\n  '\\uA74F': 'oo',\n  '\\u24DF': 'p',\n  '\\uFF50': 'p',\n  '\\u1E55': 'p',\n  '\\u1E57': 'p',\n  '\\u01A5': 'p',\n  '\\u1D7D': 'p',\n  '\\uA751': 'p',\n  '\\uA753': 'p',\n  '\\uA755': 'p',\n  '\\u24E0': 'q',\n  '\\uFF51': 'q',\n  '\\u024B': 'q',\n  '\\uA757': 'q',\n  '\\uA759': 'q',\n  '\\u24E1': 'r',\n  '\\uFF52': 'r',\n  '\\u0155': 'r',\n  '\\u1E59': 'r',\n  '\\u0159': 'r',\n  '\\u0211': 'r',\n  '\\u0213': 'r',\n  '\\u1E5B': 'r',\n  '\\u1E5D': 'r',\n  '\\u0157': 'r',\n  '\\u1E5F': 'r',\n  '\\u024D': 'r',\n  '\\u027D': 'r',\n  '\\uA75B': 'r',\n  '\\uA7A7': 'r',\n  '\\uA783': 'r',\n  '\\u24E2': 's',\n  '\\uFF53': 's',\n  '\\u00DF': 's',\n  '\\u015B': 's',\n  '\\u1E65': 's',\n  '\\u015D': 's',\n  '\\u1E61': 's',\n  '\\u0161': 's',\n  '\\u1E67': 's',\n  '\\u1E63': 's',\n  '\\u1E69': 's',\n  '\\u0219': 's',\n  '\\u015F': 's',\n  '\\u023F': 's',\n  '\\uA7A9': 's',\n  '\\uA785': 's',\n  '\\u1E9B': 's',\n  '\\u24E3': 't',\n  '\\uFF54': 't',\n  '\\u1E6B': 't',\n  '\\u1E97': 't',\n  '\\u0165': 't',\n  '\\u1E6D': 't',\n  '\\u021B': 't',\n  '\\u0163': 't',\n  '\\u1E71': 't',\n  '\\u1E6F': 't',\n  '\\u0167': 't',\n  '\\u01AD': 't',\n  '\\u0288': 't',\n  '\\u2C66': 't',\n  '\\uA787': 't',\n  '\\uA729': 'tz',\n  '\\u24E4': 'u',\n  '\\uFF55': 'u',\n  '\\u00F9': 'u',\n  '\\u00FA': 'u',\n  '\\u00FB': 'u',\n  '\\u0169': 'u',\n  '\\u1E79': 'u',\n  '\\u016B': 'u',\n  '\\u1E7B': 'u',\n  '\\u016D': 'u',\n  '\\u00FC': 'u',\n  '\\u01DC': 'u',\n  '\\u01D8': 'u',\n  '\\u01D6': 'u',\n  '\\u01DA': 'u',\n  '\\u1EE7': 'u',\n  '\\u016F': 'u',\n  '\\u0171': 'u',\n  '\\u01D4': 'u',\n  '\\u0215': 'u',\n  '\\u0217': 'u',\n  '\\u01B0': 'u',\n  '\\u1EEB': 'u',\n  '\\u1EE9': 'u',\n  '\\u1EEF': 'u',\n  '\\u1EED': 'u',\n  '\\u1EF1': 'u',\n  '\\u1EE5': 'u',\n  '\\u1E73': 'u',\n  '\\u0173': 'u',\n  '\\u1E77': 'u',\n  '\\u1E75': 'u',\n  '\\u0289': 'u',\n  '\\u24E5': 'v',\n  '\\uFF56': 'v',\n  '\\u1E7D': 'v',\n  '\\u1E7F': 'v',\n  '\\u028B': 'v',\n  '\\uA75F': 'v',\n  '\\u028C': 'v',\n  '\\uA761': 'vy',\n  '\\u24E6': 'w',\n  '\\uFF57': 'w',\n  '\\u1E81': 'w',\n  '\\u1E83': 'w',\n  '\\u0175': 'w',\n  '\\u1E87': 'w',\n  '\\u1E85': 'w',\n  '\\u1E98': 'w',\n  '\\u1E89': 'w',\n  '\\u2C73': 'w',\n  '\\u24E7': 'x',\n  '\\uFF58': 'x',\n  '\\u1E8B': 'x',\n  '\\u1E8D': 'x',\n  '\\u24E8': 'y',\n  '\\uFF59': 'y',\n  '\\u1EF3': 'y',\n  '\\u00FD': 'y',\n  '\\u0177': 'y',\n  '\\u1EF9': 'y',\n  '\\u0233': 'y',\n  '\\u1E8F': 'y',\n  '\\u00FF': 'y',\n  '\\u1EF7': 'y',\n  '\\u1E99': 'y',\n  '\\u1EF5': 'y',\n  '\\u01B4': 'y',\n  '\\u024F': 'y',\n  '\\u1EFF': 'y',\n  '\\u24E9': 'z',\n  '\\uFF5A': 'z',\n  '\\u017A': 'z',\n  '\\u1E91': 'z',\n  '\\u017C': 'z',\n  '\\u017E': 'z',\n  '\\u1E93': 'z',\n  '\\u1E95': 'z',\n  '\\u01B6': 'z',\n  '\\u0225': 'z',\n  '\\u0240': 'z',\n  '\\u2C6C': 'z',\n  '\\uA763': 'z',\n  '\\u0386': '\\u0391',\n  '\\u0388': '\\u0395',\n  '\\u0389': '\\u0397',\n  '\\u038A': '\\u0399',\n  '\\u03AA': '\\u0399',\n  '\\u038C': '\\u039F',\n  '\\u038E': '\\u03A5',\n  '\\u03AB': '\\u03A5',\n  '\\u038F': '\\u03A9',\n  '\\u03AC': '\\u03B1',\n  '\\u03AD': '\\u03B5',\n  '\\u03AE': '\\u03B7',\n  '\\u03AF': '\\u03B9',\n  '\\u03CA': '\\u03B9',\n  '\\u0390': '\\u03B9',\n  '\\u03CC': '\\u03BF',\n  '\\u03CD': '\\u03C5',\n  '\\u03CB': '\\u03C5',\n  '\\u03B0': '\\u03C5',\n  '\\u03C9': '\\u03C9',\n  '\\u03C2': '\\u03C3'\n};\nDataUtil.fnOperators = {\n  /**\n   * Returns true when the actual input is equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   * @param  {boolean} ignoreAccent?\n   */\n  equal: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n    }\n\n    return actual === expected;\n  },\n\n  /**\n   * Returns true when the actual input is not equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  notequal: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n  },\n\n  /**\n   * Returns true when the actual input is less than to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  lessthan: (actual, expected, ignoreCase) => {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n    }\n\n    if (isNullOrUndefined(actual)) {\n      actual = undefined;\n    }\n\n    return actual < expected;\n  },\n\n  /**\n   * Returns true when the actual input is greater than to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  greaterthan: (actual, expected, ignoreCase) => {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n    }\n\n    return actual > expected;\n  },\n\n  /**\n   * Returns true when the actual input is less than or equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  lessthanorequal: (actual, expected, ignoreCase) => {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n    }\n\n    if (isNullOrUndefined(actual)) {\n      actual = undefined;\n    }\n\n    return actual <= expected;\n  },\n\n  /**\n   * Returns true when the actual input is greater than or equal to the given input.\n   * @param  {string|number|boolean} actual\n   * @param  {string|number|boolean} expected\n   * @param  {boolean} ignoreCase?\n   */\n  greaterthanorequal: (actual, expected, ignoreCase) => {\n    if (ignoreCase) {\n      return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n    }\n\n    return actual >= expected;\n  },\n\n  /**\n   * Returns true when the actual input contains the given string.\n   * @param  {string|number} actual\n   * @param  {string|number} expected\n   * @param  {boolean} ignoreCase?\n   */\n  contains: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    if (ignoreCase) {\n      return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n    }\n\n    return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && actual.toString().indexOf(expected) !== -1;\n  },\n\n  /**\n   * Returns true when the given input value is not null.\n   * @param  {string|number} actual\n   * @returns boolean\n   */\n  notnull: actual => {\n    return actual !== null;\n  },\n\n  /**\n   * Returns true when the given input value is null.\n   * @param  {string|number} actual\n   * @returns boolean\n   */\n  isnull: actual => {\n    return actual === null;\n  },\n\n  /**\n   * Returns true when the actual input starts with the given string\n   * @param  {string} actual\n   * @param  {string} expected\n   * @param  {boolean} ignoreCase?\n   */\n  startswith: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    if (ignoreCase) {\n      return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n    }\n\n    return actual && expected && DataUtil.startsWith(actual, expected);\n  },\n\n  /**\n   * Returns true when the actual input ends with the given string.\n   * @param  {string} actual\n   * @param  {string} expected\n   * @param  {boolean} ignoreCase?\n   */\n  endswith: (actual, expected, ignoreCase, ignoreAccent) => {\n    if (ignoreAccent) {\n      actual = DataUtil.ignoreDiacritics(actual);\n      expected = DataUtil.ignoreDiacritics(expected);\n    }\n\n    if (ignoreCase) {\n      return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n    }\n\n    return actual && expected && DataUtil.endsWith(actual, expected);\n  },\n\n  /**\n   * It will return the filter operator based on the filter symbol.\n   * @param  {string} operator\n   * @hidden\n   */\n  processSymbols: operator => {\n    let fnName = DataUtil.operatorSymbols[operator];\n\n    if (fnName) {\n      let fn = DataUtil.fnOperators[fnName];\n      return fn;\n    }\n\n    return DataUtil.throwError('Query - Process Operator : Invalid operator');\n  },\n\n  /**\n   * It will return the valid filter operator based on the specified operators.\n   * @param  {string} operator\n   * @hidden\n   */\n  processOperator: operator => {\n    let fn = DataUtil.fnOperators[operator];\n\n    if (fn) {\n      return fn;\n    }\n\n    return DataUtil.fnOperators.processSymbols(operator);\n  }\n};\n/**\n * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n */\n\nDataUtil.parse = {\n  /**\n   * Parse the given string to the plain JavaScript object.\n   * @param  {string|Object|Object[]} jsonText\n   */\n  parseJson: jsonText => {\n    if (typeof jsonText === 'string') {\n      jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n    } else if (jsonText instanceof Array) {\n      DataUtil.parse.iterateAndReviveArray(jsonText);\n    } else if (typeof jsonText === 'object' && jsonText !== null) {\n      DataUtil.parse.iterateAndReviveJson(jsonText);\n    }\n\n    return jsonText;\n  },\n\n  /**\n   * It will perform on array of values.\n   * @param  {string[]|Object[]} array\n   * @hidden\n   */\n  iterateAndReviveArray: array => {\n    for (let i = 0; i < array.length; i++) {\n      if (typeof array[i] === 'object' && array[i] !== null) {\n        DataUtil.parse.iterateAndReviveJson(array[i]);\n      } else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{(.)+:|\\\"/g.test(array[i])) {\n        array[i] = DataUtil.parse.jsonReviver('', array[i]);\n      } else {\n        array[i] = DataUtil.parse.parseJson(array[i]);\n      }\n    }\n  },\n\n  /**\n   * It will perform on JSON values\n   * @param  {JSON} json\n   * @hidden\n   */\n  iterateAndReviveJson: json => {\n    let value;\n    let keys = Object.keys(json);\n\n    for (let prop of keys) {\n      if (DataUtil.startsWith(prop, '__')) {\n        continue;\n      }\n\n      value = json[prop];\n\n      if (typeof value === 'object') {\n        if (value instanceof Array) {\n          DataUtil.parse.iterateAndReviveArray(value);\n        } else if (value) {\n          DataUtil.parse.iterateAndReviveJson(value);\n        }\n      } else {\n        json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n      }\n    }\n  },\n\n  /**\n   * It will perform on JSON values\n   * @param  {string} field\n   * @param  {string|Date} value\n   * @hidden\n   */\n  jsonReviver: (field, value) => {\n    if (typeof value === 'string') {\n      let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n      let offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;\n\n      if (ms) {\n        return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);\n      } else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n        let isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;\n        let arr = value.split(/[^0-9.]/);\n\n        if (isUTC) {\n          value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);\n        } else {\n          let utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));\n          let hrs = parseInt(arr[6], 10);\n          let mins = parseInt(arr[7], 10);\n\n          if (isNaN(hrs) && isNaN(mins)) {\n            return utcFormat;\n          }\n\n          if (value.indexOf('+') > -1) {\n            utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);\n          } else {\n            utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);\n          }\n\n          value = DataUtil.dateParse.toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);\n        }\n\n        if (DataUtil.serverTimezoneOffset == null) {\n          value = DataUtil.dateParse.addSelfOffset(value);\n        }\n      }\n    }\n\n    return value;\n  },\n\n  /**\n   * Check wheather the given value is JSON or not.\n   * @param  {Object[]} jsonData\n   */\n  isJson: jsonData => {\n    if (typeof jsonData[0] === 'string') {\n      return jsonData;\n    }\n\n    return DataUtil.parse.parseJson(jsonData);\n  },\n\n  /**\n   * Checks wheather the given value is GUID or not.\n   * @param  {string} value\n   */\n  isGuid: value => {\n    let regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n    let match = regex.exec(value);\n    return match != null;\n  },\n\n  /**\n   * The method used to replace the value based on the type.\n   * @param  {Object} value\n   * @param  {boolean} stringify\n   * @hidden\n   */\n  replacer: (value, stringify) => {\n    if (DataUtil.isPlainObject(value)) {\n      return DataUtil.parse.jsonReplacer(value, stringify);\n    }\n\n    if (value instanceof Array) {\n      return DataUtil.parse.arrayReplacer(value);\n    }\n\n    if (value instanceof Date) {\n      return DataUtil.parse.jsonReplacer({\n        val: value\n      }, stringify).val;\n    }\n\n    return value;\n  },\n\n  /**\n   * It will replace the JSON value.\n   * @param  {string} key\n   * @param  {Object} val\n   * @hidden\n   */\n  jsonReplacer: (val, stringify) => {\n    let value;\n    let keys = Object.keys(val);\n\n    for (let prop of keys) {\n      value = val[prop];\n\n      if (!(value instanceof Date)) {\n        continue;\n      }\n\n      let d = value;\n\n      if (DataUtil.serverTimezoneOffset == null) {\n        val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();\n      } else {\n        d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);\n        val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();\n      }\n    }\n\n    return val;\n  },\n\n  /**\n   * It will replace the Array of value.\n   * @param  {string} key\n   * @param  {Object[]} val\n   * @hidden\n   */\n  arrayReplacer: val => {\n    for (let i = 0; i < val.length; i++) {\n      if (DataUtil.isPlainObject(val[i])) {\n        val[i] = DataUtil.parse.jsonReplacer(val[i]);\n      } else if (val[i] instanceof Date) {\n        val[i] = DataUtil.parse.jsonReplacer({\n          date: val[i]\n        }).date;\n      }\n    }\n\n    return val;\n  },\n\n  /**\n   * It will replace the Date object with respective to UTC format value.\n   * @param  {string} key\n   * @param  {any} value\n   * @hidden\n   */\n\n  /* tslint:disable-next-line:no-any */\n  jsonDateReplacer: (key, value) => {\n    if (key === 'value' && value) {\n      if (typeof value === 'string') {\n        let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n\n        if (ms) {\n          value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);\n        } else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n          let arr = value.split(/[^0-9]/);\n          value = DataUtil.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);\n        }\n      }\n\n      if (value instanceof Date) {\n        value = DataUtil.dateParse.addSelfOffset(value);\n\n        if (DataUtil.serverTimezoneOffset === null) {\n          return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();\n        } else {\n          value = DataUtil.dateParse.toTimeZone(value, value.getTimezoneOffset() / 60 * 2 - DataUtil.serverTimezoneOffset, false);\n          return value.toJSON();\n        }\n      }\n    }\n\n    return value;\n  }\n};\n/**\n * @hidden\n */\n\nDataUtil.dateParse = {\n  addSelfOffset: input => {\n    return new Date(+input - input.getTimezoneOffset() * 60000);\n  },\n  toUTC: input => {\n    return new Date(+input + input.getTimezoneOffset() * 60000);\n  },\n  toTimeZone: (input, offset, utc) => {\n    if (offset === null) {\n      return input;\n    }\n\n    let unix = utc ? DataUtil.dateParse.toUTC(input) : input;\n    return new Date(+unix - offset * 3600000);\n  },\n  toLocalTime: input => {\n    let datefn = input;\n    let timeZone = -datefn.getTimezoneOffset();\n    let differenceString = timeZone >= 0 ? '+' : '-';\n\n    let localtimefn = num => {\n      let norm = Math.floor(Math.abs(num));\n      return (norm < 10 ? '0' : '') + norm;\n    };\n\n    let val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) + 'T' + localtimefn(datefn.getHours()) + ':' + localtimefn(datefn.getMinutes()) + ':' + localtimefn(datefn.getSeconds()) + differenceString + localtimefn(timeZone / 60) + ':' + localtimefn(timeZone % 60);\n    return val;\n  }\n};\nconst consts$1 = {\n  GroupGuid: '{271bbba0-1ee7}'\n};\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\n\nclass Adaptor {\n  /**\n   * Constructor for Adaptor class\n   * @param  {DataOptions} ds?\n   * @hidden\n   * @returns aggregates\n   */\n  constructor(ds) {\n    // common options for all the adaptors \n    this.options = {\n      from: 'table',\n      requestType: 'json',\n      sortBy: 'sorted',\n      select: 'select',\n      skip: 'skip',\n      group: 'group',\n      take: 'take',\n      search: 'search',\n      count: 'requiresCounts',\n      where: 'where',\n      aggregates: 'aggregates',\n      expand: 'expand'\n    };\n    /**\n     * Specifies the type of adaptor.\n     * @default Adaptor\n     */\n\n    this.type = Adaptor;\n    this.dataSource = ds;\n    this.pvt = {};\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {Object} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @returns Object\n   */\n\n\n  processResponse(data, ds, query, xhr) {\n    return data;\n  }\n\n}\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\n\n\nclass JsonAdaptor extends Adaptor {\n  /**\n   * Process the JSON data based on the provided queries.\n   * @param  {DataManager} dataManager\n   * @param  {Query} query\n   * @returns Object\n   */\n  processQuery(dataManager, query) {\n    let result = dataManager.dataSource.json.slice(0);\n    let count = result.length;\n    let countFlg = true;\n    let ret;\n    let key;\n    let lazyLoad = {};\n    let keyCount = 0;\n    let group = [];\n    let page;\n\n    for (let i = 0; i < query.lazyLoad.length; i++) {\n      keyCount++;\n      lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n    }\n\n    let agg = {};\n\n    for (let i = 0; i < query.queries.length; i++) {\n      key = query.queries[i];\n\n      if ((key.fn === 'onPage' || key.fn === 'onGroup') && query.lazyLoad.length) {\n        if (key.fn === 'onGroup') {\n          group.push(key.e);\n        }\n\n        if (key.fn === 'onPage') {\n          page = key.e;\n        }\n\n        continue;\n      }\n\n      ret = this[key.fn].call(this, result, key.e, query);\n\n      if (key.fn === 'onAggregates') {\n        agg[key.e.field + ' - ' + key.e.type] = ret;\n      } else {\n        result = ret !== undefined ? ret : result;\n      }\n\n      if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n        countFlg = false;\n      }\n\n      if (countFlg) {\n        count = result.length;\n      }\n    }\n\n    if (keyCount) {\n      let args = {\n        query: query,\n        lazyLoad: lazyLoad,\n        result: result,\n        group: group,\n        page: page\n      };\n      let lazyLoadData = this.lazyLoadGroup(args);\n      result = lazyLoadData.result;\n      count = lazyLoadData.count;\n    }\n\n    if (query.isCountRequired) {\n      result = {\n        result: result,\n        count: count,\n        aggregates: agg\n      };\n    }\n\n    return result;\n  }\n  /**\n   * Perform lazy load grouping in JSON array based on the given query and lazy load details.\n   * @param  {LazyLoadGroupArgs} args\n   */\n\n\n  lazyLoadGroup(args) {\n    let count = 0;\n    let agg = this.getAggregate(args.query);\n    let result = args.result;\n\n    if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {\n      let req = args.lazyLoad.onDemandGroupInfo;\n\n      for (let i = req.where.length - 1; i >= 0; i--) {\n        result = this.onWhere(result, req.where[i]);\n      }\n\n      if (args.group.length !== req.level) {\n        let field = args.group[req.level].fieldName;\n        result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n      }\n\n      count = result.length;\n      let data = result;\n      result = result.slice(req.skip);\n      result = result.slice(0, req.take);\n\n      if (args.group.length !== req.level) {\n        this.formGroupResult(result, data);\n      }\n    } else {\n      let field = args.group[0].fieldName;\n      result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n      count = result.length;\n      let data = result;\n\n      if (args.page) {\n        result = this.onPage(result, args.page, args.query);\n      }\n\n      this.formGroupResult(result, data);\n    }\n\n    return {\n      result: result,\n      count: count\n    };\n  }\n\n  formGroupResult(result, data) {\n    if (result.length && data.length) {\n      let uid = 'GroupGuid';\n      let childLevel = 'childLevels';\n      let level = 'level';\n      let records = 'records';\n      result[uid] = data[uid];\n      result[childLevel] = data[childLevel];\n      result[level] = data[level];\n      result[records] = data[records];\n    }\n\n    return result;\n  }\n  /**\n   * Separate the aggregate query from the given queries\n   * @param  {Query} query\n   */\n\n\n  getAggregate(query) {\n    let aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n    let agg = [];\n\n    if (aggQuery.length) {\n      let tmp;\n\n      for (let i = 0; i < aggQuery.length; i++) {\n        tmp = aggQuery[i].e;\n        agg.push({\n          type: tmp.type,\n          field: DataUtil.getValue(tmp.field, query)\n        });\n      }\n    }\n\n    return agg;\n  }\n  /**\n   * Performs batch update in the JSON array which add, remove and update records.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {RemoteArgs} e\n   */\n\n\n  batchRequest(dm, changes, e) {\n    let i;\n    let deletedRecordsLen = changes.deletedRecords.length;\n\n    for (i = 0; i < changes.addedRecords.length; i++) {\n      this.insert(dm, changes.addedRecords[i]);\n    }\n\n    for (i = 0; i < changes.changedRecords.length; i++) {\n      this.update(dm, e.key, changes.changedRecords[i]);\n    }\n\n    for (i = 0; i < deletedRecordsLen; i++) {\n      this.remove(dm, e.key, changes.deletedRecords[i]);\n    }\n\n    return changes;\n  }\n  /**\n   * Performs filter operation with the given data and where query.\n   * @param  {Object[]} ds\n   * @param  {{validate:Function}} e\n   */\n\n\n  onWhere(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    return ds.filter(obj => {\n      if (e) {\n        return e.validate(obj);\n      }\n    });\n  }\n  /**\n   * Returns aggregate function based on the aggregate type.\n   * @param  {Object[]} ds\n   * @param  {{field:string} e\n   * @param  {string}} type\n   */\n\n\n  onAggregates(ds, e) {\n    let fn = DataUtil.aggregates[e.type];\n\n    if (!ds || !fn || ds.length === 0) {\n      return null;\n    }\n\n    return fn(ds, e.field);\n  }\n  /**\n   * Performs search operation based on the given query.\n   * @param  {Object[]} ds\n   * @param  {QueryOptions} e\n   */\n\n\n  onSearch(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    if (e.fieldNames.length === 0) {\n      DataUtil.getFieldList(ds[0], e.fieldNames);\n    }\n\n    return ds.filter(obj => {\n      for (let j = 0; j < e.fieldNames.length; j++) {\n        if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n  }\n  /**\n   * Sort the data with given direction and field.\n   * @param  {Object[]} ds\n   * @param  {{comparer:(a:Object} e\n   * @param  {Object} b\n   */\n\n\n  onSortBy(ds, e, query) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    let fnCompare;\n    let field = DataUtil.getValue(e.fieldName, query);\n\n    if (!field) {\n      return ds.sort(e.comparer);\n    }\n\n    if (field instanceof Array) {\n      field = field.slice(0);\n\n      for (let i = field.length - 1; i >= 0; i--) {\n        if (!field[i]) {\n          continue;\n        }\n\n        fnCompare = e.comparer;\n\n        if (DataUtil.endsWith(field[i], ' desc')) {\n          fnCompare = DataUtil.fnSort('descending');\n          field[i] = field[i].replace(' desc', '');\n        }\n\n        ds = DataUtil.sort(ds, field[i], fnCompare);\n      }\n\n      return ds;\n    }\n\n    return DataUtil.sort(ds, field, e.comparer);\n  }\n  /**\n   * Group the data based on the given query.\n   * @param  {Object[]} ds\n   * @param  {QueryOptions} e\n   * @param  {Query} query\n   */\n\n\n  onGroup(ds, e, query) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    let agg = this.getAggregate(query);\n    return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n  }\n  /**\n   * Retrieves records based on the given page index and size.\n   * @param  {Object[]} ds\n   * @param  {{pageSize:number} e\n   * @param  {number}} pageIndex\n   * @param  {Query} query\n   */\n\n\n  onPage(ds, e, query) {\n    let size = DataUtil.getValue(e.pageSize, query);\n    let start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n    let end = start + size;\n\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    return ds.slice(start, end);\n  }\n  /**\n   * Retrieves records based on the given start and end index from query.\n   * @param  {Object[]} ds\n   * @param  {{start:number} e\n   * @param  {number}} end\n   */\n\n\n  onRange(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n  }\n  /**\n   * Picks the given count of records from the top of the datasource.\n   * @param  {Object[]} ds\n   * @param  {{nos:number}} e\n   */\n\n\n  onTake(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    return ds.slice(0, DataUtil.getValue(e.nos));\n  }\n  /**\n   * Skips the given count of records from the data source.\n   * @param  {Object[]} ds\n   * @param  {{nos:number}} e\n   */\n\n\n  onSkip(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    return ds.slice(DataUtil.getValue(e.nos));\n  }\n  /**\n   * Selects specified columns from the data source.\n   * @param  {Object[]} ds\n   * @param  {{fieldNames:string}} e\n   */\n\n\n  onSelect(ds, e) {\n    if (!ds || !ds.length) {\n      return ds;\n    }\n\n    return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n  }\n  /**\n   * Inserts new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {number} position\n   */\n\n\n  insert(dm, data, tableName, query, position) {\n    if (isNullOrUndefined(position)) {\n      return dm.dataSource.json.push(data);\n    } else {\n      return dm.dataSource.json.splice(position, 0, data);\n    }\n  }\n  /**\n   * Remove the data from the dataSource based on the key field value.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   * @returns null\n   */\n\n\n  remove(dm, keyField, value, tableName) {\n    let ds = dm.dataSource.json;\n    let i;\n\n    if (typeof value === 'object' && !(value instanceof Date)) {\n      value = DataUtil.getObject(keyField, value);\n    }\n\n    for (i = 0; i < ds.length; i++) {\n      if (DataUtil.getObject(keyField, ds[i]) === value) {\n        break;\n      }\n    }\n\n    return i !== ds.length ? ds.splice(i, 1) : null;\n  }\n  /**\n   * Updates existing record and saves the changes to the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   * @returns null\n   */\n\n\n  update(dm, keyField, value, tableName) {\n    let ds = dm.dataSource.json;\n    let i;\n    let key;\n\n    if (!isNullOrUndefined(keyField)) {\n      key = getValue(keyField, value);\n    }\n\n    for (i = 0; i < ds.length; i++) {\n      if (!isNullOrUndefined(keyField) && getValue(keyField, ds[i]) === key) {\n        break;\n      }\n    }\n\n    return i < ds.length ? merge(ds[i], value) : null;\n  }\n\n}\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\n\n\nclass UrlAdaptor extends Adaptor {\n  /**\n   * Process the query to generate request body.\n   * @param  {DataManager} dm\n   * @param  {Query} query\n   * @param  {Object[]} hierarchyFilters?\n   * @returns p\n   */\n  // tslint:disable-next-line:max-func-body-length\n  processQuery(dm, query, hierarchyFilters) {\n    let queries = this.getQueryRequest(query);\n    let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n    let params = query.params;\n    let url = dm.dataSource.url;\n    let temp;\n    let skip;\n    let take = null;\n    let options = this.options;\n    let request = {\n      sorts: [],\n      groups: [],\n      filters: [],\n      searches: [],\n      aggregates: []\n    }; // calc Paging & Range\n\n    if ('onPage' in singles) {\n      temp = singles.onPage;\n      skip = DataUtil.getValue(temp.pageIndex, query);\n      take = DataUtil.getValue(temp.pageSize, query);\n      skip = (skip - 1) * take;\n    } else if ('onRange' in singles) {\n      temp = singles.onRange;\n      skip = temp.start;\n      take = temp.end - temp.start;\n    } // Sorting\n\n\n    for (let i = 0; i < queries.sorts.length; i++) {\n      temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n      request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', {\n        name: temp,\n        direction: queries.sorts[i].e.direction\n      }, query));\n    } // hierarchy\n\n\n    if (hierarchyFilters) {\n      temp = this.getFiltersFrom(hierarchyFilters, query);\n\n      if (temp) {\n        request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n      }\n    } // Filters\n\n\n    for (let i = 0; i < queries.filters.length; i++) {\n      let res = DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query);\n\n      if (this.getModuleName && this.getModuleName() === 'ODataV4Adaptor' && !isNullOrUndefined(queries.filters[i].e.key) && queries.filters.length > 1) {\n        res = \"(\" + res + \")\";\n      }\n\n      request.filters.push(res);\n      let keys = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];\n\n      for (let prop of keys) {\n        if (DataUtil.isNull(request[prop])) {\n          delete request[prop];\n        }\n      }\n    } // Searches\n\n\n    for (let i = 0; i < queries.searches.length; i++) {\n      temp = queries.searches[i].e;\n      request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n        fields: temp.fieldNames,\n        operator: temp.operator,\n        key: temp.searchKey,\n        ignoreCase: temp.ignoreCase\n      }, query));\n    } // Grouping\n\n\n    for (let i = 0; i < queries.groups.length; i++) {\n      request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));\n    } // aggregates\n\n\n    for (let i = 0; i < queries.aggregates.length; i++) {\n      temp = queries.aggregates[i].e;\n      request.aggregates.push({\n        type: temp.type,\n        field: DataUtil.getValue(temp.field, query)\n      });\n    }\n\n    let req = {};\n    this.getRequestQuery(options, query, singles, request, req); // Params\n\n    DataUtil.callAdaptorFunction(this, 'addParams', {\n      dm: dm,\n      query: query,\n      params: params,\n      reqParams: req\n    });\n\n    if (query.lazyLoad.length) {\n      for (let i = 0; i < query.lazyLoad.length; i++) {\n        req[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n      }\n    } // cleanup\n\n\n    let keys = Object.keys(req);\n\n    for (let prop of keys) {\n      if (DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {\n        delete req[prop];\n      }\n    }\n\n    if (!(options.skip in req && options.take in req) && take !== null) {\n      req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n      req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n    }\n\n    let p = this.pvt;\n    this.pvt = {};\n\n    if (this.options.requestType === 'json') {\n      return {\n        data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),\n        url: url,\n        pvtData: p,\n        type: 'POST',\n        contentType: 'application/json; charset=utf-8'\n      };\n    }\n\n    temp = this.convertToQueryString(req, query, dm);\n    temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n    return {\n      type: 'GET',\n      url: temp.length ? url.replace(/\\/*$/, temp) : url,\n      pvtData: p\n    };\n  }\n\n  getRequestQuery(options, query, singles, request, request1) {\n    let param = 'param';\n    let req = request1;\n    req[options.from] = query.fromTable;\n\n    if (options.apply && query.distincts.length) {\n      req[options.apply] = 'onDistinct' in this ? DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';\n    }\n\n    if (!query.distincts.length && options.expand) {\n      req[options.expand] = 'onExpand' in this && 'onSelect' in singles ? DataUtil.callAdaptorFunction(this, 'onExpand', {\n        selects: DataUtil.getValue(singles.onSelect.fieldNames, query),\n        expands: query.expands\n      }, query) : query.expands;\n    }\n\n    req[options.select] = 'onSelect' in singles && !query.distincts.length ? DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n    req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n    req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n    req[options.skip] = 'onSkip' in singles ? DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n    req[options.take] = 'onTake' in singles ? DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n    req[options.where] = request.filters.length || request.searches.length ? DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n    req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n    req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n    req[options.aggregates] = request.aggregates.length ? DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n    req[param] = [];\n  }\n  /**\n   * Convert the object from processQuery to string which can be added query string.\n   * @param  {Object} req\n   * @param  {Query} query\n   * @param  {DataManager} dm\n   */\n\n\n  convertToQueryString(request, query, dm) {\n    return ''; // this needs to be overridden\n  }\n  /**\n   * Return the data from the data manager processing.\n   * @param  {DataResult} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Object} request?\n   * @param  {CrudOptions} changes?\n   */\n\n\n  processResponse(data, ds, query, xhr, request, changes) {\n    if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {\n      let handleTimeZone = DataUtil.timeZoneHandling;\n\n      if (ds && !ds.timeZoneHandling) {\n        DataUtil.timeZoneHandling = false;\n      }\n\n      data = DataUtil.parse.parseJson(data);\n      DataUtil.timeZoneHandling = handleTimeZone;\n    }\n\n    let requests = request;\n    let pvt = requests.pvtData || {};\n    let groupDs = data ? data.groupDs : [];\n\n    if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n      return query.isCountRequired ? {\n        result: [],\n        count: 0\n      } : [];\n    }\n\n    let d = JSON.parse(requests.data);\n\n    if (d && d.action === 'batch' && data && data.addedRecords) {\n      changes.addedRecords = data.addedRecords;\n      return changes;\n    }\n\n    if (data && data.d) {\n      data = data.d;\n    }\n\n    let args = {};\n\n    if (data && 'count' in data) {\n      args.count = data.count;\n    }\n\n    args.result = data && data.result ? data.result : data;\n    let isExpand = false;\n\n    if (Array.isArray(data.result) && data.result.length) {\n      let key = 'key';\n      let val = 'value';\n      let level = 'level';\n\n      if (!isNullOrUndefined(data.result[0][key])) {\n        args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);\n      }\n\n      if (query && query.lazyLoad.length && pvt.groups.length) {\n        for (let i = 0; i < query.lazyLoad.length; i++) {\n          if (query.lazyLoad[i][key] === 'onDemandGroupInfo') {\n            let value = query.lazyLoad[i][val][level];\n\n            if (pvt.groups.length === value) {\n              isExpand = true;\n            }\n          }\n        }\n      }\n    }\n\n    if (!isExpand) {\n      this.getAggregateResult(pvt, data, args, groupDs, query);\n    }\n\n    return DataUtil.isNull(args.count) ? args.result : {\n      result: args.result,\n      count: args.count,\n      aggregates: args.aggregates\n    };\n  }\n\n  formRemoteGroupedData(data, level, childLevel) {\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].items.length && Object.keys(data[i].items[0]).indexOf('key') > -1) {\n        this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);\n      }\n    }\n\n    let uid = 'GroupGuid';\n    let childLvl = 'childLevels';\n    let lvl = 'level';\n    let records = 'records';\n    data[uid] = consts$1[uid];\n    data[lvl] = level;\n    data[childLvl] = childLevel;\n    data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];\n    return data;\n  }\n\n  getGroupedRecords(data, hasRecords) {\n    let childGroupedRecords = [];\n    let records = 'records';\n\n    for (let i = 0; i < data.length; i++) {\n      if (!hasRecords) {\n        for (let j = 0; j < data[i].items.length; j++) {\n          childGroupedRecords.push(data[i].items[j]);\n        }\n      } else {\n        childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);\n      }\n    }\n\n    return childGroupedRecords;\n  }\n  /**\n   * Add the group query to the adaptor`s option.\n   * @param  {Object[]} e\n   * @returns void\n   */\n\n\n  onGroup(e) {\n    this.pvt.groups = e;\n    return e;\n  }\n  /**\n   * Add the aggregate query to the adaptor`s option.\n   * @param  {Aggregates[]} e\n   * @returns void\n   */\n\n\n  onAggregates(e) {\n    this.pvt.aggregates = e;\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {Object} e\n   */\n\n\n  batchRequest(dm, changes, e, query, original) {\n    let url;\n    let key;\n    return {\n      type: 'POST',\n      url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n      contentType: 'application/json; charset=utf-8',\n      dataType: 'json',\n      data: JSON.stringify(extend({}, {\n        changed: changes.changedRecords,\n        added: changes.addedRecords,\n        deleted: changes.deletedRecords,\n        action: 'batch',\n        table: e[url],\n        key: e[key]\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  /**\n   * Method will trigger before send the request to server side.\n   * Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @returns void\n   */\n\n\n  beforeSend(dm, request) {// need to extend this method\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {string} tableName\n   */\n\n\n  insert(dm, data, tableName, query) {\n    return {\n      url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        value: data,\n        table: tableName,\n        action: 'insert'\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  /**\n   * Prepare and return request body which is used to remove record from the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {number|string} value\n   * @param  {string} tableName\n   */\n\n\n  remove(dm, keyField, value, tableName, query) {\n    return {\n      type: 'POST',\n      url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        key: value,\n        keyColumn: keyField,\n        table: tableName,\n        action: 'remove'\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  /**\n   * Prepare and return request body which is used to update record.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName\n   */\n\n\n  update(dm, keyField, value, tableName, query) {\n    return {\n      type: 'POST',\n      url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        value: value,\n        action: 'update',\n        keyColumn: keyField,\n        key: DataUtil.getObject(keyField, value),\n        table: tableName\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n  /**\n   * To generate the predicate based on the filtered query.\n   * @param  {Object[]|string[]|number[]} data\n   * @param  {Query} query\n   * @hidden\n   */\n\n\n  getFiltersFrom(data, query) {\n    let key = query.fKey;\n    let value;\n    let prop = key;\n    let pKey = query.key;\n    let predicats = [];\n\n    if (typeof data[0] !== 'object') {\n      prop = null;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      if (typeof data[0] === 'object') {\n        value = DataUtil.getObject(pKey || prop, data[i]);\n      } else {\n        value = data[i];\n      }\n\n      predicats.push(new Predicate(key, 'equal', value));\n    }\n\n    return Predicate.or(predicats);\n  }\n\n  getAggregateResult(pvt, data, args, groupDs, query) {\n    let pData = data;\n\n    if (data && data.result) {\n      pData = data.result;\n    }\n\n    if (pvt && pvt.aggregates && pvt.aggregates.length) {\n      let agg = pvt.aggregates;\n      let fn;\n      let aggregateData = pData;\n      let res = {};\n\n      if (data.aggregate) {\n        aggregateData = data.aggregate;\n      }\n\n      for (let i = 0; i < agg.length; i++) {\n        fn = DataUtil.aggregates[agg[i].type];\n\n        if (fn) {\n          res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n        }\n      }\n\n      args.aggregates = res;\n    }\n\n    let key = 'key';\n    let isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);\n\n    if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {\n      let groups = pvt.groups;\n\n      for (let i = 0; i < groups.length; i++) {\n        let level = null;\n\n        if (!isNullOrUndefined(groupDs)) {\n          groupDs = DataUtil.group(groupDs, groups[i]);\n        }\n\n        let groupQuery = Query.filterQueries(query.queries, 'onGroup')[i].e;\n        pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);\n      }\n\n      args.result = pData;\n    }\n\n    return args;\n  }\n\n  getQueryRequest(query) {\n    let req = {\n      sorts: [],\n      groups: [],\n      filters: [],\n      searches: [],\n      aggregates: []\n    };\n    req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n    req.groups = Query.filterQueries(query.queries, 'onGroup');\n    req.filters = Query.filterQueries(query.queries, 'onWhere');\n    req.searches = Query.filterQueries(query.queries, 'onSearch');\n    req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n    return req;\n  }\n\n  addParams(options) {\n    let req = options.reqParams;\n\n    if (options.params.length) {\n      req.params = {};\n    }\n\n    for (let tmp of options.params) {\n      if (req[tmp.key]) {\n        throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n      }\n\n      req[tmp.key] = tmp.value;\n\n      if (tmp.fn) {\n        req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n      }\n\n      req.params[tmp.key] = req[tmp.key];\n    }\n  }\n\n}\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\n\n\nclass ODataAdaptor extends UrlAdaptor {\n  constructor(props) {\n    super(); // options replaced the default adaptor options\n\n    this.options = extend({}, this.options, {\n      requestType: 'get',\n      accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n      multipartAccept: 'multipart/mixed',\n      sortBy: '$orderby',\n      select: '$select',\n      skip: '$skip',\n      take: '$top',\n      count: '$inlinecount',\n      where: '$filter',\n      expand: '$expand',\n      batch: '$batch',\n      changeSet: '--changeset_',\n      batchPre: 'batch_',\n      contentId: 'Content-Id: ',\n      batchContent: 'Content-Type: multipart/mixed; boundary=',\n      changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n      batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n      updateType: 'PUT'\n    });\n    extend(this.options, props || {});\n  }\n\n  getModuleName() {\n    return 'ODataAdaptor';\n  }\n  /**\n   * Generate request string based on the filter criteria from query.\n   * @param  {Predicate} pred\n   * @param  {boolean} requiresCast?\n   */\n\n\n  onPredicate(predicate, query, requiresCast) {\n    let returnValue = '';\n    let operator;\n    let guid;\n    let val = predicate.value;\n    let type = typeof val;\n    let field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n\n    if (val instanceof Date) {\n      val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n    }\n\n    if (type === 'string') {\n      val = val.replace(/'/g, \"''\");\n\n      if (predicate.ignoreCase) {\n        val = val.toLowerCase();\n      }\n\n      val = encodeURIComponent(val);\n      val = '\\'' + val + '\\'';\n\n      if (requiresCast) {\n        field = 'cast(' + field + ', \\'Edm.String\\')';\n      }\n\n      if (DataUtil.parse.isGuid(val)) {\n        guid = 'guid';\n      }\n\n      if (predicate.ignoreCase) {\n        if (!guid) {\n          field = 'tolower(' + field + ')';\n        }\n\n        val = val.toLowerCase();\n      }\n    }\n\n    operator = DataUtil.odBiOperator[predicate.operator];\n\n    if (operator) {\n      returnValue += field;\n      returnValue += operator;\n\n      if (guid) {\n        returnValue += guid;\n      }\n\n      return returnValue + val;\n    }\n\n    if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {\n      operator = DataUtil.odv4UniOperator[predicate.operator];\n    } else {\n      operator = DataUtil.odUniOperator[predicate.operator];\n    }\n\n    if (operator === 'substringof') {\n      let temp = val;\n      val = field;\n      field = temp;\n    }\n\n    returnValue += operator + '(';\n    returnValue += field + ',';\n\n    if (guid) {\n      returnValue += guid;\n    }\n\n    returnValue += val + ')';\n    return returnValue;\n  }\n\n  addParams(options) {\n    super.addParams(options);\n    delete options.reqParams.params;\n  }\n  /**\n   * Generate request string based on the multiple filter criteria from query.\n   * @param  {Predicate} pred\n   * @param  {boolean} requiresCast?\n   */\n\n\n  onComplexPredicate(predicate, query, requiresCast) {\n    let res = [];\n\n    for (let i = 0; i < predicate.predicates.length; i++) {\n      res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n    }\n\n    return res.join(' ' + predicate.condition + ' ');\n  }\n  /**\n   * Generate query string based on the multiple filter criteria from query.\n   * @param  {Predicate} filter\n   * @param  {boolean} requiresCast?\n   */\n\n\n  onEachWhere(filter, query, requiresCast) {\n    return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n  }\n  /**\n   * Generate query string based on the multiple filter criteria from query.\n   * @param  {string[]} filters\n   */\n\n\n  onWhere(filters) {\n    if (this.pvt.search) {\n      filters.push(this.onEachWhere(this.pvt.search, null, true));\n    }\n\n    return filters.join(' and ');\n  }\n  /**\n   * Generate query string based on the multiple search criteria from query.\n   * @param  {{fields:string[]} e\n   * @param  {string} operator\n   * @param  {string} key\n   * @param  {boolean}} ignoreCase\n   */\n\n\n  onEachSearch(e) {\n    if (e.fields && e.fields.length === 0) {\n      DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n    }\n\n    let filter = this.pvt.search || [];\n\n    for (let i = 0; i < e.fields.length; i++) {\n      filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n    }\n\n    this.pvt.search = filter;\n  }\n  /**\n   * Generate query string based on the search criteria from query.\n   * @param  {Object} e\n   */\n\n\n  onSearch(e) {\n    this.pvt.search = Predicate.or(this.pvt.search);\n    return '';\n  }\n  /**\n   * Generate query string based on multiple sort criteria from query.\n   * @param  {QueryOptions} e\n   */\n\n\n  onEachSort(e) {\n    let res = [];\n\n    if (e.name instanceof Array) {\n      for (let i = 0; i < e.name.length; i++) {\n        res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n      }\n    } else {\n      res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n    }\n\n    return res.join(',');\n  }\n  /**\n   * Returns sort query string.\n   * @param  {string[]} e\n   */\n\n\n  onSortBy(e) {\n    return e.reverse().join(',');\n  }\n  /**\n   * Adds the group query to the adaptor option.\n   * @param  {Object[]} e\n   * @returns string\n   */\n\n\n  onGroup(e) {\n    this.pvt.groups = e;\n    return [];\n  }\n  /**\n   * Returns the select query string.\n   * @param  {string[]} e\n   */\n\n\n  onSelect(e) {\n    for (let i = 0; i < e.length; i++) {\n      e[i] = ODataAdaptor.getField(e[i]);\n    }\n\n    return e.join(',');\n  }\n  /**\n   * Add the aggregate query to the adaptor option.\n   * @param  {Object[]} e\n   * @returns string\n   */\n\n\n  onAggregates(e) {\n    this.pvt.aggregates = e;\n    return '';\n  }\n  /**\n   * Returns the query string which requests total count from the data source.\n   * @param  {boolean} e\n   * @returns string\n   */\n\n\n  onCount(e) {\n    return e === true ? 'allpages' : '';\n  }\n  /**\n   * Method will trigger before send the request to server side.\n   * Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @param  {Ajax} settings?\n   */\n\n\n  beforeSend(dm, request, settings) {\n    if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n      request.setRequestHeader('Accept', this.options.multipartAccept);\n      request.setRequestHeader('DataServiceVersion', '2.0');\n      request.overrideMimeType('text/plain; charset=x-user-defined');\n    } else {\n      request.setRequestHeader('Accept', this.options.accept);\n    }\n\n    request.setRequestHeader('DataServiceVersion', '2.0');\n    request.setRequestHeader('MaxDataServiceVersion', '2.0');\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {DataResult} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Ajax} request?\n   * @param  {CrudOptions} changes?\n   * @returns aggregateResult\n   */\n\n\n  processResponse(data, ds, query, xhr, request, changes) {\n    let metaCheck = 'odata.metadata';\n\n    if (request && request.type === 'GET' && !this.rootUrl && data[metaCheck]) {\n      let dataUrls = data[metaCheck].split('/$metadata#');\n      this.rootUrl = dataUrls[0];\n      this.resourceTableName = dataUrls[1];\n    }\n\n    let pvtData = 'pvtData';\n\n    if (!isNullOrUndefined(data.d)) {\n      let dataCopy = query && query.isCountRequired ? data.d.results : data.d;\n      let metaData = '__metadata';\n\n      if (!isNullOrUndefined(dataCopy)) {\n        for (let i = 0; i < dataCopy.length; i++) {\n          if (!isNullOrUndefined(dataCopy[i][metaData])) {\n            delete dataCopy[i][metaData];\n          }\n        }\n      }\n    }\n\n    let pvt = request && request[pvtData];\n    let emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n\n    if (emptyAndBatch) {\n      return emptyAndBatch;\n    }\n\n    let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n    let count = null;\n    let version = versionCheck && parseInt(versionCheck, 10) || 2;\n\n    if (query && query.isCountRequired) {\n      let oDataCount = '__count';\n\n      if (data[oDataCount] || data['odata.count']) {\n        count = data[oDataCount] || data['odata.count'];\n      }\n\n      if (data.d) {\n        data = data.d;\n      }\n\n      if (data[oDataCount] || data['odata.count']) {\n        count = data[oDataCount] || data['odata.count'];\n      }\n    }\n\n    if (version === 3 && data.value) {\n      data = data.value;\n    }\n\n    if (data.d) {\n      data = data.d;\n    }\n\n    if (version < 3 && data.results) {\n      data = data.results;\n    }\n\n    let args = {};\n    args.count = count;\n    args.result = data;\n    this.getAggregateResult(pvt, data, args, null, query);\n    return DataUtil.isNull(count) ? args.result : {\n      result: args.result,\n      count: args.count,\n      aggregates: args.aggregates\n    };\n  }\n  /**\n   * Converts the request object to query string.\n   * @param  {Object} req\n   * @param  {Query} query\n   * @param  {DataManager} dm\n   * @returns tableName\n   */\n\n\n  convertToQueryString(request, query, dm) {\n    let res = [];\n    let table = 'table';\n    let tableName = request[table] || '';\n    let format = '$format';\n    delete request[table];\n\n    if (dm.dataSource.requiresFormat) {\n      request[format] = 'json';\n    }\n\n    let keys = Object.keys(request);\n\n    for (let prop of keys) {\n      res.push(prop + '=' + request[prop]);\n    }\n\n    res = res.join('&');\n\n    if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n      return res;\n    }\n\n    return res.length ? tableName + '?' + res : tableName || '';\n  }\n\n  localTimeReplacer(key, convertObj) {\n    for (let prop of !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []) {\n      if (convertObj[prop] instanceof Date) {\n        convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);\n      }\n    }\n\n    return convertObj;\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {string} tableName?\n   */\n\n\n  insert(dm, data, tableName) {\n    return {\n      url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : ''),\n      data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)\n    };\n  }\n  /**\n   * Prepare and return request body which is used to remove record from the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {number} value\n   * @param  {string} tableName?\n   */\n\n\n  remove(dm, keyField, value, tableName) {\n    let url;\n\n    if (typeof value === 'string' && !DataUtil.parse.isGuid(value)) {\n      url = `('${value}')`;\n    } else {\n      url = `(${value})`;\n    }\n\n    return {\n      type: 'DELETE',\n      url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url\n    };\n  }\n  /**\n   * Updates existing record and saves the changes to the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   * @returns this\n   */\n\n\n  update(dm, keyField, value, tableName, query, original) {\n    if (this.options.updateType === 'PATCH' && !isNullOrUndefined(original)) {\n      value = this.compareAndRemove(value, original, keyField);\n    }\n\n    let url;\n\n    if (typeof value[keyField] === 'string' && !DataUtil.parse.isGuid(value[keyField])) {\n      url = `('${value[keyField]}')`;\n    } else {\n      url = `(${value[keyField]})`;\n    }\n\n    return {\n      type: this.options.updateType,\n      url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url,\n      data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),\n      accept: this.options.accept\n    };\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {RemoteArgs} e\n   * @returns {Object}\n   */\n\n\n  batchRequest(dm, changes, e, query, original) {\n    let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n    let url = this.rootUrl ? this.rootUrl + '/' + this.options.batch : dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n    e.url = this.resourceTableName ? this.resourceTableName : e.url;\n    let args = {\n      url: e.url,\n      key: e.key,\n      cid: 1,\n      cSet: DataUtil.getGuid(this.options.changeSet)\n    };\n    let req = '--' + initialGuid + '\\n';\n    req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n    this.pvt.changeSet = 0;\n    req += this.generateInsertRequest(changes.addedRecords, args, dm);\n    req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);\n    req += this.generateDeleteRequest(changes.deletedRecords, args, dm);\n    req += args.cSet + '--\\n';\n    req += '--' + initialGuid + '--';\n    return {\n      type: 'POST',\n      url: url,\n      dataType: 'json',\n      contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n      data: req\n    };\n  }\n  /**\n   * Generate the string content from the removed records.\n   * The result will be send during batch update.\n   * @param  {Object[]} arr\n   * @param  {RemoteArgs} e\n   * @returns this\n   */\n\n\n  generateDeleteRequest(arr, e, dm) {\n    if (!arr) {\n      return '';\n    }\n\n    let req = '';\n    let stat = {\n      'method': 'DELETE ',\n      'url': (data, i, key) => {\n        let url = DataUtil.getObject(key, data[i]);\n\n        if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n          return '(' + url + ')';\n        } else if (url instanceof Date) {\n          let dateTime = data[i][key];\n          return '(' + dateTime.toJSON() + ')';\n        } else {\n          return `('${url}')`;\n        }\n      },\n      'data': (data, i) => ''\n    };\n    req = this.generateBodyContent(arr, e, stat, dm);\n    return req + '\\n';\n  }\n  /**\n   * Generate the string content from the inserted records.\n   * The result will be send during batch update.\n   * @param  {Object[]} arr\n   * @param  {RemoteArgs} e\n   */\n\n\n  generateInsertRequest(arr, e, dm) {\n    if (!arr) {\n      return '';\n    }\n\n    let req = '';\n    let stat = {\n      'method': 'POST ',\n      'url': (data, i, key) => '',\n      'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n    };\n    req = this.generateBodyContent(arr, e, stat, dm);\n    return req;\n  }\n  /**\n   * Generate the string content from the updated records.\n   * The result will be send during batch update.\n   * @param  {Object[]} arr\n   * @param  {RemoteArgs} e\n   */\n\n\n  generateUpdateRequest(arr, e, dm, org) {\n    if (!arr) {\n      return '';\n    }\n\n    let req = '';\n    arr.forEach(change => change = this.compareAndRemove(change, org.filter(o => DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change))[0], e.key));\n    let stat = {\n      'method': this.options.updateType + ' ',\n      'url': (data, i, key) => {\n        if (typeof data[i][key] === 'number' || DataUtil.parse.isGuid(data[i][key])) {\n          return '(' + data[i][key] + ')';\n        } else if (data[i][key] instanceof Date) {\n          let date = data[i][key];\n          return '(' + date.toJSON() + ')';\n        } else {\n          return `('${data[i][key]}')`;\n        }\n      },\n      'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n    };\n    req = this.generateBodyContent(arr, e, stat, dm);\n    return req;\n  }\n\n  static getField(prop) {\n    return prop.replace(/\\./g, '/');\n  }\n\n  generateBodyContent(arr, e, stat, dm) {\n    let req = '';\n\n    for (let i = 0; i < arr.length; i++) {\n      req += '\\n' + e.cSet + '\\n';\n      req += this.options.changeSetContent + '\\n\\n';\n      req += stat.method;\n\n      if (stat.method === 'POST ') {\n        req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n      } else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {\n        req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n      } else if (stat.method === 'DELETE ') {\n        req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n      }\n\n      req += 'Accept: ' + this.options.accept + '\\n';\n      req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n      req += this.options.batchChangeSetContentType + '\\n';\n\n      if (!isNullOrUndefined(arr[i]['@odata.etag'])) {\n        req += 'If-Match: ' + arr[i]['@odata.etag'] + '\\n\\n';\n        delete arr[i]['@odata.etag'];\n      } else {\n        req += '\\n';\n      }\n\n      req += stat.data(arr, i);\n    }\n\n    return req;\n  }\n\n  processBatchResponse(data, query, xhr, request, changes) {\n    if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n      return query.isCountRequired ? {\n        result: [],\n        count: 0\n      } : [];\n    }\n\n    if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n      let guid = xhr.getResponseHeader('Content-Type');\n      let cIdx;\n      let jsonObj;\n      let d = data + '';\n      guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n      d = d.split(guid);\n\n      if (d.length < 2) {\n        return {};\n      }\n\n      d = d[1];\n      let exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n\n      if (exVal) {\n        d.replace(exVal[0], '');\n      }\n\n      let changeGuid = exVal ? exVal[1] : '';\n      d = d.split(changeGuid);\n\n      for (let i = d.length; i > -1; i--) {\n        if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n          continue;\n        }\n\n        cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n\n        if (changes.addedRecords[cIdx]) {\n          jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n          extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n        }\n      }\n\n      return changes;\n    }\n\n    return null;\n  }\n\n  compareAndRemove(data, original, key) {\n    if (isNullOrUndefined(original)) {\n      return data;\n    }\n\n    Object.keys(data).forEach(prop => {\n      if (prop !== key && prop !== '@odata.etag') {\n        if (DataUtil.isPlainObject(data[prop])) {\n          this.compareAndRemove(data[prop], original[prop]);\n          let final = Object.keys(data[prop]).filter(data => data !== '@odata.etag');\n\n          if (final.length === 0) {\n            delete data[prop];\n          }\n        } else if (data[prop] === original[prop]) {\n          delete data[prop];\n        } else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {\n          delete data[prop];\n        }\n      }\n    });\n    return data;\n  }\n\n}\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\n\n\nclass ODataV4Adaptor extends ODataAdaptor {\n  constructor(props) {\n    super(props); // options replaced the default adaptor options\n\n    this.options = extend({}, this.options, {\n      requestType: 'get',\n      accept: 'application/json, text/javascript, */*; q=0.01',\n      multipartAccept: 'multipart/mixed',\n      sortBy: '$orderby',\n      select: '$select',\n      skip: '$skip',\n      take: '$top',\n      count: '$count',\n      search: '$search',\n      where: '$filter',\n      expand: '$expand',\n      batch: '$batch',\n      changeSet: '--changeset_',\n      batchPre: 'batch_',\n      contentId: 'Content-Id: ',\n      batchContent: 'Content-Type: multipart/mixed; boundary=',\n      changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n      batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n      updateType: 'PATCH',\n      localTime: false,\n      apply: '$apply'\n    });\n    extend(this.options, props || {});\n  }\n  /**\n   * @hidden\n   */\n\n\n  getModuleName() {\n    return 'ODataV4Adaptor';\n  }\n  /**\n   * Returns the query string which requests total count from the data source.\n   * @param  {boolean} e\n   * @returns string\n   */\n\n\n  onCount(e) {\n    return e === true ? 'true' : '';\n  }\n  /**\n   * Generate request string based on the filter criteria from query.\n   * @param  {Predicate} pred\n   * @param  {boolean} requiresCast?\n   */\n\n\n  onPredicate(predicate, query, requiresCast) {\n    let returnValue = '';\n    let val = predicate.value;\n    let isDate = val instanceof Date;\n\n    if (query instanceof Query) {\n      let queries = this.getQueryRequest(query);\n\n      for (let i = 0; i < queries.filters.length; i++) {\n        if (queries.filters[i].e.key === predicate.value) {\n          requiresCast = true;\n        }\n      }\n    }\n\n    returnValue = super.onPredicate.call(this, predicate, query, requiresCast);\n\n    if (isDate) {\n      returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n    }\n\n    if (DataUtil.parse.isGuid(val)) {\n      returnValue = returnValue.replace('guid', '').replace(/'/g, '');\n    }\n\n    return returnValue;\n  }\n  /**\n   *  Generate query string based on the multiple search criteria from query.\n   * @param  {{fields:string[]} e\n   * @param  {string} operator\n   * @param  {string} key\n   * @param  {boolean}} ignoreCase\n   */\n\n\n  onEachSearch(e) {\n    let search = this.pvt.searches || [];\n    search.push(e.key);\n    this.pvt.searches = search;\n  }\n  /**\n   *  Generate query string based on the search criteria from query.\n   * @param  {Object} e\n   */\n\n\n  onSearch(e) {\n    return this.pvt.searches.join(' OR ');\n  }\n  /**\n   * Returns the expand query string.\n   * @param  {string} e\n   */\n\n\n  onExpand(e) {\n    let selected = {};\n    let expanded = {};\n    let expands = e.expands.slice();\n    let exArr = [];\n    let selects = e.selects.filter(item => item.indexOf('.') > -1);\n    selects.forEach(select => {\n      let splits = select.split('.');\n\n      if (!(splits[0] in selected)) {\n        selected[splits[0]] = [];\n      }\n\n      if (splits.length == 2) {\n        if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1) {\n          if (selected[splits[0]][0].indexOf('$expand') !== -1 && selected[splits[0]][0].indexOf(';$select=') === -1) {\n            selected[splits[0]][0] = selected[splits[0]][0] + ';' + '$select=' + splits[1];\n          } else {\n            selected[splits[0]][0] = selected[splits[0]][0] + ',' + splits[1];\n          }\n        } else {\n          selected[splits[0]].push('$select=' + splits[1]);\n        }\n      } else {\n        let sel = '$select=' + splits[splits.length - 1];\n        let exp = '';\n        let close = '';\n\n        for (let i = 1; i < splits.length - 1; i++) {\n          exp = exp + '$expand=' + splits[i] + '(';\n          close = close + ')';\n        }\n\n        let combineVal = exp + sel + close;\n\n        if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1 && this.expandQueryIndex(selected[splits[0]], true)) {\n          let idx = this.expandQueryIndex(selected[splits[0]]);\n          selected[splits[0]][idx] = selected[splits[0]][idx] + combineVal.replace('$expand=', ',');\n        } else {\n          selected[splits[0]].push(combineVal);\n        }\n      }\n    }); //Auto expand from select query\n\n    Object.keys(selected).forEach(expand => {\n      if (expands.indexOf(expand) === -1) {\n        expands.push(expand);\n      }\n    });\n    expands.forEach(expand => {\n      expanded[expand] = expand in selected ? `${expand}(${selected[expand].join(';')})` : expand;\n    });\n    Object.keys(expanded).forEach(ex => exArr.push(expanded[ex]));\n    return exArr.join(',');\n  }\n\n  expandQueryIndex(query, isExpand) {\n    for (let i = 0; i < query.length; i++) {\n      if (query[i].indexOf('$expand') !== -1) {\n        return isExpand ? true : i;\n      }\n    }\n\n    return isExpand ? false : 0;\n  }\n  /**\n   * Returns the groupby query string.\n   * @param  {string} e\n   */\n\n\n  onDistinct(distinctFields) {\n    let fields = distinctFields.map(field => ODataAdaptor.getField(field)).join(',');\n    return `groupby((${fields}))`;\n  }\n  /**\n   * Returns the select query string.\n   * @param  {string[]} e\n   */\n\n\n  onSelect(e) {\n    return super.onSelect(e.filter(item => item.indexOf('.') === -1));\n  }\n  /**\n   * Method will trigger before send the request to server side.\n   * Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @param  {Ajax} settings\n   * @returns void\n   */\n\n\n  beforeSend(dm, request, settings) {\n    if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {\n      request.setRequestHeader('Prefer', 'return=representation');\n    }\n\n    request.setRequestHeader('Accept', this.options.accept);\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {DataResult} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Ajax} request?\n   * @param  {CrudOptions} changes?\n   * @returns aggregateResult\n   */\n\n\n  processResponse(data, ds, query, xhr, request, changes) {\n    let metaName = '@odata.context';\n\n    if (request && request.type === 'GET' && !this.rootUrl && data[metaName]) {\n      let dataUrl = data[metaName].split('/$metadata#');\n      this.rootUrl = dataUrl[0];\n      this.resourceTableName = dataUrl[1];\n    }\n\n    let pvtData = 'pvtData';\n    let pvt = request && request[pvtData];\n    let emptyAndBatch = super.processBatchResponse(data, query, xhr, request, changes);\n\n    if (emptyAndBatch) {\n      return emptyAndBatch;\n    }\n\n    let count = null;\n    let dataCount = '@odata.count';\n\n    if (query && query.isCountRequired) {\n      if (dataCount in data) {\n        count = data[dataCount];\n      }\n    }\n\n    data = !isNullOrUndefined(data.value) ? data.value : data;\n    let args = {};\n    args.count = count;\n    args.result = data;\n    this.getAggregateResult(pvt, data, args, null, query);\n    return DataUtil.isNull(count) ? args.result : {\n      result: args.result,\n      count: count,\n      aggregates: args.aggregates\n    };\n  }\n\n}\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\n\n\nclass WebApiAdaptor extends ODataAdaptor {\n  getModuleName() {\n    return 'WebApiAdaptor';\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {string} tableName?\n   */\n\n\n  insert(dm, data, tableName) {\n    return {\n      type: 'POST',\n      url: dm.dataSource.url,\n      data: JSON.stringify(data)\n    };\n  }\n  /**\n   * Prepare and return request body which is used to remove record from the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {number} value\n   * @param  {string} tableName?\n   */\n\n\n  remove(dm, keyField, value, tableName) {\n    return {\n      type: 'DELETE',\n      url: dm.dataSource.url + '/' + value,\n      data: JSON.stringify(value)\n    };\n  }\n  /**\n   * Prepare and return request body which is used to update record.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   */\n\n\n  update(dm, keyField, value, tableName) {\n    return {\n      type: 'PUT',\n      url: dm.dataSource.url,\n      data: JSON.stringify(value)\n    };\n  }\n\n  batchRequest(dm, changes, e) {\n    let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n    let url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n    e.url = this.resourceTableName ? this.resourceTableName : e.url;\n    let req = []; //insertion\n\n    for (let i = 0, x = changes.addedRecords.length; i < x; i++) {\n      changes.addedRecords.forEach((j, d) => {\n        let stat = {\n          'method': 'POST ',\n          'url': (data, i, key) => '',\n          'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req.push('--' + initialGuid);\n        req.push('Content-Type: application/http; msgtype=request', '');\n        req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');\n        req.push('Content-Type: ' + 'application/json; charset=utf-8');\n        req.push('Host: ' + location.host);\n        req.push('', j ? JSON.stringify(j) : '');\n      });\n    } //updation \n\n\n    for (let i = 0, x = changes.changedRecords.length; i < x; i++) {\n      changes.changedRecords.forEach((j, d) => {\n        let stat = {\n          'method': this.options.updateType + ' ',\n          'url': (data, i, key) => '',\n          'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req.push('--' + initialGuid);\n        req.push('Content-Type: application/http; msgtype=request', '');\n        req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');\n        req.push('Content-Type: ' + 'application/json; charset=utf-8');\n        req.push('Host: ' + location.host);\n        req.push('', j ? JSON.stringify(j) : '');\n      });\n    } //deletion\n\n\n    for (let i = 0, x = changes.deletedRecords.length; i < x; i++) {\n      changes.deletedRecords.forEach((j, d) => {\n        let state = {\n          'mtd': 'DELETE ',\n          'url': (data, i, key) => {\n            let url = DataUtil.getObject(key, data[i]);\n\n            if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n              return '/' + url;\n            } else if (url instanceof Date) {\n              let datTime = data[i][key];\n              return '/' + datTime.toJSON();\n            } else {\n              return `/'${url}'`;\n            }\n          },\n          'data': (data, i) => ''\n        };\n        req.push('--' + initialGuid);\n        req.push('Content-Type: application/http; msgtype=request', '');\n        req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + state.url(changes.deletedRecords, i, e.key) + ' HTTP/1.1');\n        req.push('Content-Type: ' + 'application/json; charset=utf-8');\n        req.push('Host: ' + location.host);\n        req.push('', j ? JSON.stringify(j) : '');\n      });\n    }\n\n    req.push('--' + initialGuid + '--', '');\n    return {\n      type: 'POST',\n      url: url,\n      contentType: 'multipart/mixed; boundary=' + initialGuid,\n      data: req.join('\\r\\n')\n    };\n  }\n  /**\n   * Method will trigger before send the request to server side.\n   * Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @param  {Ajax} settings\n   * @returns void\n   */\n\n\n  beforeSend(dm, request, settings) {\n    request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n  }\n  /**\n   * Returns the data from the query processing.\n   * @param  {DataResult} data\n   * @param  {DataOptions} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Ajax} request?\n   * @param  {CrudOptions} changes?\n   * @returns aggregateResult\n   */\n\n\n  processResponse(data, ds, query, xhr, request, changes) {\n    let pvtData = 'pvtData';\n    let pvt = request && request[pvtData];\n    let count = null;\n    let args = {};\n\n    if (request && request.type.toLowerCase() !== 'post') {\n      let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n      let version = versionCheck && parseInt(versionCheck, 10) || 2;\n\n      if (query && query.isCountRequired) {\n        if (!DataUtil.isNull(data.Count)) {\n          count = data.Count;\n        }\n      }\n\n      if (version < 3 && data.Items) {\n        data = data.Items;\n      }\n\n      args.count = count;\n      args.result = data;\n      this.getAggregateResult(pvt, data, args, null, query);\n    }\n\n    args.result = args.result || data;\n    return DataUtil.isNull(count) ? args.result : {\n      result: args.result,\n      count: args.count,\n      aggregates: args.aggregates\n    };\n  }\n\n}\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\n\n\nclass WebMethodAdaptor extends UrlAdaptor {\n  /**\n   * Prepare the request body based on the query.\n   * The query information can be accessed at the WebMethod using variable named `value`.\n   * @param  {DataManager} dm\n   * @param  {Query} query\n   * @param  {Object[]} hierarchyFilters?\n   * @returns application\n   */\n  processQuery(dm, query, hierarchyFilters) {\n    let obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n    let getData = 'data';\n    let data = DataUtil.parse.parseJson(obj[getData]);\n    let result = {};\n    let value = 'value';\n\n    if (data.param) {\n      for (let i = 0; i < data.param.length; i++) {\n        let param = data.param[i];\n        let key = Object.keys(param)[0];\n        result[key] = param[key];\n      }\n    }\n\n    result[value] = data;\n    let pvtData = 'pvtData';\n    let url = 'url';\n    return {\n      data: JSON.stringify(result),\n      url: obj[url],\n      pvtData: obj[pvtData],\n      type: 'POST',\n      contentType: 'application/json; charset=utf-8'\n    };\n  }\n\n}\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\n\n\nclass RemoteSaveAdaptor extends JsonAdaptor {\n  /**\n   * @hidden\n   */\n  constructor() {\n    super();\n    setValue('beforeSend', UrlAdaptor.prototype.beforeSend, this);\n  }\n\n  insert(dm, data, tableName, query, position) {\n    this.pvt.position = position;\n    this.updateType = 'add';\n    return {\n      url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        value: data,\n        table: tableName,\n        action: 'insert'\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n\n  remove(dm, keyField, val, tableName, query) {\n    super.remove(dm, keyField, val);\n    return {\n      type: 'POST',\n      url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        key: val,\n        keyColumn: keyField,\n        table: tableName,\n        action: 'remove'\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n\n  update(dm, keyField, val, tableName, query) {\n    this.updateType = 'update';\n    this.updateKey = keyField;\n    return {\n      type: 'POST',\n      url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      data: JSON.stringify(extend({}, {\n        value: val,\n        action: 'update',\n        keyColumn: keyField,\n        key: val[keyField],\n        table: tableName\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n\n  processResponse(data, ds, query, xhr, request, changes, e) {\n    let i;\n    let newData = request ? JSON.parse(request.data) : data;\n    data = newData.action === 'batch' ? DataUtil.parse.parseJson(data) : data;\n\n    if (this.updateType === 'add') {\n      super.insert(ds, data, null, null, this.pvt.position);\n    }\n\n    if (this.updateType === 'update') {\n      super.update(ds, this.updateKey, data);\n    }\n\n    this.updateType = undefined;\n\n    if (data.added) {\n      for (i = 0; i < data.added.length; i++) {\n        super.insert(ds, data.added[i]);\n      }\n    }\n\n    if (data.changed) {\n      for (i = 0; i < data.changed.length; i++) {\n        super.update(ds, e.key, data.changed[i]);\n      }\n    }\n\n    if (data.deleted) {\n      for (i = 0; i < data.deleted.length; i++) {\n        super.remove(ds, e.key, data.deleted[i]);\n      }\n    }\n\n    return data;\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * Also perform the changes in the locally cached data to sync with the remote data.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {RemoteArgs} e\n   */\n\n\n  batchRequest(dm, changes, e, query, original) {\n    return {\n      type: 'POST',\n      url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n      contentType: 'application/json; charset=utf-8',\n      dataType: 'json',\n      data: JSON.stringify(extend({}, {\n        changed: changes.changedRecords,\n        added: changes.addedRecords,\n        deleted: changes.deletedRecords,\n        action: 'batch',\n        table: e.url,\n        key: e.key\n      }, DataUtil.getAddParams(this, dm, query)))\n    };\n  }\n\n  addParams(options) {\n    let urlParams = new UrlAdaptor();\n    urlParams.addParams(options);\n  }\n\n}\n/**\n * Ajax Adaptor that is extended from URL Adaptor, is used for handle data operations with user defined functions.\n * @hidden\n */\n\n\nclass CustomDataAdaptor extends UrlAdaptor {\n  constructor(props) {\n    super(); // options replaced the default adaptor options\n\n    this.options = extend({}, this.options, {\n      getData: new Function(),\n      addRecord: new Function(),\n      updateRecord: new Function(),\n      deleteRecord: new Function(),\n      batchUpdate: new Function()\n    });\n    extend(this.options, props || {});\n  }\n\n  getModuleName() {\n    return 'CustomDataAdaptor';\n  }\n\n}\n/**\n * The GraphqlAdaptor that is extended from URL Adaptor, is used for retrieving data from the Graphql server.\n * It interacts with the Graphql server with all the DataManager Queries and performs CRUD operations.\n * @hidden\n */\n\n\nclass GraphQLAdaptor extends UrlAdaptor {\n  getModuleName() {\n    return 'GraphQLAdaptor';\n  }\n\n  constructor(options) {\n    super();\n    this.opt = options;\n    this.schema = this.opt.response;\n    this.query = this.opt.query;\n    this.getVariables = this.opt.getVariables ? this.opt.getVariables : () => {};\n\n    this.getQuery = () => this.query;\n  }\n  /**\n   * Process the JSON data based on the provided queries.\n   * @param  {DataManager} dm\n   * @param  {Query} query?\n   */\n\n\n  processQuery(datamanager, query) {\n    let urlQuery = super.processQuery.apply(this, arguments);\n    let dm = JSON.parse(urlQuery.data); // constructing GraphQL parameters\n\n    let keys = ['skip', 'take', 'sorted', 'table', 'select', 'where', 'search', 'requiresCounts', 'aggregates', 'params'];\n    let temp = {};\n    let str = 'searchwhereparams';\n    keys.filter(e => {\n      temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];\n    });\n    let vars = this.getVariables() || {};\n    vars['datamanager'] = temp;\n    let data = JSON.stringify({\n      query: this.getQuery(),\n      variables: vars\n    });\n    urlQuery.data = data;\n    return urlQuery;\n  }\n  /**\n   * Returns the data from the query processing.\n   * It will also cache the data for later usage.\n   * @param  {DataResult} data\n   * @param  {DataManager} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Object} request?\n   * @returns DataResult\n   */\n\n\n  processResponse(resData, ds, query, xhr, request) {\n    const res = resData;\n    let count;\n    let aggregates;\n    let result = getValue(this.schema.result, res.data);\n\n    if (this.schema.count) {\n      count = getValue(this.schema.count, res.data);\n    }\n\n    if (this.schema.aggregates) {\n      aggregates = getValue(this.schema.aggregates, res.data);\n      aggregates = !isNullOrUndefined(aggregates) ? DataUtil.parse.parseJson(aggregates) : aggregates;\n    }\n\n    let pvt = request.pvtData || {};\n    let args = {\n      result: result,\n      aggregates: aggregates\n    };\n    let data = args;\n\n    if (pvt && pvt.groups && pvt.groups.length) {\n      this.getAggregateResult(pvt, data, args, null, query);\n    }\n\n    return !isNullOrUndefined(count) ? {\n      result: args.result,\n      count: count,\n      aggregates: aggregates\n    } : args.result;\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   */\n\n\n  insert() {\n    let inserted = super.insert.apply(this, arguments);\n    return this.generateCrudData(inserted, 'insert');\n  }\n  /**\n   * Prepare and returns request body which is used to update a new record in the table.\n   */\n\n\n  update() {\n    let inserted = super.update.apply(this, arguments);\n    return this.generateCrudData(inserted, 'update');\n  }\n  /**\n   * Prepare and returns request body which is used to remove a new record in the table.\n   */\n\n\n  remove() {\n    let inserted = super.remove.apply(this, arguments);\n    return this.generateCrudData(inserted, 'remove');\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {Object} e\n   * @param  {Query} query\n   * @param  {Object} original\n   */\n\n\n  batchRequest(dm, changes, e, query, original) {\n    let batch = super.batchRequest.apply(this, arguments);\n    let bData = JSON.parse(batch.data);\n    bData.key = e.key;\n    batch.data = JSON.stringify(bData);\n    return this.generateCrudData(batch, 'batch');\n  }\n\n  generateCrudData(crudData, action) {\n    let parsed = JSON.parse(crudData.data);\n    crudData.data = JSON.stringify({\n      query: this.opt.getMutation(action),\n      variables: parsed\n    });\n    return crudData;\n  }\n\n}\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\n\n\nclass CacheAdaptor extends UrlAdaptor {\n  /**\n   * Constructor for CacheAdaptor class.\n   * @param  {CacheAdaptor} adaptor?\n   * @param  {number} timeStamp?\n   * @param  {number} pageSize?\n   * @hidden\n   */\n  constructor(adaptor, timeStamp, pageSize) {\n    super();\n    this.isCrudAction = false;\n    this.isInsertAction = false;\n\n    if (!isNullOrUndefined(adaptor)) {\n      this.cacheAdaptor = adaptor;\n    }\n\n    this.pageSize = pageSize;\n    this.guidId = DataUtil.getGuid('cacheAdaptor');\n    let obj = {\n      keys: [],\n      results: []\n    };\n    window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n    let guid = this.guidId;\n\n    if (!isNullOrUndefined(timeStamp)) {\n      setInterval(() => {\n        let data;\n        data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n        let forDel = [];\n\n        for (let i = 0; i < data.results.length; i++) {\n          let currentTime = +new Date();\n          let requestTime = +new Date(data.results[i].timeStamp);\n          data.results[i].timeStamp = currentTime - requestTime;\n\n          if (currentTime - requestTime > timeStamp) {\n            forDel.push(i);\n          }\n        }\n\n        for (let i = 0; i < forDel.length; i++) {\n          data.results.splice(forDel[i], 1);\n          data.keys.splice(forDel[i], 1);\n        }\n\n        window.localStorage.removeItem(guid);\n        window.localStorage.setItem(guid, JSON.stringify(data));\n      }, timeStamp);\n    }\n  }\n  /**\n   * It will generate the key based on the URL when we send a request to server.\n   * @param  {string} url\n   * @param  {Query} query?\n   * @hidden\n   */\n\n\n  generateKey(url, query) {\n    let queries = this.getQueryRequest(query);\n    let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n    let key = url;\n    let page = 'onPage';\n\n    if (page in singles) {\n      key += singles[page].pageIndex;\n    }\n\n    queries.sorts.forEach(obj => {\n      key += obj.e.direction + obj.e.fieldName;\n    });\n    queries.groups.forEach(obj => {\n      key += obj.e.fieldName;\n    });\n    queries.searches.forEach(obj => {\n      key += obj.e.searchKey;\n    });\n\n    for (let filter = 0; filter < queries.filters.length; filter++) {\n      let currentFilter = queries.filters[filter];\n\n      if (currentFilter.e.isComplex) {\n        let newQuery = query.clone();\n        newQuery.queries = [];\n\n        for (let i = 0; i < currentFilter.e.predicates.length; i++) {\n          newQuery.queries.push({\n            fn: 'onWhere',\n            e: currentFilter.e.predicates[i],\n            filter: query.queries.filter\n          });\n        }\n\n        key += currentFilter.e.condition + this.generateKey(url, newQuery);\n      } else {\n        key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n      }\n    }\n\n    return key;\n  }\n  /**\n   * Process the query to generate request body.\n   * If the data is already cached, it will return the cached data.\n   * @param  {DataManager} dm\n   * @param  {Query} query?\n   * @param  {Object[]} hierarchyFilters?\n   */\n\n\n  processQuery(dm, query, hierarchyFilters) {\n    let key = this.generateKey(dm.dataSource.url, query);\n    let cachedItems;\n    cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n    let data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n\n    if (data != null && !this.isCrudAction && !this.isInsertAction) {\n      return data;\n    }\n\n    this.isCrudAction = null;\n    this.isInsertAction = null;\n    return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n  }\n  /**\n   * Returns the data from the query processing.\n   * It will also cache the data for later usage.\n   * @param  {DataResult} data\n   * @param  {DataManager} ds?\n   * @param  {Query} query?\n   * @param  {XMLHttpRequest} xhr?\n   * @param  {Ajax} request?\n   * @param  {CrudOptions} changes?\n   */\n\n\n  processResponse(data, ds, query, xhr, request, changes) {\n    if (this.isInsertAction || request && this.cacheAdaptor.options.batch && DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post') {\n      return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n    }\n\n    data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    let key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n    let obj = {};\n    obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n    let index = obj.keys.indexOf(key);\n\n    if (index !== -1) {\n      obj.results.splice(index, 1);\n      obj.keys.splice(index, 1);\n    }\n\n    obj.results[obj.keys.push(key) - 1] = {\n      keys: key,\n      result: data.result,\n      timeStamp: new Date(),\n      count: data.count\n    };\n\n    while (obj.results.length > this.pageSize) {\n      obj.results.splice(0, 1);\n      obj.keys.splice(0, 1);\n    }\n\n    window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n    return data;\n  }\n  /**\n   * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n   * @param  {DataManager} dm\n   * @param  {XMLHttpRequest} request\n   * @param  {Ajax} settings?\n   */\n\n\n  beforeSend(dm, request, settings) {\n    if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === 'post') {\n      request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n    }\n\n    if (!dm.dataSource.crossDomain) {\n      request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n    }\n  }\n  /**\n   * Updates existing record and saves the changes to the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName\n   */\n\n\n  update(dm, keyField, value, tableName) {\n    this.isCrudAction = true;\n    return this.cacheAdaptor.update(dm, keyField, value, tableName);\n  }\n  /**\n   * Prepare and returns request body which is used to insert a new record in the table.\n   * @param  {DataManager} dm\n   * @param  {Object} data\n   * @param  {string} tableName?\n   */\n\n\n  insert(dm, data, tableName) {\n    this.isInsertAction = true;\n    return this.cacheAdaptor.insert(dm, data, tableName);\n  }\n  /**\n   * Prepare and return request body which is used to remove record from the table.\n   * @param  {DataManager} dm\n   * @param  {string} keyField\n   * @param  {Object} value\n   * @param  {string} tableName?\n   */\n\n\n  remove(dm, keyField, value, tableName) {\n    this.isCrudAction = true;\n    return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n  }\n  /**\n   * Prepare the request body based on the newly added, removed and updated records.\n   * The result is used by the batch request.\n   * @param  {DataManager} dm\n   * @param  {CrudOptions} changes\n   * @param  {RemoteArgs} e\n   */\n\n\n  batchRequest(dm, changes, e) {\n    return this.cacheAdaptor.batchRequest(dm, changes, e);\n  }\n\n}\n/**\n * DataManager is used to manage and manipulate relational data.\n */\n\n\nclass DataManager {\n  /**\n   * Constructor for DataManager class\n   * @param  {DataOptions|JSON[]} dataSource?\n   * @param  {Query} query?\n   * @param  {AdaptorOptions|string} adaptor?\n   * @hidden\n   */\n  constructor(dataSource, query, adaptor) {\n    /** @hidden */\n    this.dateParse = true;\n    /** @hidden */\n\n    this.timeZoneHandling = true;\n    this.requests = [];\n\n    if (!dataSource && !this.dataSource) {\n      dataSource = [];\n    }\n\n    adaptor = adaptor || dataSource.adaptor;\n\n    if (dataSource && dataSource.timeZoneHandling === false) {\n      this.timeZoneHandling = dataSource.timeZoneHandling;\n    }\n\n    let data;\n\n    if (dataSource instanceof Array) {\n      data = {\n        json: dataSource,\n        offline: true\n      };\n    } else if (typeof dataSource === 'object') {\n      if (!dataSource.json) {\n        dataSource.json = [];\n      }\n\n      data = {\n        url: dataSource.url,\n        insertUrl: dataSource.insertUrl,\n        removeUrl: dataSource.removeUrl,\n        updateUrl: dataSource.updateUrl,\n        crudUrl: dataSource.crudUrl,\n        batchUrl: dataSource.batchUrl,\n        json: dataSource.json,\n        headers: dataSource.headers,\n        accept: dataSource.accept,\n        data: dataSource.data,\n        timeTillExpiration: dataSource.timeTillExpiration,\n        cachingPageSize: dataSource.cachingPageSize,\n        enableCaching: dataSource.enableCaching,\n        requestType: dataSource.requestType,\n        key: dataSource.key,\n        crossDomain: dataSource.crossDomain,\n        jsonp: dataSource.jsonp,\n        dataType: dataSource.dataType,\n        offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor instanceof RemoteSaveAdaptor || dataSource.adaptor instanceof CustomDataAdaptor ? false : dataSource.url ? false : true,\n        requiresFormat: dataSource.requiresFormat\n      };\n    } else {\n      DataUtil.throwError('DataManager: Invalid arguments');\n    }\n\n    if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n      data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n    }\n\n    if (data.dataType === undefined) {\n      data.dataType = 'json';\n    }\n\n    this.dataSource = data;\n    this.defaultQuery = query;\n\n    if (data.url && data.offline && !data.json.length) {\n      this.isDataAvailable = false;\n      this.adaptor = adaptor || new ODataAdaptor();\n      this.dataSource.offline = false;\n      this.ready = this.executeQuery(query || new Query());\n      this.ready.then(e => {\n        this.dataSource.offline = true;\n        this.isDataAvailable = true;\n        data.json = e.result;\n        this.adaptor = new JsonAdaptor();\n      });\n    } else {\n      this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n    }\n\n    if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n      data.jsonp = 'callback';\n    }\n\n    this.adaptor = adaptor || this.adaptor;\n\n    if (data.enableCaching) {\n      this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n    }\n\n    return this;\n  }\n  /**\n   * Overrides DataManager's default query with given query.\n   * @param  {Query} query - Defines the new default query.\n   */\n\n\n  setDefaultQuery(query) {\n    this.defaultQuery = query;\n    return this;\n  }\n  /**\n   * Executes the given query with local data source.\n   * @param  {Query} query - Defines the query to retrieve data.\n   */\n\n\n  executeLocal(query) {\n    if (!this.defaultQuery && !(query instanceof Query)) {\n      DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n    }\n\n    if (!this.dataSource.json) {\n      DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n    }\n\n    query = query || this.defaultQuery;\n    let result = this.adaptor.processQuery(this, query);\n\n    if (query.subQuery) {\n      let from = query.subQuery.fromTable;\n      let lookup = query.subQuery.lookups;\n      let res = query.isCountRequired ? result.result : result;\n\n      if (lookup && lookup instanceof Array) {\n        DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n      }\n\n      for (let j = 0; j < res.length; j++) {\n        if (res[j][from] instanceof Array) {\n          res[j] = extend({}, {}, res[j]);\n          res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n        }\n      }\n    }\n\n    return this.adaptor.processResponse(result, this, query);\n  }\n  /**\n   * Executes the given query with either local or remote data source.\n   * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n   * @param  {Query|Function} query - Defines the query to retrieve data.\n   * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n   * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n   * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n   */\n\n\n  executeQuery(query, done, fail, always) {\n    let makeRequest = 'makeRequest';\n\n    if (typeof query === 'function') {\n      always = fail;\n      fail = done;\n      done = query;\n      query = null;\n    }\n\n    if (!query) {\n      query = this.defaultQuery;\n    }\n\n    if (!(query instanceof Query)) {\n      DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n    }\n\n    let deffered = new Deferred();\n    let args = {\n      query: query\n    };\n\n    if (!this.dataSource.offline && this.dataSource.url !== undefined && this.dataSource.url !== '' || !isNullOrUndefined(this.adaptor[makeRequest]) || this.isCustomDataAdaptor(this.adaptor)) {\n      let result = this.adaptor.processQuery(this, query);\n\n      if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n        this.adaptor[makeRequest](result, deffered, args, query);\n      } else if (!isNullOrUndefined(result.url) || this.isCustomDataAdaptor(this.adaptor)) {\n        this.makeRequest(result, deffered, args, query);\n      } else {\n        args = DataManager.getDeferedArgs(query, result, args);\n        deffered.resolve(args);\n      }\n    } else {\n      DataManager.nextTick(() => {\n        let res = this.executeLocal(query);\n        args = DataManager.getDeferedArgs(query, res, args);\n        deffered.resolve(args);\n      });\n    }\n\n    if (done || fail) {\n      deffered.promise.then(done, fail);\n    }\n\n    if (always) {\n      deffered.promise.then(always, always);\n    }\n\n    return deffered.promise;\n  }\n\n  static getDeferedArgs(query, result, args) {\n    if (query.isCountRequired) {\n      args.result = result.result;\n      args.count = result.count;\n      args.aggregates = result.aggregates;\n    } else {\n      args.result = result;\n    }\n\n    return args;\n  }\n\n  static nextTick(fn) {\n    (window.setImmediate || window.setTimeout)(fn, 0);\n  }\n\n  extendRequest(url, fnSuccess, fnFail) {\n    return extend({}, {\n      type: 'GET',\n      dataType: this.dataSource.dataType,\n      crossDomain: this.dataSource.crossDomain,\n      jsonp: this.dataSource.jsonp,\n      cache: true,\n      processData: false,\n      onSuccess: fnSuccess,\n      onFailure: fnFail\n    }, url);\n  } // tslint:disable-next-line:max-func-body-length\n\n\n  makeRequest(url, deffered, args, query) {\n    let isSelector = !!query.subQuerySelector;\n\n    let fnFail = e => {\n      args.error = e;\n      deffered.reject(args);\n    };\n\n    let process = (data, count, xhr, request, actual, aggregates, virtualSelectRecords) => {\n      args.xhr = xhr;\n      args.count = count ? parseInt(count.toString(), 10) : 0;\n      args.result = data;\n      args.request = request;\n      args.aggregates = aggregates;\n      args.actual = actual;\n      args.virtualSelectRecords = virtualSelectRecords;\n      deffered.resolve(args);\n    };\n\n    let fnQueryChild = (data, selector) => {\n      let subDeffer = new Deferred();\n      let childArgs = {\n        parent: args\n      };\n      query.subQuery.isChild = true;\n      let subUrl = this.adaptor.processQuery(this, query.subQuery, data ? this.adaptor.processResponse(data) : selector);\n      let childReq = this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n\n      if (!isSelector) {\n        subDeffer.then(subData => {\n          if (data) {\n            DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n            process(data, subData.count, subData.xhr);\n          }\n        }, fnFail);\n      }\n\n      return childReq;\n    };\n\n    let fnSuccess = (data, request) => {\n      if (this.isGraphQLAdaptor(this.adaptor)) {\n        if (!isNullOrUndefined(data['errors'])) {\n          return fnFail(data['errors'], request);\n        }\n      }\n\n      if (this.isCustomDataAdaptor(this.adaptor)) {\n        request = extend({}, this.ajaxReqOption, request);\n      }\n\n      if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && this.dateParse) {\n        data = DataUtil.parse.parseJson(data);\n      }\n\n      let result = this.adaptor.processResponse(data, this, query, request.httpRequest, request);\n      let count = 0;\n      let aggregates = null;\n      let virtualSelectRecords = 'virtualSelectRecords';\n      let virtualRecords = data[virtualSelectRecords];\n\n      if (query.isCountRequired) {\n        count = result.count;\n        aggregates = result.aggregates;\n        result = result.result;\n      }\n\n      if (!query.subQuery) {\n        process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n        return;\n      }\n\n      if (!isSelector) {\n        fnQueryChild(result, request);\n      }\n    };\n\n    let req = this.extendRequest(url, fnSuccess, fnFail);\n\n    if (!this.isCustomDataAdaptor(this.adaptor)) {\n      let ajax = new Ajax(req);\n\n      ajax.beforeSend = () => {\n        this.beforeSend(ajax.httpRequest, ajax);\n      };\n\n      req = ajax.send();\n      req.catch(e => true); // to handle failure remote requests.        \n\n      this.requests.push(ajax);\n    } else {\n      this.ajaxReqOption = req;\n      let request = req;\n      this.adaptor.options.getData({\n        data: request.data,\n        onSuccess: request.onSuccess,\n        onFailure: request.onFailure\n      });\n    }\n\n    if (isSelector) {\n      let promise;\n      let res = query.subQuerySelector.call(this, {\n        query: query.subQuery,\n        parent: query\n      });\n\n      if (res && res.length) {\n        promise = Promise.all([req, fnQueryChild(null, res)]);\n        promise.then((...args) => {\n          let result = args[0];\n          let pResult = this.adaptor.processResponse(result[0], this, query, this.requests[0].httpRequest, this.requests[0]);\n          let count = 0;\n\n          if (query.isCountRequired) {\n            count = pResult.count;\n            pResult = pResult.result;\n          }\n\n          let cResult = this.adaptor.processResponse(result[1], this, query.subQuery, this.requests[1].httpRequest, this.requests[1]);\n          count = 0;\n\n          if (query.subQuery.isCountRequired) {\n            count = cResult.count;\n            cResult = cResult.result;\n          }\n\n          DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n          isSelector = false;\n          process(pResult, count, this.requests[0].httpRequest);\n        });\n      } else {\n        isSelector = false;\n      }\n    }\n\n    return req;\n  }\n\n  beforeSend(request, settings) {\n    this.adaptor.beforeSend(this, request, settings);\n    let headers = this.dataSource.headers;\n    let props;\n\n    for (let i = 0; headers && i < headers.length; i++) {\n      props = [];\n      let keys = Object.keys(headers[i]);\n\n      for (let prop of keys) {\n        props.push(prop);\n        request.setRequestHeader(prop, headers[i][prop]);\n      }\n    }\n  }\n  /**\n   * Save bulk changes to the given table name.\n   * User can add a new record, edit an existing record, and delete a record at the same time.\n   * If the datasource from remote, then updated in a single post.\n   * @param  {Object} changes - Defines the CrudOptions.\n   * @param  {string} key - Defines the column field.\n   * @param  {string|Query} tableName - Defines the table name.\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n\n\n  saveChanges(changes, key, tableName, query, original) {\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n\n    let args = {\n      url: tableName,\n      key: key || this.dataSource.key\n    };\n    let req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n    let doAjaxRequest = 'doAjaxRequest';\n\n    if (this.dataSource.offline) {\n      return req;\n    }\n\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](req);\n    } else if (!this.isCustomDataAdaptor(this.adaptor)) {\n      let deff = new Deferred();\n      let ajax = new Ajax(req);\n\n      ajax.beforeSend = () => {\n        this.beforeSend(ajax.httpRequest, ajax);\n      };\n\n      ajax.onSuccess = (data, request) => {\n        if (this.isGraphQLAdaptor(this.adaptor)) {\n          if (!isNullOrUndefined(data['errors'])) {\n            ajax.onFailure(JSON.stringify(data['errors']));\n          }\n        }\n\n        deff.resolve(this.adaptor.processResponse(data, this, null, request.httpRequest, request, changes, args));\n      };\n\n      ajax.onFailure = e => {\n        deff.reject([{\n          error: e\n        }]);\n      };\n\n      ajax.send().catch(e => true); // to handle the failure requests.        \n\n      return deff.promise;\n    } else {\n      return this.doAjaxRequest(req, this.adaptor.options.batchUpdate);\n    }\n  }\n  /**\n   * Inserts new record in the given table.\n   * @param  {Object} data - Defines the data to insert.\n   * @param  {string|Query} tableName - Defines the table name.\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n\n\n  insert(data, tableName, query, position) {\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n\n    let req = this.adaptor.insert(this, data, tableName, query, position);\n    let doAjaxRequest = 'doAjaxRequest';\n\n    if (this.dataSource.offline) {\n      return req;\n    }\n\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](req);\n    } else {\n      return this.doAjaxRequest(req, this.adaptor.options.addRecord);\n    }\n  }\n  /**\n   * Removes data from the table with the given key.\n   * @param  {string} keyField - Defines the column field.\n   * @param  {Object} value - Defines the value to find the data in the specified column.\n   * @param  {string|Query} tableName - Defines the table name\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n\n\n  remove(keyField, value, tableName, query) {\n    if (typeof value === 'object') {\n      value = DataUtil.getObject(keyField, value);\n    }\n\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n\n    let res = this.adaptor.remove(this, keyField, value, tableName, query);\n    let doAjaxRequest = 'doAjaxRequest';\n\n    if (this.dataSource.offline) {\n      return res;\n    }\n\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](res);\n    } else {\n      let remove = this.adaptor.options.deleteRecord;\n      return this.doAjaxRequest(res, remove);\n    }\n  }\n  /**\n   * Updates existing record in the given table.\n   * @param  {string} keyField - Defines the column field.\n   * @param  {Object} value - Defines the value to find the data in the specified column.\n   * @param  {string|Query} tableName - Defines the table name\n   * @param  {Query} query - Sets default query for the DataManager.\n   */\n\n\n  update(keyField, value, tableName, query, original) {\n    if (tableName instanceof Query) {\n      query = tableName;\n      tableName = null;\n    }\n\n    let res = this.adaptor.update(this, keyField, value, tableName, query, original);\n    let doAjaxRequest = 'doAjaxRequest';\n\n    if (this.dataSource.offline) {\n      return res;\n    }\n\n    if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n      return this.adaptor[doAjaxRequest](res);\n    } else {\n      let update = this.adaptor.options.updateRecord;\n      return this.doAjaxRequest(res, update);\n    }\n  }\n\n  isCustomDataAdaptor(dataSource) {\n    return this.adaptor.getModuleName && this.adaptor.getModuleName() === 'CustomDataAdaptor';\n  }\n\n  isGraphQLAdaptor(dataSource) {\n    return this.adaptor.getModuleName && this.adaptor.getModuleName() === 'GraphQLAdaptor';\n  }\n\n  successFunc(record, request) {\n    if (this.isGraphQLAdaptor(this.adaptor)) {\n      let data = JSON.parse(record);\n\n      if (!isNullOrUndefined(data['errors'])) {\n        this.failureFunc(JSON.stringify(data['errors']));\n      }\n    }\n\n    if (this.isCustomDataAdaptor(this.adaptor)) {\n      request = extend({}, this.ajaxReqOption, request);\n    }\n\n    try {\n      DataUtil.parse.parseJson(record);\n    } catch (e) {\n      record = [];\n    }\n\n    record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);\n    this.ajaxDeffered.resolve(record);\n  }\n\n  failureFunc(e) {\n    this.ajaxDeffered.reject([{\n      error: e\n    }]);\n  }\n\n  doAjaxRequest(res, ajaxFunc) {\n    res = extend({}, {\n      type: 'POST',\n      contentType: 'application/json; charset=utf-8',\n      processData: false\n    }, res);\n    this.ajaxDeffered = new Deferred();\n\n    if (!this.isCustomDataAdaptor(this.adaptor)) {\n      let ajax = new Ajax(res);\n\n      ajax.beforeSend = () => {\n        this.beforeSend(ajax.httpRequest, ajax);\n      };\n\n      ajax.onSuccess = this.successFunc.bind(this);\n      ajax.onFailure = this.failureFunc.bind(this);\n      ajax.send().catch(e => true); // to handle the failure requests.\n    } else {\n      this.ajaxReqOption = res;\n      ajaxFunc.call(this, {\n        data: res.data,\n        onSuccess: this.successFunc.bind(this),\n        onFailure: this.failureFunc.bind(this)\n      });\n    }\n\n    return this.ajaxDeffered.promise;\n  }\n\n}\n/**\n * Deferred is used to handle asynchronous operation.\n */\n\n\nclass Deferred {\n  constructor() {\n    /**\n     * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n     */\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n    /**\n     * Defines the callback function triggers when the Deferred object is resolved.\n     */\n\n    this.then = this.promise.then.bind(this.promise);\n    /**\n     * Defines the callback function triggers when the Deferred object is rejected.\n     */\n\n    this.catch = this.promise.catch.bind(this.promise);\n  }\n\n}\n/**\n * Data modules\n */\n\n\nexport { DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CustomDataAdaptor, GraphQLAdaptor, CacheAdaptor, DataUtil };","map":{"version":3,"names":["Ajax","extend","getValue","isNullOrUndefined","merge","setValue","Query","constructor","from","subQuery","isChild","distincts","queries","key","fKey","fromTable","Array","lookups","expands","sortedColumns","groupedColumns","params","lazyLoad","setKey","field","using","dataManager","execute","done","fail","always","executeQuery","DataUtil","throwError","executeLocal","clone","cloned","slice","subQuerySelector","isCountRequired","tableName","addParams","value","push","fn","distinct","fields","call","expand","tables","where","fieldName","operator","ignoreCase","ignoreAccent","toLowerCase","predicate","Predicate","e","search","searchKey","fieldNames","comparer","fnOperators","sortBy","isFromGroup","sortByForeignKey","direction","order","sorts","temp","endsWith","replace","fnSort","filterQueries","i","length","j","sortByDesc","group","format","page","pageIndex","pageSize","range","start","end","take","nos","skip","select","hierarchy","query","selectorFn","foreignKey","requiresCount","aggregate","type","name","filter","q","filterQueryLists","singles","filtered","indexOf","res","isComplex","processOperator","condition","predicates","apply","and","args","combinePredicates","combine","or","fromJson","json","len","fromJSONData","pred","validate","record","isAnd","ret","getObject","toJson","p","preds","result","consts","GroupGuid","inst","input","substr","startsWith","fnAscending","fnDescending","x","y","undefined","localeCompare","extractFields","obj","newObj","jsonArray","newData","aggregates","level","groupDs","isLazyLoad","jsonData","guid","indx","items","count","childLevels","grouped","groupedArray","records","val","getVal","tempObj","aggs","buildHierarchy","source","lookup","pKey","grp","fKeyData","getFieldList","prefix","copyObj","keys","Object","prop","nameSpace","splits","split","toString","fromObj","sort","ds","middle","parseInt","left","right","ignoreDiacritics","newValue","map","diacritics","join","current","shift","array","index","callAdaptorFunction","adaptor","fnName","param1","param2","getAddParams","adp","dm","req","reqParams","isPlainObject","isCors","xhr","request","window","getGuid","hexs","rand","crypto","arr","Uint8Array","getRandomValues","Math","random","isNull","getItemFromComparer","keyVal","castRequired","requiresCompleteRecord","tmp","forEach","data","processData","prepareQuery","sampledata","DataManager","requiresCounts","returnValue","JSON","stringify","parse","parseJson","predicateList","concat","getPredicate","sorted","mainPred","childPred","cpre","serverTimezoneOffset","timeZoneHandling","error","Error","message","stack","sum","isNaN","average","min","max","truecount","falsecount","operatorSymbols","odBiOperator","odUniOperator","odv4UniOperator","equal","actual","expected","notequal","lessthan","greaterthan","lessthanorequal","greaterthanorequal","contains","notnull","isnull","startswith","endswith","processSymbols","jsonText","jsonReviver","iterateAndReviveArray","iterateAndReviveJson","test","ms","exec","offSet","dateParse","toTimeZone","Date","isUTC","utcFormat","hrs","mins","setHours","getHours","getMinutes","addSelfOffset","isJson","isGuid","regex","match","replacer","jsonReplacer","arrayReplacer","d","toJSON","date","jsonDateReplacer","getTimezoneOffset","toUTC","offset","utc","unix","toLocalTime","datefn","timeZone","differenceString","localtimefn","num","norm","floor","abs","getFullYear","getMonth","getDate","getSeconds","consts$1","Adaptor","options","requestType","dataSource","pvt","processResponse","JsonAdaptor","processQuery","countFlg","keyCount","agg","lazyLoadData","lazyLoadGroup","getAggregate","onDemandGroupInfo","onWhere","formGroupResult","onPage","uid","childLevel","aggQuery","batchRequest","changes","deletedRecordsLen","deletedRecords","addedRecords","insert","changedRecords","update","remove","onAggregates","onSearch","onSortBy","fnCompare","onGroup","size","onRange","onTake","onSkip","onSelect","position","splice","keyField","UrlAdaptor","hierarchyFilters","getQueryRequest","url","groups","filters","searches","getFiltersFrom","getModuleName","getRequestQuery","pvtData","contentType","convertToQueryString","request1","param","selects","getResponseHeader","handleTimeZone","requests","action","isExpand","isArray","formRemoteGroupedData","getAggregateResult","childLvl","lvl","getGroupedRecords","hasRecords","childGroupedRecords","original","batchUrl","crudUrl","removeUrl","dataType","changed","added","deleted","table","beforeSend","insertUrl","keyColumn","updateUrl","predicats","pData","aggregateData","isServerGrouping","groupQuery","ODataAdaptor","props","accept","multipartAccept","batch","changeSet","batchPre","contentId","batchContent","changeSetContent","batchChangeSetContentType","updateType","onPredicate","requiresCast","getField","encodeURIComponent","onComplexPredicate","onEachWhere","onEachSearch","onEachSort","reverse","onCount","settings","setRequestHeader","overrideMimeType","metaCheck","rootUrl","dataUrls","resourceTableName","dataCopy","results","metaData","emptyAndBatch","processBatchResponse","versionCheck","version","oDataCount","requiresFormat","localTimeReplacer","convertObj","localTime","compareAndRemove","initialGuid","cid","cSet","generateInsertRequest","generateUpdateRequest","generateDeleteRequest","stat","dateTime","generateBodyContent","org","change","o","method","cIdx","jsonObj","substring","exVal","changeGuid","final","valueOf","ODataV4Adaptor","isDate","onExpand","selected","expanded","exArr","item","sel","exp","close","combineVal","expandQueryIndex","idx","ex","onDistinct","distinctFields","metaName","dataUrl","dataCount","WebApiAdaptor","location","host","state","datTime","Count","Items","WebMethodAdaptor","getData","RemoteSaveAdaptor","prototype","updateKey","urlParams","CustomDataAdaptor","Function","addRecord","updateRecord","deleteRecord","batchUpdate","GraphQLAdaptor","opt","schema","response","getVariables","getQuery","datamanager","urlQuery","arguments","str","vars","variables","resData","inserted","generateCrudData","bData","crudData","parsed","getMutation","CacheAdaptor","timeStamp","isCrudAction","isInsertAction","cacheAdaptor","guidId","localStorage","setItem","setInterval","getItem","forDel","currentTime","requestTime","removeItem","generateKey","currentFilter","newQuery","cachedItems","crossDomain","offline","headers","timeTillExpiration","cachingPageSize","enableCaching","jsonp","defaultQuery","isDataAvailable","ready","then","setDefaultQuery","makeRequest","deffered","Deferred","isCustomDataAdaptor","getDeferedArgs","resolve","nextTick","promise","setImmediate","setTimeout","extendRequest","fnSuccess","fnFail","cache","onSuccess","onFailure","isSelector","reject","process","virtualSelectRecords","fnQueryChild","selector","subDeffer","childArgs","parent","subUrl","childReq","subData","isGraphQLAdaptor","ajaxReqOption","httpRequest","virtualRecords","ajax","send","catch","Promise","all","pResult","cResult","saveChanges","doAjaxRequest","deff","successFunc","failureFunc","ajaxDeffered","ajaxFunc","bind"],"sources":["/home/unutu/go/src/github.com/thteam47/admin-portal/node_modules/@syncfusion/ej2-data/dist/es6/ej2-data.es2015.js"],"sourcesContent":["import { Ajax, extend, getValue, isNullOrUndefined, merge, setValue } from '@syncfusion/ej2-base';\n\n/**\n * Query class is used to build query which is used by the DataManager to communicate with datasource.\n */\nclass Query {\n    /**\n     * Constructor for Query class.\n     * @param  {string|string[]} from?\n     * @hidden\n     */\n    constructor(from) {\n        /** @hidden */\n        this.subQuery = null;\n        /** @hidden */\n        this.isChild = false;\n        /** @hidden */\n        this.distincts = [];\n        this.queries = [];\n        this.key = '';\n        this.fKey = '';\n        if (typeof from === 'string') {\n            this.fromTable = from;\n        }\n        else if (from && from instanceof Array) {\n            this.lookups = from;\n        }\n        this.expands = [];\n        this.sortedColumns = [];\n        this.groupedColumns = [];\n        this.subQuery = null;\n        this.isChild = false;\n        this.params = [];\n        this.lazyLoad = [];\n        return this;\n    }\n    /**\n     * Sets the primary key.\n     * @param  {string} field - Defines the column field.\n     */\n    setKey(field) {\n        this.key = field;\n        return this;\n    }\n    /**\n     * Sets default DataManager to execute query.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    using(dataManager) {\n        this.dataManager = dataManager;\n        return this;\n    }\n    /**\n     * Executes query with the given DataManager.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     * @param  {Function} done - Defines the success callback.\n     * @param  {Function} fail - Defines the failure callback.\n     * @param  {Function} always - Defines the callback which will be invoked on either success or failure.\n     *\n     * <pre>\n     * let dataManager: DataManager = new DataManager([{ ID: '10' }, { ID: '2' }, { ID: '1' }, { ID: '20' }]);\n     * let query: Query = new Query();\n     * query.sortBy('ID', (x: string, y: string): number => { return parseInt(x, 10) - parseInt(y, 10) });\n     * let promise: Promise< Object > = query.execute(dataManager);\n     * promise.then((e: { result: Object }) => { });\n     * </pre>\n     */\n    execute(dataManager, done, fail, always) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeQuery(this, done, fail, always);\n        }\n        return DataUtil.throwError('Query - execute() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Executes query with the local datasource.\n     * @param  {DataManager} dataManager - Defines the DataManager.\n     */\n    executeLocal(dataManager) {\n        dataManager = dataManager || this.dataManager;\n        if (dataManager) {\n            return dataManager.executeLocal(this);\n        }\n        return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using \"using\" function or should be passed as argument');\n    }\n    /**\n     * Creates deep copy of the Query object.\n     */\n    clone() {\n        let cloned = new Query();\n        cloned.queries = this.queries.slice(0);\n        cloned.key = this.key;\n        cloned.isChild = this.isChild;\n        cloned.dataManager = this.dataManager;\n        cloned.fromTable = this.fromTable;\n        cloned.params = this.params.slice(0);\n        cloned.expands = this.expands.slice(0);\n        cloned.sortedColumns = this.sortedColumns.slice(0);\n        cloned.groupedColumns = this.groupedColumns.slice(0);\n        cloned.subQuerySelector = this.subQuerySelector;\n        cloned.subQuery = this.subQuery;\n        cloned.fKey = this.fKey;\n        cloned.isCountRequired = this.isCountRequired;\n        cloned.distincts = this.distincts.slice(0);\n        cloned.lazyLoad = this.lazyLoad.slice(0);\n        return cloned;\n    }\n    /**\n     * Specifies the name of table to retrieve data in query execution.\n     * @param  {string} tableName - Defines the table name.\n     */\n    from(tableName) {\n        this.fromTable = tableName;\n        return this;\n    }\n    /**\n     * Adds additional parameter which will be sent along with the request which will be generated while DataManager execute.\n     * @param  {string} key - Defines the key of additional parameter.\n     * @param  {Function|string} value - Defines the value for the key.\n     */\n    addParams(key, value) {\n        if (typeof value === 'function') {\n            this.params.push({ key: key, fn: value });\n        }\n        else {\n            this.params.push({ key: key, value: value });\n        }\n        return this;\n    }\n    /**\n     * @hidden\n     */\n    distinct(fields) {\n        if (typeof fields === 'string') {\n            this.distincts = [].slice.call([fields], 0);\n        }\n        else {\n            this.distincts = fields.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Expands the related table.\n     * @param  {string|Object[]} tables\n     */\n    expand(tables) {\n        if (typeof tables === 'string') {\n            this.expands = [].slice.call([tables], 0);\n        }\n        else {\n            this.expands = tables.slice(0);\n        }\n        return this;\n    }\n    /**\n     * Filter data with given filter criteria.\n     * @param  {string|Predicate} fieldName - Defines the column field or Predicate.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string|number|boolean} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    where(fieldName, operator, value, ignoreCase, ignoreAccent) {\n        operator = operator ? (operator).toLowerCase() : null;\n        let predicate = null;\n        if (typeof fieldName === 'string') {\n            predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);\n        }\n        else if (fieldName instanceof Predicate) {\n            predicate = fieldName;\n        }\n        this.queries.push({\n            fn: 'onWhere',\n            e: predicate\n        });\n        return this;\n    }\n    /**\n     * Search data with given search criteria.\n     * @param  {string|number|boolean} searchKey - Defines the search key.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     * @param  {string} operator - Defines the operator how to search data.\n     * @param  {boolean} ignoreCase - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    search(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [fieldNames];\n        }\n        if (!operator || operator === 'none') {\n            operator = 'contains';\n        }\n        let comparer = DataUtil.fnOperators[operator];\n        this.queries.push({\n            fn: 'onSearch',\n            e: {\n                fieldNames: fieldNames,\n                operator: operator,\n                searchKey: searchKey,\n                ignoreCase: ignoreCase,\n                ignoreAccent: ignoreAccent,\n                comparer: comparer\n            }\n        });\n        return this;\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     */\n    sortBy(fieldName, comparer, isFromGroup) {\n        return this.sortByForeignKey(fieldName, comparer, isFromGroup);\n    }\n    /**\n     * Sort the data with given sort criteria.\n     * By default, sort direction is ascending.\n     * @param  {string|string[]} fieldName - Defines the single or collection of column fields.\n     * @param  {string|Function} comparer - Defines the sort direction or custom sort comparer function.\n     * @param  {string} direction - Defines the sort direction .\n     */\n    sortByForeignKey(fieldName, comparer, isFromGroup, direction) {\n        let order = !isNullOrUndefined(direction) ? direction : 'ascending';\n        let sorts;\n        let temp;\n        if (typeof fieldName === 'string' && DataUtil.endsWith(fieldName.toLowerCase(), ' desc')) {\n            fieldName = fieldName.replace(/ desc$/i, '');\n            comparer = 'descending';\n        }\n        if (!comparer || typeof comparer === 'string') {\n            order = comparer ? comparer.toLowerCase() : 'ascending';\n            comparer = DataUtil.fnSort(comparer);\n        }\n        if (isFromGroup) {\n            sorts = Query.filterQueries(this.queries, 'onSortBy');\n            for (let i = 0; i < sorts.length; i++) {\n                temp = sorts[i].e.fieldName;\n                if (typeof temp === 'string') {\n                    if (temp === fieldName) {\n                        return this;\n                    }\n                }\n                else if (temp instanceof Array) {\n                    for (let j = 0; j < temp.length; j++) {\n                        if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + ' desc') {\n                            return this;\n                        }\n                    }\n                }\n            }\n        }\n        this.queries.push({\n            fn: 'onSortBy',\n            e: {\n                fieldName: fieldName,\n                comparer: comparer,\n                direction: order\n            }\n        });\n        return this;\n    }\n    /**\n     * Sorts data in descending order.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    sortByDesc(fieldName) {\n        return this.sortBy(fieldName, 'descending');\n    }\n    /**\n     * Groups data with the given field name.\n     * @param  {string} fieldName - Defines the column field.\n     */\n    group(fieldName, fn, format) {\n        this.sortBy(fieldName, null, true);\n        this.queries.push({\n            fn: 'onGroup',\n            e: {\n                fieldName: fieldName,\n                comparer: fn ? fn : null,\n                format: format ? format : null\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given page index and size.\n     * @param  {number} pageIndex - Defines the current page index.\n     * @param  {number} pageSize - Defines the no of records per page.\n     */\n    page(pageIndex, pageSize) {\n        this.queries.push({\n            fn: 'onPage',\n            e: {\n                pageIndex: pageIndex,\n                pageSize: pageSize\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data based on the given start and end index.\n     * @param  {number} start - Defines the start index of the datasource.\n     * @param  {number} end - Defines the end index of the datasource.\n     */\n    range(start, end) {\n        this.queries.push({\n            fn: 'onRange',\n            e: {\n                start: start,\n                end: end\n            }\n        });\n        return this;\n    }\n    /**\n     * Gets data from the top of the data source based on given number of records count.\n     * @param  {number} nos - Defines the no of records to retrieve from datasource.\n     */\n    take(nos) {\n        this.queries.push({\n            fn: 'onTake',\n            e: {\n                nos: nos\n            }\n        });\n        return this;\n    }\n    /**\n     * Skips data with given number of records count from the top of the data source.\n     * @param  {number} nos - Defines the no of records skip in the datasource.\n     */\n    skip(nos) {\n        this.queries.push({\n            fn: 'onSkip',\n            e: { nos: nos }\n        });\n        return this;\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {string|string[]} fieldNames - Defines the collection of column fields.\n     */\n    select(fieldNames) {\n        if (typeof fieldNames === 'string') {\n            fieldNames = [].slice.call([fieldNames], 0);\n        }\n        this.queries.push({\n            fn: 'onSelect',\n            e: { fieldNames: fieldNames }\n        });\n        return this;\n    }\n    /**\n     * Gets the records in hierarchical relationship from two tables. It requires the foreign key to relate two tables.\n     * @param  {Query} query - Defines the query to relate two tables.\n     * @param  {Function} selectorFn - Defines the custom function to select records.\n     */\n    hierarchy(query, selectorFn) {\n        this.subQuerySelector = selectorFn;\n        this.subQuery = query;\n        return this;\n    }\n    /**\n     * Sets the foreign key which is used to get data from the related table.\n     * @param  {string} key - Defines the foreign key.\n     */\n    foreignKey(key) {\n        this.fKey = key;\n        return this;\n    }\n    /**\n     * It is used to get total number of records in the DataManager execution result.\n     */\n    requiresCount() {\n        this.isCountRequired = true;\n        return this;\n    }\n    //type - sum, avg, min, max\n    /**\n     * Aggregate the data with given type and field name.\n     * @param  {string} type - Defines the aggregate type.\n     * @param  {string} field - Defines the column field to aggregate.\n     */\n    aggregate(type, field) {\n        this.queries.push({\n            fn: 'onAggregates',\n            e: { field: field, type: type }\n        });\n        return this;\n    }\n    /**\n     * Pass array of filterColumn query for performing filter operation.\n     * @param  {QueryOptions[]} queries\n     * @param  {string} name\n     * @hidden\n     */\n    static filterQueries(queries, name) {\n        return queries.filter((q) => {\n            return q.fn === name;\n        });\n    }\n    /**\n     * To get the list of queries which is already filtered in current data source.\n     * @param  {Object[]} queries\n     * @param  {string[]} singles\n     * @hidden\n     */\n    static filterQueryLists(queries, singles) {\n        let filtered = queries.filter((q) => {\n            return singles.indexOf(q.fn) !== -1;\n        });\n        let res = {};\n        for (let i = 0; i < filtered.length; i++) {\n            if (!res[filtered[i].fn]) {\n                res[filtered[i].fn] = filtered[i].e;\n            }\n        }\n        return res;\n    }\n}\n/**\n * Predicate class is used to generate complex filter criteria.\n * This will be used by DataManager to perform multiple filtering operation.\n */\nclass Predicate {\n    /**\n     * Constructor for Predicate class.\n     * @param  {string|Predicate} field\n     * @param  {string} operator\n     * @param  {string|number|boolean|Predicate|Predicate[]} value\n     * @param  {boolean=false} ignoreCase\n     * @hidden\n     */\n    constructor(field, operator, value, ignoreCase = false, ignoreAccent) {\n        /** @hidden */\n        this.ignoreAccent = false;\n        /** @hidden */\n        this.isComplex = false;\n        if (typeof field === 'string') {\n            this.field = field;\n            this.operator = operator.toLowerCase();\n            this.value = value;\n            this.ignoreCase = ignoreCase;\n            this.ignoreAccent = ignoreAccent;\n            this.isComplex = false;\n            this.comparer = DataUtil.fnOperators.processOperator(this.operator);\n        }\n        else if (field instanceof Predicate && value instanceof Predicate || value instanceof Array) {\n            this.isComplex = true;\n            this.condition = operator.toLowerCase();\n            this.predicates = [field];\n            if (value instanceof Array) {\n                [].push.apply(this.predicates, value);\n            }\n            else {\n                this.predicates.push(value);\n            }\n        }\n        return this;\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “and” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static and(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'and');\n    }\n    /**\n     * Adds new predicate on existing predicate with “and” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    and(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'and', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Adds n-number of new predicates on existing predicate with “or” condition.\n     * @param  {Object[]} args - Defines the collection of predicates.\n     */\n    static or(...args) {\n        return Predicate.combinePredicates([].slice.call(args, 0), 'or');\n    }\n    /**\n     * Adds new predicate on existing predicate with “or” condition.\n     * @param  {string} field - Defines the column field.\n     * @param  {string} operator - Defines the operator how to filter data.\n     * @param  {string} value - Defines the values to match with data.\n     * @param  {boolean} ignoreCase? - If ignore case set to false, then filter data with exact match or else\n     * filter data with case insensitive.\n     */\n    or(field, operator, value, ignoreCase, ignoreAccent) {\n        return Predicate.combine(this, field, operator, value, 'or', ignoreCase, ignoreAccent);\n    }\n    /**\n     * Converts plain JavaScript object to Predicate object.\n     * @param  {Predicate[]|Predicate} json - Defines single or collection of Predicate.\n     */\n    static fromJson(json) {\n        if (json instanceof Array) {\n            let res = [];\n            for (let i = 0, len = json.length; i < len; i++) {\n                res.push(this.fromJSONData(json[i]));\n            }\n            return res;\n        }\n        let pred = json;\n        return this.fromJSONData(pred);\n    }\n    /**\n     * Validate the record based on the predicates.\n     * @param  {Object} record - Defines the datasource record.\n     */\n    validate(record) {\n        let predicate = this.predicates ? this.predicates : [];\n        let isAnd;\n        let ret;\n        if (!this.isComplex && this.comparer) {\n            return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);\n        }\n        isAnd = this.condition === 'and';\n        for (let i = 0; i < predicate.length; i++) {\n            ret = predicate[i].validate(record);\n            if (isAnd) {\n                if (!ret) {\n                    return false;\n                }\n            }\n            else {\n                if (ret) {\n                    return true;\n                }\n            }\n        }\n        return isAnd;\n    }\n    /**\n     * Converts predicates to plain JavaScript.\n     * This method is uses Json stringify when serializing Predicate object.\n     */\n    toJson() {\n        let predicates;\n        let p;\n        if (this.isComplex) {\n            predicates = [];\n            p = this.predicates;\n            for (let i = 0; i < p.length; i++) {\n                predicates.push(p[i].toJson());\n            }\n        }\n        return {\n            isComplex: this.isComplex,\n            field: this.field,\n            operator: this.operator,\n            value: this.value,\n            ignoreCase: this.ignoreCase,\n            ignoreAccent: this.ignoreAccent,\n            condition: this.condition,\n            predicates: predicates\n        };\n    }\n    static combinePredicates(predicates, operator) {\n        if (predicates.length === 1) {\n            if (!(predicates[0] instanceof Array)) {\n                return predicates[0];\n            }\n            predicates = predicates[0];\n        }\n        return new Predicate(predicates[0], operator, predicates.slice(1));\n    }\n    static combine(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {\n        if (field instanceof Predicate) {\n            return Predicate[condition](pred, field);\n        }\n        if (typeof field === 'string') {\n            return Predicate[condition](pred, new Predicate(field, operator, value, ignoreCase, ignoreAccent));\n        }\n        return DataUtil.throwError('Predicate - ' + condition + ' : invalid arguments');\n    }\n    static fromJSONData(json) {\n        let preds = json.predicates || [];\n        let len = preds.length;\n        let predicates = [];\n        let result;\n        for (let i = 0; i < len; i++) {\n            predicates.push(this.fromJSONData(preds[i]));\n        }\n        if (!json.isComplex) {\n            result = new Predicate(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);\n        }\n        else {\n            result = new Predicate(predicates[0], json.condition, predicates.slice(1));\n        }\n        return result;\n    }\n}\n\nconst consts = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Data manager common utility methods.\n * @hidden\n */\nclass DataUtil {\n    /**\n     * Returns the value by invoking the provided parameter function.\n     * If the paramater is not of type function then it will be returned as it is.\n     * @param  {Function|string|string[]|number} value\n     * @param  {Object} inst?\n     * @hidden\n     */\n    static getValue(value, inst) {\n        if (typeof value === 'function') {\n            return value.call(inst || {});\n        }\n        return value;\n    }\n    /**\n     * Returns true if the input string ends with given string.\n     * @param  {string} input\n     * @param  {string} substr\n     */\n    static endsWith(input, substr) {\n        return input.slice && input.slice(-substr.length) === substr;\n    }\n    /**\n     * Returns true if the input string starts with given string.\n     * @param  {string} str\n     * @param  {string} startstr\n     */\n    static startsWith(input, start) {\n        return input.slice(0, start.length) === start;\n    }\n    /**\n     * To return the sorting function based on the string.\n     * @param  {string} order\n     * @hidden\n     */\n    static fnSort(order) {\n        order = order ? DataUtil.toLowerCase(order) : 'ascending';\n        if (order === 'ascending') {\n            return this.fnAscending;\n        }\n        return this.fnDescending;\n    }\n    /**\n     * Comparer function which is used to sort the data in ascending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnAscending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return -1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y);\n        }\n        if (x === null || x === undefined) {\n            return 1;\n        }\n        return x - y;\n    }\n    /**\n     * Comparer function which is used to sort the data in descending order.\n     * @param  {string|number} x\n     * @param  {string|number} y\n     * @returns number\n     */\n    static fnDescending(x, y) {\n        if (isNullOrUndefined(x) && isNullOrUndefined(y)) {\n            return -1;\n        }\n        if (y === null || y === undefined) {\n            return 1;\n        }\n        if (typeof x === 'string') {\n            return x.localeCompare(y) * -1;\n        }\n        if (x === null || x === undefined) {\n            return -1;\n        }\n        return y - x;\n    }\n    static extractFields(obj, fields) {\n        let newObj = {};\n        for (let i = 0; i < fields.length; i++) {\n            newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);\n        }\n        return newObj;\n    }\n    /**\n     * Select objects by given fields from jsonArray.\n     * @param  {Object[]} jsonArray\n     * @param  {string[]} fields\n     */\n    static select(jsonArray, fields) {\n        let newData = [];\n        for (let i = 0; i < jsonArray.length; i++) {\n            newData.push(this.extractFields(jsonArray[i], fields));\n        }\n        return newData;\n    }\n    /**\n     * Group the input data based on the field name.\n     * It also performs aggregation of the grouped records based on the aggregates paramater.\n     * @param  {Object[]} jsonArray\n     * @param  {string} field?\n     * @param  {Object[]} agg?\n     * @param  {number} level?\n     * @param  {Object[]} groupDs?\n     */\n    static group(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {\n        level = level || 1;\n        let jsonData = jsonArray;\n        let guid = 'GroupGuid';\n        if (jsonData.GroupGuid === consts[guid]) {\n            for (let j = 0; j < jsonData.length; j++) {\n                if (!isNullOrUndefined(groupDs)) {\n                    let indx = -1;\n                    let temp = groupDs.filter((e) => { return e.key === jsonData[j].key; });\n                    indx = groupDs.indexOf(temp[0]);\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);\n                    jsonData[j].count = groupDs[indx].count;\n                }\n                else {\n                    jsonData[j].items = this.group(jsonData[j].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);\n                    jsonData[j].count = jsonData[j].items.length;\n                }\n            }\n            jsonData.childLevels += 1;\n            return jsonData;\n        }\n        let grouped = {};\n        let groupedArray = [];\n        groupedArray.GroupGuid = consts[guid];\n        groupedArray.level = level;\n        groupedArray.childLevels = 0;\n        groupedArray.records = jsonData;\n        for (let i = 0; i < jsonData.length; i++) {\n            let val = this.getVal(jsonData, i, field);\n            if (!isNullOrUndefined(format)) {\n                val = format(val, field);\n            }\n            if (!grouped[val]) {\n                grouped[val] = {\n                    key: val,\n                    count: 0,\n                    items: [],\n                    aggregates: {},\n                    field: field\n                };\n                groupedArray.push(grouped[val]);\n                if (!isNullOrUndefined(groupDs)) {\n                    let tempObj = groupDs.filter((e) => { return e.key === grouped[val].key; });\n                    grouped[val].count = tempObj[0].count;\n                }\n            }\n            grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;\n            if (!isLazyLoad || (isLazyLoad && aggregates.length)) {\n                grouped[val].items.push(jsonData[i]);\n            }\n        }\n        if (aggregates && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                let res = {};\n                let fn;\n                let aggs = aggregates;\n                for (let j = 0; j < aggregates.length; j++) {\n                    fn = DataUtil.aggregates[aggregates[j].type];\n                    if (!isNullOrUndefined(groupDs)) {\n                        let temp = groupDs.filter((e) => { return e.key === groupedArray[i].key; });\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(temp[0].items, aggs[j].field);\n                        }\n                    }\n                    else {\n                        if (fn) {\n                            res[aggs[j].field + ' - ' + aggs[j].type] = fn(groupedArray[i].items, aggs[j].field);\n                        }\n                    }\n                }\n                groupedArray[i].aggregates = res;\n            }\n        }\n        if (isLazyLoad && groupedArray.length && aggregates.length) {\n            for (let i = 0; i < groupedArray.length; i++) {\n                groupedArray[i].items = [];\n            }\n        }\n        return jsonData.length && groupedArray || jsonData;\n    }\n    /**\n     * It is used to categorize the multiple items based on a specific field in jsonArray.\n     * The hierarchical queries are commonly required when you use foreign key binding.\n     * @param  {string} fKey\n     * @param  {string} from\n     * @param  {Object[]} source\n     * @param  {Group} lookup?\n     * @param  {string} pKey?\n     * @hidden\n     */\n    static buildHierarchy(fKey, from, source, lookup, pKey) {\n        let i;\n        let grp = {};\n        let temp;\n        if (lookup.result) {\n            lookup = lookup.result;\n        }\n        if (lookup.GroupGuid) {\n            this.throwError('DataManager: Do not have support Grouping in hierarchy');\n        }\n        for (i = 0; i < lookup.length; i++) {\n            let fKeyData = this.getObject(fKey, lookup[i]);\n            temp = grp[fKeyData] || (grp[fKeyData] = []);\n            temp.push(lookup[i]);\n        }\n        for (i = 0; i < source.length; i++) {\n            let fKeyData = this.getObject(pKey || fKey, source[i]);\n            source[i][from] = grp[fKeyData];\n        }\n    }\n    /**\n     * The method used to get the field names which started with specified characters.\n     * @param  {Object} obj\n     * @param  {string[]} fields?\n     * @param  {string} prefix?\n     * @hidden\n     */\n    static getFieldList(obj, fields, prefix) {\n        if (prefix === undefined) {\n            prefix = '';\n        }\n        if (fields === undefined || fields === null) {\n            return this.getFieldList(obj, [], prefix);\n        }\n        let copyObj = obj;\n        let keys = Object.keys(obj);\n        for (let prop of keys) {\n            if (typeof copyObj[prop] === 'object' && !(copyObj[prop] instanceof Array)) {\n                this.getFieldList(copyObj[prop], fields, prefix + prop + '.');\n            }\n            else {\n                fields.push(prefix + prop);\n            }\n        }\n        return fields;\n    }\n    /**\n     * Gets the value of the property in the given object.\n     * The complex object can be accessed by providing the field names concatenated with dot(.).\n     * @param  {string} nameSpace - The name of the property to be accessed.\n     * @param  {Object} from - Defines the source object.\n     */\n    static getObject(nameSpace, from) {\n        if (!nameSpace) {\n            return from;\n        }\n        if (!from) {\n            return undefined;\n        }\n        if (nameSpace.indexOf('.') === -1) {\n            return from[nameSpace];\n        }\n        let value = from;\n        let splits = nameSpace.split('.');\n        for (let i = 0; i < splits.length; i++) {\n            if (value == null) {\n                break;\n            }\n            value = value[splits[i]];\n        }\n        return value;\n    }\n    /**\n     * To set value for the nameSpace in desired object.\n     * @param {string} nameSpace - String value to the get the inner object.\n     * @param {Object} value - Value that you need to set.\n     * @param {Object} obj - Object to get the inner object value.\n     * @return { [key: string]: Object; } | Object\n     * @hidden\n     */\n    static setValue(nameSpace, value, obj) {\n        let keys = nameSpace.toString().split('.');\n        let start = obj || {};\n        let fromObj = start;\n        let i;\n        let length = keys.length;\n        let key;\n        for (i = 0; i < length; i++) {\n            key = keys[i];\n            if (i + 1 === length) {\n                fromObj[key] = value === undefined ? undefined : value;\n            }\n            else if (isNullOrUndefined(fromObj[key])) {\n                fromObj[key] = {};\n            }\n            fromObj = fromObj[key];\n        }\n        return start;\n    }\n    /**\n     * Sort the given data based on the field and comparer.\n     * @param  {Object[]} ds - Defines the input data.\n     * @param  {string} field - Defines the field to be sorted.\n     * @param  {Function} comparer - Defines the comparer function used to sort the records.\n     */\n    static sort(ds, field, comparer) {\n        if (ds.length <= 1) {\n            return ds;\n        }\n        let middle = parseInt((ds.length / 2).toString(), 10);\n        let left = ds.slice(0, middle);\n        let right = ds.slice(middle);\n        left = this.sort(left, field, comparer);\n        right = this.sort(right, field, comparer);\n        return this.merge(left, right, field, comparer);\n    }\n    static ignoreDiacritics(value) {\n        if (typeof value !== 'string') {\n            return value;\n        }\n        let result = value.split('');\n        let newValue = result.map((temp) => temp in DataUtil.diacritics ? DataUtil.diacritics[temp] : temp);\n        return newValue.join('');\n    }\n    static merge(left, right, fieldName, comparer) {\n        let result = [];\n        let current;\n        while (left.length > 0 || right.length > 0) {\n            if (left.length > 0 && right.length > 0) {\n                if (comparer) {\n                    current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;\n                }\n                else {\n                    current = left[0][fieldName] < left[0][fieldName] ? left : right;\n                }\n            }\n            else {\n                current = left.length > 0 ? left : right;\n            }\n            result.push(current.shift());\n        }\n        return result;\n    }\n    static getVal(array, index, field) {\n        return field ? this.getObject(field, array[index]) : array[index];\n    }\n    static toLowerCase(val) {\n        return val ? typeof val === 'string' ? val.toLowerCase() : val.toString() : (val === 0 || val === false) ? val.toString() : '';\n    }\n    /**\n     * To perform the filter operation with specified adaptor and returns the result.\n     * @param  {Object} adaptor\n     * @param  {string} fnName\n     * @param  {Object} param1?\n     * @param  {Object} param2?\n     * @hidden\n     */\n    static callAdaptorFunction(adaptor, fnName, param1, param2) {\n        if (fnName in adaptor) {\n            let res = adaptor[fnName](param1, param2);\n            if (!isNullOrUndefined(res)) {\n                param1 = res;\n            }\n        }\n        return param1;\n    }\n    static getAddParams(adp, dm, query) {\n        let req = {};\n        DataUtil.callAdaptorFunction(adp, 'addParams', {\n            dm: dm,\n            query: query,\n            params: query.params,\n            reqParams: req\n        });\n        return req;\n    }\n    /**\n     * Checks wheather the given input is a plain object or not.\n     * @param  {Object|Object[]} obj\n     */\n    static isPlainObject(obj) {\n        return (!!obj) && (obj.constructor === Object);\n    }\n    /**\n     * Returns true when the browser cross origin request.\n     */\n    static isCors() {\n        let xhr = null;\n        let request = 'XMLHttpRequest';\n        try {\n            xhr = new window[request]();\n        }\n        catch (e) {\n            // No exception handling\n        }\n        return !!xhr && ('withCredentials' in xhr);\n    }\n    /**\n     * Generate random GUID value which will be prefixed with the given value.\n     * @param  {string} prefix\n     */\n    static getGuid(prefix) {\n        let hexs = '0123456789abcdef';\n        let rand;\n        return (prefix || '') + '00000000-0000-4000-0000-000000000000'.replace(/0/g, (val, i) => {\n            if ('crypto' in window && 'getRandomValues' in crypto) {\n                let arr = new Uint8Array(1);\n                window.crypto.getRandomValues(arr);\n                rand = arr[0] % 16 | 0;\n            }\n            else {\n                rand = Math.random() * 16 | 0;\n            }\n            return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];\n        });\n    }\n    /**\n     * Checks wheather the given value is null or not.\n     * @param  {string|Object} val\n     * @returns boolean\n     */\n    static isNull(val) {\n        return val === undefined || val === null;\n    }\n    /**\n     * To get the required items from collection of objects.\n     * @param  {Object[]} array\n     * @param  {string} field\n     * @param  {Function} comparer\n     * @returns Object\n     * @hidden\n     */\n    static getItemFromComparer(array, field, comparer) {\n        let keyVal;\n        let current;\n        let key;\n        let i = 0;\n        let castRequired = typeof DataUtil.getVal(array, 0, field) === 'string';\n        if (array.length) {\n            while (isNullOrUndefined(keyVal) && i < array.length) {\n                keyVal = DataUtil.getVal(array, i, field);\n                key = array[i++];\n            }\n        }\n        for (; i < array.length; i++) {\n            current = DataUtil.getVal(array, i, field);\n            if (isNullOrUndefined(current)) {\n                continue;\n            }\n            if (castRequired) {\n                keyVal = +keyVal;\n                current = +current;\n            }\n            if (comparer(keyVal, current) > 0) {\n                keyVal = current;\n                key = array[i];\n            }\n        }\n        return key;\n    }\n    /**\n     * To get distinct values of Array or Array of Objects.\n     * @param  {Object[]} json\n     * @param  {string} field\n     * @param  {boolean} requiresCompleteRecord\n     * @returns Object[]\n     * * distinct array of objects is return when requiresCompleteRecord set as true.\n     * @hidden\n     */\n    static distinct(json, fieldName, requiresCompleteRecord) {\n        requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;\n        let result = [];\n        let val;\n        let tmp = {};\n        json.forEach((data, index) => {\n            val = typeof (json[index]) === 'object' ? DataUtil.getVal(json, index, fieldName) : json[index];\n            if (!(val in tmp)) {\n                result.push(!requiresCompleteRecord ? val : json[index]);\n                tmp[val] = 1;\n            }\n        });\n        return result;\n    }\n    /**\n     * Process the given records based on the datamanager string.\n     * @param  {string} datamanager\n     * @param  {Object[]} records\n     */\n    static processData(dm, records) {\n        let query = this.prepareQuery(dm);\n        let sampledata = new DataManager(records);\n        if (dm.requiresCounts) {\n            query.requiresCount();\n        }\n        let result = sampledata.executeLocal(query);\n        let returnValue = {\n            result: dm.requiresCounts ? result.result : result,\n            count: result.count,\n            aggregates: JSON.stringify(result.aggregates)\n        };\n        return dm.requiresCounts ? returnValue : result;\n    }\n    static prepareQuery(dm) {\n        let query = new Query();\n        if (dm.select) {\n            query.select(dm.select);\n        }\n        if (dm.where) {\n            let where = DataUtil.parse.parseJson(dm.where);\n            where.filter((pred) => {\n                if (isNullOrUndefined(pred.condition)) {\n                    query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);\n                }\n                else {\n                    let predicateList = [];\n                    if (pred.field) {\n                        predicateList.push(new Predicate(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));\n                    }\n                    else {\n                        predicateList = predicateList.concat(this.getPredicate(pred.predicates));\n                    }\n                    if (pred.condition == 'or') {\n                        query.where(Predicate.or(predicateList));\n                    }\n                    else if (pred.condition == 'and') {\n                        query.where(Predicate.and(predicateList));\n                    }\n                }\n            });\n        }\n        if (dm.search) {\n            let search = DataUtil.parse.parseJson(dm.search);\n            search.filter((e) => query.search(e.key, e.fields, e['operator'], e['ignoreCase'], e['ignoreAccent']));\n        }\n        if (dm.aggregates) {\n            dm.aggregates.filter((e) => query.aggregate(e.type, e.field));\n        }\n        if (dm.sorted) {\n            dm.sorted.filter((e) => query.sortBy(e.name, e.direction));\n        }\n        if (dm.skip) {\n            query.skip(dm.skip);\n        }\n        if (dm.take) {\n            query.take(dm.take);\n        }\n        if (dm.group) {\n            dm.group.filter((grp) => query.group(grp));\n        }\n        return query;\n    }\n    static getPredicate(pred) {\n        let mainPred = [];\n        for (let i = 0; i < pred.length; i++) {\n            let e = pred[i];\n            if (e.field) {\n                mainPred.push(new Predicate(e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));\n            }\n            else {\n                let childPred = [];\n                let cpre = this.getPredicate(e.predicates);\n                for (const prop of Object.keys(cpre)) {\n                    childPred.push(cpre[prop]);\n                }\n                mainPred.push(e.condition == 'or' ? Predicate.or(childPred) : Predicate.and(childPred));\n            }\n        }\n        return mainPred;\n    }\n}\n/**\n * Specifies the value which will be used to adjust the date value to server timezone.\n * @default null\n */\nDataUtil.serverTimezoneOffset = null;\n/**\n * Species whether are not to be parsed with serverTimezoneOffset value.\n * @hidden\n */\nDataUtil.timeZoneHandling = true;\n/**\n * Throw error with the given string as message.\n * @param  {string} er\n */\nDataUtil.throwError = (error) => {\n    try {\n        throw new Error(error);\n    }\n    catch (e) {\n        throw e.message + '\\n' + e.stack;\n    }\n};\nDataUtil.aggregates = {\n    /**\n     * Calculate sum of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    sum: (ds, field) => {\n        let result = 0;\n        let val;\n        let castRequired = typeof DataUtil.getVal(ds, 0, field) !== 'number';\n        for (let i = 0; i < ds.length; i++) {\n            val = DataUtil.getVal(ds, i, field);\n            if (!isNaN(val) && val !== null) {\n                if (castRequired) {\n                    val = +val;\n                }\n                result += val;\n            }\n        }\n        return result;\n    },\n    /**\n     * Calculate average value of the given field in the data.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    average: (ds, field) => {\n        return DataUtil.aggregates.sum(ds, field) / ds.length;\n    },\n    /**\n     * Returns the min value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string|Function} field\n     */\n    min: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnAscending));\n    },\n    /**\n     * Returns the max value of the data based on the field.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     * @returns number\n     */\n    max: (ds, field) => {\n        let comparer;\n        if (typeof field === 'function') {\n            comparer = field;\n            field = null;\n        }\n        return DataUtil.getObject(field, DataUtil.getItemFromComparer(ds, field, comparer || DataUtil.fnDescending));\n    },\n    /**\n     * Returns the total number of true value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    truecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', true, true)).length;\n    },\n    /**\n     * Returns the total number of false value present in the data based on the given boolean field name.\n     * @param  {Object[]} ds\n     * @param  {string} field\n     */\n    falsecount: (ds, field) => {\n        return new DataManager(ds).executeLocal(new Query().where(field, 'equal', false, true)).length;\n    },\n    /**\n     * Returns the length of the given data.\n     * @param  {Object[]} ds\n     * @param  {string} field?\n     * @returns number\n     */\n    count: (ds, field) => {\n        return ds.length;\n    }\n};\n/**\n * Specifies the Object with filter operators.\n */\nDataUtil.operatorSymbols = {\n    '<': 'lessthan',\n    '>': 'greaterthan',\n    '<=': 'lessthanorequal',\n    '>=': 'greaterthanorequal',\n    '==': 'equal',\n    '!=': 'notequal',\n    '*=': 'contains',\n    '$=': 'endswith',\n    '^=': 'startswith'\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * * It will be used for date/number type filter query.\n */\nDataUtil.odBiOperator = {\n    '<': ' lt ',\n    '>': ' gt ',\n    '<=': ' le ',\n    '>=': ' ge ',\n    '==': ' eq ',\n    '!=': ' ne ',\n    'lessthan': ' lt ',\n    'lessthanorequal': ' le ',\n    'greaterthan': ' gt ',\n    'greaterthanorequal': ' ge ',\n    'equal': ' eq ',\n    'notequal': ' ne '\n};\n/**\n * Specifies the Object with filter operators which will be used for OData filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odUniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'substringof',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'substringof'\n};\n/**\n * Specifies the Object with filter operators which will be used for ODataV4 filter query generation.\n * It will be used for string type filter query.\n */\nDataUtil.odv4UniOperator = {\n    '$=': 'endswith',\n    '^=': 'startswith',\n    '*=': 'contains',\n    'endswith': 'endswith',\n    'startswith': 'startswith',\n    'contains': 'contains'\n};\nDataUtil.diacritics = {\n    '\\u24B6': 'A',\n    '\\uFF21': 'A',\n    '\\u00C0': 'A',\n    '\\u00C1': 'A',\n    '\\u00C2': 'A',\n    '\\u1EA6': 'A',\n    '\\u1EA4': 'A',\n    '\\u1EAA': 'A',\n    '\\u1EA8': 'A',\n    '\\u00C3': 'A',\n    '\\u0100': 'A',\n    '\\u0102': 'A',\n    '\\u1EB0': 'A',\n    '\\u1EAE': 'A',\n    '\\u1EB4': 'A',\n    '\\u1EB2': 'A',\n    '\\u0226': 'A',\n    '\\u01E0': 'A',\n    '\\u00C4': 'A',\n    '\\u01DE': 'A',\n    '\\u1EA2': 'A',\n    '\\u00C5': 'A',\n    '\\u01FA': 'A',\n    '\\u01CD': 'A',\n    '\\u0200': 'A',\n    '\\u0202': 'A',\n    '\\u1EA0': 'A',\n    '\\u1EAC': 'A',\n    '\\u1EB6': 'A',\n    '\\u1E00': 'A',\n    '\\u0104': 'A',\n    '\\u023A': 'A',\n    '\\u2C6F': 'A',\n    '\\uA732': 'AA',\n    '\\u00C6': 'AE',\n    '\\u01FC': 'AE',\n    '\\u01E2': 'AE',\n    '\\uA734': 'AO',\n    '\\uA736': 'AU',\n    '\\uA738': 'AV',\n    '\\uA73A': 'AV',\n    '\\uA73C': 'AY',\n    '\\u24B7': 'B',\n    '\\uFF22': 'B',\n    '\\u1E02': 'B',\n    '\\u1E04': 'B',\n    '\\u1E06': 'B',\n    '\\u0243': 'B',\n    '\\u0182': 'B',\n    '\\u0181': 'B',\n    '\\u24B8': 'C',\n    '\\uFF23': 'C',\n    '\\u0106': 'C',\n    '\\u0108': 'C',\n    '\\u010A': 'C',\n    '\\u010C': 'C',\n    '\\u00C7': 'C',\n    '\\u1E08': 'C',\n    '\\u0187': 'C',\n    '\\u023B': 'C',\n    '\\uA73E': 'C',\n    '\\u24B9': 'D',\n    '\\uFF24': 'D',\n    '\\u1E0A': 'D',\n    '\\u010E': 'D',\n    '\\u1E0C': 'D',\n    '\\u1E10': 'D',\n    '\\u1E12': 'D',\n    '\\u1E0E': 'D',\n    '\\u0110': 'D',\n    '\\u018B': 'D',\n    '\\u018A': 'D',\n    '\\u0189': 'D',\n    '\\uA779': 'D',\n    '\\u01F1': 'DZ',\n    '\\u01C4': 'DZ',\n    '\\u01F2': 'Dz',\n    '\\u01C5': 'Dz',\n    '\\u24BA': 'E',\n    '\\uFF25': 'E',\n    '\\u00C8': 'E',\n    '\\u00C9': 'E',\n    '\\u00CA': 'E',\n    '\\u1EC0': 'E',\n    '\\u1EBE': 'E',\n    '\\u1EC4': 'E',\n    '\\u1EC2': 'E',\n    '\\u1EBC': 'E',\n    '\\u0112': 'E',\n    '\\u1E14': 'E',\n    '\\u1E16': 'E',\n    '\\u0114': 'E',\n    '\\u0116': 'E',\n    '\\u00CB': 'E',\n    '\\u1EBA': 'E',\n    '\\u011A': 'E',\n    '\\u0204': 'E',\n    '\\u0206': 'E',\n    '\\u1EB8': 'E',\n    '\\u1EC6': 'E',\n    '\\u0228': 'E',\n    '\\u1E1C': 'E',\n    '\\u0118': 'E',\n    '\\u1E18': 'E',\n    '\\u1E1A': 'E',\n    '\\u0190': 'E',\n    '\\u018E': 'E',\n    '\\u24BB': 'F',\n    '\\uFF26': 'F',\n    '\\u1E1E': 'F',\n    '\\u0191': 'F',\n    '\\uA77B': 'F',\n    '\\u24BC': 'G',\n    '\\uFF27': 'G',\n    '\\u01F4': 'G',\n    '\\u011C': 'G',\n    '\\u1E20': 'G',\n    '\\u011E': 'G',\n    '\\u0120': 'G',\n    '\\u01E6': 'G',\n    '\\u0122': 'G',\n    '\\u01E4': 'G',\n    '\\u0193': 'G',\n    '\\uA7A0': 'G',\n    '\\uA77D': 'G',\n    '\\uA77E': 'G',\n    '\\u24BD': 'H',\n    '\\uFF28': 'H',\n    '\\u0124': 'H',\n    '\\u1E22': 'H',\n    '\\u1E26': 'H',\n    '\\u021E': 'H',\n    '\\u1E24': 'H',\n    '\\u1E28': 'H',\n    '\\u1E2A': 'H',\n    '\\u0126': 'H',\n    '\\u2C67': 'H',\n    '\\u2C75': 'H',\n    '\\uA78D': 'H',\n    '\\u24BE': 'I',\n    '\\uFF29': 'I',\n    '\\u00CC': 'I',\n    '\\u00CD': 'I',\n    '\\u00CE': 'I',\n    '\\u0128': 'I',\n    '\\u012A': 'I',\n    '\\u012C': 'I',\n    '\\u0130': 'I',\n    '\\u00CF': 'I',\n    '\\u1E2E': 'I',\n    '\\u1EC8': 'I',\n    '\\u01CF': 'I',\n    '\\u0208': 'I',\n    '\\u020A': 'I',\n    '\\u1ECA': 'I',\n    '\\u012E': 'I',\n    '\\u1E2C': 'I',\n    '\\u0197': 'I',\n    '\\u24BF': 'J',\n    '\\uFF2A': 'J',\n    '\\u0134': 'J',\n    '\\u0248': 'J',\n    '\\u24C0': 'K',\n    '\\uFF2B': 'K',\n    '\\u1E30': 'K',\n    '\\u01E8': 'K',\n    '\\u1E32': 'K',\n    '\\u0136': 'K',\n    '\\u1E34': 'K',\n    '\\u0198': 'K',\n    '\\u2C69': 'K',\n    '\\uA740': 'K',\n    '\\uA742': 'K',\n    '\\uA744': 'K',\n    '\\uA7A2': 'K',\n    '\\u24C1': 'L',\n    '\\uFF2C': 'L',\n    '\\u013F': 'L',\n    '\\u0139': 'L',\n    '\\u013D': 'L',\n    '\\u1E36': 'L',\n    '\\u1E38': 'L',\n    '\\u013B': 'L',\n    '\\u1E3C': 'L',\n    '\\u1E3A': 'L',\n    '\\u0141': 'L',\n    '\\u023D': 'L',\n    '\\u2C62': 'L',\n    '\\u2C60': 'L',\n    '\\uA748': 'L',\n    '\\uA746': 'L',\n    '\\uA780': 'L',\n    '\\u01C7': 'LJ',\n    '\\u01C8': 'Lj',\n    '\\u24C2': 'M',\n    '\\uFF2D': 'M',\n    '\\u1E3E': 'M',\n    '\\u1E40': 'M',\n    '\\u1E42': 'M',\n    '\\u2C6E': 'M',\n    '\\u019C': 'M',\n    '\\u24C3': 'N',\n    '\\uFF2E': 'N',\n    '\\u01F8': 'N',\n    '\\u0143': 'N',\n    '\\u00D1': 'N',\n    '\\u1E44': 'N',\n    '\\u0147': 'N',\n    '\\u1E46': 'N',\n    '\\u0145': 'N',\n    '\\u1E4A': 'N',\n    '\\u1E48': 'N',\n    '\\u0220': 'N',\n    '\\u019D': 'N',\n    '\\uA790': 'N',\n    '\\uA7A4': 'N',\n    '\\u01CA': 'NJ',\n    '\\u01CB': 'Nj',\n    '\\u24C4': 'O',\n    '\\uFF2F': 'O',\n    '\\u00D2': 'O',\n    '\\u00D3': 'O',\n    '\\u00D4': 'O',\n    '\\u1ED2': 'O',\n    '\\u1ED0': 'O',\n    '\\u1ED6': 'O',\n    '\\u1ED4': 'O',\n    '\\u00D5': 'O',\n    '\\u1E4C': 'O',\n    '\\u022C': 'O',\n    '\\u1E4E': 'O',\n    '\\u014C': 'O',\n    '\\u1E50': 'O',\n    '\\u1E52': 'O',\n    '\\u014E': 'O',\n    '\\u022E': 'O',\n    '\\u0230': 'O',\n    '\\u00D6': 'O',\n    '\\u022A': 'O',\n    '\\u1ECE': 'O',\n    '\\u0150': 'O',\n    '\\u01D1': 'O',\n    '\\u020C': 'O',\n    '\\u020E': 'O',\n    '\\u01A0': 'O',\n    '\\u1EDC': 'O',\n    '\\u1EDA': 'O',\n    '\\u1EE0': 'O',\n    '\\u1EDE': 'O',\n    '\\u1EE2': 'O',\n    '\\u1ECC': 'O',\n    '\\u1ED8': 'O',\n    '\\u01EA': 'O',\n    '\\u01EC': 'O',\n    '\\u00D8': 'O',\n    '\\u01FE': 'O',\n    '\\u0186': 'O',\n    '\\u019F': 'O',\n    '\\uA74A': 'O',\n    '\\uA74C': 'O',\n    '\\u01A2': 'OI',\n    '\\uA74E': 'OO',\n    '\\u0222': 'OU',\n    '\\u24C5': 'P',\n    '\\uFF30': 'P',\n    '\\u1E54': 'P',\n    '\\u1E56': 'P',\n    '\\u01A4': 'P',\n    '\\u2C63': 'P',\n    '\\uA750': 'P',\n    '\\uA752': 'P',\n    '\\uA754': 'P',\n    '\\u24C6': 'Q',\n    '\\uFF31': 'Q',\n    '\\uA756': 'Q',\n    '\\uA758': 'Q',\n    '\\u024A': 'Q',\n    '\\u24C7': 'R',\n    '\\uFF32': 'R',\n    '\\u0154': 'R',\n    '\\u1E58': 'R',\n    '\\u0158': 'R',\n    '\\u0210': 'R',\n    '\\u0212': 'R',\n    '\\u1E5A': 'R',\n    '\\u1E5C': 'R',\n    '\\u0156': 'R',\n    '\\u1E5E': 'R',\n    '\\u024C': 'R',\n    '\\u2C64': 'R',\n    '\\uA75A': 'R',\n    '\\uA7A6': 'R',\n    '\\uA782': 'R',\n    '\\u24C8': 'S',\n    '\\uFF33': 'S',\n    '\\u1E9E': 'S',\n    '\\u015A': 'S',\n    '\\u1E64': 'S',\n    '\\u015C': 'S',\n    '\\u1E60': 'S',\n    '\\u0160': 'S',\n    '\\u1E66': 'S',\n    '\\u1E62': 'S',\n    '\\u1E68': 'S',\n    '\\u0218': 'S',\n    '\\u015E': 'S',\n    '\\u2C7E': 'S',\n    '\\uA7A8': 'S',\n    '\\uA784': 'S',\n    '\\u24C9': 'T',\n    '\\uFF34': 'T',\n    '\\u1E6A': 'T',\n    '\\u0164': 'T',\n    '\\u1E6C': 'T',\n    '\\u021A': 'T',\n    '\\u0162': 'T',\n    '\\u1E70': 'T',\n    '\\u1E6E': 'T',\n    '\\u0166': 'T',\n    '\\u01AC': 'T',\n    '\\u01AE': 'T',\n    '\\u023E': 'T',\n    '\\uA786': 'T',\n    '\\uA728': 'TZ',\n    '\\u24CA': 'U',\n    '\\uFF35': 'U',\n    '\\u00D9': 'U',\n    '\\u00DA': 'U',\n    '\\u00DB': 'U',\n    '\\u0168': 'U',\n    '\\u1E78': 'U',\n    '\\u016A': 'U',\n    '\\u1E7A': 'U',\n    '\\u016C': 'U',\n    '\\u00DC': 'U',\n    '\\u01DB': 'U',\n    '\\u01D7': 'U',\n    '\\u01D5': 'U',\n    '\\u01D9': 'U',\n    '\\u1EE6': 'U',\n    '\\u016E': 'U',\n    '\\u0170': 'U',\n    '\\u01D3': 'U',\n    '\\u0214': 'U',\n    '\\u0216': 'U',\n    '\\u01AF': 'U',\n    '\\u1EEA': 'U',\n    '\\u1EE8': 'U',\n    '\\u1EEE': 'U',\n    '\\u1EEC': 'U',\n    '\\u1EF0': 'U',\n    '\\u1EE4': 'U',\n    '\\u1E72': 'U',\n    '\\u0172': 'U',\n    '\\u1E76': 'U',\n    '\\u1E74': 'U',\n    '\\u0244': 'U',\n    '\\u24CB': 'V',\n    '\\uFF36': 'V',\n    '\\u1E7C': 'V',\n    '\\u1E7E': 'V',\n    '\\u01B2': 'V',\n    '\\uA75E': 'V',\n    '\\u0245': 'V',\n    '\\uA760': 'VY',\n    '\\u24CC': 'W',\n    '\\uFF37': 'W',\n    '\\u1E80': 'W',\n    '\\u1E82': 'W',\n    '\\u0174': 'W',\n    '\\u1E86': 'W',\n    '\\u1E84': 'W',\n    '\\u1E88': 'W',\n    '\\u2C72': 'W',\n    '\\u24CD': 'X',\n    '\\uFF38': 'X',\n    '\\u1E8A': 'X',\n    '\\u1E8C': 'X',\n    '\\u24CE': 'Y',\n    '\\uFF39': 'Y',\n    '\\u1EF2': 'Y',\n    '\\u00DD': 'Y',\n    '\\u0176': 'Y',\n    '\\u1EF8': 'Y',\n    '\\u0232': 'Y',\n    '\\u1E8E': 'Y',\n    '\\u0178': 'Y',\n    '\\u1EF6': 'Y',\n    '\\u1EF4': 'Y',\n    '\\u01B3': 'Y',\n    '\\u024E': 'Y',\n    '\\u1EFE': 'Y',\n    '\\u24CF': 'Z',\n    '\\uFF3A': 'Z',\n    '\\u0179': 'Z',\n    '\\u1E90': 'Z',\n    '\\u017B': 'Z',\n    '\\u017D': 'Z',\n    '\\u1E92': 'Z',\n    '\\u1E94': 'Z',\n    '\\u01B5': 'Z',\n    '\\u0224': 'Z',\n    '\\u2C7F': 'Z',\n    '\\u2C6B': 'Z',\n    '\\uA762': 'Z',\n    '\\u24D0': 'a',\n    '\\uFF41': 'a',\n    '\\u1E9A': 'a',\n    '\\u00E0': 'a',\n    '\\u00E1': 'a',\n    '\\u00E2': 'a',\n    '\\u1EA7': 'a',\n    '\\u1EA5': 'a',\n    '\\u1EAB': 'a',\n    '\\u1EA9': 'a',\n    '\\u00E3': 'a',\n    '\\u0101': 'a',\n    '\\u0103': 'a',\n    '\\u1EB1': 'a',\n    '\\u1EAF': 'a',\n    '\\u1EB5': 'a',\n    '\\u1EB3': 'a',\n    '\\u0227': 'a',\n    '\\u01E1': 'a',\n    '\\u00E4': 'a',\n    '\\u01DF': 'a',\n    '\\u1EA3': 'a',\n    '\\u00E5': 'a',\n    '\\u01FB': 'a',\n    '\\u01CE': 'a',\n    '\\u0201': 'a',\n    '\\u0203': 'a',\n    '\\u1EA1': 'a',\n    '\\u1EAD': 'a',\n    '\\u1EB7': 'a',\n    '\\u1E01': 'a',\n    '\\u0105': 'a',\n    '\\u2C65': 'a',\n    '\\u0250': 'a',\n    '\\uA733': 'aa',\n    '\\u00E6': 'ae',\n    '\\u01FD': 'ae',\n    '\\u01E3': 'ae',\n    '\\uA735': 'ao',\n    '\\uA737': 'au',\n    '\\uA739': 'av',\n    '\\uA73B': 'av',\n    '\\uA73D': 'ay',\n    '\\u24D1': 'b',\n    '\\uFF42': 'b',\n    '\\u1E03': 'b',\n    '\\u1E05': 'b',\n    '\\u1E07': 'b',\n    '\\u0180': 'b',\n    '\\u0183': 'b',\n    '\\u0253': 'b',\n    '\\u24D2': 'c',\n    '\\uFF43': 'c',\n    '\\u0107': 'c',\n    '\\u0109': 'c',\n    '\\u010B': 'c',\n    '\\u010D': 'c',\n    '\\u00E7': 'c',\n    '\\u1E09': 'c',\n    '\\u0188': 'c',\n    '\\u023C': 'c',\n    '\\uA73F': 'c',\n    '\\u2184': 'c',\n    '\\u24D3': 'd',\n    '\\uFF44': 'd',\n    '\\u1E0B': 'd',\n    '\\u010F': 'd',\n    '\\u1E0D': 'd',\n    '\\u1E11': 'd',\n    '\\u1E13': 'd',\n    '\\u1E0F': 'd',\n    '\\u0111': 'd',\n    '\\u018C': 'd',\n    '\\u0256': 'd',\n    '\\u0257': 'd',\n    '\\uA77A': 'd',\n    '\\u01F3': 'dz',\n    '\\u01C6': 'dz',\n    '\\u24D4': 'e',\n    '\\uFF45': 'e',\n    '\\u00E8': 'e',\n    '\\u00E9': 'e',\n    '\\u00EA': 'e',\n    '\\u1EC1': 'e',\n    '\\u1EBF': 'e',\n    '\\u1EC5': 'e',\n    '\\u1EC3': 'e',\n    '\\u1EBD': 'e',\n    '\\u0113': 'e',\n    '\\u1E15': 'e',\n    '\\u1E17': 'e',\n    '\\u0115': 'e',\n    '\\u0117': 'e',\n    '\\u00EB': 'e',\n    '\\u1EBB': 'e',\n    '\\u011B': 'e',\n    '\\u0205': 'e',\n    '\\u0207': 'e',\n    '\\u1EB9': 'e',\n    '\\u1EC7': 'e',\n    '\\u0229': 'e',\n    '\\u1E1D': 'e',\n    '\\u0119': 'e',\n    '\\u1E19': 'e',\n    '\\u1E1B': 'e',\n    '\\u0247': 'e',\n    '\\u025B': 'e',\n    '\\u01DD': 'e',\n    '\\u24D5': 'f',\n    '\\uFF46': 'f',\n    '\\u1E1F': 'f',\n    '\\u0192': 'f',\n    '\\uA77C': 'f',\n    '\\u24D6': 'g',\n    '\\uFF47': 'g',\n    '\\u01F5': 'g',\n    '\\u011D': 'g',\n    '\\u1E21': 'g',\n    '\\u011F': 'g',\n    '\\u0121': 'g',\n    '\\u01E7': 'g',\n    '\\u0123': 'g',\n    '\\u01E5': 'g',\n    '\\u0260': 'g',\n    '\\uA7A1': 'g',\n    '\\u1D79': 'g',\n    '\\uA77F': 'g',\n    '\\u24D7': 'h',\n    '\\uFF48': 'h',\n    '\\u0125': 'h',\n    '\\u1E23': 'h',\n    '\\u1E27': 'h',\n    '\\u021F': 'h',\n    '\\u1E25': 'h',\n    '\\u1E29': 'h',\n    '\\u1E2B': 'h',\n    '\\u1E96': 'h',\n    '\\u0127': 'h',\n    '\\u2C68': 'h',\n    '\\u2C76': 'h',\n    '\\u0265': 'h',\n    '\\u0195': 'hv',\n    '\\u24D8': 'i',\n    '\\uFF49': 'i',\n    '\\u00EC': 'i',\n    '\\u00ED': 'i',\n    '\\u00EE': 'i',\n    '\\u0129': 'i',\n    '\\u012B': 'i',\n    '\\u012D': 'i',\n    '\\u00EF': 'i',\n    '\\u1E2F': 'i',\n    '\\u1EC9': 'i',\n    '\\u01D0': 'i',\n    '\\u0209': 'i',\n    '\\u020B': 'i',\n    '\\u1ECB': 'i',\n    '\\u012F': 'i',\n    '\\u1E2D': 'i',\n    '\\u0268': 'i',\n    '\\u0131': 'i',\n    '\\u24D9': 'j',\n    '\\uFF4A': 'j',\n    '\\u0135': 'j',\n    '\\u01F0': 'j',\n    '\\u0249': 'j',\n    '\\u24DA': 'k',\n    '\\uFF4B': 'k',\n    '\\u1E31': 'k',\n    '\\u01E9': 'k',\n    '\\u1E33': 'k',\n    '\\u0137': 'k',\n    '\\u1E35': 'k',\n    '\\u0199': 'k',\n    '\\u2C6A': 'k',\n    '\\uA741': 'k',\n    '\\uA743': 'k',\n    '\\uA745': 'k',\n    '\\uA7A3': 'k',\n    '\\u24DB': 'l',\n    '\\uFF4C': 'l',\n    '\\u0140': 'l',\n    '\\u013A': 'l',\n    '\\u013E': 'l',\n    '\\u1E37': 'l',\n    '\\u1E39': 'l',\n    '\\u013C': 'l',\n    '\\u1E3D': 'l',\n    '\\u1E3B': 'l',\n    '\\u017F': 'l',\n    '\\u0142': 'l',\n    '\\u019A': 'l',\n    '\\u026B': 'l',\n    '\\u2C61': 'l',\n    '\\uA749': 'l',\n    '\\uA781': 'l',\n    '\\uA747': 'l',\n    '\\u01C9': 'lj',\n    '\\u24DC': 'm',\n    '\\uFF4D': 'm',\n    '\\u1E3F': 'm',\n    '\\u1E41': 'm',\n    '\\u1E43': 'm',\n    '\\u0271': 'm',\n    '\\u026F': 'm',\n    '\\u24DD': 'n',\n    '\\uFF4E': 'n',\n    '\\u01F9': 'n',\n    '\\u0144': 'n',\n    '\\u00F1': 'n',\n    '\\u1E45': 'n',\n    '\\u0148': 'n',\n    '\\u1E47': 'n',\n    '\\u0146': 'n',\n    '\\u1E4B': 'n',\n    '\\u1E49': 'n',\n    '\\u019E': 'n',\n    '\\u0272': 'n',\n    '\\u0149': 'n',\n    '\\uA791': 'n',\n    '\\uA7A5': 'n',\n    '\\u01CC': 'nj',\n    '\\u24DE': 'o',\n    '\\uFF4F': 'o',\n    '\\u00F2': 'o',\n    '\\u00F3': 'o',\n    '\\u00F4': 'o',\n    '\\u1ED3': 'o',\n    '\\u1ED1': 'o',\n    '\\u1ED7': 'o',\n    '\\u1ED5': 'o',\n    '\\u00F5': 'o',\n    '\\u1E4D': 'o',\n    '\\u022D': 'o',\n    '\\u1E4F': 'o',\n    '\\u014D': 'o',\n    '\\u1E51': 'o',\n    '\\u1E53': 'o',\n    '\\u014F': 'o',\n    '\\u022F': 'o',\n    '\\u0231': 'o',\n    '\\u00F6': 'o',\n    '\\u022B': 'o',\n    '\\u1ECF': 'o',\n    '\\u0151': 'o',\n    '\\u01D2': 'o',\n    '\\u020D': 'o',\n    '\\u020F': 'o',\n    '\\u01A1': 'o',\n    '\\u1EDD': 'o',\n    '\\u1EDB': 'o',\n    '\\u1EE1': 'o',\n    '\\u1EDF': 'o',\n    '\\u1EE3': 'o',\n    '\\u1ECD': 'o',\n    '\\u1ED9': 'o',\n    '\\u01EB': 'o',\n    '\\u01ED': 'o',\n    '\\u00F8': 'o',\n    '\\u01FF': 'o',\n    '\\u0254': 'o',\n    '\\uA74B': 'o',\n    '\\uA74D': 'o',\n    '\\u0275': 'o',\n    '\\u01A3': 'oi',\n    '\\u0223': 'ou',\n    '\\uA74F': 'oo',\n    '\\u24DF': 'p',\n    '\\uFF50': 'p',\n    '\\u1E55': 'p',\n    '\\u1E57': 'p',\n    '\\u01A5': 'p',\n    '\\u1D7D': 'p',\n    '\\uA751': 'p',\n    '\\uA753': 'p',\n    '\\uA755': 'p',\n    '\\u24E0': 'q',\n    '\\uFF51': 'q',\n    '\\u024B': 'q',\n    '\\uA757': 'q',\n    '\\uA759': 'q',\n    '\\u24E1': 'r',\n    '\\uFF52': 'r',\n    '\\u0155': 'r',\n    '\\u1E59': 'r',\n    '\\u0159': 'r',\n    '\\u0211': 'r',\n    '\\u0213': 'r',\n    '\\u1E5B': 'r',\n    '\\u1E5D': 'r',\n    '\\u0157': 'r',\n    '\\u1E5F': 'r',\n    '\\u024D': 'r',\n    '\\u027D': 'r',\n    '\\uA75B': 'r',\n    '\\uA7A7': 'r',\n    '\\uA783': 'r',\n    '\\u24E2': 's',\n    '\\uFF53': 's',\n    '\\u00DF': 's',\n    '\\u015B': 's',\n    '\\u1E65': 's',\n    '\\u015D': 's',\n    '\\u1E61': 's',\n    '\\u0161': 's',\n    '\\u1E67': 's',\n    '\\u1E63': 's',\n    '\\u1E69': 's',\n    '\\u0219': 's',\n    '\\u015F': 's',\n    '\\u023F': 's',\n    '\\uA7A9': 's',\n    '\\uA785': 's',\n    '\\u1E9B': 's',\n    '\\u24E3': 't',\n    '\\uFF54': 't',\n    '\\u1E6B': 't',\n    '\\u1E97': 't',\n    '\\u0165': 't',\n    '\\u1E6D': 't',\n    '\\u021B': 't',\n    '\\u0163': 't',\n    '\\u1E71': 't',\n    '\\u1E6F': 't',\n    '\\u0167': 't',\n    '\\u01AD': 't',\n    '\\u0288': 't',\n    '\\u2C66': 't',\n    '\\uA787': 't',\n    '\\uA729': 'tz',\n    '\\u24E4': 'u',\n    '\\uFF55': 'u',\n    '\\u00F9': 'u',\n    '\\u00FA': 'u',\n    '\\u00FB': 'u',\n    '\\u0169': 'u',\n    '\\u1E79': 'u',\n    '\\u016B': 'u',\n    '\\u1E7B': 'u',\n    '\\u016D': 'u',\n    '\\u00FC': 'u',\n    '\\u01DC': 'u',\n    '\\u01D8': 'u',\n    '\\u01D6': 'u',\n    '\\u01DA': 'u',\n    '\\u1EE7': 'u',\n    '\\u016F': 'u',\n    '\\u0171': 'u',\n    '\\u01D4': 'u',\n    '\\u0215': 'u',\n    '\\u0217': 'u',\n    '\\u01B0': 'u',\n    '\\u1EEB': 'u',\n    '\\u1EE9': 'u',\n    '\\u1EEF': 'u',\n    '\\u1EED': 'u',\n    '\\u1EF1': 'u',\n    '\\u1EE5': 'u',\n    '\\u1E73': 'u',\n    '\\u0173': 'u',\n    '\\u1E77': 'u',\n    '\\u1E75': 'u',\n    '\\u0289': 'u',\n    '\\u24E5': 'v',\n    '\\uFF56': 'v',\n    '\\u1E7D': 'v',\n    '\\u1E7F': 'v',\n    '\\u028B': 'v',\n    '\\uA75F': 'v',\n    '\\u028C': 'v',\n    '\\uA761': 'vy',\n    '\\u24E6': 'w',\n    '\\uFF57': 'w',\n    '\\u1E81': 'w',\n    '\\u1E83': 'w',\n    '\\u0175': 'w',\n    '\\u1E87': 'w',\n    '\\u1E85': 'w',\n    '\\u1E98': 'w',\n    '\\u1E89': 'w',\n    '\\u2C73': 'w',\n    '\\u24E7': 'x',\n    '\\uFF58': 'x',\n    '\\u1E8B': 'x',\n    '\\u1E8D': 'x',\n    '\\u24E8': 'y',\n    '\\uFF59': 'y',\n    '\\u1EF3': 'y',\n    '\\u00FD': 'y',\n    '\\u0177': 'y',\n    '\\u1EF9': 'y',\n    '\\u0233': 'y',\n    '\\u1E8F': 'y',\n    '\\u00FF': 'y',\n    '\\u1EF7': 'y',\n    '\\u1E99': 'y',\n    '\\u1EF5': 'y',\n    '\\u01B4': 'y',\n    '\\u024F': 'y',\n    '\\u1EFF': 'y',\n    '\\u24E9': 'z',\n    '\\uFF5A': 'z',\n    '\\u017A': 'z',\n    '\\u1E91': 'z',\n    '\\u017C': 'z',\n    '\\u017E': 'z',\n    '\\u1E93': 'z',\n    '\\u1E95': 'z',\n    '\\u01B6': 'z',\n    '\\u0225': 'z',\n    '\\u0240': 'z',\n    '\\u2C6C': 'z',\n    '\\uA763': 'z',\n    '\\u0386': '\\u0391',\n    '\\u0388': '\\u0395',\n    '\\u0389': '\\u0397',\n    '\\u038A': '\\u0399',\n    '\\u03AA': '\\u0399',\n    '\\u038C': '\\u039F',\n    '\\u038E': '\\u03A5',\n    '\\u03AB': '\\u03A5',\n    '\\u038F': '\\u03A9',\n    '\\u03AC': '\\u03B1',\n    '\\u03AD': '\\u03B5',\n    '\\u03AE': '\\u03B7',\n    '\\u03AF': '\\u03B9',\n    '\\u03CA': '\\u03B9',\n    '\\u0390': '\\u03B9',\n    '\\u03CC': '\\u03BF',\n    '\\u03CD': '\\u03C5',\n    '\\u03CB': '\\u03C5',\n    '\\u03B0': '\\u03C5',\n    '\\u03C9': '\\u03C9',\n    '\\u03C2': '\\u03C3'\n};\nDataUtil.fnOperators = {\n    /**\n     * Returns true when the actual input is equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     * @param  {boolean} ignoreAccent?\n     */\n    equal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) === DataUtil.toLowerCase(expected);\n        }\n        return actual === expected;\n    },\n    /**\n     * Returns true when the actual input is not equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    notequal: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        return !DataUtil.fnOperators.equal(actual, expected, ignoreCase);\n    },\n    /**\n     * Returns true when the actual input is less than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) < DataUtil.toLowerCase(expected);\n        }\n        if (isNullOrUndefined(actual)) {\n            actual = undefined;\n        }\n        return actual < expected;\n    },\n    /**\n     * Returns true when the actual input is greater than to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthan: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) > DataUtil.toLowerCase(expected);\n        }\n        return actual > expected;\n    },\n    /**\n     * Returns true when the actual input is less than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    lessthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) <= DataUtil.toLowerCase(expected);\n        }\n        if (isNullOrUndefined(actual)) {\n            actual = undefined;\n        }\n        return actual <= expected;\n    },\n    /**\n     * Returns true when the actual input is greater than or equal to the given input.\n     * @param  {string|number|boolean} actual\n     * @param  {string|number|boolean} expected\n     * @param  {boolean} ignoreCase?\n     */\n    greaterthanorequal: (actual, expected, ignoreCase) => {\n        if (ignoreCase) {\n            return DataUtil.toLowerCase(actual) >= DataUtil.toLowerCase(expected);\n        }\n        return actual >= expected;\n    },\n    /**\n     * Returns true when the actual input contains the given string.\n     * @param  {string|number} actual\n     * @param  {string|number} expected\n     * @param  {boolean} ignoreCase?\n     */\n    contains: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n                DataUtil.toLowerCase(actual).indexOf(DataUtil.toLowerCase(expected)) !== -1;\n        }\n        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) &&\n            actual.toString().indexOf(expected) !== -1;\n    },\n    /**\n     * Returns true when the given input value is not null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    notnull: (actual) => {\n        return actual !== null;\n    },\n    /**\n     * Returns true when the given input value is null.\n     * @param  {string|number} actual\n     * @returns boolean\n     */\n    isnull: (actual) => {\n        return actual === null;\n    },\n    /**\n     * Returns true when the actual input starts with the given string\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    startswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.startsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.startsWith(actual, expected);\n    },\n    /**\n     * Returns true when the actual input ends with the given string.\n     * @param  {string} actual\n     * @param  {string} expected\n     * @param  {boolean} ignoreCase?\n     */\n    endswith: (actual, expected, ignoreCase, ignoreAccent) => {\n        if (ignoreAccent) {\n            actual = DataUtil.ignoreDiacritics(actual);\n            expected = DataUtil.ignoreDiacritics(expected);\n        }\n        if (ignoreCase) {\n            return actual && expected && DataUtil.endsWith(DataUtil.toLowerCase(actual), DataUtil.toLowerCase(expected));\n        }\n        return actual && expected && DataUtil.endsWith(actual, expected);\n    },\n    /**\n     * It will return the filter operator based on the filter symbol.\n     * @param  {string} operator\n     * @hidden\n     */\n    processSymbols: (operator) => {\n        let fnName = DataUtil.operatorSymbols[operator];\n        if (fnName) {\n            let fn = DataUtil.fnOperators[fnName];\n            return fn;\n        }\n        return DataUtil.throwError('Query - Process Operator : Invalid operator');\n    },\n    /**\n     * It will return the valid filter operator based on the specified operators.\n     * @param  {string} operator\n     * @hidden\n     */\n    processOperator: (operator) => {\n        let fn = DataUtil.fnOperators[operator];\n        if (fn) {\n            return fn;\n        }\n        return DataUtil.fnOperators.processSymbols(operator);\n    }\n};\n/**\n * To perform the parse operation on JSON data, like convert to string from JSON or convert to JSON from string.\n */\nDataUtil.parse = {\n    /**\n     * Parse the given string to the plain JavaScript object.\n     * @param  {string|Object|Object[]} jsonText\n     */\n    parseJson: (jsonText) => {\n        if (typeof jsonText === 'string') {\n            jsonText = JSON.parse(jsonText, DataUtil.parse.jsonReviver);\n        }\n        else if (jsonText instanceof Array) {\n            DataUtil.parse.iterateAndReviveArray(jsonText);\n        }\n        else if (typeof jsonText === 'object' && jsonText !== null) {\n            DataUtil.parse.iterateAndReviveJson(jsonText);\n        }\n        return jsonText;\n    },\n    /**\n     * It will perform on array of values.\n     * @param  {string[]|Object[]} array\n     * @hidden\n     */\n    iterateAndReviveArray: (array) => {\n        for (let i = 0; i < array.length; i++) {\n            if (typeof array[i] === 'object' && array[i] !== null) {\n                DataUtil.parse.iterateAndReviveJson(array[i]);\n            }\n            else if (typeof array[i] === 'string' && !/^[\\s]*\\[|^[\\s]*\\{(.)+:|\\\"/g.test(array[i])) {\n                array[i] = DataUtil.parse.jsonReviver('', array[i]);\n            }\n            else {\n                array[i] = DataUtil.parse.parseJson(array[i]);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {JSON} json\n     * @hidden\n     */\n    iterateAndReviveJson: (json) => {\n        let value;\n        let keys = Object.keys(json);\n        for (let prop of keys) {\n            if (DataUtil.startsWith(prop, '__')) {\n                continue;\n            }\n            value = json[prop];\n            if (typeof value === 'object') {\n                if (value instanceof Array) {\n                    DataUtil.parse.iterateAndReviveArray(value);\n                }\n                else if (value) {\n                    DataUtil.parse.iterateAndReviveJson(value);\n                }\n            }\n            else {\n                json[prop] = DataUtil.parse.jsonReviver(json[prop], value);\n            }\n        }\n    },\n    /**\n     * It will perform on JSON values\n     * @param  {string} field\n     * @param  {string|Date} value\n     * @hidden\n     */\n    jsonReviver: (field, value) => {\n        if (typeof value === 'string') {\n            let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n            let offSet = DataUtil.timeZoneHandling ? DataUtil.serverTimezoneOffset : null;\n            if (ms) {\n                return DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);\n            }\n            else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                let isUTC = value.indexOf('Z') > -1 || value.indexOf('z') > -1;\n                let arr = value.split(/[^0-9.]/);\n                if (isUTC) {\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil.serverTimezoneOffset, false);\n                }\n                else {\n                    let utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));\n                    let hrs = parseInt(arr[6], 10);\n                    let mins = parseInt(arr[7], 10);\n                    if (isNaN(hrs) && isNaN(mins)) {\n                        return utcFormat;\n                    }\n                    if (value.indexOf('+') > -1) {\n                        utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);\n                    }\n                    else {\n                        utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);\n                    }\n                    value = DataUtil.dateParse\n                        .toTimeZone(utcFormat, DataUtil.serverTimezoneOffset, false);\n                }\n                if (DataUtil.serverTimezoneOffset == null) {\n                    value = DataUtil.dateParse.addSelfOffset(value);\n                }\n            }\n        }\n        return value;\n    },\n    /**\n     * Check wheather the given value is JSON or not.\n     * @param  {Object[]} jsonData\n     */\n    isJson: (jsonData) => {\n        if (typeof jsonData[0] === 'string') {\n            return jsonData;\n        }\n        return DataUtil.parse.parseJson(jsonData);\n    },\n    /**\n     * Checks wheather the given value is GUID or not.\n     * @param  {string} value\n     */\n    isGuid: (value) => {\n        let regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;\n        let match = regex.exec(value);\n        return match != null;\n    },\n    /**\n     * The method used to replace the value based on the type.\n     * @param  {Object} value\n     * @param  {boolean} stringify\n     * @hidden\n     */\n    replacer: (value, stringify) => {\n        if (DataUtil.isPlainObject(value)) {\n            return DataUtil.parse.jsonReplacer(value, stringify);\n        }\n        if (value instanceof Array) {\n            return DataUtil.parse.arrayReplacer(value);\n        }\n        if (value instanceof Date) {\n            return DataUtil.parse.jsonReplacer({ val: value }, stringify).val;\n        }\n        return value;\n    },\n    /**\n     * It will replace the JSON value.\n     * @param  {string} key\n     * @param  {Object} val\n     * @hidden\n     */\n    jsonReplacer: (val, stringify) => {\n        let value;\n        let keys = Object.keys(val);\n        for (let prop of keys) {\n            value = val[prop];\n            if (!(value instanceof Date)) {\n                continue;\n            }\n            let d = value;\n            if (DataUtil.serverTimezoneOffset == null) {\n                val[prop] = DataUtil.dateParse.toTimeZone(d, null).toJSON();\n            }\n            else {\n                d = new Date(+d + DataUtil.serverTimezoneOffset * 3600000);\n                val[prop] = DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(d), null).toJSON();\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Array of value.\n     * @param  {string} key\n     * @param  {Object[]} val\n     * @hidden\n     */\n    arrayReplacer: (val) => {\n        for (let i = 0; i < val.length; i++) {\n            if (DataUtil.isPlainObject(val[i])) {\n                val[i] = DataUtil.parse.jsonReplacer(val[i]);\n            }\n            else if (val[i] instanceof Date) {\n                val[i] = DataUtil.parse.jsonReplacer({ date: val[i] }).date;\n            }\n        }\n        return val;\n    },\n    /**\n     * It will replace the Date object with respective to UTC format value.\n     * @param  {string} key\n     * @param  {any} value\n     * @hidden\n     */\n    /* tslint:disable-next-line:no-any */\n    jsonDateReplacer: (key, value) => {\n        if (key === 'value' && value) {\n            if (typeof value === 'string') {\n                let ms = /^\\/Date\\(([+-]?[0-9]+)([+-][0-9]{4})?\\)\\/$/.exec(value);\n                if (ms) {\n                    value = DataUtil.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);\n                }\n                else if (/^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*){1})([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$/.test(value)) {\n                    let arr = value.split(/[^0-9]/);\n                    value = DataUtil.dateParse\n                        .toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);\n                }\n            }\n            if (value instanceof Date) {\n                value = DataUtil.dateParse.addSelfOffset(value);\n                if (DataUtil.serverTimezoneOffset === null) {\n                    return DataUtil.dateParse.toTimeZone(DataUtil.dateParse.addSelfOffset(value), null).toJSON();\n                }\n                else {\n                    value = DataUtil.dateParse.toTimeZone(value, (((value.getTimezoneOffset() / 60) * 2)\n                        - DataUtil.serverTimezoneOffset), false);\n                    return value.toJSON();\n                }\n            }\n        }\n        return value;\n    }\n};\n/**\n * @hidden\n */\nDataUtil.dateParse = {\n    addSelfOffset: (input) => {\n        return new Date(+input - (input.getTimezoneOffset() * 60000));\n    },\n    toUTC: (input) => {\n        return new Date(+input + (input.getTimezoneOffset() * 60000));\n    },\n    toTimeZone: (input, offset, utc) => {\n        if (offset === null) {\n            return input;\n        }\n        let unix = utc ? DataUtil.dateParse.toUTC(input) : input;\n        return new Date(+unix - (offset * 3600000));\n    },\n    toLocalTime: (input) => {\n        let datefn = input;\n        let timeZone = -datefn.getTimezoneOffset();\n        let differenceString = timeZone >= 0 ? '+' : '-';\n        let localtimefn = (num) => {\n            let norm = Math.floor(Math.abs(num));\n            return (norm < 10 ? '0' : '') + norm;\n        };\n        let val = datefn.getFullYear() + '-' + localtimefn(datefn.getMonth() + 1) + '-' + localtimefn(datefn.getDate()) +\n            'T' + localtimefn(datefn.getHours()) +\n            ':' + localtimefn(datefn.getMinutes()) +\n            ':' + localtimefn(datefn.getSeconds()) +\n            differenceString + localtimefn(timeZone / 60) +\n            ':' + localtimefn(timeZone % 60);\n        return val;\n    }\n};\n\nconst consts$1 = { GroupGuid: '{271bbba0-1ee7}' };\n/**\n * Adaptors are specific data source type aware interfaces that are used by DataManager to communicate with DataSource.\n * This is the base adaptor class that other adaptors can extend.\n * @hidden\n */\nclass Adaptor {\n    /**\n     * Constructor for Adaptor class\n     * @param  {DataOptions} ds?\n     * @hidden\n     * @returns aggregates\n     */\n    constructor(ds) {\n        // common options for all the adaptors \n        this.options = {\n            from: 'table',\n            requestType: 'json',\n            sortBy: 'sorted',\n            select: 'select',\n            skip: 'skip',\n            group: 'group',\n            take: 'take',\n            search: 'search',\n            count: 'requiresCounts',\n            where: 'where',\n            aggregates: 'aggregates',\n            expand: 'expand'\n        };\n        /**\n         * Specifies the type of adaptor.\n         * @default Adaptor\n         */\n        this.type = Adaptor;\n        this.dataSource = ds;\n        this.pvt = {};\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {Object} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @returns Object\n     */\n    processResponse(data, ds, query, xhr) {\n        return data;\n    }\n}\n/**\n * JsonAdaptor is used to process JSON data. It contains methods to process the given JSON data based on the queries.\n * @hidden\n */\nclass JsonAdaptor extends Adaptor {\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dataManager\n     * @param  {Query} query\n     * @returns Object\n     */\n    processQuery(dataManager, query) {\n        let result = dataManager.dataSource.json.slice(0);\n        let count = result.length;\n        let countFlg = true;\n        let ret;\n        let key;\n        let lazyLoad = {};\n        let keyCount = 0;\n        let group = [];\n        let page;\n        for (let i = 0; i < query.lazyLoad.length; i++) {\n            keyCount++;\n            lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n        }\n        let agg = {};\n        for (let i = 0; i < query.queries.length; i++) {\n            key = query.queries[i];\n            if ((key.fn === 'onPage' || key.fn === 'onGroup') && query.lazyLoad.length) {\n                if (key.fn === 'onGroup') {\n                    group.push(key.e);\n                }\n                if (key.fn === 'onPage') {\n                    page = key.e;\n                }\n                continue;\n            }\n            ret = this[key.fn].call(this, result, key.e, query);\n            if (key.fn === 'onAggregates') {\n                agg[key.e.field + ' - ' + key.e.type] = ret;\n            }\n            else {\n                result = ret !== undefined ? ret : result;\n            }\n            if (key.fn === 'onPage' || key.fn === 'onSkip' || key.fn === 'onTake' || key.fn === 'onRange') {\n                countFlg = false;\n            }\n            if (countFlg) {\n                count = result.length;\n            }\n        }\n        if (keyCount) {\n            let args = {\n                query: query, lazyLoad: lazyLoad, result: result, group: group, page: page\n            };\n            let lazyLoadData = this.lazyLoadGroup(args);\n            result = lazyLoadData.result;\n            count = lazyLoadData.count;\n        }\n        if (query.isCountRequired) {\n            result = {\n                result: result,\n                count: count,\n                aggregates: agg\n            };\n        }\n        return result;\n    }\n    /**\n     * Perform lazy load grouping in JSON array based on the given query and lazy load details.\n     * @param  {LazyLoadGroupArgs} args\n     */\n    lazyLoadGroup(args) {\n        let count = 0;\n        let agg = this.getAggregate(args.query);\n        let result = args.result;\n        if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {\n            let req = args.lazyLoad.onDemandGroupInfo;\n            for (let i = req.where.length - 1; i >= 0; i--) {\n                result = this.onWhere(result, req.where[i]);\n            }\n            if (args.group.length !== req.level) {\n                let field = args.group[req.level].fieldName;\n                result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n            }\n            count = result.length;\n            let data = result;\n            result = result.slice(req.skip);\n            result = result.slice(0, req.take);\n            if (args.group.length !== req.level) {\n                this.formGroupResult(result, data);\n            }\n        }\n        else {\n            let field = args.group[0].fieldName;\n            result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);\n            count = result.length;\n            let data = result;\n            if (args.page) {\n                result = this.onPage(result, args.page, args.query);\n            }\n            this.formGroupResult(result, data);\n        }\n        return { result: result, count: count };\n    }\n    formGroupResult(result, data) {\n        if (result.length && data.length) {\n            let uid = 'GroupGuid';\n            let childLevel = 'childLevels';\n            let level = 'level';\n            let records = 'records';\n            result[uid] = data[uid];\n            result[childLevel] = data[childLevel];\n            result[level] = data[level];\n            result[records] = data[records];\n        }\n        return result;\n    }\n    /**\n     * Separate the aggregate query from the given queries\n     * @param  {Query} query\n     */\n    getAggregate(query) {\n        let aggQuery = Query.filterQueries(query.queries, 'onAggregates');\n        let agg = [];\n        if (aggQuery.length) {\n            let tmp;\n            for (let i = 0; i < aggQuery.length; i++) {\n                tmp = aggQuery[i].e;\n                agg.push({ type: tmp.type, field: DataUtil.getValue(tmp.field, query) });\n            }\n        }\n        return agg;\n    }\n    /**\n     * Performs batch update in the JSON array which add, remove and update records.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        let i;\n        let deletedRecordsLen = changes.deletedRecords.length;\n        for (i = 0; i < changes.addedRecords.length; i++) {\n            this.insert(dm, changes.addedRecords[i]);\n        }\n        for (i = 0; i < changes.changedRecords.length; i++) {\n            this.update(dm, e.key, changes.changedRecords[i]);\n        }\n        for (i = 0; i < deletedRecordsLen; i++) {\n            this.remove(dm, e.key, changes.deletedRecords[i]);\n        }\n        return changes;\n    }\n    /**\n     * Performs filter operation with the given data and where query.\n     * @param  {Object[]} ds\n     * @param  {{validate:Function}} e\n     */\n    onWhere(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.filter((obj) => {\n            if (e) {\n                return e.validate(obj);\n            }\n        });\n    }\n    /**\n     * Returns aggregate function based on the aggregate type.\n     * @param  {Object[]} ds\n     * @param  {{field:string} e\n     * @param  {string}} type\n     */\n    onAggregates(ds, e) {\n        let fn = DataUtil.aggregates[e.type];\n        if (!ds || !fn || ds.length === 0) {\n            return null;\n        }\n        return fn(ds, e.field);\n    }\n    /**\n     * Performs search operation based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     */\n    onSearch(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        if (e.fieldNames.length === 0) {\n            DataUtil.getFieldList(ds[0], e.fieldNames);\n        }\n        return ds.filter((obj) => {\n            for (let j = 0; j < e.fieldNames.length; j++) {\n                if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    }\n    /**\n     * Sort the data with given direction and field.\n     * @param  {Object[]} ds\n     * @param  {{comparer:(a:Object} e\n     * @param  {Object} b\n     */\n    onSortBy(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let fnCompare;\n        let field = DataUtil.getValue(e.fieldName, query);\n        if (!field) {\n            return ds.sort(e.comparer);\n        }\n        if (field instanceof Array) {\n            field = field.slice(0);\n            for (let i = field.length - 1; i >= 0; i--) {\n                if (!field[i]) {\n                    continue;\n                }\n                fnCompare = e.comparer;\n                if (DataUtil.endsWith(field[i], ' desc')) {\n                    fnCompare = DataUtil.fnSort('descending');\n                    field[i] = field[i].replace(' desc', '');\n                }\n                ds = DataUtil.sort(ds, field[i], fnCompare);\n            }\n            return ds;\n        }\n        return DataUtil.sort(ds, field, e.comparer);\n    }\n    /**\n     * Group the data based on the given query.\n     * @param  {Object[]} ds\n     * @param  {QueryOptions} e\n     * @param  {Query} query\n     */\n    onGroup(ds, e, query) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        let agg = this.getAggregate(query);\n        return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);\n    }\n    /**\n     * Retrieves records based on the given page index and size.\n     * @param  {Object[]} ds\n     * @param  {{pageSize:number} e\n     * @param  {number}} pageIndex\n     * @param  {Query} query\n     */\n    onPage(ds, e, query) {\n        let size = DataUtil.getValue(e.pageSize, query);\n        let start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;\n        let end = start + size;\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(start, end);\n    }\n    /**\n     * Retrieves records based on the given start and end index from query.\n     * @param  {Object[]} ds\n     * @param  {{start:number} e\n     * @param  {number}} end\n     */\n    onRange(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));\n    }\n    /**\n     * Picks the given count of records from the top of the datasource.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onTake(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(0, DataUtil.getValue(e.nos));\n    }\n    /**\n     * Skips the given count of records from the data source.\n     * @param  {Object[]} ds\n     * @param  {{nos:number}} e\n     */\n    onSkip(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return ds.slice(DataUtil.getValue(e.nos));\n    }\n    /**\n     * Selects specified columns from the data source.\n     * @param  {Object[]} ds\n     * @param  {{fieldNames:string}} e\n     */\n    onSelect(ds, e) {\n        if (!ds || !ds.length) {\n            return ds;\n        }\n        return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));\n    }\n    /**\n     * Inserts new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {number} position\n     */\n    insert(dm, data, tableName, query, position) {\n        if (isNullOrUndefined(position)) {\n            return dm.dataSource.json.push(data);\n        }\n        else {\n            return dm.dataSource.json.splice(position, 0, data);\n        }\n    }\n    /**\n     * Remove the data from the dataSource based on the key field value.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    remove(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        if (typeof value === 'object' && !(value instanceof Date)) {\n            value = DataUtil.getObject(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (DataUtil.getObject(keyField, ds[i]) === value) {\n                break;\n            }\n        }\n        return i !== ds.length ? ds.splice(i, 1) : null;\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns null\n     */\n    update(dm, keyField, value, tableName) {\n        let ds = dm.dataSource.json;\n        let i;\n        let key;\n        if (!isNullOrUndefined(keyField)) {\n            key = getValue(keyField, value);\n        }\n        for (i = 0; i < ds.length; i++) {\n            if (!isNullOrUndefined(keyField) && (getValue(keyField, ds[i])) === key) {\n                break;\n            }\n        }\n        return i < ds.length ? merge(ds[i], value) : null;\n    }\n}\n/**\n * URL Adaptor of DataManager can be used when you are required to use remote service to retrieve data.\n * It interacts with server-side for all DataManager Queries and CRUD operations.\n * @hidden\n */\nclass UrlAdaptor extends Adaptor {\n    /**\n     * Process the query to generate request body.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns p\n     */\n    // tslint:disable-next-line:max-func-body-length\n    processQuery(dm, query, hierarchyFilters) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let params = query.params;\n        let url = dm.dataSource.url;\n        let temp;\n        let skip;\n        let take = null;\n        let options = this.options;\n        let request = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        // calc Paging & Range\n        if ('onPage' in singles) {\n            temp = singles.onPage;\n            skip = DataUtil.getValue(temp.pageIndex, query);\n            take = DataUtil.getValue(temp.pageSize, query);\n            skip = (skip - 1) * take;\n        }\n        else if ('onRange' in singles) {\n            temp = singles.onRange;\n            skip = temp.start;\n            take = temp.end - temp.start;\n        }\n        // Sorting\n        for (let i = 0; i < queries.sorts.length; i++) {\n            temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);\n            request.sorts.push(DataUtil.callAdaptorFunction(this, 'onEachSort', { name: temp, direction: queries.sorts[i].e.direction }, query));\n        }\n        // hierarchy\n        if (hierarchyFilters) {\n            temp = this.getFiltersFrom(hierarchyFilters, query);\n            if (temp) {\n                request.filters.push(DataUtil.callAdaptorFunction(this, 'onEachWhere', temp.toJson(), query));\n            }\n        }\n        // Filters\n        for (let i = 0; i < queries.filters.length; i++) {\n            let res = DataUtil.callAdaptorFunction(this, 'onEachWhere', queries.filters[i].e.toJson(), query);\n            if ((this.getModuleName &&\n                this.getModuleName() === 'ODataV4Adaptor') &&\n                !isNullOrUndefined(queries.filters[i].e.key) && queries.filters.length > 1) {\n                res = \"(\" + res + \")\";\n            }\n            request.filters.push(res);\n            let keys = typeof request.filters[i] === 'object' ? Object.keys(request.filters[i]) : [];\n            for (let prop of keys) {\n                if (DataUtil.isNull((request)[prop])) {\n                    delete request[prop];\n                }\n            }\n        }\n        // Searches\n        for (let i = 0; i < queries.searches.length; i++) {\n            temp = queries.searches[i].e;\n            request.searches.push(DataUtil.callAdaptorFunction(this, 'onEachSearch', {\n                fields: temp.fieldNames,\n                operator: temp.operator,\n                key: temp.searchKey,\n                ignoreCase: temp.ignoreCase\n            }, query));\n        }\n        // Grouping\n        for (let i = 0; i < queries.groups.length; i++) {\n            request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));\n        }\n        // aggregates\n        for (let i = 0; i < queries.aggregates.length; i++) {\n            temp = queries.aggregates[i].e;\n            request.aggregates.push({ type: temp.type, field: DataUtil.getValue(temp.field, query) });\n        }\n        let req = {};\n        this.getRequestQuery(options, query, singles, request, req);\n        // Params\n        DataUtil.callAdaptorFunction(this, 'addParams', { dm: dm, query: query, params: params, reqParams: req });\n        if (query.lazyLoad.length) {\n            for (let i = 0; i < query.lazyLoad.length; i++) {\n                req[query.lazyLoad[i].key] = query.lazyLoad[i].value;\n            }\n        }\n        // cleanup\n        let keys = Object.keys(req);\n        for (let prop of keys) {\n            if (DataUtil.isNull(req[prop]) || req[prop] === '' || req[prop].length === 0) {\n                delete req[prop];\n            }\n        }\n        if (!(options.skip in req && options.take in req) && take !== null) {\n            req[options.skip] = DataUtil.callAdaptorFunction(this, 'onSkip', skip, query);\n            req[options.take] = DataUtil.callAdaptorFunction(this, 'onTake', take, query);\n        }\n        let p = this.pvt;\n        this.pvt = {};\n        if (this.options.requestType === 'json') {\n            return {\n                data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),\n                url: url,\n                pvtData: p,\n                type: 'POST',\n                contentType: 'application/json; charset=utf-8'\n            };\n        }\n        temp = this.convertToQueryString(req, query, dm);\n        temp = (dm.dataSource.url.indexOf('?') !== -1 ? '&' : '/') + temp;\n        return {\n            type: 'GET', url: temp.length ? url.replace(/\\/*$/, temp) : url, pvtData: p\n        };\n    }\n    getRequestQuery(options, query, singles, request, request1) {\n        let param = 'param';\n        let req = request1;\n        req[options.from] = query.fromTable;\n        if (options.apply && query.distincts.length) {\n            req[options.apply] = 'onDistinct' in this ? DataUtil.callAdaptorFunction(this, 'onDistinct', query.distincts) : '';\n        }\n        if (!query.distincts.length && options.expand) {\n            req[options.expand] = 'onExpand' in this && 'onSelect' in singles ?\n                DataUtil.callAdaptorFunction(this, 'onExpand', { selects: DataUtil.getValue(singles.onSelect.fieldNames, query), expands: query.expands }, query) : query.expands;\n        }\n        req[options.select] = 'onSelect' in singles && !query.distincts.length ?\n            DataUtil.callAdaptorFunction(this, 'onSelect', DataUtil.getValue(singles.onSelect.fieldNames, query), query) : '';\n        req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, 'onCount', query.isCountRequired, query) : '';\n        req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, 'onSearch', request.searches, query) : '';\n        req[options.skip] = 'onSkip' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onSkip', DataUtil.getValue(singles.onSkip.nos, query), query) : '';\n        req[options.take] = 'onTake' in singles ?\n            DataUtil.callAdaptorFunction(this, 'onTake', DataUtil.getValue(singles.onTake.nos, query), query) : '';\n        req[options.where] = request.filters.length || request.searches.length ?\n            DataUtil.callAdaptorFunction(this, 'onWhere', request.filters, query) : '';\n        req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, 'onSortBy', request.sorts, query) : '';\n        req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, 'onGroup', request.groups, query) : '';\n        req[options.aggregates] = request.aggregates.length ?\n            DataUtil.callAdaptorFunction(this, 'onAggregates', request.aggregates, query) : '';\n        req[param] = [];\n    }\n    /**\n     * Convert the object from processQuery to string which can be added query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     */\n    convertToQueryString(request, query, dm) {\n        return '';\n        // this needs to be overridden\n    }\n    /**\n     * Return the data from the data manager processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('application/json') !== -1) {\n            let handleTimeZone = DataUtil.timeZoneHandling;\n            if (ds && !ds.timeZoneHandling) {\n                DataUtil.timeZoneHandling = false;\n            }\n            data = DataUtil.parse.parseJson(data);\n            DataUtil.timeZoneHandling = handleTimeZone;\n        }\n        let requests = request;\n        let pvt = requests.pvtData || {};\n        let groupDs = data ? data.groupDs : [];\n        if (xhr && xhr.getResponseHeader('Content-Type') &&\n            xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        let d = JSON.parse(requests.data);\n        if (d && d.action === 'batch' && data && data.addedRecords) {\n            changes.addedRecords = data.addedRecords;\n            return changes;\n        }\n        if (data && data.d) {\n            data = data.d;\n        }\n        let args = {};\n        if (data && 'count' in data) {\n            args.count = data.count;\n        }\n        args.result = data && data.result ? data.result : data;\n        let isExpand = false;\n        if (Array.isArray(data.result) && data.result.length) {\n            let key = 'key';\n            let val = 'value';\n            let level = 'level';\n            if (!isNullOrUndefined(data.result[0][key])) {\n                args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);\n            }\n            if (query && query.lazyLoad.length && pvt.groups.length) {\n                for (let i = 0; i < query.lazyLoad.length; i++) {\n                    if (query.lazyLoad[i][key] === 'onDemandGroupInfo') {\n                        let value = query.lazyLoad[i][val][level];\n                        if (pvt.groups.length === value) {\n                            isExpand = true;\n                        }\n                    }\n                }\n            }\n        }\n        if (!isExpand) {\n            this.getAggregateResult(pvt, data, args, groupDs, query);\n        }\n        return DataUtil.isNull(args.count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    formRemoteGroupedData(data, level, childLevel) {\n        for (let i = 0; i < data.length; i++) {\n            if (data[i].items.length && Object.keys(data[i].items[0]).indexOf('key') > -1) {\n                this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);\n            }\n        }\n        let uid = 'GroupGuid';\n        let childLvl = 'childLevels';\n        let lvl = 'level';\n        let records = 'records';\n        data[uid] = consts$1[uid];\n        data[lvl] = level;\n        data[childLvl] = childLevel;\n        data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];\n        return data;\n    }\n    getGroupedRecords(data, hasRecords) {\n        let childGroupedRecords = [];\n        let records = 'records';\n        for (let i = 0; i < data.length; i++) {\n            if (!hasRecords) {\n                for (let j = 0; j < data[i].items.length; j++) {\n                    childGroupedRecords.push(data[i].items[j]);\n                }\n            }\n            else {\n                childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);\n            }\n        }\n        return childGroupedRecords;\n    }\n    /**\n     * Add the group query to the adaptor`s option.\n     * @param  {Object[]} e\n     * @returns void\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return e;\n    }\n    /**\n     * Add the aggregate query to the adaptor`s option.\n     * @param  {Aggregates[]} e\n     * @returns void\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let url;\n        let key;\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e[url],\n                key: e[key]\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @returns void\n     */\n    beforeSend(dm, request) {\n        // need to extend this method\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName\n     */\n    insert(dm, data, tableName, query) {\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number|string} value\n     * @param  {string} tableName\n     */\n    remove(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: value,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName, query) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: value,\n                action: 'update',\n                keyColumn: keyField,\n                key: DataUtil.getObject(keyField, value),\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    /**\n     * To generate the predicate based on the filtered query.\n     * @param  {Object[]|string[]|number[]} data\n     * @param  {Query} query\n     * @hidden\n     */\n    getFiltersFrom(data, query) {\n        let key = query.fKey;\n        let value;\n        let prop = key;\n        let pKey = query.key;\n        let predicats = [];\n        if (typeof data[0] !== 'object') {\n            prop = null;\n        }\n        for (let i = 0; i < data.length; i++) {\n            if (typeof data[0] === 'object') {\n                value = DataUtil.getObject(pKey || prop, data[i]);\n            }\n            else {\n                value = data[i];\n            }\n            predicats.push(new Predicate(key, 'equal', value));\n        }\n        return Predicate.or(predicats);\n    }\n    getAggregateResult(pvt, data, args, groupDs, query) {\n        let pData = data;\n        if (data && data.result) {\n            pData = data.result;\n        }\n        if (pvt && pvt.aggregates && pvt.aggregates.length) {\n            let agg = pvt.aggregates;\n            let fn;\n            let aggregateData = pData;\n            let res = {};\n            if (data.aggregate) {\n                aggregateData = data.aggregate;\n            }\n            for (let i = 0; i < agg.length; i++) {\n                fn = DataUtil.aggregates[agg[i].type];\n                if (fn) {\n                    res[agg[i].field + ' - ' + agg[i].type] = fn(aggregateData, agg[i].field);\n                }\n            }\n            args.aggregates = res;\n        }\n        let key = 'key';\n        let isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);\n        if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {\n            let groups = pvt.groups;\n            for (let i = 0; i < groups.length; i++) {\n                let level = null;\n                if (!isNullOrUndefined(groupDs)) {\n                    groupDs = DataUtil.group(groupDs, groups[i]);\n                }\n                let groupQuery = Query.filterQueries(query.queries, 'onGroup')[i].e;\n                pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);\n            }\n            args.result = pData;\n        }\n        return args;\n    }\n    getQueryRequest(query) {\n        let req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };\n        req.sorts = Query.filterQueries(query.queries, 'onSortBy');\n        req.groups = Query.filterQueries(query.queries, 'onGroup');\n        req.filters = Query.filterQueries(query.queries, 'onWhere');\n        req.searches = Query.filterQueries(query.queries, 'onSearch');\n        req.aggregates = Query.filterQueries(query.queries, 'onAggregates');\n        return req;\n    }\n    addParams(options) {\n        let req = options.reqParams;\n        if (options.params.length) {\n            req.params = {};\n        }\n        for (let tmp of options.params) {\n            if (req[tmp.key]) {\n                throw new Error('Query() - addParams: Custom Param is conflicting other request arguments');\n            }\n            req[tmp.key] = tmp.value;\n            if (tmp.fn) {\n                req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);\n            }\n            req.params[tmp.key] = req[tmp.key];\n        }\n    }\n}\n/**\n * OData Adaptor that is extended from URL Adaptor, is used for consuming data through OData Service.\n * @hidden\n */\nclass ODataAdaptor extends UrlAdaptor {\n    constructor(props) {\n        super();\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json;odata=light;q=1,application/json;odata=verbose;q=0.5',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$inlinecount',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PUT'\n        });\n        extend(this.options, props || {});\n    }\n    getModuleName() {\n        return 'ODataAdaptor';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let operator;\n        let guid;\n        let val = predicate.value;\n        let type = typeof val;\n        let field = predicate.field ? ODataAdaptor.getField(predicate.field) : null;\n        if (val instanceof Date) {\n            val = 'datetime\\'' + DataUtil.parse.replacer(val) + '\\'';\n        }\n        if (type === 'string') {\n            val = val.replace(/'/g, \"''\");\n            if (predicate.ignoreCase) {\n                val = val.toLowerCase();\n            }\n            val = encodeURIComponent(val);\n            val = '\\'' + val + '\\'';\n            if (requiresCast) {\n                field = 'cast(' + field + ', \\'Edm.String\\')';\n            }\n            if (DataUtil.parse.isGuid(val)) {\n                guid = 'guid';\n            }\n            if (predicate.ignoreCase) {\n                if (!guid) {\n                    field = 'tolower(' + field + ')';\n                }\n                val = val.toLowerCase();\n            }\n        }\n        operator = DataUtil.odBiOperator[predicate.operator];\n        if (operator) {\n            returnValue += field;\n            returnValue += operator;\n            if (guid) {\n                returnValue += guid;\n            }\n            return returnValue + val;\n        }\n        if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === 'ODataV4Adaptor') {\n            operator = DataUtil.odv4UniOperator[predicate.operator];\n        }\n        else {\n            operator = DataUtil.odUniOperator[predicate.operator];\n        }\n        if (operator === 'substringof') {\n            let temp = val;\n            val = field;\n            field = temp;\n        }\n        returnValue += operator + '(';\n        returnValue += field + ',';\n        if (guid) {\n            returnValue += guid;\n        }\n        returnValue += val + ')';\n        return returnValue;\n    }\n    addParams(options) {\n        super.addParams(options);\n        delete options.reqParams.params;\n    }\n    /**\n     * Generate request string based on the multiple filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onComplexPredicate(predicate, query, requiresCast) {\n        let res = [];\n        for (let i = 0; i < predicate.predicates.length; i++) {\n            res.push('(' + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ')');\n        }\n        return res.join(' ' + predicate.condition + ' ');\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {Predicate} filter\n     * @param  {boolean} requiresCast?\n     */\n    onEachWhere(filter, query, requiresCast) {\n        return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);\n    }\n    /**\n     * Generate query string based on the multiple filter criteria from query.\n     * @param  {string[]} filters\n     */\n    onWhere(filters) {\n        if (this.pvt.search) {\n            filters.push(this.onEachWhere(this.pvt.search, null, true));\n        }\n        return filters.join(' and ');\n    }\n    /**\n     * Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        if (e.fields && e.fields.length === 0) {\n            DataUtil.throwError('Query() - Search : oData search requires list of field names to search');\n        }\n        let filter = this.pvt.search || [];\n        for (let i = 0; i < e.fields.length; i++) {\n            filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));\n        }\n        this.pvt.search = filter;\n    }\n    /**\n     * Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        this.pvt.search = Predicate.or(this.pvt.search);\n        return '';\n    }\n    /**\n     * Generate query string based on multiple sort criteria from query.\n     * @param  {QueryOptions} e\n     */\n    onEachSort(e) {\n        let res = [];\n        if (e.name instanceof Array) {\n            for (let i = 0; i < e.name.length; i++) {\n                res.push(ODataAdaptor.getField(e.name[i]) + (e.direction === 'descending' ? ' desc' : ''));\n            }\n        }\n        else {\n            res.push(ODataAdaptor.getField(e.name) + (e.direction === 'descending' ? ' desc' : ''));\n        }\n        return res.join(',');\n    }\n    /**\n     * Returns sort query string.\n     * @param  {string[]} e\n     */\n    onSortBy(e) {\n        return e.reverse().join(',');\n    }\n    /**\n     * Adds the group query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onGroup(e) {\n        this.pvt.groups = e;\n        return [];\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        for (let i = 0; i < e.length; i++) {\n            e[i] = ODataAdaptor.getField(e[i]);\n        }\n        return e.join(',');\n    }\n    /**\n     * Add the aggregate query to the adaptor option.\n     * @param  {Object[]} e\n     * @returns string\n     */\n    onAggregates(e) {\n        this.pvt.aggregates = e;\n        return '';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'allpages' : '';\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.options.multipartAccept);\n            request.setRequestHeader('DataServiceVersion', '2.0');\n            request.overrideMimeType('text/plain; charset=x-user-defined');\n        }\n        else {\n            request.setRequestHeader('Accept', this.options.accept);\n        }\n        request.setRequestHeader('DataServiceVersion', '2.0');\n        request.setRequestHeader('MaxDataServiceVersion', '2.0');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaCheck = 'odata.metadata';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaCheck]) {\n            let dataUrls = data[metaCheck].split('/$metadata#');\n            this.rootUrl = dataUrls[0];\n            this.resourceTableName = dataUrls[1];\n        }\n        let pvtData = 'pvtData';\n        if (!isNullOrUndefined(data.d)) {\n            let dataCopy = ((query && query.isCountRequired) ? data.d.results : data.d);\n            let metaData = '__metadata';\n            if (!isNullOrUndefined(dataCopy)) {\n                for (let i = 0; i < dataCopy.length; i++) {\n                    if (!isNullOrUndefined(dataCopy[i][metaData])) {\n                        delete dataCopy[i][metaData];\n                    }\n                }\n            }\n        }\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n        let count = null;\n        let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n        if (query && query.isCountRequired) {\n            let oDataCount = '__count';\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n            if (data.d) {\n                data = data.d;\n            }\n            if (data[oDataCount] || data['odata.count']) {\n                count = data[oDataCount] || data['odata.count'];\n            }\n        }\n        if (version === 3 && data.value) {\n            data = data.value;\n        }\n        if (data.d) {\n            data = data.d;\n        }\n        if (version < 3 && data.results) {\n            data = data.results;\n        }\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n    /**\n     * Converts the request object to query string.\n     * @param  {Object} req\n     * @param  {Query} query\n     * @param  {DataManager} dm\n     * @returns tableName\n     */\n    convertToQueryString(request, query, dm) {\n        let res = [];\n        let table = 'table';\n        let tableName = request[table] || '';\n        let format = '$format';\n        delete request[table];\n        if (dm.dataSource.requiresFormat) {\n            request[format] = 'json';\n        }\n        let keys = Object.keys(request);\n        for (let prop of keys) {\n            res.push(prop + '=' + request[prop]);\n        }\n        res = res.join('&');\n        if (dm.dataSource.url && dm.dataSource.url.indexOf('?') !== -1 && !tableName) {\n            return res;\n        }\n        return res.length ? tableName + '?' + res : tableName || '';\n    }\n    localTimeReplacer(key, convertObj) {\n        for (let prop of !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []) {\n            if ((convertObj[prop] instanceof Date)) {\n                convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);\n            }\n        }\n        return convertObj;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : ''),\n            data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        let url;\n        if (typeof value === 'string' && !DataUtil.parse.isGuid(value)) {\n            url = `('${value}')`;\n        }\n        else {\n            url = `(${value})`;\n        }\n        return {\n            type: 'DELETE',\n            url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url\n        };\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     * @returns this\n     */\n    update(dm, keyField, value, tableName, query, original) {\n        if (this.options.updateType === 'PATCH' && !isNullOrUndefined(original)) {\n            value = this.compareAndRemove(value, original, keyField);\n        }\n        let url;\n        if (typeof value[keyField] === 'string' && !DataUtil.parse.isGuid(value[keyField])) {\n            url = `('${value[keyField]}')`;\n        }\n        else {\n            url = `(${value[keyField]})`;\n        }\n        return {\n            type: this.options.updateType,\n            url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\\/*$/, tableName ? '/' + tableName : '') + url,\n            data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),\n            accept: this.options.accept\n        };\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     * @returns {Object}\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = this.rootUrl ? this.rootUrl + '/' + this.options.batch :\n            dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let args = {\n            url: e.url,\n            key: e.key,\n            cid: 1,\n            cSet: DataUtil.getGuid(this.options.changeSet)\n        };\n        let req = '--' + initialGuid + '\\n';\n        req += 'Content-Type: multipart/mixed; boundary=' + args.cSet.replace('--', '') + '\\n';\n        this.pvt.changeSet = 0;\n        req += this.generateInsertRequest(changes.addedRecords, args, dm);\n        req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);\n        req += this.generateDeleteRequest(changes.deletedRecords, args, dm);\n        req += args.cSet + '--\\n';\n        req += '--' + initialGuid + '--';\n        return {\n            type: 'POST',\n            url: url,\n            dataType: 'json',\n            contentType: 'multipart/mixed; charset=UTF-8;boundary=' + initialGuid,\n            data: req\n        };\n    }\n    /**\n     * Generate the string content from the removed records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     * @returns this\n     */\n    generateDeleteRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'DELETE ',\n            'url': (data, i, key) => {\n                let url = DataUtil.getObject(key, data[i]);\n                if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                    return '(' + url + ')';\n                }\n                else if (url instanceof Date) {\n                    let dateTime = data[i][key];\n                    return '(' + dateTime.toJSON() + ')';\n                }\n                else {\n                    return `('${url}')`;\n                }\n            },\n            'data': (data, i) => ''\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req + '\\n';\n    }\n    /**\n     * Generate the string content from the inserted records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateInsertRequest(arr, e, dm) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        let stat = {\n            'method': 'POST ',\n            'url': (data, i, key) => '',\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    /**\n     * Generate the string content from the updated records.\n     * The result will be send during batch update.\n     * @param  {Object[]} arr\n     * @param  {RemoteArgs} e\n     */\n    generateUpdateRequest(arr, e, dm, org) {\n        if (!arr) {\n            return '';\n        }\n        let req = '';\n        arr.forEach((change) => change = this.compareAndRemove(change, org.filter((o) => DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change))[0], e.key));\n        let stat = {\n            'method': this.options.updateType + ' ',\n            'url': (data, i, key) => {\n                if (typeof data[i][key] === 'number' || DataUtil.parse.isGuid(data[i][key])) {\n                    return '(' + data[i][key] + ')';\n                }\n                else if (data[i][key] instanceof Date) {\n                    let date = data[i][key];\n                    return '(' + date.toJSON() + ')';\n                }\n                else {\n                    return `('${data[i][key]}')`;\n                }\n            },\n            'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n        };\n        req = this.generateBodyContent(arr, e, stat, dm);\n        return req;\n    }\n    static getField(prop) {\n        return prop.replace(/\\./g, '/');\n    }\n    generateBodyContent(arr, e, stat, dm) {\n        let req = '';\n        for (let i = 0; i < arr.length; i++) {\n            req += '\\n' + e.cSet + '\\n';\n            req += this.options.changeSetContent + '\\n\\n';\n            req += stat.method;\n            if (stat.method === 'POST ') {\n                req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'PUT ' || stat.method === 'PATCH ') {\n                req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            else if (stat.method === 'DELETE ') {\n                req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + ' HTTP/1.1\\n';\n            }\n            req += 'Accept: ' + this.options.accept + '\\n';\n            req += 'Content-Id: ' + this.pvt.changeSet++ + '\\n';\n            req += this.options.batchChangeSetContentType + '\\n';\n            if (!isNullOrUndefined(arr[i]['@odata.etag'])) {\n                req += 'If-Match: ' + arr[i]['@odata.etag'] + '\\n\\n';\n                delete arr[i]['@odata.etag'];\n            }\n            else {\n                req += '\\n';\n            }\n            req += stat.data(arr, i);\n        }\n        return req;\n    }\n    processBatchResponse(data, query, xhr, request, changes) {\n        if (xhr && xhr.getResponseHeader('Content-Type') && xhr.getResponseHeader('Content-Type').indexOf('xml') !== -1) {\n            return (query.isCountRequired ? { result: [], count: 0 } : []);\n        }\n        if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === 'post') {\n            let guid = xhr.getResponseHeader('Content-Type');\n            let cIdx;\n            let jsonObj;\n            let d = data + '';\n            guid = guid.substring(guid.indexOf('=batchresponse') + 1);\n            d = d.split(guid);\n            if (d.length < 2) {\n                return {};\n            }\n            d = d[1];\n            let exVal = /(?:\\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);\n            if (exVal) {\n                d.replace(exVal[0], '');\n            }\n            let changeGuid = exVal ? exVal[1] : '';\n            d = d.split(changeGuid);\n            for (let i = d.length; i > -1; i--) {\n                if (!/\\bContent-ID:/i.test(d[i]) || !/\\bHTTP.+201/.test(d[i])) {\n                    continue;\n                }\n                cIdx = parseInt(/\\bContent-ID: (\\d+)/i.exec(d[i])[1], 10);\n                if (changes.addedRecords[cIdx]) {\n                    jsonObj = DataUtil.parse.parseJson(/^\\{.+\\}/m.exec(d[i])[0]);\n                    extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));\n                }\n            }\n            return changes;\n        }\n        return null;\n    }\n    compareAndRemove(data, original, key) {\n        if (isNullOrUndefined(original)) {\n            return data;\n        }\n        Object.keys(data).forEach((prop) => {\n            if (prop !== key && prop !== '@odata.etag') {\n                if (DataUtil.isPlainObject(data[prop])) {\n                    this.compareAndRemove(data[prop], original[prop]);\n                    let final = Object.keys(data[prop]).filter((data) => data !== '@odata.etag');\n                    if (final.length === 0) {\n                        delete data[prop];\n                    }\n                }\n                else if (data[prop] === original[prop]) {\n                    delete data[prop];\n                }\n                else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {\n                    delete data[prop];\n                }\n            }\n        });\n        return data;\n    }\n}\n/**\n * The OData v4 is an improved version of OData protocols.\n * The DataManager uses the ODataV4Adaptor to consume OData v4 services.\n * @hidden\n */\nclass ODataV4Adaptor extends ODataAdaptor {\n    constructor(props) {\n        super(props);\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            requestType: 'get',\n            accept: 'application/json, text/javascript, */*; q=0.01',\n            multipartAccept: 'multipart/mixed',\n            sortBy: '$orderby',\n            select: '$select',\n            skip: '$skip',\n            take: '$top',\n            count: '$count',\n            search: '$search',\n            where: '$filter',\n            expand: '$expand',\n            batch: '$batch',\n            changeSet: '--changeset_',\n            batchPre: 'batch_',\n            contentId: 'Content-Id: ',\n            batchContent: 'Content-Type: multipart/mixed; boundary=',\n            changeSetContent: 'Content-Type: application/http\\nContent-Transfer-Encoding: binary ',\n            batchChangeSetContentType: 'Content-Type: application/json; charset=utf-8 ',\n            updateType: 'PATCH',\n            localTime: false,\n            apply: '$apply'\n        });\n        extend(this.options, props || {});\n    }\n    /**\n     * @hidden\n     */\n    getModuleName() {\n        return 'ODataV4Adaptor';\n    }\n    /**\n     * Returns the query string which requests total count from the data source.\n     * @param  {boolean} e\n     * @returns string\n     */\n    onCount(e) {\n        return e === true ? 'true' : '';\n    }\n    /**\n     * Generate request string based on the filter criteria from query.\n     * @param  {Predicate} pred\n     * @param  {boolean} requiresCast?\n     */\n    onPredicate(predicate, query, requiresCast) {\n        let returnValue = '';\n        let val = predicate.value;\n        let isDate = val instanceof Date;\n        if (query instanceof Query) {\n            let queries = this.getQueryRequest(query);\n            for (let i = 0; i < queries.filters.length; i++) {\n                if (queries.filters[i].e.key === predicate.value) {\n                    requiresCast = true;\n                }\n            }\n        }\n        returnValue = super.onPredicate.call(this, predicate, query, requiresCast);\n        if (isDate) {\n            returnValue = returnValue.replace(/datetime'(.*)'$/, '$1');\n        }\n        if (DataUtil.parse.isGuid(val)) {\n            returnValue = returnValue.replace('guid', '').replace(/'/g, '');\n        }\n        return returnValue;\n    }\n    /**\n     *  Generate query string based on the multiple search criteria from query.\n     * @param  {{fields:string[]} e\n     * @param  {string} operator\n     * @param  {string} key\n     * @param  {boolean}} ignoreCase\n     */\n    onEachSearch(e) {\n        let search = this.pvt.searches || [];\n        search.push(e.key);\n        this.pvt.searches = search;\n    }\n    /**\n     *  Generate query string based on the search criteria from query.\n     * @param  {Object} e\n     */\n    onSearch(e) {\n        return this.pvt.searches.join(' OR ');\n    }\n    /**\n     * Returns the expand query string.\n     * @param  {string} e\n     */\n    onExpand(e) {\n        let selected = {};\n        let expanded = {};\n        let expands = e.expands.slice();\n        let exArr = [];\n        let selects = e.selects.filter((item) => item.indexOf('.') > -1);\n        selects.forEach((select) => {\n            let splits = select.split('.');\n            if (!(splits[0] in selected)) {\n                selected[splits[0]] = [];\n            }\n            if (splits.length == 2) {\n                if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1) {\n                    if (selected[splits[0]][0].indexOf('$expand') !== -1 && selected[splits[0]][0].indexOf(';$select=') === -1) {\n                        selected[splits[0]][0] = selected[splits[0]][0] + ';' + '$select=' + splits[1];\n                    }\n                    else {\n                        selected[splits[0]][0] = selected[splits[0]][0] + ',' + splits[1];\n                    }\n                }\n                else {\n                    selected[splits[0]].push('$select=' + splits[1]);\n                }\n            }\n            else {\n                let sel = '$select=' + splits[splits.length - 1];\n                let exp = '';\n                let close = '';\n                for (let i = 1; i < splits.length - 1; i++) {\n                    exp = exp + '$expand=' + splits[i] + '(';\n                    close = close + ')';\n                }\n                let combineVal = exp + sel + close;\n                if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1 &&\n                    this.expandQueryIndex(selected[splits[0]], true)) {\n                    let idx = this.expandQueryIndex(selected[splits[0]]);\n                    selected[splits[0]][idx] = selected[splits[0]][idx] + combineVal.replace('$expand=', ',');\n                }\n                else {\n                    selected[splits[0]].push(combineVal);\n                }\n            }\n        });\n        //Auto expand from select query\n        Object.keys(selected).forEach((expand) => {\n            if ((expands.indexOf(expand) === -1)) {\n                expands.push(expand);\n            }\n        });\n        expands.forEach((expand) => {\n            expanded[expand] = expand in selected ? `${expand}(${selected[expand].join(';')})` : expand;\n        });\n        Object.keys(expanded).forEach((ex) => exArr.push(expanded[ex]));\n        return exArr.join(',');\n    }\n    expandQueryIndex(query, isExpand) {\n        for (let i = 0; i < query.length; i++) {\n            if (query[i].indexOf('$expand') !== -1) {\n                return isExpand ? true : i;\n            }\n        }\n        return isExpand ? false : 0;\n    }\n    /**\n     * Returns the groupby query string.\n     * @param  {string} e\n     */\n    onDistinct(distinctFields) {\n        let fields = distinctFields.map((field) => ODataAdaptor.getField(field)).join(',');\n        return `groupby((${fields}))`;\n    }\n    /**\n     * Returns the select query string.\n     * @param  {string[]} e\n     */\n    onSelect(e) {\n        return super.onSelect(e.filter((item) => item.indexOf('.') === -1));\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        if (settings.type === 'POST' || settings.type === 'PUT' || settings.type === 'PATCH') {\n            request.setRequestHeader('Prefer', 'return=representation');\n        }\n        request.setRequestHeader('Accept', this.options.accept);\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let metaName = '@odata.context';\n        if ((request && request.type === 'GET') && !this.rootUrl && data[metaName]) {\n            let dataUrl = data[metaName].split('/$metadata#');\n            this.rootUrl = dataUrl[0];\n            this.resourceTableName = dataUrl[1];\n        }\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let emptyAndBatch = super.processBatchResponse(data, query, xhr, request, changes);\n        if (emptyAndBatch) {\n            return emptyAndBatch;\n        }\n        let count = null;\n        let dataCount = '@odata.count';\n        if (query && query.isCountRequired) {\n            if (dataCount in data) {\n                count = data[dataCount];\n            }\n        }\n        data = !isNullOrUndefined(data.value) ? data.value : data;\n        let args = {};\n        args.count = count;\n        args.result = data;\n        this.getAggregateResult(pvt, data, args, null, query);\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: count, aggregates: args.aggregates };\n    }\n}\n/**\n * The Web API is a programmatic interface to define the request and response messages system that is mostly exposed in JSON or XML.\n * The DataManager uses the WebApiAdaptor to consume Web API.\n * Since this adaptor is targeted to interact with Web API created using OData endpoint, it is extended from ODataAdaptor\n * @hidden\n */\nclass WebApiAdaptor extends ODataAdaptor {\n    getModuleName() {\n        return 'WebApiAdaptor';\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.url,\n            data: JSON.stringify(data)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {number} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        return {\n            type: 'DELETE',\n            url: dm.dataSource.url + '/' + value,\n            data: JSON.stringify(value)\n        };\n    }\n    /**\n     * Prepare and return request body which is used to update record.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    update(dm, keyField, value, tableName) {\n        return {\n            type: 'PUT',\n            url: dm.dataSource.url,\n            data: JSON.stringify(value)\n        };\n    }\n    batchRequest(dm, changes, e) {\n        let initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);\n        let url = dm.dataSource.url.replace(/\\/*$/, '/' + this.options.batch);\n        e.url = this.resourceTableName ? this.resourceTableName : e.url;\n        let req = [];\n        //insertion\n        for (let i = 0, x = changes.addedRecords.length; i < x; i++) {\n            changes.addedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': 'POST ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('POST ' + '/api/' + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.addedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //updation \n        for (let i = 0, x = changes.changedRecords.length; i < x; i++) {\n            changes.changedRecords.forEach((j, d) => {\n                let stat = {\n                    'method': this.options.updateType + ' ',\n                    'url': (data, i, key) => '',\n                    'data': (data, i) => JSON.stringify(data[i]) + '\\n\\n'\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('PUT ' + '/api/' + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url)\n                    + stat.url(changes.changedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        //deletion\n        for (let i = 0, x = changes.deletedRecords.length; i < x; i++) {\n            changes.deletedRecords.forEach((j, d) => {\n                let state = {\n                    'mtd': 'DELETE ',\n                    'url': (data, i, key) => {\n                        let url = DataUtil.getObject(key, data[i]);\n                        if (typeof url === 'number' || DataUtil.parse.isGuid(url)) {\n                            return '/' + url;\n                        }\n                        else if (url instanceof Date) {\n                            let datTime = data[i][key];\n                            return '/' + datTime.toJSON();\n                        }\n                        else {\n                            return `/'${url}'`;\n                        }\n                    },\n                    'data': (data, i) => ''\n                };\n                req.push('--' + initialGuid);\n                req.push('Content-Type: application/http; msgtype=request', '');\n                req.push('DELETE ' + '/api/' + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url)\n                    + state.url(changes.deletedRecords, i, e.key) + ' HTTP/1.1');\n                req.push('Content-Type: ' + 'application/json; charset=utf-8');\n                req.push('Host: ' + location.host);\n                req.push('', j ? JSON.stringify(j) : '');\n            });\n        }\n        req.push('--' + initialGuid + '--', '');\n        return {\n            type: 'POST',\n            url: url,\n            contentType: 'multipart/mixed; boundary=' + initialGuid,\n            data: req.join('\\r\\n')\n        };\n    }\n    /**\n     * Method will trigger before send the request to server side.\n     * Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings\n     * @returns void\n     */\n    beforeSend(dm, request, settings) {\n        request.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');\n    }\n    /**\n     * Returns the data from the query processing.\n     * @param  {DataResult} data\n     * @param  {DataOptions} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     * @returns aggregateResult\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        let pvtData = 'pvtData';\n        let pvt = request && request[pvtData];\n        let count = null;\n        let args = {};\n        if (request && request.type.toLowerCase() !== 'post') {\n            let versionCheck = xhr && request.getResponseHeader('DataServiceVersion');\n            let version = (versionCheck && parseInt(versionCheck, 10)) || 2;\n            if (query && query.isCountRequired) {\n                if (!DataUtil.isNull(data.Count)) {\n                    count = data.Count;\n                }\n            }\n            if (version < 3 && data.Items) {\n                data = data.Items;\n            }\n            args.count = count;\n            args.result = data;\n            this.getAggregateResult(pvt, data, args, null, query);\n        }\n        args.result = args.result || data;\n        return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };\n    }\n}\n/**\n * WebMethodAdaptor can be used by DataManager to interact with web method.\n * @hidden\n */\nclass WebMethodAdaptor extends UrlAdaptor {\n    /**\n     * Prepare the request body based on the query.\n     * The query information can be accessed at the WebMethod using variable named `value`.\n     * @param  {DataManager} dm\n     * @param  {Query} query\n     * @param  {Object[]} hierarchyFilters?\n     * @returns application\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);\n        let getData = 'data';\n        let data = DataUtil.parse.parseJson(obj[getData]);\n        let result = {};\n        let value = 'value';\n        if (data.param) {\n            for (let i = 0; i < data.param.length; i++) {\n                let param = data.param[i];\n                let key = Object.keys(param)[0];\n                result[key] = param[key];\n            }\n        }\n        result[value] = data;\n        let pvtData = 'pvtData';\n        let url = 'url';\n        return {\n            data: JSON.stringify(result),\n            url: obj[url],\n            pvtData: obj[pvtData],\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8'\n        };\n    }\n}\n/**\n * RemoteSaveAdaptor, extended from JsonAdaptor and it is used for binding local data and performs all DataManager queries in client-side.\n * It interacts with server-side only for CRUD operations.\n * @hidden\n */\nclass RemoteSaveAdaptor extends JsonAdaptor {\n    /**\n     * @hidden\n     */\n    constructor() {\n        super();\n        setValue('beforeSend', UrlAdaptor.prototype.beforeSend, this);\n    }\n    insert(dm, data, tableName, query, position) {\n        this.pvt.position = position;\n        this.updateType = 'add';\n        return {\n            url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: data,\n                table: tableName,\n                action: 'insert'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    remove(dm, keyField, val, tableName, query) {\n        super.remove(dm, keyField, val);\n        return {\n            type: 'POST',\n            url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                key: val,\n                keyColumn: keyField,\n                table: tableName,\n                action: 'remove'\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    update(dm, keyField, val, tableName, query) {\n        this.updateType = 'update';\n        this.updateKey = keyField;\n        return {\n            type: 'POST',\n            url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            data: JSON.stringify(extend({}, {\n                value: val,\n                action: 'update',\n                keyColumn: keyField,\n                key: val[keyField],\n                table: tableName\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    processResponse(data, ds, query, xhr, request, changes, e) {\n        let i;\n        let newData = request ? JSON.parse(request.data) : data;\n        data = newData.action === 'batch' ? DataUtil.parse.parseJson(data) : data;\n        if (this.updateType === 'add') {\n            super.insert(ds, data, null, null, this.pvt.position);\n        }\n        if (this.updateType === 'update') {\n            super.update(ds, this.updateKey, data);\n        }\n        this.updateType = undefined;\n        if (data.added) {\n            for (i = 0; i < data.added.length; i++) {\n                super.insert(ds, data.added[i]);\n            }\n        }\n        if (data.changed) {\n            for (i = 0; i < data.changed.length; i++) {\n                super.update(ds, e.key, data.changed[i]);\n            }\n        }\n        if (data.deleted) {\n            for (i = 0; i < data.deleted.length; i++) {\n                super.remove(ds, e.key, data.deleted[i]);\n            }\n        }\n        return data;\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * Also perform the changes in the locally cached data to sync with the remote data.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e, query, original) {\n        return {\n            type: 'POST',\n            url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,\n            contentType: 'application/json; charset=utf-8',\n            dataType: 'json',\n            data: JSON.stringify(extend({}, {\n                changed: changes.changedRecords,\n                added: changes.addedRecords,\n                deleted: changes.deletedRecords,\n                action: 'batch',\n                table: e.url,\n                key: e.key\n            }, DataUtil.getAddParams(this, dm, query)))\n        };\n    }\n    addParams(options) {\n        let urlParams = new UrlAdaptor();\n        urlParams.addParams(options);\n    }\n}\n/**\n * Ajax Adaptor that is extended from URL Adaptor, is used for handle data operations with user defined functions.\n * @hidden\n */\nclass CustomDataAdaptor extends UrlAdaptor {\n    constructor(props) {\n        super();\n        // options replaced the default adaptor options\n        this.options = extend({}, this.options, {\n            getData: new Function(),\n            addRecord: new Function(),\n            updateRecord: new Function(),\n            deleteRecord: new Function(),\n            batchUpdate: new Function()\n        });\n        extend(this.options, props || {});\n    }\n    getModuleName() {\n        return 'CustomDataAdaptor';\n    }\n}\n/**\n * The GraphqlAdaptor that is extended from URL Adaptor, is used for retrieving data from the Graphql server.\n * It interacts with the Graphql server with all the DataManager Queries and performs CRUD operations.\n * @hidden\n */\nclass GraphQLAdaptor extends UrlAdaptor {\n    getModuleName() {\n        return 'GraphQLAdaptor';\n    }\n    constructor(options) {\n        super();\n        this.opt = options;\n        this.schema = this.opt.response;\n        this.query = this.opt.query;\n        this.getVariables = this.opt.getVariables ? this.opt.getVariables : () => { };\n        this.getQuery = () => this.query;\n    }\n    /**\n     * Process the JSON data based on the provided queries.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     */\n    processQuery(datamanager, query) {\n        let urlQuery = super.processQuery.apply(this, arguments);\n        let dm = JSON.parse(urlQuery.data);\n        // constructing GraphQL parameters\n        let keys = ['skip', 'take', 'sorted', 'table', 'select', 'where',\n            'search', 'requiresCounts', 'aggregates', 'params'];\n        let temp = {};\n        let str = 'searchwhereparams';\n        keys.filter((e) => {\n            temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];\n        });\n        let vars = this.getVariables() || {};\n        vars['datamanager'] = temp;\n        let data = JSON.stringify({\n            query: this.getQuery(),\n            variables: vars\n        });\n        urlQuery.data = data;\n        return urlQuery;\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Object} request?\n     * @returns DataResult\n     */\n    processResponse(resData, ds, query, xhr, request) {\n        const res = resData;\n        let count;\n        let aggregates;\n        let result = getValue(this.schema.result, res.data);\n        if (this.schema.count) {\n            count = getValue(this.schema.count, res.data);\n        }\n        if (this.schema.aggregates) {\n            aggregates = getValue(this.schema.aggregates, res.data);\n            aggregates = !isNullOrUndefined(aggregates) ? DataUtil.parse.parseJson(aggregates) : aggregates;\n        }\n        let pvt = request.pvtData || {};\n        let args = { result: result, aggregates: aggregates };\n        let data = args;\n        if (pvt && pvt.groups && pvt.groups.length) {\n            this.getAggregateResult(pvt, data, args, null, query);\n        }\n        return !isNullOrUndefined(count) ? { result: args.result, count: count, aggregates: aggregates } : args.result;\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     */\n    insert() {\n        let inserted = super.insert.apply(this, arguments);\n        return this.generateCrudData(inserted, 'insert');\n    }\n    /**\n     * Prepare and returns request body which is used to update a new record in the table.\n     */\n    update() {\n        let inserted = super.update.apply(this, arguments);\n        return this.generateCrudData(inserted, 'update');\n    }\n    /**\n     * Prepare and returns request body which is used to remove a new record in the table.\n     */\n    remove() {\n        let inserted = super.remove.apply(this, arguments);\n        return this.generateCrudData(inserted, 'remove');\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {Object} e\n     * @param  {Query} query\n     * @param  {Object} original\n     */\n    batchRequest(dm, changes, e, query, original) {\n        let batch = super.batchRequest.apply(this, arguments);\n        let bData = JSON.parse(batch.data);\n        bData.key = e.key;\n        batch.data = JSON.stringify(bData);\n        return this.generateCrudData(batch, 'batch');\n    }\n    generateCrudData(crudData, action) {\n        let parsed = JSON.parse(crudData.data);\n        crudData.data = JSON.stringify({\n            query: this.opt.getMutation(action),\n            variables: parsed\n        });\n        return crudData;\n    }\n}\n/**\n * Cache Adaptor is used to cache the data of the visited pages. It prevents new requests for the previously visited pages.\n * You can configure cache page size and duration of caching by using cachingPageSize and timeTillExpiration properties of the DataManager\n * @hidden\n */\nclass CacheAdaptor extends UrlAdaptor {\n    /**\n     * Constructor for CacheAdaptor class.\n     * @param  {CacheAdaptor} adaptor?\n     * @param  {number} timeStamp?\n     * @param  {number} pageSize?\n     * @hidden\n     */\n    constructor(adaptor, timeStamp, pageSize) {\n        super();\n        this.isCrudAction = false;\n        this.isInsertAction = false;\n        if (!isNullOrUndefined(adaptor)) {\n            this.cacheAdaptor = adaptor;\n        }\n        this.pageSize = pageSize;\n        this.guidId = DataUtil.getGuid('cacheAdaptor');\n        let obj = { keys: [], results: [] };\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        let guid = this.guidId;\n        if (!isNullOrUndefined(timeStamp)) {\n            setInterval(() => {\n                let data;\n                data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));\n                let forDel = [];\n                for (let i = 0; i < data.results.length; i++) {\n                    let currentTime = +new Date();\n                    let requestTime = +new Date(data.results[i].timeStamp);\n                    data.results[i].timeStamp = currentTime - requestTime;\n                    if (currentTime - requestTime > timeStamp) {\n                        forDel.push(i);\n                    }\n                }\n                for (let i = 0; i < forDel.length; i++) {\n                    data.results.splice(forDel[i], 1);\n                    data.keys.splice(forDel[i], 1);\n                }\n                window.localStorage.removeItem(guid);\n                window.localStorage.setItem(guid, JSON.stringify(data));\n            }, timeStamp);\n        }\n    }\n    /**\n     * It will generate the key based on the URL when we send a request to server.\n     * @param  {string} url\n     * @param  {Query} query?\n     * @hidden\n     */\n    generateKey(url, query) {\n        let queries = this.getQueryRequest(query);\n        let singles = Query.filterQueryLists(query.queries, ['onSelect', 'onPage', 'onSkip', 'onTake', 'onRange']);\n        let key = url;\n        let page = 'onPage';\n        if (page in singles) {\n            key += singles[page].pageIndex;\n        }\n        queries.sorts.forEach((obj) => {\n            key += obj.e.direction + obj.e.fieldName;\n        });\n        queries.groups.forEach((obj) => {\n            key += obj.e.fieldName;\n        });\n        queries.searches.forEach((obj) => {\n            key += obj.e.searchKey;\n        });\n        for (let filter = 0; filter < queries.filters.length; filter++) {\n            let currentFilter = queries.filters[filter];\n            if (currentFilter.e.isComplex) {\n                let newQuery = query.clone();\n                newQuery.queries = [];\n                for (let i = 0; i < currentFilter.e.predicates.length; i++) {\n                    newQuery.queries.push({ fn: 'onWhere', e: currentFilter.e.predicates[i], filter: query.queries.filter });\n                }\n                key += currentFilter.e.condition + this.generateKey(url, newQuery);\n            }\n            else {\n                key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;\n            }\n        }\n        return key;\n    }\n    /**\n     * Process the query to generate request body.\n     * If the data is already cached, it will return the cached data.\n     * @param  {DataManager} dm\n     * @param  {Query} query?\n     * @param  {Object[]} hierarchyFilters?\n     */\n    processQuery(dm, query, hierarchyFilters) {\n        let key = this.generateKey(dm.dataSource.url, query);\n        let cachedItems;\n        cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;\n        if (data != null && !this.isCrudAction && !this.isInsertAction) {\n            return data;\n        }\n        this.isCrudAction = null;\n        this.isInsertAction = null;\n        return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n    }\n    /**\n     * Returns the data from the query processing.\n     * It will also cache the data for later usage.\n     * @param  {DataResult} data\n     * @param  {DataManager} ds?\n     * @param  {Query} query?\n     * @param  {XMLHttpRequest} xhr?\n     * @param  {Ajax} request?\n     * @param  {CrudOptions} changes?\n     */\n    processResponse(data, ds, query, xhr, request, changes) {\n        if (this.isInsertAction || (request && this.cacheAdaptor.options.batch &&\n            DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === 'post')) {\n            return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);\n        }\n        data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));\n        let key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;\n        let obj = {};\n        obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));\n        let index = obj.keys.indexOf(key);\n        if (index !== -1) {\n            obj.results.splice(index, 1);\n            obj.keys.splice(index, 1);\n        }\n        obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: new Date(), count: data.count };\n        while (obj.results.length > this.pageSize) {\n            obj.results.splice(0, 1);\n            obj.keys.splice(0, 1);\n        }\n        window.localStorage.setItem(this.guidId, JSON.stringify(obj));\n        return data;\n    }\n    /**\n     * Method will trigger before send the request to server side. Used to set the custom header or modify the request options.\n     * @param  {DataManager} dm\n     * @param  {XMLHttpRequest} request\n     * @param  {Ajax} settings?\n     */\n    beforeSend(dm, request, settings) {\n        if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch)\n            && settings.type.toLowerCase() === 'post') {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.multipartAccept);\n        }\n        if (!dm.dataSource.crossDomain) {\n            request.setRequestHeader('Accept', this.cacheAdaptor.options.accept);\n        }\n    }\n    /**\n     * Updates existing record and saves the changes to the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName\n     */\n    update(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.update(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare and returns request body which is used to insert a new record in the table.\n     * @param  {DataManager} dm\n     * @param  {Object} data\n     * @param  {string} tableName?\n     */\n    insert(dm, data, tableName) {\n        this.isInsertAction = true;\n        return this.cacheAdaptor.insert(dm, data, tableName);\n    }\n    /**\n     * Prepare and return request body which is used to remove record from the table.\n     * @param  {DataManager} dm\n     * @param  {string} keyField\n     * @param  {Object} value\n     * @param  {string} tableName?\n     */\n    remove(dm, keyField, value, tableName) {\n        this.isCrudAction = true;\n        return this.cacheAdaptor.remove(dm, keyField, value, tableName);\n    }\n    /**\n     * Prepare the request body based on the newly added, removed and updated records.\n     * The result is used by the batch request.\n     * @param  {DataManager} dm\n     * @param  {CrudOptions} changes\n     * @param  {RemoteArgs} e\n     */\n    batchRequest(dm, changes, e) {\n        return this.cacheAdaptor.batchRequest(dm, changes, e);\n    }\n}\n\n/**\n * DataManager is used to manage and manipulate relational data.\n */\nclass DataManager {\n    /**\n     * Constructor for DataManager class\n     * @param  {DataOptions|JSON[]} dataSource?\n     * @param  {Query} query?\n     * @param  {AdaptorOptions|string} adaptor?\n     * @hidden\n     */\n    constructor(dataSource, query, adaptor) {\n        /** @hidden */\n        this.dateParse = true;\n        /** @hidden */\n        this.timeZoneHandling = true;\n        this.requests = [];\n        if (!dataSource && !this.dataSource) {\n            dataSource = [];\n        }\n        adaptor = adaptor || dataSource.adaptor;\n        if (dataSource && dataSource.timeZoneHandling === false) {\n            this.timeZoneHandling = dataSource.timeZoneHandling;\n        }\n        let data;\n        if (dataSource instanceof Array) {\n            data = {\n                json: dataSource,\n                offline: true\n            };\n        }\n        else if (typeof dataSource === 'object') {\n            if (!dataSource.json) {\n                dataSource.json = [];\n            }\n            data = {\n                url: dataSource.url,\n                insertUrl: dataSource.insertUrl,\n                removeUrl: dataSource.removeUrl,\n                updateUrl: dataSource.updateUrl,\n                crudUrl: dataSource.crudUrl,\n                batchUrl: dataSource.batchUrl,\n                json: dataSource.json,\n                headers: dataSource.headers,\n                accept: dataSource.accept,\n                data: dataSource.data,\n                timeTillExpiration: dataSource.timeTillExpiration,\n                cachingPageSize: dataSource.cachingPageSize,\n                enableCaching: dataSource.enableCaching,\n                requestType: dataSource.requestType,\n                key: dataSource.key,\n                crossDomain: dataSource.crossDomain,\n                jsonp: dataSource.jsonp,\n                dataType: dataSource.dataType,\n                offline: dataSource.offline !== undefined ? dataSource.offline\n                    : dataSource.adaptor instanceof RemoteSaveAdaptor || dataSource.adaptor instanceof CustomDataAdaptor ?\n                        false : dataSource.url ? false : true,\n                requiresFormat: dataSource.requiresFormat\n            };\n        }\n        else {\n            DataUtil.throwError('DataManager: Invalid arguments');\n        }\n        if (data.requiresFormat === undefined && !DataUtil.isCors()) {\n            data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;\n        }\n        if (data.dataType === undefined) {\n            data.dataType = 'json';\n        }\n        this.dataSource = data;\n        this.defaultQuery = query;\n        if (data.url && data.offline && !data.json.length) {\n            this.isDataAvailable = false;\n            this.adaptor = adaptor || new ODataAdaptor();\n            this.dataSource.offline = false;\n            this.ready = this.executeQuery(query || new Query());\n            this.ready.then((e) => {\n                this.dataSource.offline = true;\n                this.isDataAvailable = true;\n                data.json = e.result;\n                this.adaptor = new JsonAdaptor();\n            });\n        }\n        else {\n            this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();\n        }\n        if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {\n            data.jsonp = 'callback';\n        }\n        this.adaptor = adaptor || this.adaptor;\n        if (data.enableCaching) {\n            this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);\n        }\n        return this;\n    }\n    /**\n     * Overrides DataManager's default query with given query.\n     * @param  {Query} query - Defines the new default query.\n     */\n    setDefaultQuery(query) {\n        this.defaultQuery = query;\n        return this;\n    }\n    /**\n     * Executes the given query with local data source.\n     * @param  {Query} query - Defines the query to retrieve data.\n     */\n    executeLocal(query) {\n        if (!this.defaultQuery && !(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeLocal() : A query is required to execute');\n        }\n        if (!this.dataSource.json) {\n            DataUtil.throwError('DataManager - executeLocal() : Json data is required to execute');\n        }\n        query = query || this.defaultQuery;\n        let result = this.adaptor.processQuery(this, query);\n        if (query.subQuery) {\n            let from = query.subQuery.fromTable;\n            let lookup = query.subQuery.lookups;\n            let res = query.isCountRequired ? result.result :\n                result;\n            if (lookup && lookup instanceof Array) {\n                DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);\n            }\n            for (let j = 0; j < res.length; j++) {\n                if (res[j][from] instanceof Array) {\n                    res[j] = extend({}, {}, res[j]);\n                    res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager(res[j][from].slice(0))).executeLocal(), this, query);\n                }\n            }\n        }\n        return this.adaptor.processResponse(result, this, query);\n    }\n    /**\n     * Executes the given query with either local or remote data source.\n     * It will be executed as asynchronously and returns Promise object which will be resolved or rejected after action completed.\n     * @param  {Query|Function} query - Defines the query to retrieve data.\n     * @param  {Function} done - Defines the callback function and triggers when the Promise is resolved.\n     * @param  {Function} fail - Defines the callback function and triggers when the Promise is rejected.\n     * @param  {Function} always - Defines the callback function and triggers when the Promise is resolved or rejected.\n     */\n    executeQuery(query, done, fail, always) {\n        let makeRequest = 'makeRequest';\n        if (typeof query === 'function') {\n            always = fail;\n            fail = done;\n            done = query;\n            query = null;\n        }\n        if (!query) {\n            query = this.defaultQuery;\n        }\n        if (!(query instanceof Query)) {\n            DataUtil.throwError('DataManager - executeQuery() : A query is required to execute');\n        }\n        let deffered = new Deferred();\n        let args = { query: query };\n        if (!this.dataSource.offline && (this.dataSource.url !== undefined && this.dataSource.url !== '')\n            || (!isNullOrUndefined(this.adaptor[makeRequest])) || this.isCustomDataAdaptor(this.adaptor)) {\n            let result = this.adaptor.processQuery(this, query);\n            if (!isNullOrUndefined(this.adaptor[makeRequest])) {\n                this.adaptor[makeRequest](result, deffered, args, query);\n            }\n            else if (!isNullOrUndefined(result.url) || this.isCustomDataAdaptor(this.adaptor)) {\n                this.makeRequest(result, deffered, args, query);\n            }\n            else {\n                args = DataManager.getDeferedArgs(query, result, args);\n                deffered.resolve(args);\n            }\n        }\n        else {\n            DataManager.nextTick(() => {\n                let res = this.executeLocal(query);\n                args = DataManager.getDeferedArgs(query, res, args);\n                deffered.resolve(args);\n            });\n        }\n        if (done || fail) {\n            deffered.promise.then(done, fail);\n        }\n        if (always) {\n            deffered.promise.then(always, always);\n        }\n        return deffered.promise;\n    }\n    static getDeferedArgs(query, result, args) {\n        if (query.isCountRequired) {\n            args.result = result.result;\n            args.count = result.count;\n            args.aggregates = result.aggregates;\n        }\n        else {\n            args.result = result;\n        }\n        return args;\n    }\n    static nextTick(fn) {\n        (window.setImmediate || window.setTimeout)(fn, 0);\n    }\n    extendRequest(url, fnSuccess, fnFail) {\n        return extend({}, {\n            type: 'GET',\n            dataType: this.dataSource.dataType,\n            crossDomain: this.dataSource.crossDomain,\n            jsonp: this.dataSource.jsonp,\n            cache: true,\n            processData: false,\n            onSuccess: fnSuccess,\n            onFailure: fnFail\n        }, url);\n    }\n    // tslint:disable-next-line:max-func-body-length\n    makeRequest(url, deffered, args, query) {\n        let isSelector = !!query.subQuerySelector;\n        let fnFail = (e) => {\n            args.error = e;\n            deffered.reject(args);\n        };\n        let process = (data, count, xhr, request, actual, aggregates, virtualSelectRecords) => {\n            args.xhr = xhr;\n            args.count = count ? parseInt(count.toString(), 10) : 0;\n            args.result = data;\n            args.request = request;\n            args.aggregates = aggregates;\n            args.actual = actual;\n            args.virtualSelectRecords = virtualSelectRecords;\n            deffered.resolve(args);\n        };\n        let fnQueryChild = (data, selector) => {\n            let subDeffer = new Deferred();\n            let childArgs = { parent: args };\n            query.subQuery.isChild = true;\n            let subUrl = this.adaptor.processQuery(this, query.subQuery, data ? this.adaptor.processResponse(data) : selector);\n            let childReq = this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);\n            if (!isSelector) {\n                subDeffer.then((subData) => {\n                    if (data) {\n                        DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);\n                        process(data, subData.count, subData.xhr);\n                    }\n                }, fnFail);\n            }\n            return childReq;\n        };\n        let fnSuccess = (data, request) => {\n            if (this.isGraphQLAdaptor(this.adaptor)) {\n                if (!isNullOrUndefined(data['errors'])) {\n                    return fnFail(data['errors'], request);\n                }\n            }\n            if (this.isCustomDataAdaptor(this.adaptor)) {\n                request = extend({}, this.ajaxReqOption, request);\n            }\n            if (request.httpRequest.getResponseHeader('Content-Type').indexOf('xml') === -1 && this.dateParse) {\n                data = DataUtil.parse.parseJson(data);\n            }\n            let result = this.adaptor.processResponse(data, this, query, request.httpRequest, request);\n            let count = 0;\n            let aggregates = null;\n            let virtualSelectRecords = 'virtualSelectRecords';\n            let virtualRecords = data[virtualSelectRecords];\n            if (query.isCountRequired) {\n                count = result.count;\n                aggregates = result.aggregates;\n                result = result.result;\n            }\n            if (!query.subQuery) {\n                process(result, count, request.httpRequest, request.type, data, aggregates, virtualRecords);\n                return;\n            }\n            if (!isSelector) {\n                fnQueryChild(result, request);\n            }\n        };\n        let req = this.extendRequest(url, fnSuccess, fnFail);\n        if (!this.isCustomDataAdaptor(this.adaptor)) {\n            let ajax = new Ajax(req);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            req = ajax.send();\n            req.catch((e) => true); // to handle failure remote requests.        \n            this.requests.push(ajax);\n        }\n        else {\n            this.ajaxReqOption = req;\n            let request = req;\n            this.adaptor.options.getData({\n                data: request.data,\n                onSuccess: request.onSuccess, onFailure: request.onFailure\n            });\n        }\n        if (isSelector) {\n            let promise;\n            let res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });\n            if (res && res.length) {\n                promise = Promise.all([req, fnQueryChild(null, res)]);\n                promise.then((...args) => {\n                    let result = args[0];\n                    let pResult = this.adaptor.processResponse(result[0], this, query, this.requests[0].httpRequest, this.requests[0]);\n                    let count = 0;\n                    if (query.isCountRequired) {\n                        count = pResult.count;\n                        pResult = pResult.result;\n                    }\n                    let cResult = this.adaptor.processResponse(result[1], this, query.subQuery, this.requests[1].httpRequest, this.requests[1]);\n                    count = 0;\n                    if (query.subQuery.isCountRequired) {\n                        count = cResult.count;\n                        cResult = cResult.result;\n                    }\n                    DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);\n                    isSelector = false;\n                    process(pResult, count, this.requests[0].httpRequest);\n                });\n            }\n            else {\n                isSelector = false;\n            }\n        }\n        return req;\n    }\n    beforeSend(request, settings) {\n        this.adaptor.beforeSend(this, request, settings);\n        let headers = this.dataSource.headers;\n        let props;\n        for (let i = 0; headers && i < headers.length; i++) {\n            props = [];\n            let keys = Object.keys(headers[i]);\n            for (let prop of keys) {\n                props.push(prop);\n                request.setRequestHeader(prop, headers[i][prop]);\n            }\n        }\n    }\n    /**\n     * Save bulk changes to the given table name.\n     * User can add a new record, edit an existing record, and delete a record at the same time.\n     * If the datasource from remote, then updated in a single post.\n     * @param  {Object} changes - Defines the CrudOptions.\n     * @param  {string} key - Defines the column field.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    saveChanges(changes, key, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let args = {\n            url: tableName,\n            key: key || this.dataSource.key\n        };\n        let req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else if (!this.isCustomDataAdaptor(this.adaptor)) {\n            let deff = new Deferred();\n            let ajax = new Ajax(req);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            ajax.onSuccess = (data, request) => {\n                if (this.isGraphQLAdaptor(this.adaptor)) {\n                    if (!isNullOrUndefined(data['errors'])) {\n                        ajax.onFailure(JSON.stringify(data['errors']));\n                    }\n                }\n                deff.resolve(this.adaptor.processResponse(data, this, null, request.httpRequest, request, changes, args));\n            };\n            ajax.onFailure = (e) => {\n                deff.reject([{ error: e }]);\n            };\n            ajax.send().catch((e) => true); // to handle the failure requests.        \n            return deff.promise;\n        }\n        else {\n            return this.doAjaxRequest(req, this.adaptor.options.batchUpdate);\n        }\n    }\n    /**\n     * Inserts new record in the given table.\n     * @param  {Object} data - Defines the data to insert.\n     * @param  {string|Query} tableName - Defines the table name.\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    insert(data, tableName, query, position) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let req = this.adaptor.insert(this, data, tableName, query, position);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return req;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](req);\n        }\n        else {\n            return this.doAjaxRequest(req, this.adaptor.options.addRecord);\n        }\n    }\n    /**\n     * Removes data from the table with the given key.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    remove(keyField, value, tableName, query) {\n        if (typeof value === 'object') {\n            value = DataUtil.getObject(keyField, value);\n        }\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.remove(this, keyField, value, tableName, query);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            let remove = this.adaptor.options.deleteRecord;\n            return this.doAjaxRequest(res, remove);\n        }\n    }\n    /**\n     * Updates existing record in the given table.\n     * @param  {string} keyField - Defines the column field.\n     * @param  {Object} value - Defines the value to find the data in the specified column.\n     * @param  {string|Query} tableName - Defines the table name\n     * @param  {Query} query - Sets default query for the DataManager.\n     */\n    update(keyField, value, tableName, query, original) {\n        if (tableName instanceof Query) {\n            query = tableName;\n            tableName = null;\n        }\n        let res = this.adaptor.update(this, keyField, value, tableName, query, original);\n        let doAjaxRequest = 'doAjaxRequest';\n        if (this.dataSource.offline) {\n            return res;\n        }\n        if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {\n            return this.adaptor[doAjaxRequest](res);\n        }\n        else {\n            let update = this.adaptor.options.updateRecord;\n            return this.doAjaxRequest(res, update);\n        }\n    }\n    isCustomDataAdaptor(dataSource) {\n        return this.adaptor.getModuleName &&\n            this.adaptor.getModuleName() === 'CustomDataAdaptor';\n    }\n    isGraphQLAdaptor(dataSource) {\n        return this.adaptor.getModuleName &&\n            this.adaptor.getModuleName() === 'GraphQLAdaptor';\n    }\n    successFunc(record, request) {\n        if (this.isGraphQLAdaptor(this.adaptor)) {\n            let data = JSON.parse(record);\n            if (!isNullOrUndefined(data['errors'])) {\n                this.failureFunc(JSON.stringify(data['errors']));\n            }\n        }\n        if (this.isCustomDataAdaptor(this.adaptor)) {\n            request = extend({}, this.ajaxReqOption, request);\n        }\n        try {\n            DataUtil.parse.parseJson(record);\n        }\n        catch (e) {\n            record = [];\n        }\n        record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);\n        this.ajaxDeffered.resolve(record);\n    }\n    ;\n    failureFunc(e) {\n        this.ajaxDeffered.reject([{ error: e }]);\n    }\n    ;\n    doAjaxRequest(res, ajaxFunc) {\n        res = extend({}, {\n            type: 'POST',\n            contentType: 'application/json; charset=utf-8',\n            processData: false\n        }, res);\n        this.ajaxDeffered = new Deferred();\n        if (!this.isCustomDataAdaptor(this.adaptor)) {\n            let ajax = new Ajax(res);\n            ajax.beforeSend = () => {\n                this.beforeSend(ajax.httpRequest, ajax);\n            };\n            ajax.onSuccess = this.successFunc.bind(this);\n            ajax.onFailure = this.failureFunc.bind(this);\n            ajax.send().catch((e) => true); // to handle the failure requests.\n        }\n        else {\n            this.ajaxReqOption = res;\n            ajaxFunc.call(this, {\n                data: res.data, onSuccess: this.successFunc.bind(this),\n                onFailure: this.failureFunc.bind(this)\n            });\n        }\n        return this.ajaxDeffered.promise;\n    }\n}\n/**\n * Deferred is used to handle asynchronous operation.\n */\nclass Deferred {\n    constructor() {\n        /**\n         * Promise is an object that represents a value that may not be available yet, but will be resolved at some point in the future.\n         */\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        /**\n         * Defines the callback function triggers when the Deferred object is resolved.\n         */\n        this.then = this.promise.then.bind(this.promise);\n        /**\n         * Defines the callback function triggers when the Deferred object is rejected.\n         */\n        this.catch = this.promise.catch.bind(this.promise);\n    }\n}\n\n/**\n * Data modules\n */\n\nexport { DataManager, Deferred, Query, Predicate, Adaptor, JsonAdaptor, UrlAdaptor, ODataAdaptor, ODataV4Adaptor, WebApiAdaptor, WebMethodAdaptor, RemoteSaveAdaptor, CustomDataAdaptor, GraphQLAdaptor, CacheAdaptor, DataUtil };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}