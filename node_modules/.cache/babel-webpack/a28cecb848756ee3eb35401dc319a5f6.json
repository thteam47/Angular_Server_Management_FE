{"ast":null,"code":"/**\r\n * Polyspline (smoothed line) module.\r\n */\nimport { __extends } from \"tslib\";\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\n\nimport { Polyline } from \"./Polyline\";\nimport { registry } from \"../Registry\";\nimport * as $math from \"../../core/utils/Math\";\nimport * as $type from \"../../core/utils/Type\";\nimport * as $path from \"../../core/rendering/Path\";\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\n\n/**\r\n * Draws a polysline. (smoothed multi-sigment line)\r\n *\r\n * @see {@link IPolysplineEvents} for a list of available events\r\n * @see {@link IPolysplineAdapters} for a list of available Adapters\r\n */\n\nvar Polyspline = function (_super) {\n  __extends(Polyspline, _super);\n  /**\r\n   * Constructor\r\n   */\n\n\n  function Polyspline() {\n    var _this = _super.call(this) || this;\n\n    _this.className = \"Polyspline\";\n    _this.tensionX = 0.5;\n    _this.tensionY = 0.5;\n\n    _this.applyTheme();\n\n    return _this;\n  }\n  /**\r\n   * Creats and adds an SVG path for the arc.\r\n   *\r\n   * @ignore Exclude from docs\r\n   */\n\n\n  Polyspline.prototype.makePath = function () {\n    this._distance = 0;\n    var segments = this.segments;\n    var tensionX = this.tensionX;\n    var tensionY = this.tensionY;\n    this.allPoints = [];\n\n    if (segments && segments.length > 0) {\n      var path = \"\";\n      this._realSegments = [];\n\n      for (var i = 0, len = segments.length; i < len; i++) {\n        var points = segments[i];\n        var realPoints = [];\n\n        this._realSegments.push(realPoints);\n\n        if (points.length > 0) {\n          var first = points[0];\n          var last = points[points.length - 1];\n          var closed_1 = false;\n\n          if ($math.round(first.x, 3) == $math.round(last.x) && $math.round(first.y) == $math.round(last.y)) {\n            closed_1 = true;\n          }\n\n          path += $path.moveTo(points[0]);\n\n          for (var p = 0; p < points.length - 1; p++) {\n            var p0 = points[p - 1];\n            var p1 = points[p];\n            var p2 = points[p + 1];\n            var p3 = points[p + 2];\n\n            if (p === 0) {\n              p0 = points[p];\n            } else if (p == points.length - 2) {\n              p3 = points[p + 1];\n            }\n\n            if (!p3) {\n              p3 = p2;\n            }\n\n            if (p === 0) {\n              if (closed_1) {\n                p0 = points[points.length - 2];\n              } else {\n                p0 = points[i];\n              }\n            } else if (p == points.length - 2) {\n              if (closed_1) {\n                p3 = points[1];\n              } else {\n                p3 = points[p + 1];\n              }\n            }\n\n            var controlPointA = $math.getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY);\n            var controlPointB = $math.getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY);\n            path += $path.cubicCurveTo(p2, controlPointA, controlPointB); // now split to small segments so that we could have positionToPoint later\n\n            var stepCount = Math.ceil($math.getCubicCurveDistance(p1, p2, controlPointA, controlPointB, 20)) * 1.2;\n            var prevPoint = p1;\n\n            if (stepCount > 0) {\n              // not good for curved charts\n              //this.allPoints[0] = { x: points[0].x, y: points[0].y, angle: $math.getAngle(points[0], points[1]) };\n              //realPoints.push(this.allPoints[0]);\n              for (var s = 0; s <= stepCount; s++) {\n                var point = $math.getPointOnCubicCurve(p1, p2, controlPointA, controlPointB, s / stepCount);\n\n                if (point.x == prevPoint.x && point.y == prevPoint.y) {\n                  continue;\n                }\n\n                realPoints.push(point);\n                var angle = $math.round($math.getAngle(prevPoint, point), 5); //this.allPoints.push({ x: point.x, y: point.y, angle: angle });\n\n                this._distance += $math.getDistance(prevPoint, point);\n                this.allPoints[Math.floor(this._distance)] = {\n                  x: point.x,\n                  y: point.y,\n                  angle: angle\n                };\n                prevPoint = point;\n              }\n            } else {\n              realPoints.push(p0);\n            }\n          }\n        }\n\n        var allPoints = this.allPoints;\n\n        if (allPoints.length > 1) {\n          for (var i_1 = 0; i_1 < allPoints.length; i_1++) {\n            if (!allPoints[i_1]) {\n              if (i_1 > 1) {\n                allPoints[i_1] = allPoints[i_1 - 1];\n              } else {\n                for (var k = 1; k < allPoints.length; k++) {\n                  if (allPoints[k]) {\n                    allPoints[i_1] = allPoints[k];\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      this.path = path;\n    }\n  };\n  /**\r\n   * Returns an index of the point that is closest to specified coordinates.\r\n   *\r\n   * @param   point  Reference point\r\n   * @return         Index\r\n   */\n\n\n  Polyspline.prototype.getClosestPointIndex = function (point) {\n    var points = this.allPoints;\n    var index;\n    var closest = Infinity;\n\n    if (points.length > 1) {\n      for (var p = 1; p < points.length; p++) {\n        var distance = $math.getDistance(point, points[p]);\n\n        if (distance < closest) {\n          index = p;\n          closest = distance;\n        }\n      }\n    }\n\n    return index;\n  };\n\n  Object.defineProperty(Polyspline.prototype, \"tensionX\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tensionX\");\n    },\n\n    /**\r\n     * Horizontal tension for the spline.\r\n     *\r\n     * Used by the line smoothing algorithm.\r\n     *\r\n     * @default 0.5\r\n     * @param value  Tension\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tensionX\", value);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Polyspline.prototype, \"tensionY\", {\n    /**\r\n     * @return Tension\r\n     */\n    get: function () {\n      return this.getPropertyValue(\"tensionY\");\n    },\n\n    /**\r\n     * Vertical tension for the spline.\r\n     *\r\n     * Used by the line smoothing algorithm.\r\n     *\r\n     * @default 0.5\r\n     * @param value  Tensions\r\n     */\n    set: function (value) {\n      this.setPropertyValue(\"tensionY\", value, true);\n      this.makePath();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Converts relative position along the line (0-1) into pixel coordinates.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinates\r\n   */\n\n  Polyspline.prototype.positionToPoint = function (position, extend) {\n    var deltaAngle = 0;\n    var allPoints = this.allPoints;\n    var len = allPoints.length;\n\n    if (!$type.isNumber(position)) {\n      position = 0;\n    }\n\n    if (len > 1) {\n      if (extend && len > 3) {\n        if (position < 0) {\n          if (position < -0.01) {\n            position = -0.01;\n          }\n\n          var f0 = allPoints[0];\n          var f1 = allPoints[1];\n          var x = f0.x - (f0.x - f1.x) * len * position;\n          var y = f0.y - (f0.y - f1.y) * len * position;\n          return {\n            x: x,\n            y: y,\n            angle: $math.getAngle(f0, f1)\n          };\n        } else if (position > 1) {\n          if (position > 1.01) {\n            position = 1.01;\n          }\n\n          var f0 = allPoints[allPoints.length - 2];\n          var f1 = allPoints[allPoints.length - 3];\n          var x = f0.x + (f0.x - f1.x) * len * (position - 1);\n          var y = f0.y + (f0.y - f1.y) * len * (position - 1);\n          return {\n            x: x,\n            y: y,\n            angle: $math.getAngle(f0, {\n              x: x,\n              y: y\n            })\n          };\n        } else if (position == 1) {\n          var point_1 = allPoints[allPoints.length - 1];\n          return {\n            x: point_1.x,\n            y: point_1.y,\n            angle: point_1.angle\n          };\n        }\n      } else {\n        if (position < 0) {\n          position = Math.abs(position);\n          deltaAngle = 180;\n        }\n\n        if (position >= 1) {\n          position = 0.9999999999999;\n        }\n      }\n\n      var point = allPoints[Math.floor(position * len)];\n      return {\n        x: point.x,\n        y: point.y,\n        angle: point.angle + deltaAngle\n      };\n    } else if (len == 1) {\n      var point = allPoints[0];\n      return {\n        x: point.x,\n        y: point.y,\n        angle: point.angle\n      };\n    } else {\n      return {\n        x: 0,\n        y: 0,\n        angle: 0\n      };\n    }\n  };\n\n  return Polyspline;\n}(Polyline);\n\nexport { Polyspline };\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\n\nregistry.registeredClasses[\"Polyspline\"] = Polyspline; //# sourceMappingURL=Polyspline.js.map","map":null,"metadata":{},"sourceType":"module"}