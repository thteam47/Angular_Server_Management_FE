{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/services/sibling.service\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'Application/json'\n  })\n};\nconst host = window.location.hostname;\nconst apiUrl = 'http://' + host + ':9090';\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(httpClient, sibling) {\n      this.httpClient = httpClient;\n      this.sibling = sibling;\n      this.accessToken = \"\";\n    }\n\n    loginAdmin(user) {\n      let body = JSON.stringify(user);\n      return this.httpClient.post(`${apiUrl}/admin`, body, httpOptions).pipe();\n    }\n\n    logoutUser() {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        })\n      };\n      return this.httpClient.get(`${apiUrl}/logout`, httpOptions).pipe();\n    }\n\n    getUser() {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      return this.httpClient.get(`${apiUrl}/getUser`, httpOptions).pipe();\n    }\n\n    changePassUser(pass, id) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      let body = JSON.stringify(pass);\n      return this.httpClient.put(`${apiUrl}/changePasswordUser/${id}`, body, httpOptions).pipe();\n    }\n\n    updateUser(info, id) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      let body = JSON.stringify(info);\n      return this.httpClient.put(`${apiUrl}/updateUser/${id}`, body, httpOptions).pipe();\n    }\n\n    getAllUser() {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      return this.httpClient.get(`${apiUrl}/getlistUser`, httpOptions).pipe();\n    }\n\n    deleteUser(id) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      return this.httpClient.delete(`${apiUrl}/deleteUser/${id}`, httpOptions).pipe();\n    }\n\n    addUser(data) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      let body = JSON.stringify(data);\n      return this.httpClient.post(`${apiUrl}/addUser`, body, httpOptions).pipe();\n    }\n\n    changeRole(data, idUser) {\n      const token = localStorage.getItem('token');\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        })\n      };\n      let body = JSON.stringify(data);\n      return this.httpClient.put(`${apiUrl}/changeAction/${idUser}`, body, httpOptions).pipe();\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SiblingService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}